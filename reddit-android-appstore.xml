<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5">

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/test/java/subreddit/android/appstore/screens/list/AppListPresenterTest.java" hash="8d9e1f6f5fc5ea51a14db948931afdb6f0eb8f13"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>screens</name><operator>.</operator><name>list</name></name>;</package>


<class><specifier>public</specifier> class <name>AppListPresenterTest</name> <block>{
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/test/java/subreddit/android/appstore/backend/reddit/wiki/parser/BodyParserTest.java" hash="cd958f5f77f92e19e660012e1bfc3719e24c402e"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>wiki</name><operator>.</operator><name>parser</name></name>;</package>


<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Before</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>mockito</name><operator>.</operator><name>Mock</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>mockito</name><operator>.</operator><name>MockitoAnnotations</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>mockito</name><operator>.</operator><name>invocation</name><operator>.</operator><name>InvocationOnMock</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>mockito</name><operator>.</operator><name>stubbing</name><operator>.</operator><name>Answer</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppInfo</name></name>;</import>

<import>import static <name><name>junit</name><operator>.</operator><name>framework</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertFalse</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>mockito</name><operator>.</operator><name>ArgumentMatchers</name><operator>.</operator><name>anyList</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>mockito</name><operator>.</operator><name>ArgumentMatchers</name><operator>.</operator><name>anyMap</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>mockito</name><operator>.</operator><name>ArgumentMatchers</name><operator>.</operator><name>isA</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>mockito</name><operator>.</operator><name>Mockito</name><operator>.</operator><name>doAnswer</name></name>;</import>

<class><specifier>public</specifier> class <name>BodyParserTest</name> <block>{
    <decl_stmt><decl><annotation>@<name>Mock</name></annotation> <type><name>AppParser</name></type> <name>appParser</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Mock</name></annotation> <type><name>CategoryParser</name></type> <name>categoryParser</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>BodyParser</name></type> <name>bodyParser</name></decl>;</decl_stmt>

    <function><annotation>@<name>Before</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>setup</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>MockitoAnnotations</name><operator>.</operator><name>initMocks</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>doAnswer</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>Answer</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>Void</name></type> <name>answer</name><parameter_list>(<parameter><decl><type><name>InvocationOnMock</name></type> <name>invocation</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Throwable</name></expr></argument></throws> <block>{
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call><operator>.</operator><call><name>when</name><argument_list>(<argument><expr><name>categoryParser</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>parse</name><argument_list>(<argument><expr><call><name>isA</name><argument_list>(<argument><expr><name><name>AppInfo</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>anyList</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>doAnswer</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>Answer</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>Void</name></type> <name>answer</name><parameter_list>(<parameter><decl><type><name>InvocationOnMock</name></type> <name>invocation</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Throwable</name></expr></argument></throws> <block>{
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call><operator>.</operator><call><name>when</name><argument_list>(<argument><expr><name>appParser</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>parse</name><argument_list>(<argument><expr><call><name>isA</name><argument_list>(<argument><expr><name><name>AppInfo</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>anyMap</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>AppParser</name></argument>&gt;</argument_list></name></type> <name>appParsers</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <expr_stmt><expr><call><name><name>appParsers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>appParser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <expr_stmt><expr><name>bodyParser</name> <operator>=</operator> <operator>new</operator> <call><name>BodyParser</name><argument_list>(<argument><expr><name>categoryParser</name></expr></argument>, <argument><expr><name>appParsers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>testBodyParser</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>AppInfo</name></argument>&gt;</argument_list></name></type> <name>appInfos</name> <init>= <expr><call><name><name>bodyParser</name><operator>.</operator><name>parseBody</name></name><argument_list>(<argument><expr><name><name>TestBody</name><operator>.</operator><name>HTMLBODY</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>appInfos</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">41</literal></expr></argument>, <argument><expr><call><name><name>appInfos</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/test/java/subreddit/android/appstore/ExampleUnitTest.java" hash="b5dfe26dab8c40da0f1436cfa7d4e67b56a56ea2"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>

<comment type="block" format="javadoc">/**
 * To work on unit tests, switch the Test Artifact in the Build Variants view.
 */</comment>
<class><specifier>public</specifier> class <name>ExampleUnitTest</name> <block>{
    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>addition_isCorrect</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class></unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/test/java/subreddit/android/appstore/backend/reddit/wiki/parser/ContactColumnParserTest.java" hash="f7cf8ed9c582a455484dff7b920aaac8a49a8f09"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>wiki</name><operator>.</operator><name>parser</name></name>;</package>


<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Before</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>mockito</name><operator>.</operator><name>Mock</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>mockito</name><operator>.</operator><name>MockitoAnnotations</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppInfo</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>Contact</name></name>;</import>

<import>import static <name><name>junit</name><operator>.</operator><name>framework</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>
<import>import static <name><name>junit</name><operator>.</operator><name>framework</name><operator>.</operator><name>TestCase</name><operator>.</operator><name>assertFalse</name></name>;</import>

<class><specifier>public</specifier> class <name>ContactColumnParserTest</name> <block>{
    <decl_stmt><decl><annotation>@<name>Mock</name></annotation> <type><name>EncodingFixer</name></type> <name>encodingFixer</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>ContactColumnParser</name></type> <name>parser</name></decl>;</decl_stmt>

    <function><annotation>@<name>Before</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>setup</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>MockitoAnnotations</name><operator>.</operator><name>initMocks</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>parser</name> <operator>=</operator> <operator>new</operator> <call><name>ContactColumnParser</name><argument_list>(<argument><expr><name>encodingFixer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>testParse</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>rawContactData</name> <init>= <expr><literal type="string">"/u/someuser1 thisismail1@gmail.com "</literal> <operator>+</operator>
                <literal type="string">"Twitter: [@twitteraccount](https://twitter.com/twitteraccount) "</literal> <operator>+</operator>
                <literal type="string">"Instagram: [@instagramaccount](http://instagram.com/instagramaccount) "</literal> <operator>+</operator>
                <literal type="string">"okanothermail@internet.com /u/mDarken"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>AppParser</name><operator>.</operator><name>Column</name></name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>rawColumnMap</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rawColumnMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>AppParser</name><operator>.</operator><name>Column</name><operator>.</operator><name>CONTACT</name></name></expr></argument>, <argument><expr><name>rawContactData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>AppInfo</name></type> <name>appInfo</name> <init>= <expr><operator>new</operator> <call><name>AppInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>parser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>appInfo</name></expr></argument>, <argument><expr><name>rawColumnMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>appInfo</name><operator>.</operator><name>getContacts</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Contact</name></argument>&gt;</argument_list></name></type> <name>emailContacts</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Contact</name></type> <name>contact</name> <range>: <expr><call><name><name>appInfo</name><operator>.</operator><name>getContacts</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
            <if>if <condition>(<expr><call><name><name>contact</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Contact</name><operator>.</operator><name>Type</name><operator>.</operator><name>EMAIL</name></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>emailContacts</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>contact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></for>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"thisismail1@gmail.com"</literal></expr></argument>, <argument><expr><call><name><name>emailContacts</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTarget</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"okanothermail@internet.com"</literal></expr></argument>, <argument><expr><call><name><name>emailContacts</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTarget</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Contact</name></argument>&gt;</argument_list></name></type> <name>redditContacts</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Contact</name></type> <name>contact</name> <range>: <expr><call><name><name>appInfo</name><operator>.</operator><name>getContacts</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
            <if>if <condition>(<expr><call><name><name>contact</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Contact</name><operator>.</operator><name>Type</name><operator>.</operator><name>REDDIT_USERNAME</name></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>redditContacts</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>contact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></for>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"/u/someuser1"</literal></expr></argument>, <argument><expr><call><name><name>redditContacts</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTarget</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"/u/mDarken"</literal></expr></argument>, <argument><expr><call><name><name>redditContacts</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTarget</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/test/java/subreddit/android/appstore/backend/reddit/wiki/parser/DescriptionColumnParserTest.java" hash="6c2de0e1e6c22bd47c4c6d1e7701061e6c168867"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>wiki</name><operator>.</operator><name>parser</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Before</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>mockito</name><operator>.</operator><name>Mock</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>mockito</name><operator>.</operator><name>MockitoAnnotations</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>mockito</name><operator>.</operator><name>invocation</name><operator>.</operator><name>InvocationOnMock</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>mockito</name><operator>.</operator><name>stubbing</name><operator>.</operator><name>Answer</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppInfo</name></name>;</import>

<import>import static <name><name>junit</name><operator>.</operator><name>framework</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>
<import>import static <name><name>junit</name><operator>.</operator><name>framework</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertFalse</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>mockito</name><operator>.</operator><name>ArgumentMatchers</name><operator>.</operator><name>anyString</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>mockito</name><operator>.</operator><name>Mockito</name><operator>.</operator><name>when</name></name>;</import>

<class><specifier>public</specifier> class <name>DescriptionColumnParserTest</name> <block>{
    <decl_stmt><decl><annotation>@<name>Mock</name></annotation>
    <type><name>EncodingFixer</name></type> <name>encodingFixer</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>DescriptionColumnParser</name></type> <name>parser</name></decl>;</decl_stmt>

    <function><annotation>@<name>Before</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>setup</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>MockitoAnnotations</name><operator>.</operator><name>initMocks</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>when</name><argument_list>(<argument><expr><call><name><name>encodingFixer</name><operator>.</operator><name>fixHtmlEscapes</name></name><argument_list>(<argument><expr><call><name>anyString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>then</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>Answer</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><specifier>public</specifier> <type><name>String</name></type> <name>answer</name><parameter_list>(<parameter><decl><type><name>InvocationOnMock</name></type> <name>invocation</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Throwable</name></expr></argument></throws> <block>{
                <return>return <expr><call><name><name>invocation</name><operator>.</operator><name>getArgument</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>when</name><argument_list>(<argument><expr><call><name><name>encodingFixer</name><operator>.</operator><name>convertMarkdownToHtml</name></name><argument_list>(<argument><expr><call><name>anyString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>then</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>Answer</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><specifier>public</specifier> <type><name>String</name></type> <name>answer</name><parameter_list>(<parameter><decl><type><name>InvocationOnMock</name></type> <name>invocation</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Throwable</name></expr></argument></throws> <block>{
                <return>return <expr><call><name><name>invocation</name><operator>.</operator><name>getArgument</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>when</name><argument_list>(<argument><expr><call><name><name>encodingFixer</name><operator>.</operator><name>convertSubredditsToLinks</name></name><argument_list>(<argument><expr><call><name>anyString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>then</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>Answer</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><specifier>public</specifier> <type><name>String</name></type> <name>answer</name><parameter_list>(<parameter><decl><type><name>InvocationOnMock</name></type> <name>invocation</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Throwable</name></expr></argument></throws> <block>{
                <return>return <expr><call><name><name>invocation</name><operator>.</operator><name>getArgument</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>parser</name> <operator>=</operator> <operator>new</operator> <call><name>DescriptionColumnParser</name><argument_list>(<argument><expr><name>encodingFixer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>testParse</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>rawDescriptionData</name> <init>= <expr><literal type="string">"This is a description"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>AppParser</name><operator>.</operator><name>Column</name></name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>rawColumnMap</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rawColumnMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>AppParser</name><operator>.</operator><name>Column</name><operator>.</operator><name>DESCRIPTION</name></name></expr></argument>, <argument><expr><name>rawDescriptionData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>AppInfo</name></type> <name>appInfo</name> <init>= <expr><operator>new</operator> <call><name>AppInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>parser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>appInfo</name></expr></argument>, <argument><expr><name>rawColumnMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>appInfo</name><operator>.</operator><name>getDescription</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"This is a description"</literal></expr></argument>, <argument><expr><call><name><name>appInfo</name><operator>.</operator><name>getDescription</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/test/java/subreddit/android/appstore/backend/reddit/wiki/parser/EncodingFixerTest.java" hash="00aeee48ba95910d3c5e158fd62fcabf498bddd8"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>wiki</name><operator>.</operator><name>parser</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Before</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<import>import static <name><name>junit</name><operator>.</operator><name>framework</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>

<class><specifier>public</specifier> class <name>EncodingFixerTest</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>descriptionBoldMarkdown</name></decl>, <decl><type ref="prev"/><name>descriptionLinkMarkdown</name></decl>, <decl><type ref="prev"/><name>descriptionSubreddits</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>EncodingFixer</name></type> <name>encodingFixer</name></decl>;</decl_stmt>

    <function><annotation>@<name>Before</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>setup</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>encodingFixer</name> <operator>=</operator> <operator>new</operator> <call><name>EncodingFixer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>descriptionBoldMarkdown</name> <operator>=</operator> <literal type="string">"New ingenious full feature Reddit client. **Read AMA in magazine"</literal> <operator>+</operator>
                <literal type="string">"style QA format.** Add upcoming AMA to your calendar. **Only app with Text to "</literal> <operator>+</operator>
                <literal type="string">"Speech: Listen to the content.** Zero wait, streams all GIF instantly."</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>descriptionLinkMarkdown</name> <operator>=</operator> <literal type="string">"Tutorial screencast for [Propellerheads Reason](https://www"</literal> <operator>+</operator>
                <literal type="string">".propellerheads.se/products/reason/) and [Link 2](https://www.google.com)"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>descriptionSubreddits</name> <operator>=</operator> <literal type="string">"You can setup playlists, geofences, volume control, and share"</literal> <operator>+</operator>
                <literal type="string">" playlists with others. Share playlists at /r/androidrrm and /r/android"</literal></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>testConvertMarkdownToHtml</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>output</name> <init>= <expr><call><name><name>encodingFixer</name><operator>.</operator><name>convertMarkdownToHtml</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>output</name> <operator>=</operator> <call><name><name>encodingFixer</name><operator>.</operator><name>convertMarkdownToHtml</name></name><argument_list>(<argument><expr><literal type="string">"This description has no markdown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"This description has no markdown"</literal></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>testConvertMarkdownToHtml_bold</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>output</name> <init>= <expr><call><name><name>encodingFixer</name><operator>.</operator><name>convertMarkdownToHtml</name></name><argument_list>(<argument><expr><name>descriptionBoldMarkdown</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"New ingenious full feature Reddit client. &lt;b&gt;Read AMA in magazine"</literal> <operator>+</operator>
                <literal type="string">"style QA format.&lt;/b&gt; Add upcoming AMA to your calendar. &lt;b&gt;Only app with Text to "</literal> <operator>+</operator>
                <literal type="string">"Speech: Listen to the content.&lt;/b&gt; Zero wait, streams all GIF instantly."</literal></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>testConvertMarkdownToHtml_link</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>output</name> <init>= <expr><call><name><name>encodingFixer</name><operator>.</operator><name>convertMarkdownToHtml</name></name><argument_list>(<argument><expr><name>descriptionLinkMarkdown</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Tutorial screencast for "</literal> <operator>+</operator>
                <literal type="string">"&lt;a href=\"https://www.propellerheads.se/products/reason/\"&gt;"</literal> <operator>+</operator>
                <literal type="string">"Propellerheads Reason&lt;/a&gt; and &lt;a href=\"https://www.google.com\"&gt;Link 2&lt;/a&gt;"</literal></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>testConvertSubredditsToLinks</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>output</name> <init>= <expr><call><name><name>encodingFixer</name><operator>.</operator><name>convertSubredditsToLinks</name></name><argument_list>(<argument><expr><name>descriptionSubreddits</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"You can setup playlists, geofences, volume control, and share "</literal> <operator>+</operator>
                <literal type="string">"playlists with others. Share playlists at "</literal> <operator>+</operator>
                <literal type="string">"&lt;a href=\"https://www.reddit.com/r/androidrrm\"&gt;/r/androidrrm&lt;/a&gt; "</literal> <operator>+</operator>
                <literal type="string">"and &lt;a href=\"https://www.reddit.com/r/android\"&gt;/r/android&lt;/a&gt;"</literal></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/test/java/subreddit/android/appstore/backend/reddit/wiki/parser/DeviceColumnParserTest.java" hash="d17243e4d2c6166e776227b3947fc242ac385590"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>wiki</name><operator>.</operator><name>parser</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Before</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>mockito</name><operator>.</operator><name>Mock</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>mockito</name><operator>.</operator><name>MockitoAnnotations</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppInfo</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppTags</name></name>;</import>

<import>import static <name><name>junit</name><operator>.</operator><name>framework</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>
<import>import static <name><name>junit</name><operator>.</operator><name>framework</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertTrue</name></name>;</import>

<class><specifier>public</specifier> class <name>DeviceColumnParserTest</name> <block>{
    <decl_stmt><decl><annotation>@<name>Mock</name></annotation> <type><name>EncodingFixer</name></type> <name>encodingFixer</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>DeviceColumnParser</name></type> <name>parser</name></decl>;</decl_stmt>

    <function><annotation>@<name>Before</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>setup</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>MockitoAnnotations</name><operator>.</operator><name>initMocks</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>parser</name> <operator>=</operator> <operator>new</operator> <call><name>DeviceColumnParser</name><argument_list>(<argument><expr><name>encodingFixer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>testParse</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>rawDeviceData</name> <init>= <expr><literal type="string">"Phone"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>AppParser</name><operator>.</operator><name>Column</name></name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>rawColumnMap</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rawColumnMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>AppParser</name><operator>.</operator><name>Column</name><operator>.</operator><name>DEVICE</name></name></expr></argument>, <argument><expr><name>rawDeviceData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>AppInfo</name></type> <name>appInfo</name> <init>= <expr><operator>new</operator> <call><name>AppInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>parser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>appInfo</name></expr></argument>, <argument><expr><name>rawColumnMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>appInfo</name><operator>.</operator><name>getTags</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>appInfo</name><operator>.</operator><name>getTags</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name><name>AppTags</name><operator>.</operator><name>PHONE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>rawDeviceData</name> <operator>=</operator> <literal type="string">"Phone+Tablet"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>rawColumnMap</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rawColumnMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>AppParser</name><operator>.</operator><name>Column</name><operator>.</operator><name>DEVICE</name></name></expr></argument>, <argument><expr><name>rawDeviceData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>appInfo</name> <operator>=</operator> <operator>new</operator> <call><name>AppInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>appInfo</name></expr></argument>, <argument><expr><name>rawColumnMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>appInfo</name><operator>.</operator><name>getTags</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>appInfo</name><operator>.</operator><name>getTags</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name><name>AppTags</name><operator>.</operator><name>PHONE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>appInfo</name><operator>.</operator><name>getTags</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name><name>AppTags</name><operator>.</operator><name>TABLET</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>rawDeviceData</name> <operator>=</operator> <literal type="string">"Phone+Tablet+Watch"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>rawColumnMap</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rawColumnMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>AppParser</name><operator>.</operator><name>Column</name><operator>.</operator><name>DEVICE</name></name></expr></argument>, <argument><expr><name>rawDeviceData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>appInfo</name> <operator>=</operator> <operator>new</operator> <call><name>AppInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>appInfo</name></expr></argument>, <argument><expr><name>rawColumnMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>appInfo</name><operator>.</operator><name>getTags</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>appInfo</name><operator>.</operator><name>getTags</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name><name>AppTags</name><operator>.</operator><name>PHONE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>appInfo</name><operator>.</operator><name>getTags</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name><name>AppTags</name><operator>.</operator><name>TABLET</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>appInfo</name><operator>.</operator><name>getTags</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name><name>AppTags</name><operator>.</operator><name>WEAR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/test/java/subreddit/android/appstore/backend/reddit/wiki/parser/PriceColumnParserTest.java" hash="947041f62a582702d78b8ddcd39ecb460894f6b5"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>wiki</name><operator>.</operator><name>parser</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Before</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>mockito</name><operator>.</operator><name>Mock</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>mockito</name><operator>.</operator><name>MockitoAnnotations</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppInfo</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppTags</name></name>;</import>

<import>import static <name><name>junit</name><operator>.</operator><name>framework</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertFalse</name></name>;</import>
<import>import static <name><name>junit</name><operator>.</operator><name>framework</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertTrue</name></name>;</import>

<class><specifier>public</specifier> class <name>PriceColumnParserTest</name> <block>{
    <decl_stmt><decl><annotation>@<name>Mock</name></annotation> <type><name>EncodingFixer</name></type> <name>encodingFixer</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>PriceColumnParser</name></type> <name>parser</name></decl>;</decl_stmt>

    <function><annotation>@<name>Before</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>setup</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>MockitoAnnotations</name><operator>.</operator><name>initMocks</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>parser</name> <operator>=</operator> <operator>new</operator> <call><name>PriceColumnParser</name><argument_list>(<argument><expr><name>encodingFixer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>testParse</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>rawPriceData</name> <init>= <expr><literal type="string">"Paid"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>AppParser</name><operator>.</operator><name>Column</name></name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>rawColumnMap</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rawColumnMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>AppParser</name><operator>.</operator><name>Column</name><operator>.</operator><name>PRICE</name></name></expr></argument>, <argument><expr><name>rawPriceData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>AppInfo</name></type> <name>appInfo</name> <init>= <expr><operator>new</operator> <call><name>AppInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>parser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>appInfo</name></expr></argument>, <argument><expr><name>rawColumnMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>appInfo</name><operator>.</operator><name>getTags</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name><name>AppTags</name><operator>.</operator><name>PAID</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>appInfo</name><operator>.</operator><name>getTags</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name><name>AppTags</name><operator>.</operator><name>FREE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>rawPriceData</name> <operator>=</operator> <literal type="string">"Free"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>rawColumnMap</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rawColumnMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>AppParser</name><operator>.</operator><name>Column</name><operator>.</operator><name>PRICE</name></name></expr></argument>, <argument><expr><name>rawPriceData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>appInfo</name> <operator>=</operator> <operator>new</operator> <call><name>AppInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>appInfo</name></expr></argument>, <argument><expr><name>rawColumnMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>appInfo</name><operator>.</operator><name>getTags</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name><name>AppTags</name><operator>.</operator><name>FREE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>appInfo</name><operator>.</operator><name>getTags</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name><name>AppTags</name><operator>.</operator><name>PAID</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>


}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/test/java/subreddit/android/appstore/backend/data/AppInfoTest.java" hash="1e4efc1c7f14566ef38ec5934519abb88df3774b"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>hamcrest</name><operator>.</operator><name>CoreMatchers</name><operator>.</operator><name>is</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>hamcrest</name><operator>.</operator><name>number</name><operator>.</operator><name>OrderingComparison</name><operator>.</operator><name>lessThan</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertThat</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Created by Kristian 'krissrex' Rekstad on 8/7/2017.
 *
 * @author Kristian 'krissrex' Rekstad
 */</comment>
<class><specifier>public</specifier> class <name>AppInfoTest</name> <block>{

    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>testCompareSortsIgnoringCase</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <comment type="line">// Given</comment>
        <decl_stmt><decl><type><name>AppInfo</name></type> <name>lowerCaseNameApp</name> <init>= <expr><operator>new</operator> <call><name>AppInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>lowerCaseNameApp</name><operator>.</operator><name>setAppName</name></name><argument_list>(<argument><expr><literal type="string">"apple"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>AppInfo</name></type> <name>upperCaseNameApp</name> <init>= <expr><operator>new</operator> <call><name>AppInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>upperCaseNameApp</name><operator>.</operator><name>setAppName</name></name><argument_list>(<argument><expr><literal type="string">"Zombie"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// When</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>difference</name> <init>= <expr><call><name><name>lowerCaseNameApp</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>upperCaseNameApp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Then</comment>
        <expr_stmt><expr><call><name>assertThat</name><argument_list>(<argument><expr><literal type="string">"Sorting places lowercase letters after uppercase"</literal></expr></argument>, <argument><expr><name>difference</name></expr></argument>, <argument><expr><call><name>is</name><argument_list>(<argument><expr><call><name>lessThan</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class></unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/test/java/subreddit/android/appstore/backend/reddit/wiki/parser/NameColumnParserTest.java" hash="7ee7c9da298be84c71a5da15fe1294d552ad6657"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>wiki</name><operator>.</operator><name>parser</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Before</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>mockito</name><operator>.</operator><name>Mock</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>mockito</name><operator>.</operator><name>MockitoAnnotations</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>mockito</name><operator>.</operator><name>invocation</name><operator>.</operator><name>InvocationOnMock</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>mockito</name><operator>.</operator><name>stubbing</name><operator>.</operator><name>Answer</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppInfo</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>Download</name></name>;</import>

<import>import static <name><name>junit</name><operator>.</operator><name>framework</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>mockito</name><operator>.</operator><name>ArgumentMatchers</name><operator>.</operator><name>anyString</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>mockito</name><operator>.</operator><name>Mockito</name><operator>.</operator><name>when</name></name>;</import>

<class><specifier>public</specifier> class <name>NameColumnParserTest</name> <block>{
    <decl_stmt><decl><annotation>@<name>Mock</name></annotation> <type><name>EncodingFixer</name></type> <name>encodingFixer</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>NameColumnParser</name></type> <name>parser</name></decl>;</decl_stmt>

    <function><annotation>@<name>Before</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>setup</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>MockitoAnnotations</name><operator>.</operator><name>initMocks</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>when</name><argument_list>(<argument><expr><call><name><name>encodingFixer</name><operator>.</operator><name>fixHtmlEscapes</name></name><argument_list>(<argument><expr><call><name>anyString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>then</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>Answer</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><specifier>public</specifier> <type><name>String</name></type> <name>answer</name><parameter_list>(<parameter><decl><type><name>InvocationOnMock</name></type> <name>invocation</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Throwable</name></expr></argument></throws> <block>{
                <return>return <expr><call><name><name>invocation</name><operator>.</operator><name>getArgument</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>parser</name> <operator>=</operator> <operator>new</operator> <call><name>NameColumnParser</name><argument_list>(<argument><expr><name>encodingFixer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>testParse_names</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>rawNameData</name> <init>= <expr><literal type="string">"[10000000](https://play.google.com/store/apps/details?id=com.eightyeightgames.tenmillion)"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>AppParser</name><operator>.</operator><name>Column</name></name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>rawColumnMap</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rawColumnMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>AppParser</name><operator>.</operator><name>Column</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><name>rawNameData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>AppInfo</name></type> <name>appInfo</name> <init>= <expr><operator>new</operator> <call><name>AppInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>parser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>appInfo</name></expr></argument>, <argument><expr><name>rawColumnMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"10000000"</literal></expr></argument>, <argument><expr><call><name><name>appInfo</name><operator>.</operator><name>getAppName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>testParse_downloadTypes</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <comment type="line">//Google Play link</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>rawPlayDownload</name> <init>= <expr><literal type="string">"[10000000](https://play.google.com/store/apps/details?id=com.eightyeightgames.tenmillion)"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>AppParser</name><operator>.</operator><name>Column</name></name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>rawColumnMap</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rawColumnMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>AppParser</name><operator>.</operator><name>Column</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><name>rawPlayDownload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>AppInfo</name></type> <name>appInfo</name> <init>= <expr><operator>new</operator> <call><name>AppInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>parser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>appInfo</name></expr></argument>, <argument><expr><name>rawColumnMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Download</name></argument>&gt;</argument_list></name></type> <name>downloads</name> <init>= <expr><operator>(</operator><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Download</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name><name>appInfo</name><operator>.</operator><name>getDownloads</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Download</name><operator>.</operator><name>Type</name><operator>.</operator><name>GPLAY</name></name></expr></argument>, <argument><expr><call><name><name>downloads</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"https://play.google.com/store/apps/details?id=com.eightyeightgames.tenmillion"</literal></expr></argument>,
                <argument><expr><call><name><name>downloads</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTarget</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//Unknown/parsing failed link</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>rawUnknownDownload</name> <init>= <expr><literal type="string">"What is this download?"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>rawColumnMap</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rawColumnMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>AppParser</name><operator>.</operator><name>Column</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><name>rawUnknownDownload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>appInfo</name> <operator>=</operator> <operator>new</operator> <call><name>AppInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>appInfo</name></expr></argument>, <argument><expr><name>rawColumnMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>downloads</name> <operator>=</operator> <operator>(</operator><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Download</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name><name>appInfo</name><operator>.</operator><name>getDownloads</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name><name>Download</name><operator>.</operator><name>Type</name><operator>.</operator><name>UNKNOWN</name></name></expr></argument>, <argument><expr><call><name><name>downloads</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"What is this download?"</literal></expr></argument>,
                <argument><expr><call><name><name>downloads</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTarget</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"What is this download?"</literal></expr></argument>, <argument><expr><call><name><name>appInfo</name><operator>.</operator><name>getAppName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//Amazon link</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>rawAmazonDownload</name> <init>= <expr><literal type="string">"[Lost Within](http://www.amazon.com/Amazon-Game-Studios-Lost-Within/dp/B00VGKMTKC/)"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>rawColumnMap</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rawColumnMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>AppParser</name><operator>.</operator><name>Column</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><name>rawAmazonDownload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>appInfo</name> <operator>=</operator> <operator>new</operator> <call><name>AppInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>appInfo</name></expr></argument>, <argument><expr><name>rawColumnMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>downloads</name> <operator>=</operator> <operator>(</operator><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Download</name></argument>&gt;</argument_list></name><operator>)</operator> <call><name><name>appInfo</name><operator>.</operator><name>getDownloads</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//TODO: this, along with other download types in NameColumnParser</comment>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/prod/java/subreddit/android/appstore/backend/scrapers/ScraperModule.java" hash="465b9aeb2228c98fe5619dae705f0e0684e8b8d9"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>scrapers</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>

<import>import <name><name>dagger</name><operator>.</operator><name>Module</name></name>;</import>
<import>import <name><name>dagger</name><operator>.</operator><name>Provides</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>OkHttpClient</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>scrapers</name><operator>.</operator><name>caching</name><operator>.</operator><name>ScrapeDiskCache</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>dagger</name><operator>.</operator><name>ApplicationScope</name></name>;</import>


<class><annotation>@<name>Module</name></annotation>
<specifier>public</specifier> class <name>ScraperModule</name> <block>{

    <function><annotation>@<name>Provides</name></annotation>
    <annotation>@<name>ApplicationScope</name></annotation>
    <type><name>ScrapeDiskCache</name></type> <name>provideScrapeDiskCache</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>ScrapeDiskCache</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Provides</name></annotation>
    <annotation>@<name>ApplicationScope</name></annotation>
    <type><name>MediaScraper</name></type> <name>provideScraper</name><parameter_list>(<parameter><decl><type><name>ScrapeDiskCache</name></type> <name>scrapeDiskCache</name></decl></parameter>, <parameter><decl><type><name>OkHttpClient</name></type> <name>client</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>LiveMediaScraper</name><argument_list>(<argument><expr><name>scrapeDiskCache</name></expr></argument>, <argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/prod/java/subreddit/android/appstore/backend/github/GithubRepositoryModule.java" hash="67180612c49217ee8e306a0f2e404f9724634d3c"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>github</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>jakewharton</name><operator>.</operator><name>retrofit2</name><operator>.</operator><name>adapter</name><operator>.</operator><name>rxjava2</name><operator>.</operator><name>RxJava2CallAdapterFactory</name></name>;</import>

<import>import <name><name>dagger</name><operator>.</operator><name>Module</name></name>;</import>
<import>import <name><name>dagger</name><operator>.</operator><name>Provides</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>OkHttpClient</name></name>;</import>
<import>import <name><name>retrofit2</name><operator>.</operator><name>Retrofit</name></name>;</import>
<import>import <name><name>retrofit2</name><operator>.</operator><name>converter</name><operator>.</operator><name>gson</name><operator>.</operator><name>GsonConverterFactory</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>HttpModule</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>dagger</name><operator>.</operator><name>ApplicationScope</name></name>;</import>


<class><annotation>@<name>Module</name><argument_list>(<argument><expr><name>includes</name> <operator>=</operator> <name><name>HttpModule</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> class <name>GithubRepositoryModule</name> <block>{

    <function><annotation>@<name>Provides</name></annotation>
    <annotation>@<name>ApplicationScope</name></annotation>
    <specifier>public</specifier> <type><name>GithubRepository</name></type> <name>provideGithubRepository</name><parameter_list>(<parameter><decl><type><name>GithubApi</name></type> <name>githubApi</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>LiveGithubRepository</name><argument_list>(<argument><expr><name>githubApi</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Provides</name></annotation>
    <annotation>@<name>ApplicationScope</name></annotation>
    <specifier>public</specifier> <type><name>GithubApi</name></type> <name>provideGithubApi</name><parameter_list>(<parameter><decl><type><name>OkHttpClient</name></type> <name>client</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Retrofit</name></type> <name>retrofit</name> <init>= <expr><operator>new</operator> <call><name><name>Retrofit</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>client</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>addConverterFactory</name><argument_list>(<argument><expr><call><name><name>GsonConverterFactory</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>addCallAdapterFactory</name><argument_list>(<argument><expr><call><name><name>RxJava2CallAdapterFactory</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>baseUrl</name><argument_list>(<argument><expr><name><name>GithubApi</name><operator>.</operator><name>BASEURL</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>retrofit</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>GithubApi</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/mock/java/subreddit/android/appstore/backend/scrapers/FakeScraper.java" hash="447be2f0169e64e61c0bf47b8990c8e4f12d9970"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>scrapers</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>

<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>Observable</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppInfo</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>scrapers</name><operator>.</operator><name>MediaScraper</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>scrapers</name><operator>.</operator><name>ScrapeResult</name></name>;</import>

<class><specifier>public</specifier> class <name>FakeScraper</name> <super><implements>implements <name>MediaScraper</name></implements></super> <block>{
    <function><annotation>@<name>NonNull</name></annotation>
    <annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>ScrapeResult</name></argument>&gt;</argument_list></name></type> <name>get</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>AppInfo</name></type> <name>appToScrape</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/mock/java/subreddit/android/appstore/backend/scrapers/ScraperModule.java" hash="ad957cbe26300257838db529e5a3670e8b217a83"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>scrapers</name></name>;</package>

<import>import <name><name>dagger</name><operator>.</operator><name>Module</name></name>;</import>
<import>import <name><name>dagger</name><operator>.</operator><name>Provides</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>dagger</name><operator>.</operator><name>ApplicationScope</name></name>;</import>


<class><annotation>@<name>Module</name></annotation>
<specifier>public</specifier> class <name>ScraperModule</name> <block>{
    <function><annotation>@<name>Provides</name></annotation>
    <annotation>@<name>ApplicationScope</name></annotation>
    <type><name>MediaScraper</name></type> <name>provideMediaScraper</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>FakeScraper</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/mock/java/subreddit/android/appstore/backend/reddit/wiki/WikiRepositoryModule.java" hash="aae6ad68388eb1244c434f0760522f58c3d79bf9"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>wiki</name></name>;</package>

<import>import <name><name>dagger</name><operator>.</operator><name>Module</name></name>;</import>
<import>import <name><name>dagger</name><operator>.</operator><name>Provides</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>dagger</name><operator>.</operator><name>ApplicationScope</name></name>;</import>


<class><annotation>@<name>Module</name></annotation>
<specifier>public</specifier> class <name>WikiRepositoryModule</name> <block>{
    <function><annotation>@<name>Provides</name></annotation>
    <annotation>@<name>ApplicationScope</name></annotation>
    <type><name>WikiRepository</name></type> <name>provideWikiRepository</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>FakeWikiRepository</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/test/java/subreddit/android/appstore/backend/reddit/wiki/parser/TestBody.java" hash="60f3b0cb7eab7c6e69d4cda41da4576633979d21"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>wiki</name><operator>.</operator><name>parser</name></name>;</package>


<class><specifier>public</specifier> class <name>TestBody</name> <block>{
    <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>HTMLBODY</name> <init>=
            <expr><literal type="string">"# Category1 Entry1\n"</literal> <operator>+</operator>
                    <literal type="string">"\n"</literal> <operator>+</operator>
                    <literal type="string">"## Category2 Entry1  \n"</literal> <operator>+</operator>
                    <literal type="string">"\n"</literal> <operator>+</operator>
                    <literal type="string">"###Category3 Entry1\n"</literal> <operator>+</operator>
                    <literal type="string">"Name | Price | Device | Description | Contact\n"</literal> <operator>+</operator>
                    <literal type="string">":-----------|:------------|:------------|:------------|:------------|  \n"</literal> <operator>+</operator>
                    <literal type="string">"[10000000](https://play.google.com/store/apps/details?id=com.eightyeightgames.tenmillion) | Paid | Phone+Tablet | 10000000 is a Dungeon Crawling RPG Matching Game. Run the dungeon and match to handle the things you encounter | luca@eightyeightgames.com\n"</literal> <operator>+</operator>
                    <literal type="string">"[80 Days](https://play.google.com/store/apps/details?id=com.inkle.eightydays) | Paid | Phone+Tablet | 1872, with a steampunk twist. Phileas Fogg has wagered he can circumnavigate the world in just eighty days. | inkle@inklestudios.com\n"</literal> <operator>+</operator>
                    <literal type="string">"[Alto's Adventure](https://play.google.com/store/apps/details?id=com.noodlecake.altosadventure) | Free | Phone+Tablet | Join Alto and his friends as they embark on an endless snowboarding odyssey. Journey across the beautiful alpine hills of their native wilderness, through neighbouring villages, ancient woodlands, and long-abandoned ruins. Along the way you'll rescue runaway llamas, grind rooftops, leap over terrifying chasms and outwit the mountain elders â all while braving the ever changing elements and passage of time upon the mountain. | support+android@noodlecake.com\n"</literal> <operator>+</operator>
                    <literal type="string">"[BADLAND](https://play.google.com/store/apps/details?id=com.frogmind.badland) | Free | Phone+Tablet | BADLAND is an award-winning atmospheric side-scrolling action adventure platformer set in a gorgeous forest full of various inhabitants, trees and flowers. Although the forest appears to be right out of a beautiful fairy tale, thereâs something terribly wrong. The player controls one of the forest dwellers to find out whatâs going on, and discovers an astonishing number of imaginative traps and obstacles on the way. | support@frogmindgames.com  \n"</literal> <operator>+</operator>
                    <literal type="string">"[Chameleon Run](https://play.google.com/store/apps/details?id=com.noodlecake.chameleonrun) | Paid | Phone+Tablet | Chameleon Run is a unique, fast and challenging autorunner with a colorful twist. Jump, switch and run through expertly crafted levels that will have you running back for more. Your goal is to switch your color to match the ground as you run and jump from platform to platform. Sounds easy right? Well think again! | support+android@noodlecake.com\n"</literal> <operator>+</operator>
                    <literal type="string">"\n"</literal> <operator>+</operator>
                    <literal type="string">"### Category3 Entry2\n"</literal> <operator>+</operator>
                    <literal type="string">"Name | Price | Device | Description | Contact\n"</literal> <operator>+</operator>
                    <literal type="string">":-----------|:------------|:------------|:------------|:------------|  \n"</literal> <operator>+</operator>
                    <literal type="string">"[Civilization Revolution 2](https://play.google.com/store/apps/details?id=com.t2kgames.civrev2) | Paid | Phone+Tablet | The sequel to one of the most successful strategy games on mobile is here! Sid Meier's Civilization Revolution 2 challenges players  to build a glorious empire that will stand the test of time. This is the first game in the Civilization catalog to be developed and available exclusively for mobile devices. Civilization Revolution 2 offers mobile strategy fans a brand new 3D presentation and more tactical depth than ever before! Find out if you have what it takes to rule the world! | civrev2support@2k.com\n"</literal> <operator>+</operator>
                    <literal type="string">"[Clash Royale ](https://play.google.com/store/apps/details?id=com.supercell.clashroyale) | Free | Phone+Tablet | Enter the Arena! From the creators of Clash of Clans comes a real-time multiplayer game starring the Royales, your favorite Clash characters and much, much more. Collect and upgrade dozens of cards featuring the Clash of Clans troops, spells and defenses you know and love, as well as the Royales: Princes, Knights, Baby Dragons and more. Knock the enemy King and Princesses from their towers to defeat your opponents and win Trophies, Crowns and glory in the Arena. Form a Clan to share cards and build your very own battle community. | gp-info@supercell.com\n"</literal> <operator>+</operator>
                    <literal type="string">"[Critical Ops](https://play.google.com/store/apps/details?id=com.criticalforceentertainment.criticalops) | Free | Phone+Tablet | Critical Ops is a fast-paced FPS that will test your reflexes and tactical skill. Experience the thrill of modern terrorist warfare as you fight a critical strike operation as a counter-terrorist or aim to cause destruction as a terrorist. | support@criticalforce.fi  \n"</literal> <operator>+</operator>
                    <literal type="string">"[Fallout Shelter](https://play.google.com/store/apps/details?id=com.bethsoft.falloutshelter) | Free | Phone+Tablet | Create a brighter futureâ¦underground! Select from a variety of modern-day rooms to turn an excavation beneath 2,000 feet of bedrock into the very picture of Vault Life. | falloutshelterhelp@mail.bethesda.net  \n"</literal> <operator>+</operator>
                    <literal type="string">"[Fate/Grand Order](https://play.google.com/store/apps/details?id=com.aniplex.fategrandorder) | Free | Phone+Tablet | Fate/Grand Order is an RPG for Android and iOS platforms which lets players take on the role of a fledgling master on a quest to save time and space. NOTE: THIS GAME IS IN JAPANESE. | cs_support@fate-go.jp\n"</literal> <operator>+</operator>
                    <literal type="string">"[FRAMED](https://play.google.com/store/apps/details?id=com.noodlecake.framed) | Paid | Phone+Tablet | FRAMED is a multi-award winning noir-puzzle game where you re-arrange panels of animated comic book to change the outcome of the story. | support+android@noodlecake.com\n"</literal> <operator>+</operator>
                    <literal type="string">"[Galaxy on Fire 2 HD](https://play.google.com/store/apps/details?id=net.fishlabs.gof2hdallandroid2012) | Free | Phone+Tablet | In the game, you take over the role of the hot-headed space war veteran Keith T. Maxwell and save the galaxy from its impeding destruction by the hands of devious alien raiders, ruthless space pirates and power-crazy madmen!  | info@dsfishlabs.com  \n"</literal> <operator>+</operator>
                    <literal type="string">"[Granblue Fantasy](https://play.google.com/store/apps/details?id=jp.mbga.a12016007.lite) | Free | Phone+Tablet | Granblue Fantasy is a role-playing video game developed by Cygames for Android and iOS platforms, and released in Japan in March 2014. The game is notable for reuniting music composer Nobuo Uematsu and character designer Hideo Minaba, who also worked on Final Fantasy VI (1994), Final Fantasy IX (2000), and Lost Odyssey (2007). | open-07480@mbga.jp\n"</literal> <operator>+</operator>
                    <literal type="string">"\n"</literal> <operator>+</operator>
                    <literal type="string">"\n"</literal> <operator>+</operator>
                    <literal type="string">"# Category1 Entry2\n"</literal> <operator>+</operator>
                    <literal type="string">"\n"</literal> <operator>+</operator>
                    <literal type="string">"## Category2 Entry1  \n"</literal> <operator>+</operator>
                    <literal type="string">"\n"</literal> <operator>+</operator>
                    <literal type="string">"### Category3 Entry1\n"</literal> <operator>+</operator>
                    <literal type="string">"Name | Price | Device | Description | Contact\n"</literal> <operator>+</operator>
                    <literal type="string">":-----------|:------------|:------------|:------------|:------------|  \n"</literal> <operator>+</operator>
                    <literal type="string">"[Hitman GO](https://play.google.com/store/apps/details?id=com.squareenixmontreal.hitmango) | Paid | Phone+Tablet | Hitman GO is a turn-based puzzle game with beautifully rendered diorama-style set pieces. You will strategically navigate fixed spaces on a grid to avoid enemies and take out your target or infiltrate well-guarded locations. You really have to think about each move and all the Hitman tools of the trade you would expect are included; disguises, distractions, sniper rifles and even 47âs iconic Silverballers. | eu-mobile-support@square-enix.com\n"</literal> <operator>+</operator>
                    <literal type="string">"[Horizon Chase](https://play.google.com/store/apps/details?id=com.aquiris.horizonchase) | Free | Phone+Tablet | Horizon Chase is a love letter to all retro gaming fans. It's an addictive racing game inspired in the great hits of the 80's and 90's: Out Run, Lotus Turbo Challenge, Top Gear (SNES), Rush, among others. Each curve and each lap in Horizon Chase recreate classic arcade gameplay and offer you unbound speed limits of fun. Full throttle on and enjoy! | support@aquiris.com.br\n"</literal> <operator>+</operator>
                    <literal type="string">"[Lara Croft GO](https://play.google.com/store/apps/details?id=com.squareenixmontreal.lcgo) | Paid | Phone+Tablet | Lara Croft GO is a turn based puzzle-adventure set in a long-forgotten world. Explore the ruins of an ancient civilization, discover well-kept secrets and face deadly challenges as you uncover the myth of the Queen of Venom. | eu-mobile-support@square-enix.com\n"</literal> <operator>+</operator>
                    <literal type="string">"[Leo's Fortune](https://play.google.com/store/apps/details?id=com.leosfortune) | Paid | Phone+Tablet | Leoâs Fortune is an award-winning platform adventure game where you hunt down the cunning and mysterious thief that stole your gold. Beautifully hand-crafted levels bring the story of Leo to life in this epic adventure. | support@leosfortune.com\n"</literal> <operator>+</operator>
                    <literal type="string">"[Lost Within](http://www.amazon.com/Amazon-Game-Studios-Lost-Within/dp/B00VGKMTKC/) | Paid | Phone+Tablet | From the developer of Prey -- Escape a haunted asylum by fighting or fleeing from its monstrous Inhabitants. Scavenge through ruins and create makeshift weapons to strike back at your enemies. Or--conserve your resources and employ stealth to sneak past the lurking horrors. When all else fails, run like mad and search for a place to hide! The building itself seems to be trying to tell you something. Strange visions of the past reveal buried secretsâ terrors that are now coming alive all around you. To get out, you must solve a series of dark mysteries and discover the shattering secret that led to the asylum's condemnation. But the legendary serial killer who is rumored to inhabit the asylum is no myth â¦ and he knows you are here. His howls of rage seem to shake the very walls. You must escape, but be careful. Though there are many doors, there is only one way out. | amazon-appstore-help@amazon.com  \n"</literal> <operator>+</operator>
                    <literal type="string">"[LoveLive! School idol festival](https://play.google.com/store/apps/details?id=klb.android.lovelive_en) | Free | Phone+Tablet | A massive hit game app in Japan, now available worldwide! Featuring Aqours and Î¼'s from the Love Live! series, as well as game-original characters. Support the school idols and help them make their dreams come true! | info-schoolfesta@klab.com\n"</literal> <operator>+</operator>
                    <literal type="string">"[Monument Valley](https://play.google.com/store/apps/details?id=com.ustwo.monumentvalley) | Paid | Phone+Tablet | Monument Valley is a surreal exploration through fantastical architecture and impossible geometry. Guide the silent princess Ida through mysterious monuments, uncovering hidden paths, unfolding optical illusions and outsmarting the enigmatic Crow People. | support@monumentvalleygame.com\n"</literal> <operator>+</operator>
                    <literal type="string">"[Odd Bot Out](https://play.google.com/store/apps/details?id=com.martinmagni.oddbotoutpaid) | Paid | Phone+Tablet | Odd is not like the other robots. After failing a standardized test Odd ends up in the recycling bin. Help Odd escape through the factory's 100 unique rooms. Each level in this contraption puzzle game presents a new challenge. Build a bridge across a (small) abyss. Design and drive an unsafe car. And ride a robotic centipede, like you always wanted to. | mail@martinmagni.com\n"</literal> <operator>+</operator>
                    <literal type="string">"[Osmos HD](https://play.google.com/store/apps/details?id=com.hemispheregames.osmos) | Paid | Phone+Tablet | Enter the Darwinian world of a galactic mote. To survive, absorb smaller organisms and growâbut beware of larger predators! Winner of multiple \"Game of the Year\" awards, Osmos features unique physics-based play, stellar graphics, and a hypnotic soundtrack of ambient electronica. Ready to evolve? | androidsupport@hemispheregames.com\n"</literal> <operator>+</operator>
                    <literal type="string">"[Out There: Î© Edition](https://play.google.com/store/apps/details?id=com.miclos.google.games.outthere) | Paid | Phone+Tablet | You are an astronaut awaking from cryonics not in the solar system, but... out there... in a far and unknown place of the galaxy. In Out There, you will have to survive, tinkering your ship with what you can gather drifting in the void, and spot garden planets to refill your oxygen supply. | support@miclos.com\n"</literal> <operator>+</operator>
                    <literal type="string">"[Pixel Dungeon](https://play.google.com/store/apps/details?id=com.watabou.pixeldungeon) | Free | Phone+Tablet | Pixel Dungeon is a traditional roguelike* game with pixel-art graphics and simple interface. Explore the depths of Pixel Dungeon, collect useful items, fight fierce monsters to find Amulet of Yendor (surprise!) - the ultimate artifact of this game world. | pixeldungeon@watabou.ru\n"</literal> <operator>+</operator>
                    <literal type="string">"[Pocket Mortys](https://play.google.com/store/apps/details?id=com.turner.pocketmorties) | Free | Phone+Tablet | Join Ricks throughout the multiverse as they get swept up in the latest craze: Morty training! There are over 70 bizarre Mortys to recruit and train out there, including Mustache Morty, Wizard Morty, Cronenberg Morty and more. Assemble a dream team, then challenge rival Ricks by forcing your grandsons to battle each other. Command, combine and level up your Mortys to prove that you're the greatest Morty trainer of all space and time!  | pocket.mortys.911@gmail.com\n"</literal> <operator>+</operator>
                    <literal type="string">"[Shattered Pixel Dungeon](https://play.google.com/store/apps/details?id=com.shatteredpixel.shatteredpixeldungeon) | Free | Phone+Tablet | Shattered Pixel Dungeon is a Roguelike RPG, with pixel art graphics and lots of variety and replayability. Every game is unique, with four different playable characters, randomized levels and enemies, and over 150 items to collect and use. The game is simple to get into, but has lots of depth. Strategy is required if you want to win! | Evan@ShatteredPixel.com\n"</literal> <operator>+</operator>
                    <literal type="string">"[SimplePlanes](https://play.google.com/store/apps/details?id=com.jundroo.SimplePlanes) | Paid | Phone+Tablet | Snap parts together to build your airplane's body. Place engines to add thrust. Design the wings and then strap yourself into the pilot's seat and see how it flies.  | games@jundroo.com\n"</literal> <operator>+</operator>
                    <literal type="string">"\n"</literal> <operator>+</operator>
                    <literal type="string">"#Category1 Entry3\n"</literal> <operator>+</operator>
                    <literal type="string">"\n"</literal> <operator>+</operator>
                    <literal type="string">"## Category2 Entry1  \n"</literal> <operator>+</operator>
                    <literal type="string">"\n"</literal> <operator>+</operator>
                    <literal type="string">"### Category3 Entry1\n"</literal> <operator>+</operator>
                    <literal type="string">"Name | Price | Device | Description | Contact\n"</literal> <operator>+</operator>
                    <literal type="string">":-----------|:------------|:------------|:------------|:------------|  \n"</literal> <operator>+</operator>
                    <literal type="string">"[Soda Dungeon](https://play.google.com/store/apps/details?id=com.armorgames.sodadungeon) | Free | Phone+Tablet | Manage your team of adventurers as you raid the local dungeon for treasure! Upgrade your tavern, purchase new sodas, and attract new party members. Gold, legendary items, and more await you! | shawn@afro-ninja.com\n"</literal> <operator>+</operator>
                    <literal type="string">"[Sorcery! 1](https://play.google.com/store/apps/details?id=com.inkle.sorcery1) | Paid | Phone+Tablet | From legendary designer Steve Jackson, co-founder of Lionhead Studios (with Peter Molyneux), and Fighting Fantasy and Games Workshop (with Ian Livingstone); and inkle, the studio behind the award-winning Frankenstein app, Sorcery! is an interactive adventure like never before. | inkle@inklestudios.com\n"</literal> <operator>+</operator>
                    <literal type="string">"[Sorcery! 2](https://play.google.com/store/apps/details?id=com.inkle.sorcery2) | Paid | Phone+Tablet | An epic adventure through KharÃ©: Cityport of Traps. Begin your story here! (Part 1 not required.) | inkle@inklestudios.com\n"</literal> <operator>+</operator>
                    <literal type="string">"[Sorcery! 3](https://play.google.com/store/apps/details?id=com.inkle.sorcery3) | Paid | Phone+Tablet | An epic adventure through a cursed wilderness of monsters, traps and magic. Begin your journey here! (Parts 1 and 2 not required.) | inkle@inklestudios.com\n"</literal> <operator>+</operator>
                    <literal type="string">"[Space Marshals](https://play.google.com/store/apps/details?id=com.pixelbite.sg) | Paid | Phone+Tablet | Space Marshals is a Sci-fi Wild West adventure taking place in outer space! This tactical top-down shooter puts you in the shoes of specialist Burton in his hunt for dangerous fugitives after a disastrous prison break.  | support@pixelbite.se\n"</literal> <operator>+</operator>
                    <literal type="string">"[Tales From Deep Space](http://www.amazon.com/Amazon-Game-Studios-Tales-Space/dp/B00P73L20M) | Paid | Phone+Tablet | Tales From Deep Space is a comedic mis-adventure set on Big Moon, the most eccentric space station in the galaxy. Players help E, a traveling salesman, and his loyal luggage drone CASI escape when Big Moon is thrown into lockdown. E and CASI must work together to fight dangerous battles, solve fiendish puzzles and unravel the nefarious plot behind the mysterious \"Meek\" uprising. Players can switch between E and CASI in single player, and on Kindle Fire HDX, Fire Phone and 2014 Fire tablets, they can play in local, two-player co-op where each player controls the reluctant heroes individually on their own tablets. Trouble has never been so fun! | amazon-appstore-help@amazon.com  \n"</literal> <operator>+</operator>
                    <literal type="string">"[The Abandoned](https://play.google.com/store/apps/details?id=com.gaijindistr.theabandoned) | Paid | Phone+Tablet | âThe Abandonedâ is an adventure game, where you need to survive in an area full of danger and mystery. Your goal is to stay alive and find the way out, fighting monsters and completing story driven missions.  | distribution@gaijin.net\n"</literal> <operator>+</operator>
                    <literal type="string">"[The Room 1](https://play.google.com/store/apps/details?id=com.FireproofStudios.TheRoom) | Paid | Phone+Tablet | Welcome to The Room, a physical puzzler, wrapped in a mystery game, inside a beautifully tactile 3D world. | info@fireproofgames.com\n"</literal> <operator>+</operator>
                    <literal type="string">"[The Room 2](https://play.google.com/store/apps/details?id=com.FireproofStudios.TheRoom2) | Paid | Phone+Tablet | Welcome to The Room Two, a physical puzzler, wrapped in a mystery game, inside a beautifully tactile 3D world. The much anticipated sequel to âThe Roomâ, recipient of a BAFTA award, is here at last.  | info@fireproofgames.com\n"</literal> <operator>+</operator>
                    <literal type="string">"\n"</literal> <operator>+</operator>
                    <literal type="string">"##Category2 Entry2  \n"</literal> <operator>+</operator>
                    <literal type="string">"\n"</literal> <operator>+</operator>
                    <literal type="string">"### Category3 Entry1\n"</literal> <operator>+</operator>
                    <literal type="string">"Name | Price | Device | Description | Contact\n"</literal> <operator>+</operator>
                    <literal type="string">":-----------|:------------|:------------|:------------|:------------|  \n"</literal> <operator>+</operator>
                    <literal type="string">"[The Room 3](https://play.google.com/store/apps/details?id=com.FireproofStudios.TheRoom3) | Paid | Phone+Tablet | Welcome to The Room Three, a physical puzzle game within a beautifully tactile world. Lured to a remote island, you must draw upon all your puzzle-solving ability to navigate a series of trials devised by a mysterious figure known only as âThe Craftsmanâ. | info@fireproofgames.com\n"</literal> <operator>+</operator>
                    <literal type="string">"[Til Morning's Light](http://www.amazon.com/Amazon-Game-Studios-Mornings-Light/dp/B00QSMKS8S) | Paid | Phone+Tablet | Erica Page is an ordinary teenage girl, just trying to fit in. Sheâs also trapped in a mansion haunted by a 200 year-old curse. You know, the normal stuff. Help her explore the huge, creepy, and not exactly empty mansion, revealing its darkest secrets and hopefully a way out. There are clues to decipher, tools to collect, and puzzles to solve. If all else fails, Erica can beat the goo out of supernatural nasties with an arsenal of clubs, knives, and swords. Oh, did we forget to tell you? Erica has to escape by dawn, or sheâll become the next ghost in the mansion! | amazon-appstore-help@amazon.com\n"</literal> <operator>+</operator>
                    <literal type="string">"[Vainglory](https://play.google.com/store/apps/details?id=com.superevilmegacorp.game) | Free | Phone+Tablet | Welcome to the Halcyon Fold. Here, magic clashes with technology, alliances forge in the heat of combat and cunning strategy wins the day. But no one fights alone. Join with friends in free-to-play, 3-vs-3 multiplayer online arena battles (MOBA). Choose from an ever-growing roster of 25+ heroes as you battle to destroy the enemy Vain crystal. | feedback@superevilmegacorp.com\n"</literal> <operator>+</operator>
                    <literal type="string">"[Wayward Souls](https://play.google.com/store/apps/details?id=com.noodlecake.waywardsouls) | Paid | Phone+Tablet | Wayward Souls is an action-adventure game built for quick playthroughs and massive amounts of replay value. It was inspired by Spelunky, Secret of Mana, and our previous game, Mage Gauntlet. Procedurally generated random levels mean that every time you play the game, it's a different experience. Control one of six characters, all with their own unique playstyles, abilities, and equipment. Explore and fight for survival, in combat where your tactics, positioning, and timing matter. | support+android@noodlecake.com\n"</literal> <operator>+</operator>
                    <literal type="string">"[World of Tanks Blitz](https://play.google.com/store/apps/details?id=net.wargaming.wot.blitz) | Free | Phone+Tablet | This hit free-to-win mobile MMO action game developed by Wargaming throws you into quick-fire tank combat inspired by WW2. Mobilize in over 200 massive tanks in stunning detail! Storm the frontlines with intuitive touch-screen controls built specifically for optimal online mobile gameplay.  | blitz_android_support@wargaming.net"</literal></expr></init></decl>;</decl_stmt>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/mock/java/subreddit/android/appstore/backend/github/GithubRepositoryModule.java" hash="deb0b7b953bbf9f62964631f538809a884823fe4"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>github</name></name>;</package>

<import>import <name><name>dagger</name><operator>.</operator><name>Module</name></name>;</import>
<import>import <name><name>dagger</name><operator>.</operator><name>Provides</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>dagger</name><operator>.</operator><name>ApplicationScope</name></name>;</import>


<class><annotation>@<name>Module</name></annotation>
<specifier>public</specifier> class <name>GithubRepositoryModule</name> <block>{
    <function><annotation>@<name>Provides</name></annotation>
    <annotation>@<name>ApplicationScope</name></annotation>
    <specifier>public</specifier> <type><name>GithubRepository</name></type> <name>provideGithubRepository</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>FakeGithubRepository</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/mock/java/subreddit/android/appstore/backend/github/FakeGithubRepository.java" hash="95f4e5e4efe47f6719a092cda52ba9dc2098e34a"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>github</name></name>;</package>


<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Calendar</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>GregorianCalendar</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>Observable</name></name>;</import>

<class><specifier>public</specifier> class <name>FakeGithubRepository</name> <super><implements>implements <name>GithubRepository</name></implements></super> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>GithubApi</name><operator>.</operator><name>Release</name></name></argument>&gt;</argument_list></name></type> <name>getLatestRelease</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>GithubApi</name><operator>.</operator><name>Release</name></name></type> <name>release</name> <init>= <expr><operator>new</operator> <call><name><name>GithubApi</name><operator>.</operator><name>Release</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>release</name><operator>.</operator><name>releaseName</name></name> <operator>=</operator> <literal type="string">"A Fabulous Release"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>release</name><operator>.</operator><name>tagName</name></name> <operator>=</operator> <literal type="string">"v100.100.100"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>release</name><operator>.</operator><name>publishDate</name></name> <operator>=</operator> <operator>new</operator> <call><name>GregorianCalendar</name><argument_list>(<argument><expr><literal type="number">2017</literal></expr></argument>, <argument><expr><name><name>Calendar</name><operator>.</operator><name>MARCH</name></name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>release</name><operator>.</operator><name>releaseDescription</name></name> <operator>=</operator> <literal type="string">"This update fixes x, x, x"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>release</name><operator>.</operator><name>assets</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>GithubApi</name><operator>.</operator><name>Release</name><operator>.</operator><name>Assets</name></name></type> <name>a</name> <init>= <expr><operator>new</operator> <call><name><name>GithubApi</name><operator>.</operator><name>Release</name><operator>.</operator><name>Assets</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>a</name><operator>.</operator><name>downloadUrl</name></name> <operator>=</operator> <literal type="string">"https://github.com/d4rken/reddit-android-appstore/releases/download/v0.6.0/rAndroid_AppStore-v0.6.0.6000.-RELEASE-ee4ee75.apk"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>release</name><operator>.</operator><name>assets</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>just</name></name><argument_list>(<argument><expr><name>release</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>GithubApi</name><operator>.</operator><name>Contributor</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getContributors</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>GithubApi</name><operator>.</operator><name>Contributor</name></name></argument>&gt;</argument_list></name></type> <name>contributors</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>GithubApi</name><operator>.</operator><name>Contributor</name></name></type> <name>c1</name> <init>= <expr><operator>new</operator> <call><name><name>GithubApi</name><operator>.</operator><name>Contributor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>c1</name><operator>.</operator><name>username</name></name> <operator>=</operator> <literal type="string">"d4rken"</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>GithubApi</name><operator>.</operator><name>Contributor</name></name></type> <name>c2</name> <init>= <expr><operator>new</operator> <call><name><name>GithubApi</name><operator>.</operator><name>Contributor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>c2</name><operator>.</operator><name>username</name></name> <operator>=</operator> <literal type="string">"bobheadxi"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>contributors</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>contributors</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>just</name></name><argument_list>(<argument><expr><name>contributors</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/AndroidModule.java" hash="6edf2a178c740c2669d0c07632b8d4ae202afc92"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceManager</name></name>;</import>

<import>import <name><name>dagger</name><operator>.</operator><name>Module</name></name>;</import>
<import>import <name><name>dagger</name><operator>.</operator><name>Provides</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>dagger</name><operator>.</operator><name>ApplicationScope</name></name>;</import>


<class><annotation>@<name>Module</name></annotation>
<specifier>public</specifier> class <name>AndroidModule</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>AppStoreApp</name></type> <name>app</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>AndroidModule</name><parameter_list>(<parameter><decl><type><name>AppStoreApp</name></type> <name>app</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name><name>this</name><operator>.</operator><name>app</name></name> <operator>=</operator> <name>app</name></expr>;</expr_stmt>}</block></constructor>

    <function><annotation>@<name>Provides</name></annotation>
    <annotation>@<name>ApplicationScope</name></annotation>
    <specifier>public</specifier> <type><name>Context</name></type> <name>provideContext</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>app</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Provides</name></annotation>
    <annotation>@<name>ApplicationScope</name></annotation>
    <specifier>public</specifier> <type><name>SharedPreferences</name></type> <name>providePreferences</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/AppComponent.java" hash="21d2558fa14fc0ca41cad5829751c02fca455cc0"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>

<import>import <name><name>dagger</name><operator>.</operator><name>Component</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>github</name><operator>.</operator><name>GithubRepository</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>github</name><operator>.</operator><name>GithubRepositoryModule</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>wiki</name><operator>.</operator><name>WikiRepository</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>wiki</name><operator>.</operator><name>WikiRepositoryModule</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>scrapers</name><operator>.</operator><name>MediaScraper</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>scrapers</name><operator>.</operator><name>ScraperModule</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>HttpModule</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>dagger</name><operator>.</operator><name>ApplicationScope</name></name>;</import>


<interface><annotation>@<name>ApplicationScope</name></annotation>
<annotation>@<name>Component</name><argument_list>(<argument><expr><name>modules</name> <operator>=</operator> <block>{
        <expr><name><name>AndroidModule</name><operator>.</operator><name>class</name></name></expr>,
        <argument><expr><name><name>WikiRepositoryModule</name><operator>.</operator><name>class</name></name></expr></argument>,
        <argument><expr><name><name>ScraperModule</name><operator>.</operator><name>class</name></name></expr></argument>,
        <argument><expr><name><name>GithubRepositoryModule</name><operator>.</operator><name>class</name></name></expr></argument>,
        <argument><expr><name><name>HttpModule</name><operator>.</operator><name>class</name></name></expr></argument>
}</block></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> interface <name>AppComponent</name> <block>{
    <function_decl><type><name>SharedPreferences</name></type> <name>providePreferences</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name>WikiRepository</name></type> <name>wikiRepository</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name>MediaScraper</name></type> <name>mediaScraper</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name>GithubRepository</name></type> <name>githubRepository</name><parameter_list>()</parameter_list>;</function_decl>
}</block></interface>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/util/ObjectRetainLoader.java" hash="26527e3ba0f9d22f05b79e2684652dab7f0907e0"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>content</name><operator>.</operator><name>Loader</name></name>;</import>


<class><specifier>public</specifier> class <name><name>ObjectRetainLoader</name><parameter_list>&lt;<parameter><name>TypeT</name></parameter>&gt;</parameter_list></name> <super><extends>extends <name><name>Loader</name><argument_list type="generic">&lt;<argument><name>TypeT</name></argument>&gt;</argument_list></name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><name><name>TypedObjectFactory</name><argument_list type="generic">&lt;<argument><name>TypeT</name></argument>&gt;</argument_list></name></type> <name>typedObjectFactory</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>TypeT</name></type> <name>objectToRetain</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ObjectRetainLoader</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>TypedObjectFactory</name><argument_list type="generic">&lt;<argument><name>TypeT</name></argument>&gt;</argument_list></name></type> <name>typedObjectFactory</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>typedObjectFactory</name></name> <operator>=</operator> <name>typedObjectFactory</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onStartLoading</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onStartLoading</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>objectToRetain</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>deliverResult</name><argument_list>(<argument><expr><name>objectToRetain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>forceLoad</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>forceLoad</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>createObjectToRetain</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>clearDataAfterCreation</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>deliverResult</name><argument_list>(<argument><expr><name>objectToRetain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>TypeT</name></type> <name>getObject</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>objectToRetain</name></expr>;</return>
    }</block></function>

    <function><specifier>protected</specifier> <type><name>void</name></type> <name>createObjectToRetain</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>objectToRetain</name> <operator>=</operator> <call><name><name>typedObjectFactory</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>protected</specifier> <type><name>void</name></type> <name>clearDataAfterCreation</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>typedObjectFactory</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/mock/java/subreddit/android/appstore/backend/reddit/wiki/FakeWikiRepository.java" hash="658d28b9457a5a9c3ccd0243d0eb39eddd975abf"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>wiki</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Random</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>

<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>Observable</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>subjects</name><operator>.</operator><name>ReplaySubject</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppInfo</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppTags</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>wiki</name><operator>.</operator><name>parser</name><operator>.</operator><name>EncodingFixer</name></name>;</import>


<class><specifier>public</specifier> class <name>FakeWikiRepository</name> <super><implements>implements <name>WikiRepository</name></implements></super> <block>{
    <decl_stmt><decl><type><name><name>ReplaySubject</name><argument_list type="generic">&lt;<argument><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>AppInfo</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>replaySubject</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>FakeWikiRepository</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>AppInfo</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getAppList</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>replaySubject</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>replaySubject</name> <operator>=</operator> <call><name><name>ReplaySubject</name><operator>.</operator><name>createWithSize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>refresh</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>replaySubject</name></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>AppInfo</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>loadData</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>EncodingFixer</name></type> <name>encodingFixer</name> <init>= <expr><operator>new</operator> <call><name>EncodingFixer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>defer</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
            <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>AppInfo</name></argument>&gt;</argument_list></name></type> <name>testValues</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>AppInfo</name></type> <name>app1</name> <init>= <expr><operator>new</operator> <call><name>AppInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>app1</name><operator>.</operator><name>setAppName</name></name><argument_list>(<argument><expr><literal type="string">"Awesome app 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>app1</name><operator>.</operator><name>setDescription</name></name><argument_list>(<argument><expr><literal type="string">"This is awesome app 1. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>app1</name><operator>.</operator><name>setCategories</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><literal type="string">"primary"</literal></expr></argument>, <argument><expr><literal type="string">"secondary"</literal></expr></argument>, <argument><expr><literal type="string">"tertiary"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>app1</name><operator>.</operator><name>addTag</name></name><argument_list>(<argument><expr><name><name>AppTags</name><operator>.</operator><name>FREE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>app1</name><operator>.</operator><name>addTag</name></name><argument_list>(<argument><expr><name><name>AppTags</name><operator>.</operator><name>PHONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>testValues</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>app1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>AppInfo</name></type> <name>app2</name> <init>= <expr><operator>new</operator> <call><name>AppInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>app2</name><operator>.</operator><name>setAppName</name></name><argument_list>(<argument><expr><literal type="string">"Awesome app 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>app2</name><operator>.</operator><name>setDescription</name></name><argument_list>(<argument><expr><literal type="string">"This is awesome app 2. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>app2</name><operator>.</operator><name>setCategories</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><literal type="string">"primary"</literal></expr></argument>, <argument><expr><literal type="string">"secondary"</literal></expr></argument>, <argument><expr><literal type="string">"tertiary"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>app2</name><operator>.</operator><name>addTag</name></name><argument_list>(<argument><expr><name><name>AppTags</name><operator>.</operator><name>TABLET</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>app2</name><operator>.</operator><name>addTag</name></name><argument_list>(<argument><expr><name><name>AppTags</name><operator>.</operator><name>WEAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>app2</name><operator>.</operator><name>addTag</name></name><argument_list>(<argument><expr><name><name>AppTags</name><operator>.</operator><name>PAID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>app2</name><operator>.</operator><name>addTag</name></name><argument_list>(<argument><expr><name><name>AppTags</name><operator>.</operator><name>NEW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>testValues</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>app2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Test app with bold and link markdown in description</comment>
            <decl_stmt><decl><type><name>AppInfo</name></type> <name>app3</name> <init>= <expr><operator>new</operator> <call><name>AppInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>app3</name><operator>.</operator><name>setAppName</name></name><argument_list>(<argument><expr><literal type="string">"Markdown Test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>app3</name><operator>.</operator><name>setDescription</name></name><argument_list>(
                    <argument><expr><call><name><name>encodingFixer</name><operator>.</operator><name>convertMarkdownToHtml</name></name><argument_list>(<argument><expr><literal type="string">"Tutorial **screencast** for [Propellerheads Reason](https://www.propellerheads.se/products/reason/)"</literal></expr></argument>)</argument_list></call></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>app3</name><operator>.</operator><name>setCategories</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><literal type="string">"Testing"</literal></expr></argument>, <argument><expr><literal type="string">"Examples"</literal></expr></argument>, <argument><expr><literal type="string">"Descriptions"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>app3</name><operator>.</operator><name>addTag</name></name><argument_list>(<argument><expr><name><name>AppTags</name><operator>.</operator><name>WEAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>app3</name><operator>.</operator><name>addTag</name></name><argument_list>(<argument><expr><name><name>AppTags</name><operator>.</operator><name>PAID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>app3</name><operator>.</operator><name>addTag</name></name><argument_list>(<argument><expr><name><name>AppTags</name><operator>.</operator><name>NEW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>testValues</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>app3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Test app with Subreddit link conversion</comment>
            <decl_stmt><decl><type><name>AppInfo</name></type> <name>app4</name> <init>= <expr><operator>new</operator> <call><name>AppInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>app4</name><operator>.</operator><name>setAppName</name></name><argument_list>(<argument><expr><literal type="string">"Subreddit Link Conversion Test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>app4</name><operator>.</operator><name>setDescription</name></name><argument_list>(
                    <argument><expr><call><name><name>encodingFixer</name><operator>.</operator><name>convertSubredditsToLinks</name></name><argument_list>(<argument><expr><literal type="string">"Wow! /r/Android is the bestest ever."</literal></expr></argument>)</argument_list></call></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>app4</name><operator>.</operator><name>setCategories</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><literal type="string">"Testing"</literal></expr></argument>, <argument><expr><literal type="string">"Examples"</literal></expr></argument>, <argument><expr><literal type="string">"Descriptions"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>app4</name><operator>.</operator><name>addTag</name></name><argument_list>(<argument><expr><name><name>AppTags</name><operator>.</operator><name>WEAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>app4</name><operator>.</operator><name>addTag</name></name><argument_list>(<argument><expr><name><name>AppTags</name><operator>.</operator><name>PAID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>app4</name><operator>.</operator><name>addTag</name></name><argument_list>(<argument><expr><name><name>AppTags</name><operator>.</operator><name>NEW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>testValues</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>app4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
                <decl_stmt><decl><type><name>AppInfo</name></type> <name>randomApp</name> <init>= <expr><operator>new</operator> <call><name>AppInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>randomApp</name><operator>.</operator><name>setAppName</name></name><argument_list>(<argument><expr><call><name><name>UUID</name><operator>.</operator><name>randomUUID</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" app"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>randomApp</name><operator>.</operator><name>setDescription</name></name><argument_list>(<argument><expr><call><name><name>UUID</name><operator>.</operator><name>randomUUID</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>randomApp</name><operator>.</operator><name>setCategories</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><literal type="string">"primary"</literal></expr></argument>, <argument><expr><literal type="string">"secondary"</literal></expr></argument>, <argument><expr><literal type="string">"tertiary"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
                    <comment type="line">//randomApp.addTag(randomEnum(AppTags.class));</comment>
                    <expr_stmt><expr><call><name><name>randomApp</name><operator>.</operator><name>addTag</name></name><argument_list>(<argument><expr><name><name>AppTags</name><operator>.</operator><name>WEAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
                <expr_stmt><expr><call><name><name>testValues</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>randomApp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>just</name></name><argument_list>(<argument><expr><name>testValues</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></lambda></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>refresh</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>loadData</name><argument_list>()</argument_list></call><operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>appInfos</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>replaySubject</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><name>appInfos</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name> <extends>extends <name><name>Enum</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></extends></parameter>&gt;</parameter_list> <type><name>T</name></type> <name>randomEnum</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>clazz</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><operator>new</operator> <call><name>Random</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextInt</name><argument_list>(<argument><expr><call><name><name>clazz</name><operator>.</operator><name>getEnumConstants</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>clazz</name><operator>.</operator><name>getEnumConstants</name></name><argument_list>()</argument_list></call><index>[<expr><name>x</name></expr>]</index></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/util/Preconditions.java" hash="a96adac6f79ce1b88e5876620ceb5f05a91afd7a"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name></name>;</package>


<class><specifier>public</specifier> class <name>Preconditions</name> <block>{
    <comment type="block" format="javadoc">/**
     * Ensures that an object reference passed as a parameter to the calling
     * method is not null.
     *
     * @param reference an object reference
     * @return the non-null reference that was validated
     * @throws NullPointerException if {@code reference} is null
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <type><name>T</name></type> <name>checkNotNull</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>T</name></type> <name>reference</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>reference</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><name>reference</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/util/TypedObjectFactory.java" hash="c0bb8cb778738f3d42e41784f2c2c433041ac620"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name></name>;</package>

<interface><specifier>public</specifier> interface <name><name>TypedObjectFactory</name><parameter_list>&lt;<parameter><name>TypeT</name></parameter>&gt;</parameter_list></name> <block>{
    <function_decl><type><name>TypeT</name></type> <name>create</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>TypeT</name></extends></argument>&gt;</argument_list></name></type> <name>getTypeClazz</name><parameter_list>()</parameter_list>;</function_decl>
}</block></interface>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/util/RealmString.java" hash="72da260990891e755bf29b5302f38df762707de5"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>

<import>import <name><name>io</name><operator>.</operator><name>realm</name><operator>.</operator><name>RealmList</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>realm</name><operator>.</operator><name>RealmObject</name></name>;</import>


<class><specifier>public</specifier> class <name>RealmString</name> <super><extends>extends <name>RealmObject</name></extends></super> <block>{
    <decl_stmt><decl><type><name>String</name></type> <name>aString</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>RealmString</name><parameter_list>()</parameter_list> <block>{

    }</block></constructor>

    <constructor><specifier>public</specifier> <name>RealmString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>aString</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>aString</name></name> <operator>=</operator> <name>aString</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>RealmList</name><argument_list type="generic">&lt;<argument><name>RealmString</name></argument>&gt;</argument_list></name></type> <name>fromCollection</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>stringCollection</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>RealmList</name><argument_list type="generic">&lt;<argument><name>RealmString</name></argument>&gt;</argument_list></name></type> <name>realmStrings</name> <init>= <expr><operator>new</operator> <call><name><name>RealmList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>string</name> <range>: <expr><name>stringCollection</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><call><name><name>realmStrings</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>RealmString</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
        <return>return <expr><name>realmStrings</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>toCollection</name><parameter_list>(<parameter><decl><type><name><name>RealmList</name><argument_list type="generic">&lt;<argument><name>RealmString</name></argument>&gt;</argument_list></name></type> <name>realmStrings</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>stringCollection</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>RealmString</name></type> <name>realmString</name> <range>: <expr><name>realmStrings</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><call><name><name>stringCollection</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>realmString</name><operator>.</operator><name>aString</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
        <return>return <expr><name>stringCollection</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/util/VersionHelper.java" hash="fb42b2ba524953e27b8d0b04d02d5b047b6ee5d5"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name></name>;</package>

<class><specifier>public</specifier> class <name>VersionHelper</name> <block>{

    <comment type="line">// http://stackoverflow.com/a/6702029/1251958</comment>

    <comment type="block" format="javadoc">/**
     * Compares two version strings.
     * &lt;p&gt;
     * Use this instead of String.compareTo() for a non-lexicographical
     * comparison that works for version strings. e.g. "1.10".compareTo("1.6").
     * &lt;p&gt;
     *
     * @param current    a string of ordinal numbers separated by decimal points.
     * @param newVersion a string of ordinal numbers separated by decimal points.
     * @return The result is a negative integer if str1 is _numerically_ less than str2.
     * The result is a positive integer if str1 is _numerically_ greater than str2.
     * The result is zero if the strings are _numerically_ equal.
     * @note It does not work if "1.10" is supposed to be equal to "1.10.0".
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>versionCompare</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>current</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>newVersion</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>current</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"v"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>current</name> <operator>=</operator> <call><name><name>current</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><call><name><name>current</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>current</name> <operator>=</operator> <call><name><name>current</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>current</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><call><name><name>newVersion</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"v"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>newVersion</name> <operator>=</operator> <call><name><name>newVersion</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><call><name><name>newVersion</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>newVersion</name> <operator>=</operator> <call><name><name>newVersion</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>newVersion</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>vals1</name> <init>= <expr><call><name><name>current</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"\\."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>vals2</name> <init>= <expr><call><name><name>newVersion</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"\\."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">// set index to first non-equal ordinal or length of shortest version string</comment>
        <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>vals1</name><operator>.</operator><name>length</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>vals2</name><operator>.</operator><name>length</name></name> <operator>&amp;&amp;</operator> <name><name>vals1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>vals2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
            <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
        }</block></while>
        <comment type="line">// compare first non-equal ordinal number</comment>
        <if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>vals1</name><operator>.</operator><name>length</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>vals2</name><operator>.</operator><name>length</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>vals1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>vals2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>signum</name></name><argument_list>(<argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <comment type="line">// the strings are equal or one string is a substring of the other</comment>
        <comment type="line">// e.g. "1.2.3" = "1.2.3" or "1.2.3" &lt; "1.2.3.4"</comment>
        <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>signum</name></name><argument_list>(<argument><expr><name><name>vals1</name><operator>.</operator><name>length</name></name> <operator>-</operator> <name><name>vals2</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/AppStoreApp.java" hash="a6df69a93c895713cde36311e35673ea6241a3ff"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Application</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>Signature</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceManager</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>squareup</name><operator>.</operator><name>leakcanary</name><operator>.</operator><name>LeakCanary</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>squareup</name><operator>.</operator><name>leakcanary</name><operator>.</operator><name>RefWatcher</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>MessageDigest</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>cert</name><operator>.</operator><name>CertificateFactory</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>cert</name><operator>.</operator><name>X509Certificate</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>io</name><operator>.</operator><name>realm</name><operator>.</operator><name>Realm</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>realm</name><operator>.</operator><name>RealmConfiguration</name></name>;</import>
<import>import <name><name>timber</name><operator>.</operator><name>log</name><operator>.</operator><name>Timber</name></name>;</import>


<class><specifier>public</specifier> class <name>AppStoreApp</name> <super><extends>extends <name>Application</name></extends></super> <block>{
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>LOGPREFIX</name> <init>= <expr><literal type="string">"RAS:"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>GITHUB_SIGNATURE</name> <init>= <expr><literal type="string">"FC4E2523E3509BA56E6AFDC36004958E2E94EAB2"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>RefWatcher</name></type> <name>refWatcher</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>theme</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>RefWatcher</name></type> <name>getRefWatcher</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>refWatcher</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>BuildConfig</name><operator>.</operator><name>DEBUG</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>Timber</name><operator>.</operator><name>plant</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>Timber</name><operator>.</operator><name>DebugTree</name></name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>protected</specifier> <type><name>void</name></type> <name>log</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>priority</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>message</name></decl></parameter>,
                                   <parameter><decl><type><specifier>final</specifier> <name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>log</name></name><argument_list>(<argument><expr><name>priority</name></expr></argument>, <argument><expr><name>LOGPREFIX</name> <operator>+</operator> <name>tag</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>clearCache</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>prefs</name> <init>= <expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>refWatcher</name> <operator>=</operator> <call><name><name>LeakCanary</name><operator>.</operator><name>install</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Injector</name><operator>.</operator><name>INSTANCE</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>theme</name> <operator>=</operator> <call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"theme"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>clearCache</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>prefs</name> <init>= <expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>prefs</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="string">"APP_VERSION"</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>&lt;</operator><name><name>BuildConfig</name><operator>.</operator><name>VERSION_CODE</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>Timber</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><literal type="string">"New release on %s, clearing cache database"</literal></expr></argument>, <argument><expr><name><name>BuildConfig</name><operator>.</operator><name>VERSION_NAME</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Realm</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Realm</name></type> <name>realm</name> <init>= <expr><call><name><name>Realm</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>realm</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Realm</name><operator>.</operator><name>deleteRealm</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>RealmConfiguration</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>putInt</name><argument_list>(<argument><expr><literal type="string">"APP_VERSION"</literal></expr></argument>,<argument><expr><name><name>BuildConfig</name><operator>.</operator><name>VERSION_CODE</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>getSetTheme</name><parameter_list>()</parameter_list> <block>{
        <switch>switch <condition>(<expr><name>theme</name></expr>)</condition> <block>{
            <case>case <expr><literal type="number">0</literal></expr>:</case>
                <return>return <expr><name><name>R</name><operator>.</operator><name>style</name><operator>.</operator><name>AppTheme</name></name></expr>;</return>
            <case>case <expr><literal type="number">1</literal></expr>:</case>
                <return>return <expr><name><name>R</name><operator>.</operator><name>style</name><operator>.</operator><name>AppTheme_Dark</name></name></expr>;</return>
            <case>case <expr><literal type="number">2</literal></expr>:</case>
                <return>return <expr><name><name>R</name><operator>.</operator><name>style</name><operator>.</operator><name>AppTheme_Black</name></name></expr>;</return>
        }</block></switch>
        <return>return <expr><name><name>R</name><operator>.</operator><name>style</name><operator>.</operator><name>AppTheme</name></name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>restart</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>theme</name> <operator>=</operator> <call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><literal type="string">"theme"</literal></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Intent</name></type> <name>i</name> <init>= <expr><call><name>getBaseContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPackageManager</name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>getLaunchIntentForPackage</name><argument_list>(<argument><expr><call><name>getBaseContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPackageName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>i</name><operator>.</operator><name>addFlags</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>FLAG_ACTIVITY_CLEAR_TOP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <enum><specifier>public</specifier> enum <name>Injector</name> <block>{
        <decl><name>INSTANCE</name></decl>;
        <decl_stmt><decl><type><name>AppComponent</name></type> <name>appComponent</name></decl>;</decl_stmt>

        <constructor><name>Injector</name><parameter_list>()</parameter_list> <block>{
        }</block></constructor>

        <function><type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>AppStoreApp</name></type> <name>app</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Realm</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>app</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>RealmConfiguration</name></type> <name>realmConfig</name> <init>= <expr><operator>new</operator> <call><name><name>RealmConfiguration</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call>
                    <operator>.</operator><call><name>deleteRealmIfMigrationNeeded</name><argument_list>()</argument_list></call>
                    <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>Realm</name><operator>.</operator><name>setDefaultConfiguration</name></name><argument_list>(<argument><expr><name>realmConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>appComponent</name> <operator>=</operator> <call><name><name>DaggerAppComponent</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call>
                    <operator>.</operator><call><name>androidModule</name><argument_list>(<argument><expr><operator>new</operator> <call><name>AndroidModule</name><argument_list>(<argument><expr><name>app</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><specifier>public</specifier> <type><name>AppComponent</name></type> <name>getAppComponent</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>appComponent</name></expr>;</return>
        }</block></function>
    }</block></enum>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getSignatures</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>packageName</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>foundSignatures</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>Signature</name><index>[]</index></name></type> <name>signatures</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getPackageManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPackageInfo</name><argument_list>(<argument><expr><name>packageName</name></expr></argument>, <argument><expr><name><name>PackageManager</name><operator>.</operator><name>GET_SIGNATURES</name></name></expr></argument>)</argument_list></call><operator>.</operator><name>signatures</name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><specifier>final</specifier> <name>Signature</name></type> <name>sig</name> <range>: <expr><name>signatures</name></expr></range></decl></init>)</control> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>rawCert</name> <init>= <expr><call><name><name>sig</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>InputStream</name></type> <name>certStream</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><name>rawCert</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>CertificateFactory</name></type> <name>certFactory</name> <init>= <expr><call><name><name>CertificateFactory</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"X509"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>X509Certificate</name></type> <name>x509Cert</name> <init>= <expr><operator>(</operator><name>X509Certificate</name><operator>)</operator> <call><name><name>certFactory</name><operator>.</operator><name>generateCertificate</name></name><argument_list>(<argument><expr><name>certStream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>MessageDigest</name></type> <name>md</name> <init>= <expr><call><name><name>MessageDigest</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"SHA1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>publicKey</name> <init>= <expr><call><name><name>md</name><operator>.</operator><name>digest</name></name><argument_list>(<argument><expr><call><name><name>x509Cert</name><operator>.</operator><name>getEncoded</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>foundSignatures</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>bytesToHex</name><argument_list>(<argument><expr><name>publicKey</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toUpperCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block></catch></try>
        <return>return <expr><name>foundSignatures</name></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>bytesToHex</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>out</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>byte</name></type> <name>b</name> <range>: <expr><name>in</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
        <return>return <expr><call><name><name>out</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/util/ui/BaseFragment.java" hash="ff9af866548b3a5565c191b7471198a95fee90ac"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>

<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>AppStoreApp</name></name>;</import>


<class><specifier>public</specifier> class <name>BaseFragment</name> <super><extends>extends <name>Fragment</name></extends></super> <block>{

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDestroy</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDestroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>AppStoreApp</name><operator>.</operator><name>getRefWatcher</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>watch</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/util/ui/BaseActivity.java" hash="349374227b7500e1c862aa37e15396c8c84ef374"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>PersistableBundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>AppCompatActivity</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>AppStoreApp</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>screens</name><operator>.</operator><name>MainActivity</name></name>;</import>
<import>import <name><name>timber</name><operator>.</operator><name>log</name><operator>.</operator><name>Timber</name></name>;</import>


<class><specifier>public</specifier> class <name>BaseActivity</name> <super><extends>extends <name>AppCompatActivity</name></extends></super> <block>{


    <comment type="block" format="javadoc">/**
     * Use {@code 2} as initial capacity for the navigation and tag drawers in {@link MainActivity},
     * as it's the most used case
     */</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>OnBackKeyPressedListener</name></argument>&gt;</argument_list></name></type> <name>onBackKeyPressedListeners</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setTheme</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>AppStoreApp</name><operator>)</operator> <call><name>getApplication</name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getSetTheme</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>, <parameter><decl><type><name>PersistableBundle</name></type> <name>persistentState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setTheme</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>AppStoreApp</name><operator>)</operator> <call><name>getApplication</name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getSetTheme</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>, <argument><expr><name>persistentState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onDestroy</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDestroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>AppStoreApp</name><operator>.</operator><name>getRefWatcher</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>watch</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onBackPressed</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>handled</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>OnBackKeyPressedListener</name></type> <name>listener</name> <range>: <expr><name>onBackKeyPressedListeners</name></expr></range></decl></init>)</control> <block>{
            <if>if <condition>(<expr><call><name><name>listener</name><operator>.</operator><name>onBackKeyPressed</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>handled</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></for>

        <if>if <condition>(<expr><operator>!</operator><name>handled</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onBackPressed</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>addOnBackKeyPressedListener</name><parameter_list>(<parameter><decl><type><name>OnBackKeyPressedListener</name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><operator>!</operator><call><name><name>onBackKeyPressedListeners</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>onBackKeyPressedListeners</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>Timber</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"A back key listener was added twice"</literal></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><literal type="string">"A back key listener was added twice: %s"</literal></expr></argument>, <argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>removeOnBackKeyPressedListener</name><parameter_list>(<parameter><decl><type><name>OnBackKeyPressedListener</name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>onBackKeyPressedListeners</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>onBackKeyPressedListeners</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>Timber</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"A back key listener was removed but never added"</literal></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><literal type="string">"A back key listener was removed but never added: %s"</literal></expr></argument>, <argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <interface><specifier>public</specifier> interface <name>OnBackKeyPressedListener</name> <block>{
        <comment type="block" format="javadoc">/**
         * @return true if the event was handled, false otherwise
         */</comment>
        <function_decl><type><name>boolean</name></type> <name>onBackKeyPressed</name><parameter_list>()</parameter_list>;</function_decl>
    }</block></interface>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/util/ui/BaseAdapter.java" hash="ffef347111871aa8aef251bdcfa5d39897f7e794"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>RecyclerView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>


<class><specifier>public</specifier> <specifier>abstract</specifier> class <name><name>BaseAdapter</name><parameter_list>&lt;<parameter><name>ViewHolderT</name> <extends>extends <name>BaseViewHolder</name></extends></parameter>&gt;</parameter_list></name> <super><extends>extends <name><name>RecyclerView</name><operator>.</operator><name><name>Adapter</name><argument_list type="generic">&lt;<argument><name>ViewHolderT</name></argument>&gt;</argument_list></name></name></extends> <implements>implements
        <name><name>BaseViewHolder</name><operator>.</operator><name>LongClickListener</name></name>, <name><name>BaseViewHolder</name><operator>.</operator><name>ClickListener</name></name></implements></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>BaseViewHolder</name><operator>.</operator><name>LongClickListener</name></name></type> <name>mLongClickListener</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>BaseViewHolder</name><operator>.</operator><name>ClickListener</name></name></type> <name>mClickListener</name></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>ViewHolderT</name></type> <name>onCreateViewHolder</name><parameter_list>(<parameter><decl><type><name>ViewGroup</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>viewType</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>ViewHolderT</name></type> <name>viewHolder</name> <init>= <expr><call><name>onCreateSDMViewHolder</name><argument_list>(<argument><expr><call><name><name>LayoutInflater</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><call><name><name>parent</name><operator>.</operator><name>getContext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>viewType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>viewHolder</name><operator>.</operator><name>setAdapterClickListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewHolder</name><operator>.</operator><name>setAdapterLongClickListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>viewHolder</name></expr>;</return>
    }</block></function>

    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>ViewHolderT</name></type> <name>onCreateSDMViewHolder</name><parameter_list>(<parameter><decl><type><name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>, <parameter><decl><type><name>ViewGroup</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>viewType</name></decl></parameter>)</parameter_list>;</function_decl>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onBindViewHolder</name><parameter_list>(<parameter><decl><type><name>ViewHolderT</name></type> <name>holder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>onBindSDMViewHolder</name><argument_list>(<argument><expr><name>holder</name></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>onBindSDMViewHolder</name><parameter_list>(<parameter><decl><type><name>ViewHolderT</name></type> <name>_holder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list>;</function_decl>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setItemClickListener</name><parameter_list>(<parameter><decl><type><name><name>BaseViewHolder</name><operator>.</operator><name>ClickListener</name></name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>mClickListener</name> <operator>=</operator> <name>listener</name></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setItemLongClickListener</name><parameter_list>(<parameter><decl><type><name><name>BaseViewHolder</name><operator>.</operator><name>LongClickListener</name></name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>mLongClickListener</name> <operator>=</operator> <name>listener</name></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onItemClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>itemId</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><name>mClickListener</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>mClickListener</name><operator>.</operator><name>onItemClick</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>itemId</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onItemLongClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>itemId</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><name>mLongClickListener</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>mLongClickListener</name><operator>.</operator><name>onItemLongClick</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>itemId</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onViewRecycled</name><parameter_list>(<parameter><decl><type><name>ViewHolderT</name></type> <name>holder</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onViewRecycled</name></name><argument_list>(<argument><expr><name>holder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>

</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/util/ui/FullHeightNavView.java" hash="854ace078a68019e7f8813e38dae4854a91256d2"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>design</name><operator>.</operator><name>widget</name><operator>.</operator><name>NavigationView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>

<class><specifier>public</specifier> class <name>FullHeightNavView</name> <super><extends>extends <name>NavigationView</name></extends></super> <block>{
    <constructor><specifier>public</specifier> <name>FullHeightNavView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>FullHeightNavView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>FullHeightNavView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defStyleAttr</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>defStyleAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onMeasure</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>widthSpec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>heightSpec</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onMeasure</name></name><argument_list>(<argument><expr><name>widthSpec</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class></unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/util/ui/glide/GlideConfigModule.java" hash="249921457cd2af73f9ece8bd5f8639aee4832356"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>ui</name><operator>.</operator><name>glide</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>Glide</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>GlideBuilder</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>Registry</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>annotation</name><operator>.</operator><name>GlideExtension</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>annotation</name><operator>.</operator><name>GlideModule</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>annotation</name><operator>.</operator><name>GlideOption</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>annotation</name><operator>.</operator><name>GlideType</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>module</name><operator>.</operator><name>AppGlideModule</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>

<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>AppStoreApp</name></name>;</import>

<comment type="block" format="javadoc">/**
 * {@link GlideModule} along with the annotation processor from Glide causes a
 * {@link GlideApp} to be generated inside this package. The generated class
 * merges APIs from {@link GlideExtension} marked classes.
 * Such marked classes can contribute {@link GlideOption} and {@link GlideType}
 * to the generated API.
 */</comment>
<class><annotation>@<name>GlideModule</name></annotation>
<specifier>public</specifier> class <name>GlideConfigModule</name> <super><extends>extends <name>AppGlideModule</name></extends></super> <block>{

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>applyOptions</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>GlideBuilder</name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
<comment type="line">//        builder.setDefaultRequestOptions(RequestOptions.diskCacheStrategyOf(DiskCacheStrategy.NONE));</comment>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>registerComponents</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Glide</name></type> <name>glide</name></decl></parameter>, <parameter><decl><type><name>Registry</name></type> <name>registry</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>registry</name><operator>.</operator><name>append</name></name><argument_list>(
                <argument><expr><name><name>IconRequest</name><operator>.</operator><name>class</name></name></expr></argument>,
                <argument><expr><name><name>InputStream</name><operator>.</operator><name>class</name></name></expr></argument>,
                <argument><expr><operator>new</operator> <call><name><name>IconRequestModelLoader</name><operator>.</operator><name>Factory</name></name><argument_list>(
                        <argument><expr><call><name><name>AppStoreApp</name><operator>.</operator><name>Injector</name><operator>.</operator><name>INSTANCE</name><operator>.</operator><name>getAppComponent</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>mediaScraper</name><argument_list>()</argument_list></call></expr></argument>
                )</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return {@code false}
     * @see com.bumptech.glide.module.LibraryGlideModule
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>isManifestParsingEnabled</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// Should return false as long as no modules use the AndroidManifest.</comment>
        <comment type="line">// Only modules for pre Glide 4 will use the manifest</comment>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/util/ui/BaseViewHolder.java" hash="c3b128ee37a3fdf20525bb7e082ae63bbd0c1fd0"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>Resources</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>Drawable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>ColorRes</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>DrawableRes</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>StringRes</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>content</name><operator>.</operator><name>ContextCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>RecyclerView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>


<class><specifier>public</specifier> class <name>BaseViewHolder</name> <super><extends>extends <name><name>RecyclerView</name><operator>.</operator><name>ViewHolder</name></name></extends></super> <block>{
    <decl_stmt><decl><type><name>ClickListener</name></type> <name>clickListener</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LongClickListener</name></type> <name>longClickListener</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>BaseViewHolder</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>itemView</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>itemView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setOnClickListener</name><argument_list>(<argument><expr><call><name>buildWrapperForAdapterClickListener</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setOnLongClickListener</name><argument_list>(<argument><expr><call><name>buildWrapperForAdapterLongClickListener</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <function><type><name>void</name></type> <name>setAdapterClickListener</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>ClickListener</name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>clickListener</name> <operator>=</operator> <name>listener</name></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></type> <name>buildWrapperForAdapterClickListener</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
                <if>if <condition>(<expr><name>clickListener</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
                <if>if <condition>(<expr><call><name>getAdapterPosition</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>RecyclerView</name><operator>.</operator><name>NO_POSITION</name></name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
                <expr_stmt><expr><call><name><name>clickListener</name><operator>.</operator><name>onItemClick</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>getAdapterPosition</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getItemId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setAdapterLongClickListener</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>LongClickListener</name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>longClickListener</name> <operator>=</operator> <name>listener</name></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name><name>View</name><operator>.</operator><name>OnLongClickListener</name></name></type> <name>buildWrapperForAdapterLongClickListener</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block>{
            <if>if <condition>(<expr><name>longClickListener</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
            <if>if <condition>(<expr><call><name>getAdapterPosition</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>RecyclerView</name><operator>.</operator><name>NO_POSITION</name></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
            <return>return <expr><call><name><name>longClickListener</name><operator>.</operator><name>onItemLongClick</name></name><argument_list>(<argument><expr><name>itemView</name></expr></argument>, <argument><expr><call><name>getAdapterPosition</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getItemId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></lambda></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setOnClickListener</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name><name>View</name><operator>.</operator><name>OnClickListener</name></name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>itemView</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setOnLongClickListener</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name><name>View</name><operator>.</operator><name>OnLongClickListener</name></name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>itemView</name><operator>.</operator><name>setOnLongClickListener</name></name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>post</name><parameter_list>(<parameter><decl><type><name>Runnable</name></type> <name>runnable</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>getRootView</name><argument_list>()</argument_list></call><operator>.</operator><call><name>post</name><argument_list>(<argument><expr><name>runnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>View</name></type> <name>getRootView</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>itemView</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>Context</name></type> <name>getContext</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>itemView</name><operator>.</operator><name>getContext</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getString</name><parameter_list>(<parameter><decl><type><annotation>@<name>StringRes</name></annotation> <name>int</name></type> <name>string</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getString</name><parameter_list>(<parameter><decl><type><annotation>@<name>StringRes</name></annotation> <name>int</name></type> <name>string</name></decl></parameter>, <parameter><decl><type><name>Object</name><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getQuantityString</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>quantity</name></decl></parameter>, <parameter><decl><type><name>Object</name><modifier>...</modifier></type> <name>formatArgs</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>Resources</name><operator>.</operator><name>NotFoundException</name></name></expr></argument></throws> <block>{
        <return>return <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getQuantityString</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>quantity</name></expr></argument>, <argument><expr><name>formatArgs</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>Resources</name></type> <name>getResources</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResources</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>getColor</name><parameter_list>(<parameter><decl><type><annotation>@<name>ColorRes</name></annotation> <name>int</name></type> <name>colorRes</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>ContextCompat</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>colorRes</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>Drawable</name></type> <name>getDrawable</name><parameter_list>(<parameter><decl><type><annotation>@<name>DrawableRes</name></annotation> <name>int</name></type> <name>drawableRes</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>ContextCompat</name><operator>.</operator><name>getDrawable</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>drawableRes</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>LayoutInflater</name></type> <name>getLayoutInflater</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>LayoutInflater</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <interface><specifier>public</specifier> interface <name>ClickListener</name> <block>{
        <function_decl><type><name>boolean</name></type> <name>onItemClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>itemId</name></decl></parameter>)</parameter_list>;</function_decl>
    }</block></interface>

    <interface><specifier>public</specifier> interface <name>LongClickListener</name> <block>{
        <function_decl><type><name>boolean</name></type> <name>onItemLongClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>itemId</name></decl></parameter>)</parameter_list>;</function_decl>
    }</block></interface>

}</block></class></unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/util/ui/glide/IconRequest.java" hash="04ffa110ec4e9b94bef5ebd88e38be3bf2e576a9"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>ui</name><operator>.</operator><name>glide</name></name>;</package>


<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>

<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppInfo</name></name>;</import>

<class><specifier>public</specifier> class <name>IconRequest</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>AppInfo</name></type> <name>appInfo</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>IconRequest</name><parameter_list>(<parameter><decl><type><name>AppInfo</name></type> <name>appInfo</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name><name>this</name><operator>.</operator><name>appInfo</name></name> <operator>=</operator> <name>appInfo</name></expr>;</expr_stmt>}</block></constructor>

    <function><specifier>public</specifier> <type><name>AppInfo</name></type> <name>getAppInfo</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>appInfo</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>o</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
        <if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name>getClass</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>o</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>

        <decl_stmt><decl><type><name>IconRequest</name></type> <name>that</name> <init>= <expr><operator>(</operator><name>IconRequest</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name><name>appInfo</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>appInfo</name></name></expr></argument>)</argument_list></call></expr>;</return>

    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>appInfo</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>US</name></name></expr></argument>, <argument><expr><literal type="string">"IconRequest(appInfo=%s)"</literal></expr></argument>, <argument><expr><name>appInfo</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/util/ui/DividerItemDecoration.java" hash="0d47d610b84d68fba24173624ff58069dba06169"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>TypedArray</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Canvas</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Rect</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>Drawable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>LinearLayoutManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>RecyclerView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>

<comment type="block">/*
 * Copyright (C) 2014 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<class><specifier>public</specifier> class <name>DividerItemDecoration</name> <super><extends>extends <name><name>RecyclerView</name><operator>.</operator><name>ItemDecoration</name></name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>ATTRS</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[]</index></name><block>{
            <expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>attr</name><operator>.</operator><name>listDivider</name></name></expr>
    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>HORIZONTAL_LIST</name> <init>= <expr><name><name>LinearLayoutManager</name><operator>.</operator><name>HORIZONTAL</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>VERTICAL_LIST</name> <init>= <expr><name><name>LinearLayoutManager</name><operator>.</operator><name>VERTICAL</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>Drawable</name></type> <name>mDivider</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>mOrientation</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>DividerItemDecoration</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>orientation</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>TypedArray</name></type> <name>a</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>obtainStyledAttributes</name></name><argument_list>(<argument><expr><name>ATTRS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>mDivider</name> <operator>=</operator> <call><name><name>a</name><operator>.</operator><name>getDrawable</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>a</name><operator>.</operator><name>recycle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setOrientation</name><argument_list>(<argument><expr><name>orientation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setOrientation</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>orientation</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>orientation</name> <operator>!=</operator> <name>HORIZONTAL_LIST</name> <operator>&amp;&amp;</operator> <name>orientation</name> <operator>!=</operator> <name>VERTICAL_LIST</name></expr>)</condition><then> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"invalid orientation"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name>mOrientation</name> <operator>=</operator> <name>orientation</name></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDraw</name><parameter_list>(<parameter><decl><type><name>Canvas</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>RecyclerView</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>mOrientation</name> <operator>==</operator> <name>VERTICAL_LIST</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>drawVertical</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>drawHorizontal</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>drawVertical</name><parameter_list>(<parameter><decl><type><name>Canvas</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>RecyclerView</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>left</name> <init>= <expr><call><name><name>parent</name><operator>.</operator><name>getPaddingLeft</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>right</name> <init>= <expr><call><name><name>parent</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>parent</name><operator>.</operator><name>getPaddingRight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>childCount</name> <init>= <expr><call><name><name>parent</name><operator>.</operator><name>getChildCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>childCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>child</name> <init>= <expr><call><name><name>parent</name><operator>.</operator><name>getChildAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>RecyclerView</name><operator>.</operator><name>LayoutParams</name></name></type> <name>params</name> <init>= <expr><operator>(</operator><name><name>RecyclerView</name><operator>.</operator><name>LayoutParams</name></name><operator>)</operator> <call><name><name>child</name><operator>.</operator><name>getLayoutParams</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>top</name> <init>= <expr><call><name><name>child</name><operator>.</operator><name>getBottom</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>params</name><operator>.</operator><name>bottomMargin</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>bottom</name> <init>= <expr><name>top</name> <operator>+</operator> <call><name><name>mDivider</name><operator>.</operator><name>getIntrinsicHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>mDivider</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>bottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mDivider</name><operator>.</operator><name>draw</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>drawHorizontal</name><parameter_list>(<parameter><decl><type><name>Canvas</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>RecyclerView</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>top</name> <init>= <expr><call><name><name>parent</name><operator>.</operator><name>getPaddingTop</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>bottom</name> <init>= <expr><call><name><name>parent</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>parent</name><operator>.</operator><name>getPaddingBottom</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>childCount</name> <init>= <expr><call><name><name>parent</name><operator>.</operator><name>getChildCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>childCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>child</name> <init>= <expr><call><name><name>parent</name><operator>.</operator><name>getChildAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>RecyclerView</name><operator>.</operator><name>LayoutParams</name></name></type> <name>params</name> <init>= <expr><operator>(</operator><name><name>RecyclerView</name><operator>.</operator><name>LayoutParams</name></name><operator>)</operator> <call><name><name>child</name><operator>.</operator><name>getLayoutParams</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>left</name> <init>= <expr><call><name><name>child</name><operator>.</operator><name>getRight</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>params</name><operator>.</operator><name>rightMargin</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>right</name> <init>= <expr><name>left</name> <operator>+</operator> <call><name><name>mDivider</name><operator>.</operator><name>getIntrinsicHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>mDivider</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>bottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mDivider</name><operator>.</operator><name>draw</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>getItemOffsets</name><parameter_list>(<parameter><decl><type><name>Rect</name></type> <name>outRect</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>itemPosition</name></decl></parameter>, <parameter><decl><type><name>RecyclerView</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>mOrientation</name> <operator>==</operator> <name>VERTICAL_LIST</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>outRect</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>mDivider</name><operator>.</operator><name>getIntrinsicHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>outRect</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>mDivider</name><operator>.</operator><name>getIntrinsicWidth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>
}</block></class></unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/util/mvp/BasePresenter.java" hash="301cbd10a85a76a1d24e57b62c954c38ddfc4bb9"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>mvp</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>

<interface><specifier>public</specifier> interface <name><name>BasePresenter</name><parameter_list>&lt;<parameter><name>ViewType</name></parameter>&gt;</parameter_list></name> <block>{

    <function_decl><type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>bundle</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>onAttachView</name><parameter_list>(<parameter><decl><type><name>ViewType</name></type> <name>view</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>onDetachView</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>onSaveInstanceState</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>bundle</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>onDestroy</name><parameter_list>()</parameter_list>;</function_decl>
}</block></interface>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/util/ui/glide/PlaceHolderRequestListener.java" hash="5a50fda95138ce684c62446d9f0aa4fc2748b1ae"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>ui</name><operator>.</operator><name>glide</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>Drawable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageView</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>load</name><operator>.</operator><name>DataSource</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>load</name><operator>.</operator><name>engine</name><operator>.</operator><name>GlideException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>request</name><operator>.</operator><name>RequestListener</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>request</name><operator>.</operator><name>target</name><operator>.</operator><name>Target</name></name>;</import>

<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>R</name></name>;</import>

<class><specifier>public</specifier> class <name>PlaceHolderRequestListener</name> <super><implements>implements <name><name>RequestListener</name><argument_list type="generic">&lt;<argument><name>Drawable</name></argument>&gt;</argument_list></name></implements></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ImageView</name></type> <name>imageTarget</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>View</name></type> <name>placeHolder</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>PlaceHolderRequestListener</name><parameter_list>(<parameter><decl><type><name>ImageView</name></type> <name>imageTarget</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>imageTarget</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>PlaceHolderRequestListener</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>ImageView</name></type> <name>imageTarget</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>View</name></type> <name>placeHolder</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>imageTarget</name></name> <operator>=</operator> <name>imageTarget</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>placeHolder</name></name> <operator>=</operator> <name>placeHolder</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>imageTarget</name><operator>.</operator><name>setImageBitmap</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>imageTarget</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>INVISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>placeHolder</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>placeHolder</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onLoadFailed</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>GlideException</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>model</name></decl></parameter>, <parameter><decl><type><name>Target</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isFirstResource</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>placeHolder</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>INVISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>imageTarget</name><operator>.</operator><name>setImageResource</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ic_image_broken</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>imageTarget</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onResourceReady</name><parameter_list>(<parameter><decl><type><name>Drawable</name></type> <name>resource</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>model</name></decl></parameter>, <parameter><decl><type><name>Target</name></type> <name>target</name></decl></parameter>, <parameter><decl><type><name>DataSource</name></type> <name>dataSource</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isFirstResource</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>placeHolder</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>placeHolder</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>imageTarget</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/util/mvp/BasePresenterActivity.java" hash="abfb9830fa600792c8bae38081bf6891872237b3"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>mvp</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>ui</name><operator>.</operator><name>BaseActivity</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Forked from https://github.com/michal-luszczuk/tomorrow-mvp
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name><name>BasePresenterActivity</name><parameter_list>&lt;<parameter><name>PresenterT</name> <extends>extends <name><name>BasePresenter</name><parameter_list>&lt;<parameter><name>ViewT</name></parameter>&gt;</parameter_list></name></extends></parameter>, <parameter><name>ViewT</name> <extends>extends <name>BaseView</name></extends></parameter>&gt;</parameter_list></name> <super><extends>extends <name>BaseActivity</name></extends>
        <implements>implements <name><name>LoaderHelper</name><operator>.</operator><name><name>Callback</name><argument_list type="generic">&lt;<argument><name>PresenterT</name></argument>&gt;</argument_list></name></name></implements></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>LOADER_ID</name> <init>= <expr><literal type="number">2016</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PresenterT</name></type> <name>presenter</name></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>new</operator> <call><name><name>LoaderHelper</name><argument_list type="generic">&lt;<argument><name>PresenterT</name></argument>, <argument><name>ViewT</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>getSupportLoaderManager</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>LOADER_ID</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>retrievePresenter</name><argument_list>(<argument><expr><call><name>getPresenterFactory</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>savedInstanceState</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>LoaderHelper</name><operator>.</operator><name><name>Callback</name><argument_list type="generic">&lt;<argument><name>PresenterT</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>onPresenterReady</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>PresenterT</name></type> <name>presenter</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><name><name>BasePresenterActivity</name><operator>.</operator><name>this</name><operator>.</operator><name>presenter</name></name> <operator>=</operator> <name>presenter</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>BasePresenterActivity</name><operator>.</operator><name>this</name><operator>.</operator><name>onPresenterReady</name></name><argument_list>(<argument><expr><name>presenter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></function>

                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>onPresenterDestroyed</name><parameter_list>()</parameter_list> <block>{
                        <expr_stmt><expr><name><name>BasePresenterActivity</name><operator>.</operator><name>this</name><operator>.</operator><name>presenter</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>BasePresenterActivity</name><operator>.</operator><name>this</name><operator>.</operator><name>onPresenterDestroyed</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onResume</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onResume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>presenter</name><operator>.</operator><name>onAttachView</name></name><argument_list>(<argument><expr><call><name>getPresenterView</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onPause</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>presenter</name><operator>.</operator><name>onDetachView</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onPause</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onSaveInstanceState</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>outState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>presenter</name><operator>.</operator><name>onSaveInstanceState</name></name><argument_list>(<argument><expr><name>outState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onSaveInstanceState</name></name><argument_list>(<argument><expr><name>outState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDestroy</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isFinishing</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>presenter</name><operator>.</operator><name>onDestroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDestroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onPresenterReady</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>PresenterT</name></type> <name>presenter</name></decl></parameter>)</parameter_list> <block>{

    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onPresenterDestroyed</name><parameter_list>()</parameter_list> <block>{

    }</block></function>

    <function_decl><annotation>@<name>NonNull</name></annotation>
    <specifier>protected</specifier> <specifier>abstract</specifier> <type><name><name>PresenterFactory</name><argument_list type="generic">&lt;<argument><name>PresenterT</name></argument>&gt;</argument_list></name></type> <name>getPresenterFactory</name><parameter_list>()</parameter_list>;</function_decl>

    <function><specifier>public</specifier> <type><name>PresenterT</name></type> <name>getPresenter</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>presenter</name></expr>;</return>
    }</block></function>

    <comment type="line">// Override in case of fragment not implementing Presenter&lt;View&gt; interface</comment>
    <function><specifier>protected</specifier> <type><name>ViewT</name></type> <name>getPresenterView</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">//noinspection unchecked</comment>
        <return>return <expr><operator>(</operator><name>ViewT</name><operator>)</operator> <name>this</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/util/mvp/BaseView.java" hash="63d122bf8a6617b5e255ad5b6fca18e4065e75b1"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>mvp</name></name>;</package>


<interface><specifier>public</specifier> interface <name>BaseView</name> <block>{


}</block></interface>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/util/ui/glide/IconRequestModelLoader.java" hash="4b97648c403056ba15f2d235fe2ddf52c3d7a667"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>ui</name><operator>.</operator><name>glide</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>Priority</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>load</name><operator>.</operator><name>DataSource</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>load</name><operator>.</operator><name>Key</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>load</name><operator>.</operator><name>Options</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>load</name><operator>.</operator><name>data</name><operator>.</operator><name>DataFetcher</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>load</name><operator>.</operator><name>model</name><operator>.</operator><name>ModelLoader</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>load</name><operator>.</operator><name>model</name><operator>.</operator><name>ModelLoaderFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>load</name><operator>.</operator><name>model</name><operator>.</operator><name>MultiModelLoaderFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>util</name><operator>.</operator><name>Preconditions</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>MessageDigest</name></name>;</import>

<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>Observer</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>disposables</name><operator>.</operator><name>Disposable</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>OkHttpClient</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>Request</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>scrapers</name><operator>.</operator><name>ImgSize</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>scrapers</name><operator>.</operator><name>MediaScraper</name></name>;</import>


<class><specifier>public</specifier> class <name>IconRequestModelLoader</name> <super><implements>implements <name><name>ModelLoader</name><argument_list type="generic">&lt;<argument><name>IconRequest</name></argument>, <argument><name>InputStream</name></argument>&gt;</argument_list></name></implements></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>MediaScraper</name></type> <name>mediaScraper</name></decl>;</decl_stmt>

    <constructor><name>IconRequestModelLoader</name><parameter_list>(<parameter><decl><type><name>MediaScraper</name></type> <name>mediaScraper</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mediaScraper</name></name> <operator>=</operator> <name>mediaScraper</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Nullable</name></annotation>
    <annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name><name>LoadData</name><argument_list type="generic">&lt;<argument><name>InputStream</name></argument>&gt;</argument_list></name></type> <name>buildLoadData</name><parameter_list>(<parameter><decl><type><name>IconRequest</name></type> <name>iconRequest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>Options</name></type> <name>options</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>IconRequestKey</name></type> <name>requestKey</name> <init>= <expr><operator>new</operator> <call><name>IconRequestKey</name><argument_list>(<argument><expr><name>iconRequest</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>new</operator> <call><name><name>LoadData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>requestKey</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>ScrapeResultFetcher</name><argument_list>(<argument><expr><name>mediaScraper</name></expr></argument>, <argument><expr><name>iconRequest</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <class><specifier>static</specifier> class <name>IconRequestKey</name> <super><implements>implements <name>Key</name></implements></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>IconRequest</name></type> <name>iconRequest</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>width</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>height</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Object</name></type> <name>object</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>IconRequestKey</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>IconRequest</name></type> <name>iconRequest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Object</name></type> <name>object</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>iconRequest</name></name> <operator>=</operator> <call><name><name>Preconditions</name><operator>.</operator><name>checkNotNull</name></name><argument_list>(<argument><expr><name>iconRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>object</name></name> <operator>=</operator> <name>object</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><literal type="string">"ObjectKey{"</literal> <operator>+</operator> <literal type="string">"iconRequest="</literal> <operator>+</operator> <name>iconRequest</name> <operator>+</operator> <literal type="string">", width="</literal> <operator>+</operator> <name>width</name> <operator>+</operator> <literal type="string">", height="</literal> <operator>+</operator> <name>height</name> <operator>+</operator> <literal type="char">'}'</literal></expr>;</return>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>updateDiskCacheKey</name><parameter_list>(<parameter><decl><type><name>MessageDigest</name></type> <name>messageDigest</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>messageDigest</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBytes</name><argument_list>(<argument><expr><name>CHARSET</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{
            <if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>o</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
            <if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name>getClass</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>o</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>

            <decl_stmt><decl><type><name>IconRequestKey</name></type> <name>that</name> <init>= <expr><operator>(</operator><name>IconRequestKey</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>width</name> <operator>!=</operator> <name><name>that</name><operator>.</operator><name>width</name></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
            <if>if <condition>(<expr><name>height</name> <operator>!=</operator> <name><name>that</name><operator>.</operator><name>height</name></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
            <if>if <condition>(<expr><operator>!</operator><call><name><name>iconRequest</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>iconRequest</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
            <return>return <expr><ternary><condition><expr><name>object</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>object</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>object</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>that</name><operator>.</operator><name>object</name></name> <operator>==</operator> <literal type="null">null</literal></expr></else></ternary></expr>;</return>

        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name><name>iconRequest</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <name>width</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <name>height</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>object</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>object</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
            <return>return <expr><name>result</name></expr>;</return>
        }</block></function>
    }</block></class>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>handles</name><parameter_list>(<parameter><decl><type><name>IconRequest</name></type> <name>file</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>ScrapeResultFetcher</name> <super><implements>implements <name><name>DataFetcher</name><argument_list type="generic">&lt;<argument><name>InputStream</name></argument>&gt;</argument_list></name></implements></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>MediaScraper</name></type> <name>mediaScraper</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>IconRequest</name></type> <name>iconRequest</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>width</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>height</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Options</name></type> <name>options</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Disposable</name></type> <name>scraperSubscription</name></decl>;</decl_stmt>

        <constructor><name>ScrapeResultFetcher</name><parameter_list>(<parameter><decl><type><name>MediaScraper</name></type> <name>mediaScraper</name></decl></parameter>, <parameter><decl><type><name>IconRequest</name></type> <name>iconRequest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>Options</name></type> <name>options</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mediaScraper</name></name> <operator>=</operator> <name>mediaScraper</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>iconRequest</name></name> <operator>=</operator> <name>iconRequest</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>options</name></name> <operator>=</operator> <name>options</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>loadData</name><parameter_list>(<parameter><decl><type><name>Priority</name></type> <name>priority</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>DataCallback</name><argument_list type="generic">&lt;<argument><name>?</name> <super>super <name>InputStream</name></super></argument>&gt;</argument_list></name></type> <name>callback</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>mediaScraper</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>iconRequest</name><operator>.</operator><name>getAppInfo</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>scrapeResult</name></decl></parameter></parameter_list> -&gt; <block>{
                        <decl_stmt><decl><type><name>String</name></type> <name>iconUrl</name> <init>= <expr><call><name><name>scrapeResult</name><operator>.</operator><name>getIconUrl</name></name><argument_list>(<argument><expr><call><name><name>ImgSize</name><operator>.</operator><name>px</name></name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>ImgSize</name><operator>.</operator><name>px</name></name><argument_list>(<argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><name>iconUrl</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Icon url was null for"</literal> <operator>+</operator> <call><name><name>iconRequest</name><operator>.</operator><name>getAppInfo</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                        }</block></then></if>
                        <comment type="line">//TODO: okhttp</comment>
                        <decl_stmt><decl><type><name>OkHttpClient</name></type> <name>client</name> <init>= <expr><operator>new</operator> <call><name>OkHttpClient</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Request</name></type> <name>request</name> <init>= <expr><operator>new</operator> <call><name><name>Request</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>url</name><argument_list>(<argument><expr><name>iconUrl</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <return>return <expr><call><name><name>client</name><operator>.</operator><name>newCall</name></name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>execute</name><argument_list>()</argument_list></call><operator>.</operator><call><name>body</name><argument_list>()</argument_list></call><operator>.</operator><call><name>byteStream</name><argument_list>()</argument_list></call></expr>;</return>
                    }</block></lambda></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>InputStream</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
                        <function><annotation>@<name>Override</name></annotation>
                        <specifier>public</specifier> <type><name>void</name></type> <name>onSubscribe</name><parameter_list>(<parameter><decl><type><name>Disposable</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{
                            <expr_stmt><expr><name>scraperSubscription</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
                        }</block></function>

                        <function><annotation>@<name>Override</name></annotation>
                        <specifier>public</specifier> <type><name>void</name></type> <name>onNext</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
                            <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>onDataReady</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></function>

                        <function><annotation>@<name>Override</name></annotation>
                        <specifier>public</specifier> <type><name>void</name></type> <name>onError</name><parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                            <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>onDataReady</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></function>

                        <function><annotation>@<name>Override</name></annotation>
                        <specifier>public</specifier> <type><name>void</name></type> <name>onComplete</name><parameter_list>()</parameter_list> <block>{

                        }</block></function>
                    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>cleanup</name><parameter_list>()</parameter_list> <block>{
            <comment type="line">// Do nothing.</comment>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>cancel</name><parameter_list>()</parameter_list> <block>{
            <if>if <condition>(<expr><name>scraperSubscription</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>scraperSubscription</name><operator>.</operator><name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>InputStream</name></argument>&gt;</argument_list></name></type> <name>getDataClass</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name><name>InputStream</name><operator>.</operator><name>class</name></name></expr>;</return>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>DataSource</name></type> <name>getDataSource</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name><name>DataSource</name><operator>.</operator><name>REMOTE</name></name></expr>;</return>
        }</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Factory</name> <super><implements>implements <name><name>ModelLoaderFactory</name><argument_list type="generic">&lt;<argument><name>IconRequest</name></argument>, <argument><name>InputStream</name></argument>&gt;</argument_list></name></implements></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>MediaScraper</name></type> <name>mediaScraper</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>Factory</name><parameter_list>(<parameter><decl><type><name>MediaScraper</name></type> <name>mediaScraper</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mediaScraper</name></name> <operator>=</operator> <name>mediaScraper</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name><name>ModelLoader</name><argument_list type="generic">&lt;<argument><name>IconRequest</name></argument>, <argument><name>InputStream</name></argument>&gt;</argument_list></name></type> <name>build</name><parameter_list>(<parameter><decl><type><name>MultiModelLoaderFactory</name></type> <name>multiFactory</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><operator>new</operator> <call><name>IconRequestModelLoader</name><argument_list>(<argument><expr><name>mediaScraper</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>teardown</name><parameter_list>()</parameter_list> <block>{}</block></function>
    }</block></class>
}</block></class></unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/util/mvp/PresenterFactory.java" hash="4c4dc2546be68a1efb6cabff8a9df25d8cac51e3"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>mvp</name></name>;</package>

<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>TypedObjectFactory</name></name>;</import>

<interface><specifier>public</specifier> interface <name><name>PresenterFactory</name><parameter_list>&lt;<parameter><name>PresenterT</name> <extends>extends <name>BasePresenter</name></extends></parameter>&gt;</parameter_list></name> <super><extends>extends <name><name>TypedObjectFactory</name><argument_list type="generic">&lt;<argument><name>PresenterT</name></argument>&gt;</argument_list></name></extends></super> <block>{

}</block></interface>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/util/mvp/LoaderHelper.java" hash="1c31d94902fda1a869bcbcddcaa976d36718f6c8"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>mvp</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>LoaderManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>content</name><operator>.</operator><name>Loader</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Forked from https://github.com/michal-luszczuk/tomorrow-mvp
 */</comment>
<class><specifier>public</specifier> class <name><name>LoaderHelper</name><parameter_list>&lt;<parameter><name>PresenterT</name> <extends>extends <name><name>BasePresenter</name><parameter_list>&lt;<parameter><name>ViewT</name></parameter>&gt;</parameter_list></name></extends></parameter>, <parameter><name>ViewT</name> <extends>extends <name>BaseView</name></extends></parameter>&gt;</parameter_list></name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>loaderId</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>LoaderManager</name></type> <name>loaderManager</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>LoaderHelper</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>LoaderManager</name></type> <name>manager</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>loaderId</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>loaderId</name></name> <operator>=</operator> <name>loaderId</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>loaderManager</name></name> <operator>=</operator> <name>manager</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>retrievePresenter</name><parameter_list>(
            <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <specifier>final</specifier> <name><name>PresenterFactory</name><argument_list type="generic">&lt;<argument><name>PresenterT</name></argument>&gt;</argument_list></name></type> <name>factory</name></decl></parameter>,
            <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedState</name></decl></parameter>,
            <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <specifier>final</specifier> <name><name>Callback</name><argument_list type="generic">&lt;<argument><name>PresenterT</name></argument>&gt;</argument_list></name></type> <name>presenterListener</name></decl></parameter>)</parameter_list> <block>{

        <decl_stmt><decl><type><name><name>Loader</name><argument_list type="generic">&lt;<argument><name>PresenterT</name></argument>&gt;</argument_list></name></type> <name>loader</name> <init>= <expr><call><name><name>loaderManager</name><operator>.</operator><name>getLoader</name></name><argument_list>(<argument><expr><name>loaderId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>loader</name> <operator>instanceof</operator> <name>PresenterLoader</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>retrievePresenterFromExistingLoaderAndInformListener</name><argument_list>(<argument><expr><operator>(</operator><name>PresenterLoader</name><operator>)</operator> <name>loader</name></expr></argument>, <argument><expr><call><name><name>factory</name><operator>.</operator><name>getTypeClazz</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>presenterListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>loaderManager</name><operator>.</operator><name>initLoader</name></name><argument_list>(<argument><expr><name>loaderId</name></expr></argument>, <argument><expr><name>savedState</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>LoaderManager</name><operator>.</operator><name><name>LoaderCallbacks</name><argument_list type="generic">&lt;<argument><name>PresenterT</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name><name>Loader</name><argument_list type="generic">&lt;<argument><name>PresenterT</name></argument>&gt;</argument_list></name></type> <name>onCreateLoader</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>Bundle</name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{
                    <return>return <expr><operator>new</operator> <call><name><name>PresenterLoader</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>factory</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></function>

                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>onLoadFinished</name><parameter_list>(<parameter><decl><type><name><name>Loader</name><argument_list type="generic">&lt;<argument><name>PresenterT</name></argument>&gt;</argument_list></name></type> <name>loader</name></decl></parameter>, <parameter><decl><type><name>PresenterT</name></type> <name>presenter</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>presenterListener</name><operator>.</operator><name>onPresenterReady</name></name><argument_list>(<argument><expr><name>presenter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>

                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>onLoaderReset</name><parameter_list>(<parameter><decl><type><name><name>Loader</name><argument_list type="generic">&lt;<argument><name>PresenterT</name></argument>&gt;</argument_list></name></type> <name>loader</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>presenterListener</name><operator>.</operator><name>onPresenterDestroyed</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><specifier>protected</specifier> <type><name>void</name></type> <name>retrievePresenterFromExistingLoaderAndInformListener</name><parameter_list>(
            <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>PresenterLoader</name></type> <name>loader</name></decl></parameter>,
            <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>PresenterT</name></extends></argument>&gt;</argument_list></name></type> <name>presenterClazz</name></decl></parameter>,
            <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Callback</name><argument_list type="generic">&lt;<argument><name>PresenterT</name></argument>&gt;</argument_list></name></type> <name>presenterListener</name></decl></parameter>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>PresenterT</name></type> <name>presenter</name> <init>= <expr><call><name>retrievePresenterFromExistingLoader</name><argument_list>(<argument><expr><name>loader</name></expr></argument>, <argument><expr><name>presenterClazz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>presenter</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>presenterListener</name><operator>.</operator><name>onPresenterReady</name></name><argument_list>(<argument><expr><name>presenter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Loader presenter not of expected type"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></else></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Method get retained Presenter object from PresenterRetainLoader
     *
     * @param loader         Loader retaining presenter object
     * @param presenterClazz Type of presenter we are expecting to get
     * @return Presenter object retained in PresenterRetainLoader or null if presenter is not retained or
     * type of presenter is other than expected
     */</comment>
    <function><annotation>@<name>Nullable</name></annotation>
    <specifier>private</specifier> <type><name>PresenterT</name></type> <name>retrievePresenterFromExistingLoader</name><parameter_list>(<parameter><decl><type><name>PresenterLoader</name></type> <name>loader</name></decl></parameter>, <parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>PresenterT</name></extends></argument>&gt;</argument_list></name></type> <name>presenterClazz</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Object</name></type> <name>presenter</name> <init>= <expr><call><name><name>loader</name><operator>.</operator><name>getPresenter</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>presenterClazz</name><operator>.</operator><name>isInstance</name></name><argument_list>(<argument><expr><name>presenter</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>presenterClazz</name><operator>.</operator><name>cast</name></name><argument_list>(<argument><expr><name>presenter</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></else></if>
    }</block></function>

    <interface><specifier>public</specifier> interface <name><name>Callback</name><parameter_list>&lt;<parameter><name>PresenterT</name> <extends>extends <name><name>BasePresenter</name><parameter_list>&lt;<parameter><name>?</name></parameter>&gt;</parameter_list></name></extends></parameter>&gt;</parameter_list></name> <block>{
        <function_decl><type><name>void</name></type> <name>onPresenterReady</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>PresenterT</name></type> <name>presenter</name></decl></parameter>)</parameter_list>;</function_decl>

        <function_decl><type><name>void</name></type> <name>onPresenterDestroyed</name><parameter_list>()</parameter_list>;</function_decl>
    }</block></interface>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/util/dagger/ApplicationScope.java" hash="f288448e4858f2c254908c611ccd95c479eca17b"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>dagger</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Documented</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Retention</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>annotation</name><operator>.</operator><name>RetentionPolicy</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Scope</name></name>;</import>


<annotation_defn><annotation>@<name>Documented</name></annotation>
<annotation>@<name>Scope</name></annotation>
<annotation>@<name>Retention</name><argument_list>(<argument><expr><name><name>RetentionPolicy</name><operator>.</operator><name>RUNTIME</name></name></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> @interface <name>ApplicationScope</name> <block>{
}</block></annotation_defn>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/util/dagger/FragmentScope.java" hash="386a75a8d2e38109477098f1b28d6a2518c1d92d"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>dagger</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Documented</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Retention</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>annotation</name><operator>.</operator><name>RetentionPolicy</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Scope</name></name>;</import>


<annotation_defn><annotation>@<name>Documented</name></annotation>
<annotation>@<name>Scope</name></annotation>
<annotation>@<name>Retention</name><argument_list>(<argument><expr><name><name>RetentionPolicy</name><operator>.</operator><name>RUNTIME</name></name></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> @interface <name>FragmentScope</name> <block>{
}</block></annotation_defn>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/prod/java/subreddit/android/appstore/backend/reddit/wiki/WikiRepositoryModule.java" hash="9f738e77930b7cd93257abf29c20d41d9e5bc893"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>wiki</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>gson</name><operator>.</operator><name>Gson</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>jakewharton</name><operator>.</operator><name>retrofit2</name><operator>.</operator><name>adapter</name><operator>.</operator><name>rxjava2</name><operator>.</operator><name>RxJava2CallAdapterFactory</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import <name><name>dagger</name><operator>.</operator><name>Module</name></name>;</import>
<import>import <name><name>dagger</name><operator>.</operator><name>Provides</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>OkHttpClient</name></name>;</import>
<import>import <name><name>retrofit2</name><operator>.</operator><name>Retrofit</name></name>;</import>
<import>import <name><name>retrofit2</name><operator>.</operator><name>converter</name><operator>.</operator><name>gson</name><operator>.</operator><name>GsonConverterFactory</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>DeviceIdentifier</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>HttpModule</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>UserAgentInterceptor</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>TokenApi</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>TokenRepository</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>wiki</name><operator>.</operator><name>caching</name><operator>.</operator><name>WikiDiskCache</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>wiki</name><operator>.</operator><name>parser</name><operator>.</operator><name>AppParser</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>wiki</name><operator>.</operator><name>parser</name><operator>.</operator><name>BodyParser</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>wiki</name><operator>.</operator><name>parser</name><operator>.</operator><name>CategoryParser</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>wiki</name><operator>.</operator><name>parser</name><operator>.</operator><name>ContactColumnParser</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>wiki</name><operator>.</operator><name>parser</name><operator>.</operator><name>DescriptionColumnParser</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>wiki</name><operator>.</operator><name>parser</name><operator>.</operator><name>DeviceColumnParser</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>wiki</name><operator>.</operator><name>parser</name><operator>.</operator><name>EncodingFixer</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>wiki</name><operator>.</operator><name>parser</name><operator>.</operator><name>NameColumnParser</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>wiki</name><operator>.</operator><name>parser</name><operator>.</operator><name>PriceColumnParser</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>dagger</name><operator>.</operator><name>ApplicationScope</name></name>;</import>


<class><annotation>@<name>Module</name><argument_list>(<argument><expr><name>includes</name> <operator>=</operator> <name><name>HttpModule</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> class <name>WikiRepositoryModule</name> <block>{
    <function><annotation>@<name>Provides</name></annotation>
    <annotation>@<name>ApplicationScope</name></annotation>
    <type><name>DeviceIdentifier</name></type> <name>provideDeviceIdentifier</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>DeviceIdentifier</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Provides</name></annotation>
    <annotation>@<name>ApplicationScope</name></annotation>
    <type><name>UserAgentInterceptor</name></type> <name>provideUserAgentInterceptor</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>UserAgentInterceptor</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Provides</name></annotation>
    <annotation>@<name>ApplicationScope</name></annotation>
    <type><name>TokenRepository</name></type> <name>provideTokenSource</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>,
                                       <parameter><decl><type><name>DeviceIdentifier</name></type> <name>deviceIdentifier</name></decl></parameter>,
                                       <parameter><decl><type><name>TokenApi</name></type> <name>tokenApi</name></decl></parameter>,
                                       <parameter><decl><type><name>Gson</name></type> <name>gson</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>TokenRepository</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>deviceIdentifier</name></expr></argument>, <argument><expr><name>tokenApi</name></expr></argument>, <argument><expr><name>gson</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Provides</name></annotation>
    <annotation>@<name>ApplicationScope</name></annotation>
    <type><name>WikiDiskCache</name></type> <name>provideWikiDiskCache</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>WikiDiskCache</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Provides</name></annotation>
    <annotation>@<name>ApplicationScope</name></annotation>
    <type><name>WikiRepository</name></type> <name>provideBackendService</name><parameter_list>(<parameter><decl><type><name>TokenRepository</name></type> <name>tokenRepository</name></decl></parameter>,
                                         <parameter><decl><type><name>WikiDiskCache</name></type> <name>wikiDiskCache</name></decl></parameter>,
                                         <parameter><decl><type><name>BodyParser</name></type> <name>bodyParser</name></decl></parameter>,
                                         <parameter><decl><type><name>WikiApi</name></type> <name>wikiApi</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>LiveWikiRepository</name><argument_list>(<argument><expr><name>tokenRepository</name></expr></argument>, <argument><expr><name>wikiDiskCache</name></expr></argument>, <argument><expr><name>bodyParser</name></expr></argument>, <argument><expr><name>wikiApi</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Provides</name></annotation>
    <type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>AppParser</name></argument>&gt;</argument_list></name></type> <name>provideAppParsers</name><parameter_list>(<parameter><decl><type><name>EncodingFixer</name></type> <name>encodingFixer</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>AppParser</name></argument>&gt;</argument_list></name></type> <name>appParsers</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>appParsers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>NameColumnParser</name><argument_list>(<argument><expr><name>encodingFixer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>appParsers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PriceColumnParser</name><argument_list>(<argument><expr><name>encodingFixer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>appParsers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DeviceColumnParser</name><argument_list>(<argument><expr><name>encodingFixer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>appParsers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DescriptionColumnParser</name><argument_list>(<argument><expr><name>encodingFixer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>appParsers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ContactColumnParser</name><argument_list>(<argument><expr><name>encodingFixer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>appParsers</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Provides</name></annotation>
    <type><name>CategoryParser</name></type> <name>provideCategoryParser</name><parameter_list>(<parameter><decl><type><name>EncodingFixer</name></type> <name>encodingFixer</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>CategoryParser</name><argument_list>(<argument><expr><name>encodingFixer</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Provides</name></annotation>
    <type><name>EncodingFixer</name></type> <name>provideEncodingFixer</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>EncodingFixer</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Provides</name></annotation>
    <annotation>@<name>ApplicationScope</name></annotation>
    <type><name>WikiApi</name></type> <name>provideWikiApi</name><parameter_list>(<parameter><decl><type><name>OkHttpClient</name></type> <name>client</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Retrofit</name></type> <name>retrofit</name> <init>= <expr><operator>new</operator> <call><name><name>Retrofit</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>client</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>addConverterFactory</name><argument_list>(<argument><expr><call><name><name>GsonConverterFactory</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>addCallAdapterFactory</name><argument_list>(<argument><expr><call><name><name>RxJava2CallAdapterFactory</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>baseUrl</name><argument_list>(<argument><expr><name><name>WikiApi</name><operator>.</operator><name>BASEURL</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>retrofit</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>WikiApi</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Provides</name></annotation>
    <annotation>@<name>ApplicationScope</name></annotation>
    <type><name>TokenApi</name></type> <name>provideTokenApi</name><parameter_list>(<parameter><decl><type><name>OkHttpClient</name></type> <name>client</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Retrofit</name></type> <name>retrofit</name> <init>= <expr><operator>new</operator> <call><name><name>Retrofit</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>client</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>addConverterFactory</name><argument_list>(<argument><expr><call><name><name>GsonConverterFactory</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>addCallAdapterFactory</name><argument_list>(<argument><expr><call><name><name>RxJava2CallAdapterFactory</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>baseUrl</name><argument_list>(<argument><expr><name><name>TokenApi</name><operator>.</operator><name>BASEURL</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>retrofit</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>TokenApi</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/util/mvp/BasePresenterFragment.java" hash="0d449561cfac5e5a962cad8065b56f6ed45ad49f"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>mvp</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>

<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>ui</name><operator>.</operator><name>BaseFragment</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Forked from https://github.com/michal-luszczuk/tomorrow-mvp
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name><name>BasePresenterFragment</name><parameter_list>&lt;<parameter><name>PresenterT</name> <extends>extends <name><name>BasePresenter</name><parameter_list>&lt;<parameter><name>ViewT</name></parameter>&gt;</parameter_list></name></extends></parameter>, <parameter><name>ViewT</name> <extends>extends <name>BaseView</name></extends></parameter>&gt;</parameter_list></name> <super><extends>extends <name>BaseFragment</name></extends>
        <implements>implements <name><name>LoaderHelper</name><operator>.</operator><name><name>Callback</name><argument_list type="generic">&lt;<argument><name>PresenterT</name></argument>&gt;</argument_list></name></name></implements></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>LOADER_ID</name> <init>= <expr><literal type="number">2048</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PresenterT</name></type> <name>presenter</name></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onViewCreated</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onViewCreated</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onActivityCreated</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onActivityCreated</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>new</operator> <call><name><name>LoaderHelper</name><argument_list type="generic">&lt;<argument><name>PresenterT</name></argument>, <argument><name>ViewT</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getLoaderManager</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>LOADER_ID</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>retrievePresenter</name><argument_list>(<argument><expr><call><name>getPresenterFactory</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>savedInstanceState</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>LoaderHelper</name><operator>.</operator><name><name>Callback</name><argument_list type="generic">&lt;<argument><name>PresenterT</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>onPresenterReady</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>PresenterT</name></type> <name>presenter</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><name><name>BasePresenterFragment</name><operator>.</operator><name>this</name><operator>.</operator><name>presenter</name></name> <operator>=</operator> <name>presenter</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>BasePresenterFragment</name><operator>.</operator><name>this</name><operator>.</operator><name>onPresenterReady</name></name><argument_list>(<argument><expr><name>presenter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></function>

                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>onPresenterDestroyed</name><parameter_list>()</parameter_list> <block>{
                        <expr_stmt><expr><name><name>BasePresenterFragment</name><operator>.</operator><name>this</name><operator>.</operator><name>presenter</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>BasePresenterFragment</name><operator>.</operator><name>this</name><operator>.</operator><name>onPresenterDestroyed</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onResume</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onResume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>presenter</name><operator>.</operator><name>onAttachView</name></name><argument_list>(<argument><expr><call><name>getPresenterView</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onPause</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>presenter</name><operator>.</operator><name>onDetachView</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onPause</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onSaveInstanceState</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>outState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>presenter</name><operator>.</operator><name>onSaveInstanceState</name></name><argument_list>(<argument><expr><name>outState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onSaveInstanceState</name></name><argument_list>(<argument><expr><name>outState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDestroy</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Activity</name></type> <name>activity</name> <init>= <expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>activity</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>activity</name><operator>.</operator><name>isFinishing</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>presenter</name><operator>.</operator><name>onDestroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDestroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onPresenterReady</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>PresenterT</name></type> <name>presenter</name></decl></parameter>)</parameter_list> <block>{

    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onPresenterDestroyed</name><parameter_list>()</parameter_list> <block>{

    }</block></function>

    <function_decl><annotation>@<name>NonNull</name></annotation>
    <specifier>protected</specifier> <specifier>abstract</specifier> <type><name><name>PresenterFactory</name><argument_list type="generic">&lt;<argument><name>PresenterT</name></argument>&gt;</argument_list></name></type> <name>getPresenterFactory</name><parameter_list>()</parameter_list>;</function_decl>

    <function><specifier>public</specifier> <type><name>PresenterT</name></type> <name>getPresenter</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>presenter</name></expr>;</return>
    }</block></function>

    <comment type="line">// Override in case of fragment not implementing Presenter&lt;View&gt; interface</comment>
    <function><specifier>protected</specifier> <type><name>ViewT</name></type> <name>getPresenterView</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">//noinspection unchecked</comment>
        <return>return <expr><operator>(</operator><name>ViewT</name><operator>)</operator> <name>this</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/screens/settings/ContributorData.java" hash="8d49ca0024ac9f562a56ddee679d14a6f4111133"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>screens</name><operator>.</operator><name>settings</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>

<class><specifier>public</specifier> class <name>ContributorData</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>contributors</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ContributorData</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>contributors</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>addContributor</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>contributors</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getContributors</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>contributors</name></expr>;</return>
    }</block></function>



}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/screens/MainActivity.java" hash="20192524a1c652d31a117bbcac9ecbcb52f3a36b"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>screens</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>view</name><operator>.</operator><name>GravityCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>widget</name><operator>.</operator><name>DrawerLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toolbar</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>KeyEvent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>

<import>import <name><name>butterknife</name><operator>.</operator><name>BindView</name></name>;</import>
<import>import <name><name>butterknife</name><operator>.</operator><name>ButterKnife</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>screens</name><operator>.</operator><name>list</name><operator>.</operator><name>AppListFragment</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>screens</name><operator>.</operator><name>navigation</name><operator>.</operator><name>CategoryFilter</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>screens</name><operator>.</operator><name>navigation</name><operator>.</operator><name>NavigationFragment</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>ui</name><operator>.</operator><name>BaseActivity</name></name>;</import>


<class><specifier>public</specifier> class <name>MainActivity</name> <super><extends>extends <name>BaseActivity</name></extends> <implements>implements <name><name>View</name><operator>.</operator><name>OnClickListener</name></name>, <name><name>NavigationFragment</name><operator>.</operator><name>OnCategorySelectedListener</name></name></implements></super> <block>{
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>main_drawer</name></name></expr></argument>)</argument_list></annotation> <type><name>DrawerLayout</name></type> <name>drawerLayout</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>applist_toolbar</name></name></expr></argument>)</argument_list></annotation> <type><name>Toolbar</name></type> <name>toolbar</name></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>activity_main</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ButterKnife</name><operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setSupportActionBar</name><argument_list>(<argument><expr><name>toolbar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>toolbar</name><operator>.</operator><name>setNavigationIcon</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ic_menu_white_48px</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>toolbar</name><operator>.</operator><name>setNavigationOnClickListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Fragment</name></type> <name>navigationFragment</name> <init>= <expr><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findFragmentById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>navigationFrame</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>navigationFragment</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>navigationFragment</name> <operator>=</operator> <call><name><name>NavigationFragment</name><operator>.</operator><name>newInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>

        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>NavigationFragment</name><operator>)</operator> <name>navigationFragment</name><operator>)</operator><operator>.</operator><call><name>setOnCategorySelectedListener</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>beginTransaction</name><argument_list>()</argument_list></call><operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>navigationFrame</name></name></expr></argument>, <argument><expr><name>navigationFragment</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>savedInstanceState</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>onCategorySelected</name><argument_list>(<argument><expr><operator>new</operator> <call><name>CategoryFilter</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

        <expr_stmt><expr><call><name>addOnBackKeyPressedListener</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
            <if>if <condition>(<expr><call><name><name>drawerLayout</name><operator>.</operator><name>isDrawerVisible</name></name><argument_list>(<argument><expr><name><name>GravityCompat</name><operator>.</operator><name>START</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>drawerLayout</name><operator>.</operator><name>closeDrawer</name></name><argument_list>(<argument><expr><name><name>GravityCompat</name><operator>.</operator><name>START</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            }</block></then></if>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>drawerLayout</name><operator>.</operator><name>openDrawer</name></name><argument_list>(<argument><expr><name><name>GravityCompat</name><operator>.</operator><name>START</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCategorySelected</name><parameter_list>(<parameter><decl><type><name>CategoryFilter</name></type> <name>filter</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Fragment</name></type> <name>contentFragment</name> <init>= <expr><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findFragmentByTag</name><argument_list>(<argument><expr><call><name><name>filter</name><operator>.</operator><name>getFragmentTag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>contentFragment</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>contentFragment</name> <operator>=</operator> <call><name><name>AppListFragment</name><operator>.</operator><name>newInstance</name></name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>beginTransaction</name><argument_list>()</argument_list></call><operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>contentFrame</name></name></expr></argument>, <argument><expr><name>contentFragment</name></expr></argument>, <argument><expr><call><name><name>filter</name><operator>.</operator><name>getFragmentTag</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>filter</name><operator>.</operator><name>getTertiaryCategory</name></name><argument_list>()</argument_list></call><operator>!=</operator><literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>drawerLayout</name><operator>.</operator><name>closeDrawer</name></name><argument_list>(<argument><expr><name><name>GravityCompat</name><operator>.</operator><name>START</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>toolbar</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><call><name><name>filter</name><operator>.</operator><name>getName</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class></unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/util/mvp/PresenterLoader.java" hash="077f9b7149a8c48652dfe4e02f12baf09c77f71c"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>mvp</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>

<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>ObjectRetainLoader</name></name>;</import>


<class><specifier>public</specifier> class <name><name>PresenterLoader</name><parameter_list>&lt;<parameter><name>PresenterT</name> <extends>extends <name><name>BasePresenter</name><parameter_list>&lt;<parameter><name>ViewT</name></parameter>&gt;</parameter_list></name></extends></parameter>, <parameter><name>ViewT</name></parameter>&gt;</parameter_list></name> <super><extends>extends <name><name>ObjectRetainLoader</name><argument_list type="generic">&lt;<argument><name>PresenterT</name></argument>&gt;</argument_list></name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><name>Bundle</name></type> <name>savedState</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>PresenterLoader</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name><name>PresenterFactory</name><argument_list type="generic">&lt;<argument><name>PresenterT</name></argument>&gt;</argument_list></name></type> <name>factory</name></decl></parameter>, <parameter><decl><type><name>Bundle</name></type> <name>savedState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>factory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>savedState</name></name> <operator>=</operator> <name>savedState</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>PresenterT</name></type> <name>getPresenter</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getObject</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>createObjectToRetain</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>createObjectToRetain</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getPresenter</name><argument_list>()</argument_list></call><operator>.</operator><call><name>onCreate</name><argument_list>(<argument><expr><name>savedState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>clearDataAfterCreation</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>clearDataAfterCreation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>savedState</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/screens/navigation/NavigationComponent.java" hash="4fd61204e17d90c81a2ca79bd92114e73bae9f54"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>screens</name><operator>.</operator><name>navigation</name></name>;</package>

<import>import <name><name>dagger</name><operator>.</operator><name>Component</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>AppComponent</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>dagger</name><operator>.</operator><name>FragmentScope</name></name>;</import>


<interface><annotation>@<name>FragmentScope</name></annotation>
<annotation>@<name>Component</name><argument_list>(<argument><expr><name>modules</name> <operator>=</operator> <name><name>NavigationModule</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>dependencies</name> <operator>=</operator> <name><name>AppComponent</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> interface <name>NavigationComponent</name> <block>{
    <function_decl><type><name>void</name></type> <name>inject</name><parameter_list>(<parameter><decl><type><name>NavigationFragment</name></type> <name>fragment</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></interface>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/screens/navigation/NavigationContract.java" hash="87bca1e5e62e7bdd2d31aadea5e29e05a0b94439"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>screens</name><operator>.</operator><name>navigation</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>github</name><operator>.</operator><name>GithubApi</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>mvp</name><operator>.</operator><name>BasePresenter</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>mvp</name><operator>.</operator><name>BaseView</name></name>;</import>


<interface><specifier>public</specifier> interface <name>NavigationContract</name> <block>{
    <interface>interface <name>View</name> <super><extends>extends <name>BaseView</name></extends></super> <block>{

        <function_decl><type><name>void</name></type> <name>showNavigationItems</name><parameter_list>(<parameter><decl><type><name>NavigationData</name></type> <name>navigationData</name></decl></parameter>, <parameter><decl><type><name>CategoryFilter</name></type> <name>selectedFilter</name></decl></parameter>)</parameter_list>;</function_decl>

        <function_decl><type><name>void</name></type> <name>selectFilter</name><parameter_list>(<parameter><decl><type><name>CategoryFilter</name></type> <name>filter</name></decl></parameter>)</parameter_list>;</function_decl>

        <function_decl><type><name>void</name></type> <name>showUpdateSnackbar</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name><name>GithubApi</name><operator>.</operator><name>Release</name></name></type> <name>release</name></decl></parameter>)</parameter_list>;</function_decl>

        <function_decl><type><name>void</name></type> <name>showUpdateErrorToast</name><parameter_list>()</parameter_list>;</function_decl>

        <function_decl><type><name>void</name></type> <name>enableUpdateAvailableText</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name><name>GithubApi</name><operator>.</operator><name>Release</name></name></type> <name>release</name></decl></parameter>)</parameter_list>;</function_decl>

        <function_decl><type><name>void</name></type> <name>showDownload</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>url</name></decl></parameter>)</parameter_list>;</function_decl>

        <function_decl><type><name>void</name></type> <name>showChangelog</name><parameter_list>(<parameter><decl><type><name><name>GithubApi</name><operator>.</operator><name>Release</name></name></type> <name>release</name></decl></parameter>)</parameter_list>;</function_decl>
    }</block></interface>

    <interface>interface <name>Presenter</name> <super><extends>extends <name><name>BasePresenter</name><argument_list type="generic">&lt;<argument><name>View</name></argument>&gt;</argument_list></name></extends></super> <block>{
        <function_decl><type><name>void</name></type> <name>notifySelectedFilter</name><parameter_list>(<parameter><decl><type><name>CategoryFilter</name></type> <name>categoryFilter</name></decl></parameter>)</parameter_list>;</function_decl>

        <function_decl><type><name>void</name></type> <name>downloadUpdate</name><parameter_list>(<parameter><decl><type><name><name>GithubApi</name><operator>.</operator><name>Release</name></name></type> <name>release</name></decl></parameter>)</parameter_list>;</function_decl>

        <function_decl><type><name>void</name></type> <name>buildChangelog</name><parameter_list>(<parameter><decl><type><name><name>GithubApi</name><operator>.</operator><name>Release</name></name></type> <name>release</name></decl></parameter>)</parameter_list>;</function_decl>
    }</block></interface>
}</block></interface>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/screens/settings/SettingsActivity.java" hash="131eea74026a17cf0843042a12468a162c96df3a"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>screens</name><operator>.</operator><name>settings</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>customtabs</name><operator>.</operator><name>CustomTabsIntent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>content</name><operator>.</operator><name>ContextCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>AlertDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>preference</name><operator>.</operator><name>Preference</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceFragmentCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toolbar</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>

<import>import <name><name>butterknife</name><operator>.</operator><name>BindView</name></name>;</import>
<import>import <name><name>butterknife</name><operator>.</operator><name>ButterKnife</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>AppStoreApp</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppTags</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>ui</name><operator>.</operator><name>BaseActivity</name></name>;</import>
<import>import <name><name>timber</name><operator>.</operator><name>log</name><operator>.</operator><name>Timber</name></name>;</import>

<class><specifier>public</specifier> class <name>SettingsActivity</name> <super><extends>extends <name>BaseActivity</name></extends> <implements>implements <name><name>View</name><operator>.</operator><name>OnClickListener</name></name></implements></super> <block>{
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PREF_KEY_LOAD_MEDIA</name> <init>= <expr><literal type="string">"core.options.loadmedia"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PREF_KEY_SAVE_TAG_FILTERS</name> <init>= <expr><literal type="string">"core.options.savetagfilters"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>SUBMIT_APP_URL</name> <init>= <expr><literal type="string">"https://androidflair.github.io/wikiapps/"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>settings_toolbar</name></name></expr></argument>)</argument_list></annotation> <type><name>Toolbar</name></type> <name>mToolbar</name></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>activity_settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ButterKnife</name><operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setSupportActionBar</name><argument_list>(<argument><expr><name>mToolbar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mToolbar</name><operator>.</operator><name>setNavigationIcon</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ic_arrow_back_white_48px</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mToolbar</name><operator>.</operator><name>setNavigationOnClickListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>savedInstanceState</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>SettingsFragment</name></type> <name>fragment</name> <init>= <expr><operator>new</operator> <call><name>SettingsFragment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>beginTransaction</name><argument_list>()</argument_list></call><operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>settings_frame</name></name></expr></argument>, <argument><expr><name>fragment</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>SettingsFragment</name> <super><extends>extends <name>PreferenceFragmentCompat</name></extends> <implements>implements <name><name>Preference</name><operator>.</operator><name>OnPreferenceClickListener</name></name>, <name><name>Preference</name><operator>.</operator><name>OnPreferenceChangeListener</name></name></implements></super> <block>{

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onCreatePreferences</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>rootKey</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>addPreferencesFromResource</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>xml</name><operator>.</operator><name>preferences</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>findPreference</name><argument_list>(<argument><expr><literal type="string">"about"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setOnPreferenceClickListener</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>findPreference</name><argument_list>(<argument><expr><literal type="string">"submitapp"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setOnPreferenceClickListener</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>findPreference</name><argument_list>(<argument><expr><literal type="string">"theme"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setOnPreferenceChangeListener</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>findPreference</name><argument_list>(<argument><expr><literal type="string">"core.options.savetagfilters"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setOnPreferenceChangeListener</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onViewCreated</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onViewCreated</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>boolean</name></type> <name>onPreferenceChange</name><parameter_list>(<parameter><decl><type><name>Preference</name></type> <name>preference</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{
            <if>if <condition>(<expr><call><name><name>preference</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"core.options.savetagfilters"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>Boolean</name><operator>)</operator> <name>o</name><operator>)</operator></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>deleteSavedTagFilters</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>Timber</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><literal type="string">"Save selected tags is now "</literal> <operator>+</operator> <name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            }</block></then></if>

            <expr_stmt><expr><operator>new</operator> <call><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>setMessage</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>restart</name></name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>setNegativeButton</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>later</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>setPositiveButton</name><argument_list>(
                            <argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ok</name></name></expr></argument>,
                            <argument><expr><lambda><parameter_list>(<parameter><decl><name>dialogInterface</name></decl></parameter>, <parameter><decl><name>i</name></decl></parameter>)</parameter_list> -&gt; <block type="pseudo"><expr><operator>(</operator><operator>(</operator><name>AppStoreApp</name><operator>)</operator> <call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getApplication</name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>restart</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>boolean</name></type> <name>onPreferenceClick</name><parameter_list>(<parameter><decl><type><name>Preference</name></type> <name>preference</name></decl></parameter>)</parameter_list> <block>{
            <if>if <condition>(<expr><call><name><name>preference</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"about"</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>AboutActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
            <elseif>else <if>if <condition>(<expr><call><name><name>preference</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"submitapp"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name><name>CustomTabsIntent</name><operator>.</operator><name>Builder</name></name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name><name>CustomTabsIntent</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setToolbarColor</name></name><argument_list>(<argument><expr><call><name><name>ContextCompat</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>colorPrimary</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setSecondaryToolbarColor</name></name><argument_list>(<argument><expr><call><name><name>ContextCompat</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>colorPrimary</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>CustomTabsIntent</name></type> <name>customTabsIntent</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>customTabsIntent</name><operator>.</operator><name>launchUrl</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>SUBMIT_APP_URL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif></if>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></function>

        <function><specifier>private</specifier> <type><name>void</name></type> <name>deleteSavedTagFilters</name><parameter_list>()</parameter_list> <block>{
            <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>prefs</name> <init>=
                    <expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>SharedPreferences</name><operator>.</operator><name>Editor</name></name></type> <name>editor</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><literal type="string">"savedTags_size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>AppTags</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
                <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><literal type="string">"savedTags_"</literal> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>

            <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

    }</block></class>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/screens/settings/AboutActivity.java" hash="c966e5270c6e494994bd9b8b00fc1ac6137fc66f"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>screens</name><operator>.</operator><name>settings</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>StrictMode</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>customtabs</name><operator>.</operator><name>CustomTabsIntent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>design</name><operator>.</operator><name>widget</name><operator>.</operator><name>NavigationView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>content</name><operator>.</operator><name>ContextCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toolbar</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>

<import>import <name><name>butterknife</name><operator>.</operator><name>BindView</name></name>;</import>
<import>import <name><name>butterknife</name><operator>.</operator><name>ButterKnife</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>psdev</name><operator>.</operator><name>licensesdialog</name><operator>.</operator><name>LicensesDialog</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>psdev</name><operator>.</operator><name>licensesdialog</name><operator>.</operator><name>licenses</name><operator>.</operator><name>ApacheSoftwareLicense20</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>psdev</name><operator>.</operator><name>licensesdialog</name><operator>.</operator><name>licenses</name><operator>.</operator><name>BSD2ClauseLicense</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>psdev</name><operator>.</operator><name>licensesdialog</name><operator>.</operator><name>model</name><operator>.</operator><name>Notice</name></name>;</import>
<import>import <name><name>de</name><operator>.</operator><name>psdev</name><operator>.</operator><name>licensesdialog</name><operator>.</operator><name>model</name><operator>.</operator><name>Notices</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>schedulers</name><operator>.</operator><name>Schedulers</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>AppStoreApp</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>BuildConfig</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>github</name><operator>.</operator><name>GithubApi</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>github</name><operator>.</operator><name>GithubRepository</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>ui</name><operator>.</operator><name>BaseActivity</name></name>;</import>
<import>import <name><name>timber</name><operator>.</operator><name>log</name><operator>.</operator><name>Timber</name></name>;</import>

<class><specifier>public</specifier> class <name>AboutActivity</name> <super><extends>extends <name>BaseActivity</name></extends> <implements>implements <name><name>View</name><operator>.</operator><name>OnClickListener</name></name>, <name><name>NavigationView</name><operator>.</operator><name>OnNavigationItemSelectedListener</name></name></implements></super> <block>{
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>app_nav</name></name></expr></argument>)</argument_list></annotation>
    <type><name>NavigationView</name></type> <name>app_nav</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>contributor_nav</name></name></expr></argument>)</argument_list></annotation>
    <type><name>NavigationView</name></type> <name>contributor_nav</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>about_toolbar</name></name></expr></argument>)</argument_list></annotation>
    <type><name>Toolbar</name></type> <name>mToolbar</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>protected</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>GITHUB_URL</name> <init>= <expr><literal type="string">"https://www.github.com/"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>BUG_URL</name> <init>= <expr><literal type="string">"https://github.com/d4rken/reddit-android-appstore/issues"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GithubRepository</name></type> <name>githubRepository</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>NavigationView</name><operator>.</operator><name>OnNavigationItemSelectedListener</name></name></type> <name>contributorListener</name> <init>= <expr><operator>new</operator> <class><super><name><name>NavigationView</name><operator>.</operator><name>OnNavigationItemSelectedListener</name></name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>boolean</name></type> <name>onNavigationItemSelected</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>openInChrome</name><argument_list>(<argument><expr><name>GITHUB_URL</name> <operator>+</operator> <call><name><name>item</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onNavigationItemSelected</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
        <switch>switch <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>reportbug</name></name></expr>:</case> <block>{
                <expr_stmt><expr><call><name>openInChrome</name><argument_list>(<argument><expr><name>BUG_URL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            }</block>
            <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>licenses</name></name></expr>:</case> <block>{
                <decl_stmt><decl><type><name>Notices</name></type> <name>notices</name> <init>= <expr><operator>new</operator> <call><name>Notices</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>notices</name><operator>.</operator><name>addNotice</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Notice</name><argument_list>(<argument><expr><literal type="string">"Fastscroll"</literal></expr></argument>, <argument><expr><literal type="string">"https://github.com/FutureMind/recycler-fast-scroll"</literal></expr></argument>, <argument><expr><literal type="string">"Copyright 2015 Future Mind"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>ApacheSoftwareLicense20</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>notices</name><operator>.</operator><name>addNotice</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Notice</name><argument_list>(<argument><expr><literal type="string">"Glide"</literal></expr></argument>, <argument><expr><literal type="string">"https://github.com/bumptech/glide"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>BSD2ClauseLicense</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>notices</name><operator>.</operator><name>addNotice</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Notice</name><argument_list>(<argument><expr><literal type="string">"RxJava"</literal></expr></argument>, <argument><expr><literal type="string">"https://github.com/ReactiveX/RxJava"</literal></expr></argument>, <argument><expr><literal type="string">"Copyright 2013 Netflix, Inc."</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>ApacheSoftwareLicense20</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>notices</name><operator>.</operator><name>addNotice</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Notice</name><argument_list>(<argument><expr><literal type="string">"Tomorrow MVP"</literal></expr></argument>, <argument><expr><literal type="string">"https://github.com/michal-luszczuk/tomorrow-mvp"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>ApacheSoftwareLicense20</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>notices</name><operator>.</operator><name>addNotice</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Notice</name><argument_list>(<argument><expr><literal type="string">"GSon"</literal></expr></argument>, <argument><expr><literal type="string">"https://github.com/google/gson"</literal></expr></argument>, <argument><expr><literal type="string">"Copyright 2008 Google Inc."</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>ApacheSoftwareLicense20</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>notices</name><operator>.</operator><name>addNotice</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Notice</name><argument_list>(<argument><expr><literal type="string">"Dagger"</literal></expr></argument>, <argument><expr><literal type="string">"https://github.com/square/dagger"</literal></expr></argument>, <argument><expr><literal type="string">"Copyright 2012 Square, Inc."</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>ApacheSoftwareLicense20</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>notices</name><operator>.</operator><name>addNotice</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Notice</name><argument_list>(<argument><expr><literal type="string">"Butterknife"</literal></expr></argument>, <argument><expr><literal type="string">"https://github.com/JakeWharton/butterknife"</literal></expr></argument>, <argument><expr><literal type="string">"Copyright 2013 Jake Wharton"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>ApacheSoftwareLicense20</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>notices</name><operator>.</operator><name>addNotice</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Notice</name><argument_list>(<argument><expr><literal type="string">"Timber"</literal></expr></argument>, <argument><expr><literal type="string">"https://github.com/JakeWharton/timber"</literal></expr></argument>, <argument><expr><literal type="string">"Copyright 2013 Jake Wharton"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>ApacheSoftwareLicense20</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>notices</name><operator>.</operator><name>addNotice</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Notice</name><argument_list>(<argument><expr><literal type="string">"Flow Layout"</literal></expr></argument>, <argument><expr><literal type="string">"https://github.com/blazsolar/FlowLayout"</literal></expr></argument>, <argument><expr><literal type="string">"Copyright 2013 BlaÅ¾ Å olar"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>ApacheSoftwareLicense20</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>notices</name><operator>.</operator><name>addNotice</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Notice</name><argument_list>(<argument><expr><literal type="string">"OkHttp"</literal></expr></argument>, <argument><expr><literal type="string">"http://square.github.io/okhttp/"</literal></expr></argument>, <argument><expr><literal type="string">"Copyright 2016 Square, Inc."</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>ApacheSoftwareLicense20</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>notices</name><operator>.</operator><name>addNotice</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Notice</name><argument_list>(<argument><expr><literal type="string">"Android Support Libraries"</literal></expr></argument>, <argument><expr><literal type="string">"https://github.com/android/platform_frameworks_support"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>ApacheSoftwareLicense20</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>notices</name><operator>.</operator><name>addNotice</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Notice</name><argument_list>(<argument><expr><literal type="string">"LeakCanary"</literal></expr></argument>, <argument><expr><literal type="string">"https://github.com/square/leakcanary"</literal></expr></argument>, <argument><expr><literal type="string">"Copyright 2015 Square, Inc."</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>ApacheSoftwareLicense20</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>notices</name><operator>.</operator><name>addNotice</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Notice</name><argument_list>(<argument><expr><literal type="string">"License Dialog"</literal></expr></argument>, <argument><expr><literal type="string">"https://github.com/PSDev/LicensesDialog"</literal></expr></argument>, <argument><expr><literal type="string">"Copyright 2013-2016 Philip Schiffer"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>ApacheSoftwareLicense20</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><operator>new</operator> <call><name><name>LicensesDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>setNotices</name><argument_list>(<argument><expr><name>notices</name></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>setTitle</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>licenses</name></name></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call>
                        <operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            }</block>
        }</block></switch>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>activity_about</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ButterKnife</name><operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>StrictMode</name><operator>.</operator><name>ThreadPolicy</name></name></type> <name>policy</name> <init>= <expr><operator>new</operator> <call><name><name>StrictMode</name><operator>.</operator><name>ThreadPolicy</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>permitAll</name><argument_list>()</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>StrictMode</name><operator>.</operator><name>setThreadPolicy</name></name><argument_list>(<argument><expr><name>policy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>githubRepository</name> <operator>=</operator> <call><name><name>AppStoreApp</name><operator>.</operator><name>Injector</name><operator>.</operator><name>INSTANCE</name><operator>.</operator><name>getAppComponent</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>githubRepository</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setSupportActionBar</name><argument_list>(<argument><expr><name>mToolbar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mToolbar</name><operator>.</operator><name>setNavigationIcon</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ic_arrow_back_white_48px</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mToolbar</name><operator>.</operator><name>setNavigationOnClickListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>app_nav</name><operator>.</operator><name>getMenu</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>findItem</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setTitle</name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name><name>BuildConfig</name><operator>.</operator><name>VERSION_NAME</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>app_nav</name><operator>.</operator><name>setNavigationItemSelectedListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>listContributors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>void</name></type> <name>openInChrome</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>url</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>CustomTabsIntent</name><operator>.</operator><name>Builder</name></name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name><name>CustomTabsIntent</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setToolbarColor</name></name><argument_list>(<argument><expr><call><name><name>ContextCompat</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>colorPrimary</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setSecondaryToolbarColor</name></name><argument_list>(<argument><expr><call><name><name>ContextCompat</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>colorPrimary</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CustomTabsIntent</name></type> <name>customTabsIntent</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>customTabsIntent</name><operator>.</operator><name>launchUrl</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>listContributors</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>githubRepository</name><operator>.</operator><name>getContributors</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>observeOn</name><argument_list>(<argument><expr><call><name><name>Schedulers</name><operator>.</operator><name>io</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>data</name></decl></parameter></parameter_list> -&gt; <block>{
                    <decl_stmt><decl><type><name>ContributorData</name></type> <name>contributorData</name> <init>= <expr><operator>new</operator> <call><name>ContributorData</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <for>for <control>(<init><decl><type><name><name>GithubApi</name><operator>.</operator><name>Contributor</name></name></type> <name>c</name> <range>: <expr><name>data</name></expr></range></decl></init>)</control> <block>{
                        <expr_stmt><expr><call><name><name>Timber</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><literal type="string">"Contributor: %s"</literal></expr></argument>, <argument><expr><call><name><name>c</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>contributorData</name><operator>.</operator><name>addContributor</name></name><argument_list>(<argument><expr><name><name>c</name><operator>.</operator><name>username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></for>
                    <return>return <expr><name>contributorData</name></expr>;</return>
                }</block></lambda></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>contributorData</name></decl></parameter></parameter_list> -&gt; <block>{
                    <if>if <condition>(<expr><call><name><name>contributorData</name><operator>.</operator><name>getContributors</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&lt;</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>contributor_nav</name><operator>.</operator><name>getMenu</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setTitle</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error_contributors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return;</return>
                    }</block></then></if>

                    <for>for <control>(<init><decl><type><name>String</name></type> <name>name</name> <range>: <expr><call><name><name>contributorData</name><operator>.</operator><name>getContributors</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
                        <expr_stmt><expr><call><name><name>contributor_nav</name><operator>.</operator><name>getMenu</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setTitle</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></for>
                    <expr_stmt><expr><call><name><name>contributor_nav</name><operator>.</operator><name>setNavigationItemSelectedListener</name></name><argument_list>(<argument><expr><name>contributorListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/screens/navigation/NavigationModule.java" hash="68db3a2824974589ba31e27d65475557f9b8b68c"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>screens</name><operator>.</operator><name>navigation</name></name>;</package>

<import>import <name><name>dagger</name><operator>.</operator><name>Module</name></name>;</import>
<import>import <name><name>dagger</name><operator>.</operator><name>Provides</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>github</name><operator>.</operator><name>GithubRepository</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>wiki</name><operator>.</operator><name>WikiRepository</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>dagger</name><operator>.</operator><name>FragmentScope</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>mvp</name><operator>.</operator><name>PresenterFactory</name></name>;</import>


<class><annotation>@<name>Module</name></annotation>
<specifier>public</specifier> class <name>NavigationModule</name> <block>{
    <function><annotation>@<name>Provides</name></annotation>
    <annotation>@<name>FragmentScope</name></annotation>
    <specifier>public</specifier> <type><name><name>PresenterFactory</name><argument_list type="generic">&lt;<argument><name><name>NavigationContract</name><operator>.</operator><name>Presenter</name></name></argument>&gt;</argument_list></name></type> <name>providePresenterFactory</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>WikiRepository</name></type> <name>wikiRepository</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>GithubRepository</name></type> <name>githubRepository</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <class><super><name><name>PresenterFactory</name><argument_list type="generic">&lt;<argument><name><name>NavigationContract</name><operator>.</operator><name>Presenter</name></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name><name>NavigationContract</name><operator>.</operator><name>Presenter</name></name></type> <name>create</name><parameter_list>()</parameter_list> <block>{
                <return>return <expr><operator>new</operator> <call><name>NavigationPresenter</name><argument_list>(<argument><expr><name>wikiRepository</name></expr></argument>, <argument><expr><name>githubRepository</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>NavigationContract</name><operator>.</operator><name>Presenter</name></extends></argument>&gt;</argument_list></name></type> <name>getTypeClazz</name><parameter_list>()</parameter_list> <block>{
                <return>return <expr><name><name>NavigationPresenter</name><operator>.</operator><name>class</name></name></expr>;</return>
            }</block></function>
        }</block></class></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/screens/navigation/NavigationData.java" hash="e67b62d0988fd6216a72a8972d790f7071a7603f"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>screens</name><operator>.</operator><name>navigation</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppInfo</name></name>;</import>

<class><specifier>public</specifier> class <name>NavigationData</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>CategoryFilter</name></argument>&gt;</argument_list></name></type> <name>primaryCategories</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>CategoryFilter</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>CategoryFilter</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>secondaryCategories</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>CategoryFilter</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>CategoryFilter</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>tertiaryCategories</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>secondaryCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>tertiaryCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>addApp</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>AppInfo</name></type> <name>appInfo</name></decl></parameter>)</parameter_list> <block>{
        <comment type="line">// TODO order this</comment>
        <decl_stmt><decl><type><name>CategoryFilter</name></type> <name>primaryFilter</name> <init>= <expr><operator>new</operator> <call><name>CategoryFilter</name><argument_list>(<argument><expr><call><name><name>appInfo</name><operator>.</operator><name>getPrimaryCategory</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>!</operator><call><name><name>primaryCategories</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>primaryFilter</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>primaryCategories</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>primaryFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>CategoryFilter</name></argument>&gt;</argument_list></name></type> <name>secondary</name> <init>= <expr><call><name><name>secondaryCategories</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>primaryFilter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>secondary</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>secondary</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        <decl_stmt><decl><type><name>CategoryFilter</name></type> <name>secondaryFilter</name> <init>= <expr><operator>new</operator> <call><name>CategoryFilter</name><argument_list>(<argument><expr><call><name><name>appInfo</name><operator>.</operator><name>getPrimaryCategory</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>appInfo</name><operator>.</operator><name>getSecondaryCategory</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>!</operator><call><name><name>secondary</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>secondaryFilter</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>secondaryCount</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>secondary</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>secondaryFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>secondaryCategories</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>primaryFilter</name></expr></argument>, <argument><expr><name>secondary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>CategoryFilter</name></argument>&gt;</argument_list></name></type> <name>tertiary</name> <init>= <expr><call><name><name>tertiaryCategories</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>secondaryFilter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>tertiary</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>tertiary</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        <decl_stmt><decl><type><name>CategoryFilter</name></type> <name>tertiaryFilter</name> <init>= <expr><operator>new</operator> <call><name>CategoryFilter</name><argument_list>(<argument><expr><call><name><name>appInfo</name><operator>.</operator><name>getPrimaryCategory</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>appInfo</name><operator>.</operator><name>getSecondaryCategory</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>appInfo</name><operator>.</operator><name>getTertiaryCategory</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>!</operator><call><name><name>tertiary</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>tertiaryFilter</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>tertiaryCount</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>tertiary</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>tertiaryFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>tertiaryCategories</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>secondaryFilter</name></expr></argument>, <argument><expr><name>tertiary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>CategoryFilter</name></argument>&gt;</argument_list></name></type> <name>getPrimaryCategories</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>primaryCategories</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>CategoryFilter</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>CategoryFilter</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getSecondaryCategories</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>secondaryCategories</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>CategoryFilter</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>CategoryFilter</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getTertiaryCategories</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>tertiaryCategories</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>addPrimaryCategory</name><parameter_list>(<parameter><decl><type><name>CategoryFilter</name></type> <name>category</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>primaryCategories</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>category</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>US</name></name></expr></argument>, <argument><expr><literal type="string">"NavigationData(%d primary, %d secondary, %d tertiary)"</literal></expr></argument>, <argument><expr><call><name><name>primaryCategories</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>secondaryCount</name></expr></argument>, <argument><expr><name>tertiaryCount</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/screens/navigation/CategoryFilter.java" hash="6015f0904babceebff912aea8388ecaf5dde0f1f"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>screens</name><operator>.</operator><name>navigation</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcel</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcelable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>

<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>R</name></name>;</import>

<class><specifier>public</specifier> class <name>CategoryFilter</name> <super><implements>implements <name>Parcelable</name></implements></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>primaryCategory</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>secondaryCategory</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>tertiaryCategory</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>newlyAdded</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>CategoryFilter</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>primaryCategory</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>secondaryCategory</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>tertiaryCategory</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>newlyAdded</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>CategoryFilter</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>primaryCategory</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>secondaryCategory</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>tertiaryCategory</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>newlyAdded</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>primaryCategory</name></name> <operator>=</operator> <name>primaryCategory</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>secondaryCategory</name></name> <operator>=</operator> <name>secondaryCategory</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tertiaryCategory</name></name> <operator>=</operator> <name>tertiaryCategory</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>newlyAdded</name></name> <operator>=</operator> <name>newlyAdded</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Nullable</name></annotation>
    <specifier>public</specifier> <type><name>String</name></type> <name>getPrimaryCategory</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>primaryCategory</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Nullable</name></annotation>
    <specifier>public</specifier> <type><name>String</name></type> <name>getSecondaryCategory</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>secondaryCategory</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Nullable</name></annotation>
    <specifier>public</specifier> <type><name>String</name></type> <name>getTertiaryCategory</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>tertiaryCategory</name></expr>;</return>
    }</block></function>


    <function><annotation>@<name>Nullable</name></annotation>
    <specifier>public</specifier> <type><name>String</name></type> <name>isNewlyAdded</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>newlyAdded</name></expr>;</return>
    }</block></function>


    <constructor><specifier>protected</specifier> <name>CategoryFilter</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>primaryCategory</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>secondaryCategory</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tertiaryCategory</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>newlyAdded</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>writeToParcel</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>primaryCategory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>secondaryCategory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>tertiaryCategory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>newlyAdded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>describeContents</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>Creator</name><argument_list type="generic">&lt;<argument><name>CategoryFilter</name></argument>&gt;</argument_list></name></type> <name>CREATOR</name> <init>= <expr><operator>new</operator> <class><super><name><name>Creator</name><argument_list type="generic">&lt;<argument><name>CategoryFilter</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>CategoryFilter</name></type> <name>createFromParcel</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><operator>new</operator> <call><name>CategoryFilter</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name><name>CategoryFilter</name><index>[]</index></name></type> <name>newArray</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><operator>new</operator> <name><name>CategoryFilter</name><index>[<expr><name>size</name></expr>]</index></name></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getFragmentTag</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>US</name></name></expr></argument>, <argument><expr><literal type="string">"%s:%s:%s"</literal></expr></argument>, <argument><expr><name>primaryCategory</name></expr></argument>, <argument><expr><name>secondaryCategory</name></expr></argument>, <argument><expr><name>tertiaryCategory</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>o</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
        <if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name>getClass</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>o</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>

        <decl_stmt><decl><type><name>CategoryFilter</name></type> <name>that</name> <init>= <expr><operator>(</operator><name>CategoryFilter</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><ternary><condition><expr><name>primaryCategory</name><operator>==</operator><literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>that</name><operator>.</operator><name>primaryCategory</name></name><operator>!=</operator><literal type="null">null</literal></expr> </then><else>: <expr><operator>!</operator><call><name><name>primaryCategory</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>primaryCategory</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        <if>if <condition>(<expr><ternary><condition><expr><name>secondaryCategory</name><operator>==</operator><literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>that</name><operator>.</operator><name>secondaryCategory</name></name><operator>!=</operator><literal type="null">null</literal></expr> </then><else>: <expr><operator>!</operator><call><name><name>secondaryCategory</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>secondaryCategory</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        <if>if <condition>(<expr><ternary><condition><expr><name>tertiaryCategory</name><operator>==</operator><literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>that</name><operator>.</operator><name>tertiaryCategory</name></name><operator>!=</operator><literal type="null">null</literal></expr> </then><else>: <expr><operator>!</operator><call><name><name>tertiaryCategory</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>tertiaryCategory</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        <return>return <expr><operator>(</operator><ternary><condition><expr><name>newlyAdded</name><operator>==</operator><literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>that</name><operator>.</operator><name>newlyAdded</name></name><operator>==</operator><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>newlyAdded</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>that</name><operator>.</operator><name>newlyAdded</name></name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</return>

    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><ternary><condition><expr><name>primaryCategory</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>primaryCategory</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>secondaryCategory</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>secondaryCategory</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getName</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>newlyAdded</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>app_category_new</name></name></expr></argument>)</argument_list></call></expr>;</return></block></then>
        <elseif>else <if>if <condition>(<expr><name>tertiaryCategory</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>tertiaryCategory</name></expr>;</return></block></then></if></elseif>
        <elseif>else <if>if <condition>(<expr><name>secondaryCategory</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>secondaryCategory</name></expr>;</return></block></then></if></elseif>
        <elseif>else <if>if <condition>(<expr><name>primaryCategory</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>primaryCategory</name></expr>;</return></block></then></if></elseif>
        <else>else <block type="pseudo"><return>return <expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>app_category_everything</name></name></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/screens/navigation/NavigationPresenter.java" hash="70bbd8ee16344881a5f0867b69257363b1c4d0c6"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>screens</name><operator>.</operator><name>navigation</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>

<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>Observer</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>android</name><operator>.</operator><name>schedulers</name><operator>.</operator><name>AndroidSchedulers</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>disposables</name><operator>.</operator><name>Disposable</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>schedulers</name><operator>.</operator><name>Schedulers</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>BuildConfig</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppInfo</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>github</name><operator>.</operator><name>GithubApi</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>github</name><operator>.</operator><name>GithubRepository</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>wiki</name><operator>.</operator><name>WikiRepository</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>VersionHelper</name></name>;</import>
<import>import <name><name>timber</name><operator>.</operator><name>log</name><operator>.</operator><name>Timber</name></name>;</import>


<class><specifier>public</specifier> class <name>NavigationPresenter</name> <super><implements>implements <name><name>NavigationContract</name><operator>.</operator><name>Presenter</name></name></implements></super> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>WikiRepository</name></type> <name>repository</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>GithubRepository</name></type> <name>githubRepository</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>NavigationContract</name><operator>.</operator><name>View</name></name></type> <name>view</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Disposable</name></type> <name>categoryUpdater</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CategoryFilter</name></type> <name>currentCategoryFilter</name> <init>= <expr><operator>new</operator> <call><name>CategoryFilter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Disposable</name></type> <name>updateCheck</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>GithubApi</name><operator>.</operator><name>Release</name></name></type> <name>release</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>NavigationPresenter</name><parameter_list>(<parameter><decl><type><name>WikiRepository</name></type> <name>repository</name></decl></parameter>, <parameter><decl><type><name>GithubRepository</name></type> <name>githubRepository</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>repository</name></name> <operator>=</operator> <name>repository</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>githubRepository</name></name> <operator>=</operator> <name>githubRepository</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>bundle</name></decl></parameter>)</parameter_list> <block>{

    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAttachView</name><parameter_list>(<parameter><decl><type><name><name>NavigationContract</name><operator>.</operator><name>View</name></name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>view</name></name> <operator>=</operator> <name>view</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>categoryUpdater</name> <operator>=</operator> <call><name><name>repository</name><operator>.</operator><name>getAppList</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>observeOn</name><argument_list>(<argument><expr><call><name><name>Schedulers</name><operator>.</operator><name>computation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>appInfos</name></decl></parameter></parameter_list> -&gt; <block>{
                    <decl_stmt><decl><type><name>NavigationData</name></type> <name>navData</name> <init>= <expr><operator>new</operator> <call><name>NavigationData</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <for>for <control>(<init><decl><type><name>AppInfo</name></type> <name>appInfo</name> <range>: <expr><name>appInfos</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><call><name><name>navData</name><operator>.</operator><name>addApp</name></name><argument_list>(<argument><expr><name>appInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
                    <return>return <expr><name>navData</name></expr>;</return>
                }</block></lambda></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>observeOn</name><argument_list>(<argument><expr><call><name><name>AndroidSchedulers</name><operator>.</operator><name>mainThread</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>navigationData</name></decl></parameter></parameter_list> -&gt; <block>{
                    <expr_stmt><expr><call><name><name>Timber</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><literal type="string">"showNavigationItems(%s)"</literal></expr></argument>, <argument><expr><name>navigationData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>NavigationPresenter</name><operator>.</operator><name>this</name><operator>.</operator><name>view</name><operator>.</operator><name>showNavigationItems</name></name><argument_list>(<argument><expr><name>navigationData</name></expr></argument>, <argument><expr><name>currentCategoryFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>githubRepository</name><operator>.</operator><name>getLatestRelease</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>subscribeOn</name><argument_list>(<argument><expr><call><name><name>Schedulers</name><operator>.</operator><name>io</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>observeOn</name><argument_list>(<argument><expr><call><name><name>AndroidSchedulers</name><operator>.</operator><name>mainThread</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name><name>GithubApi</name><operator>.</operator><name>Release</name></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{

                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>onSubscribe</name><parameter_list>(<parameter><decl><type><name>Disposable</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><name>updateCheck</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
                    }</block></function>

                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>onNext</name><parameter_list>(<parameter><decl><type><name><name>GithubApi</name><operator>.</operator><name>Release</name></name></type> <name>release</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><name><name>NavigationPresenter</name><operator>.</operator><name>this</name><operator>.</operator><name>release</name></name> <operator>=</operator> <name>release</name></expr>;</expr_stmt>
                        <if>if <condition>(<expr><call><name><name>VersionHelper</name><operator>.</operator><name>versionCompare</name></name><argument_list>(<argument><expr><name><name>BuildConfig</name><operator>.</operator><name>VERSION_NAME</name></name></expr></argument>, <argument><expr><name><name>release</name><operator>.</operator><name>tagName</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name><name>Timber</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><literal type="string">"Update available, current: %s, new: %s"</literal></expr></argument>, <argument><expr><name><name>BuildConfig</name><operator>.</operator><name>VERSION_NAME</name></name></expr></argument>, <argument><expr><name><name>release</name><operator>.</operator><name>tagName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>showUpdateSnackbar</name></name><argument_list>(<argument><expr><name>release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>enableUpdateAvailableText</name></name><argument_list>(<argument><expr><name>release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then> <else>else <block type="pseudo"><expr_stmt><expr><call><name><name>Timber</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><literal type="string">"No newer version available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
                    }</block></function>

                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>onError</name><parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>showUpdateErrorToast</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>Timber</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="string">"Error during update check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></function>

                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>onComplete</name><parameter_list>()</parameter_list> <block>{

                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDetachView</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>categoryUpdater</name><operator>.</operator><name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>updateCheck</name><operator>.</operator><name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>view</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onSaveInstanceState</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>bundle</name></decl></parameter>)</parameter_list> <block>{

    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDestroy</name><parameter_list>()</parameter_list> <block>{

    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>notifySelectedFilter</name><parameter_list>(<parameter><decl><type><name>CategoryFilter</name></type> <name>categoryFilter</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>currentCategoryFilter</name> <operator>=</operator> <name>categoryFilter</name></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>downloadUpdate</name><parameter_list>(<parameter><decl><type><name><name>GithubApi</name><operator>.</operator><name>Release</name></name></type> <name>release</name></decl></parameter>)</parameter_list> <block>{
        <comment type="line">// TODO we could directory use Androids DownloadManager.class</comment>
        <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>showDownload</name></name><argument_list>(<argument><expr><call><name><name>release</name><operator>.</operator><name>assets</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>downloadUrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>buildChangelog</name><parameter_list>(<parameter><decl><type><name><name>GithubApi</name><operator>.</operator><name>Release</name></name></type> <name>release</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>showChangelog</name></name><argument_list>(<argument><expr><name>release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/screens/list/AppListContract.java" hash="2a47f1556be71e0a24b8bfd74d48011179e46648"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>screens</name><operator>.</operator><name>list</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppInfo</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppTags</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>mvp</name><operator>.</operator><name>BasePresenter</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>mvp</name><operator>.</operator><name>BaseView</name></name>;</import>


<interface><specifier>public</specifier> interface <name>AppListContract</name> <block>{
    <interface>interface <name>View</name> <super><extends>extends <name>BaseView</name></extends></super> <block>{

        <function_decl><type><name>void</name></type> <name>showAppList</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AppInfo</name></argument>&gt;</argument_list></name></type> <name>appInfos</name></decl></parameter>)</parameter_list>;</function_decl>

        <function_decl><type><name>void</name></type> <name>showLoadingScreen</name><parameter_list>()</parameter_list>;</function_decl>

        <function_decl><type><name>void</name></type> <name>updateTagCount</name><parameter_list>(<parameter><decl><type><name>TagMap</name></type> <name>tagMap</name></decl></parameter>)</parameter_list>;</function_decl>

        <function_decl><type><name>void</name></type> <name>showError</name><parameter_list>()</parameter_list>;</function_decl>

        <function_decl><type><name>void</name></type> <name>restoreSelectedTags</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>AppTags</name></argument>&gt;</argument_list></name></type> <name>appTags</name></decl></parameter>)</parameter_list>;</function_decl>

        <function_decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>AppTags</name></argument>&gt;</argument_list></name></type> <name>getSelectedTags</name><parameter_list>()</parameter_list>;</function_decl>
    }</block></interface>

    <interface>interface <name>Presenter</name> <super><extends>extends <name><name>BasePresenter</name><argument_list type="generic">&lt;<argument><name>View</name></argument>&gt;</argument_list></name></extends></super> <block>{

        <function_decl><type><name>void</name></type> <name>refreshData</name><parameter_list>()</parameter_list>;</function_decl>

    }</block></interface>
}</block></interface>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/screens/list/AppListComponent.java" hash="6cc601c431e2a62210bfa37af25043b0538dbdaf"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>screens</name><operator>.</operator><name>list</name></name>;</package>

<import>import <name><name>dagger</name><operator>.</operator><name>Component</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>AppComponent</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>dagger</name><operator>.</operator><name>FragmentScope</name></name>;</import>


<interface><annotation>@<name>FragmentScope</name></annotation>
<annotation>@<name>Component</name><argument_list>(<argument><expr><name>modules</name> <operator>=</operator> <name><name>AppListModule</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>dependencies</name> <operator>=</operator> <name><name>AppComponent</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> interface <name>AppListComponent</name> <block>{
    <function_decl><type><name>void</name></type> <name>inject</name><parameter_list>(<parameter><decl><type><name>AppListFragment</name></type> <name>fragment</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></interface>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/screens/list/AppListModule.java" hash="60e6aebee0d06c4dada1d438ab5d0c6a79b29ef5"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>screens</name><operator>.</operator><name>list</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>

<import>import <name><name>dagger</name><operator>.</operator><name>Module</name></name>;</import>
<import>import <name><name>dagger</name><operator>.</operator><name>Provides</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>wiki</name><operator>.</operator><name>WikiRepository</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>screens</name><operator>.</operator><name>navigation</name><operator>.</operator><name>CategoryFilter</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>dagger</name><operator>.</operator><name>FragmentScope</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>mvp</name><operator>.</operator><name>PresenterFactory</name></name>;</import>


<class><annotation>@<name>Module</name></annotation>
<specifier>public</specifier> class <name>AppListModule</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name>CategoryFilter</name></type> <name>categoryFilter</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>AppListModule</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>fragmentArguments</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>categoryFilter</name> <operator>=</operator> <call><name><name>fragmentArguments</name><operator>.</operator><name>getParcelable</name></name><argument_list>(<argument><expr><name><name>AppListFragment</name><operator>.</operator><name>ARG_KEY_CATEGORYFILTER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Provides</name></annotation>
    <annotation>@<name>FragmentScope</name></annotation>
    <specifier>public</specifier> <type><name>CategoryFilter</name></type> <name>provideCategories</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>categoryFilter</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Provides</name></annotation>
    <annotation>@<name>FragmentScope</name></annotation>
    <specifier>public</specifier> <type><name><name>PresenterFactory</name><argument_list type="generic">&lt;<argument><name><name>AppListContract</name><operator>.</operator><name>Presenter</name></name></argument>&gt;</argument_list></name></type> <name>providePresenterFactory</name><parameter_list>(
            <parameter><decl><type><specifier>final</specifier> <name>WikiRepository</name></type> <name>wikiRepository</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name>CategoryFilter</name></type> <name>categoryFilter</name></decl></parameter>,
            <parameter><decl><type><name>SharedPreferences</name></type> <name>preferences</name></decl></parameter>
    )</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <class><super><name><name>PresenterFactory</name><argument_list type="generic">&lt;<argument><name><name>AppListContract</name><operator>.</operator><name>Presenter</name></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name><name>AppListContract</name><operator>.</operator><name>Presenter</name></name></type> <name>create</name><parameter_list>()</parameter_list> <block>{
                <return>return <expr><operator>new</operator> <call><name>AppListPresenter</name><argument_list>(<argument><expr><name>wikiRepository</name></expr></argument>, <argument><expr><name>categoryFilter</name></expr></argument>, <argument><expr><name>preferences</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>AppListContract</name><operator>.</operator><name>Presenter</name></extends></argument>&gt;</argument_list></name></type> <name>getTypeClazz</name><parameter_list>()</parameter_list> <block>{
                <return>return <expr><name><name>AppListPresenter</name><operator>.</operator><name>class</name></name></expr>;</return>
            }</block></function>
        }</block></class></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/screens/list/AppListAdapter.java" hash="bcc9388ac8452d893c07d3c0cdc5491db9469553"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>screens</name><operator>.</operator><name>list</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Html</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Filter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Filterable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>futuremind</name><operator>.</operator><name>recyclerviewfastscroll</name><operator>.</operator><name>SectionTitleProvider</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>wefika</name><operator>.</operator><name>flowlayout</name><operator>.</operator><name>FlowLayout</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>

<import>import <name><name>butterknife</name><operator>.</operator><name>BindView</name></name>;</import>
<import>import <name><name>butterknife</name><operator>.</operator><name>ButterKnife</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppInfo</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppTags</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>screens</name><operator>.</operator><name>settings</name><operator>.</operator><name>SettingsActivity</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>ui</name><operator>.</operator><name>BaseAdapter</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>ui</name><operator>.</operator><name>BaseViewHolder</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>ui</name><operator>.</operator><name>glide</name><operator>.</operator><name>GlideApp</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>ui</name><operator>.</operator><name>glide</name><operator>.</operator><name>IconRequest</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>ui</name><operator>.</operator><name>glide</name><operator>.</operator><name>PlaceHolderRequestListener</name></name>;</import>


<class><specifier>public</specifier> class <name>AppListAdapter</name> <super><extends>extends <name><name>BaseAdapter</name><argument_list type="generic">&lt;<argument><name><name>AppListAdapter</name><operator>.</operator><name>ViewHolder</name></name></argument>&gt;</argument_list></name></extends> <implements>implements <name>Filterable</name>, <name>SectionTitleProvider</name></implements></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name>AppInfoFilter</name></type> <name>filter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>AppInfo</name></argument>&gt;</argument_list></name></type> <name>data</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>AppInfo</name></argument>&gt;</argument_list></name></type> <name>originalData</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name><name>AppListAdapter</name><operator>.</operator><name>ViewHolder</name></name></type> <name>onCreateSDMViewHolder</name><parameter_list>(<parameter><decl><type><name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>, <parameter><decl><type><name>ViewGroup</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>viewType</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>View</name></type> <name>layout</name> <init>= <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>adapter_applist_line</name></name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>new</operator> <call><name>ViewHolder</name><argument_list>(<argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onBindSDMViewHolder</name><parameter_list>(<parameter><decl><type><name><name>AppListAdapter</name><operator>.</operator><name>ViewHolder</name></name></type> <name>holder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><call><name>getItem</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>AppInfo</name></type> <name>getItem</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>data</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>long</name></type> <name>getItemId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>data</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getDescription</name><argument_list>()</argument_list></call><operator>.</operator><call><name>hashCode</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>String</name></type> <name>getSectionTitle</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>data</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getAppName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>substring</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toUpperCase</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>getItemCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>data</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setData</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>AppInfo</name></argument>&gt;</argument_list></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>data</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>originalData</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>data</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>data</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>originalData</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <class><specifier>static</specifier> class <name>ViewHolder</name> <super><extends>extends <name>BaseViewHolder</name></extends></super> <block>{
        <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>appname</name></name></expr></argument>)</argument_list></annotation> <type><name>TextView</name></type> <name>appName</name></decl>;</decl_stmt>
        <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>description</name></name></expr></argument>)</argument_list></annotation> <type><name>TextView</name></type> <name>description</name></decl>;</decl_stmt>
        <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tag_container</name></name></expr></argument>)</argument_list></annotation> <type><name>FlowLayout</name></type> <name>tagContainer</name></decl>;</decl_stmt>
        <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>icon_frame</name></name></expr></argument>)</argument_list></annotation> <type><name>View</name></type> <name>iconFrame</name></decl>;</decl_stmt>
        <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>icon_image</name></name></expr></argument>)</argument_list></annotation> <type><name>ImageView</name></type> <name>iconImage</name></decl>;</decl_stmt>
        <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>icon_placeholder</name></name></expr></argument>)</argument_list></annotation> <type><name>View</name></type> <name>iconPlaceholder</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>ViewHolder</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>itemView</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>itemView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ButterKnife</name><operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>itemView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><specifier>public</specifier> <type><name>void</name></type> <name>bind</name><parameter_list>(<parameter><decl><type><name>AppInfo</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>appName</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>item</name><operator>.</operator><name>getAppName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>N</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>description</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>Html</name><operator>.</operator><name>fromHtml</name></name><argument_list>(<argument><expr><call><name><name>item</name><operator>.</operator><name>getDescription</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Html</name><operator>.</operator><name>FROM_HTML_MODE_COMPACT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>description</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>Html</name><operator>.</operator><name>fromHtml</name></name><argument_list>(<argument><expr><call><name><name>item</name><operator>.</operator><name>getDescription</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <if>if <condition>(<expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getBoolean</name><argument_list>(<argument><expr><name><name>SettingsActivity</name><operator>.</operator><name>PREF_KEY_LOAD_MEDIA</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>iconFrame</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>GlideApp</name><operator>.</operator><name>with</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>load</name><argument_list>(<argument><expr><operator>new</operator> <call><name>IconRequest</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>listener</name><argument_list>(<argument><expr><operator>new</operator> <call><name>PlaceHolderRequestListener</name><argument_list>(<argument><expr><name>iconImage</name></expr></argument>, <argument><expr><name>iconPlaceholder</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>into</name><argument_list>(<argument><expr><name>iconImage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block type="pseudo"><expr_stmt><expr><call><name><name>iconFrame</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

            <expr_stmt><expr><call><name><name>tagContainer</name><operator>.</operator><name>removeAllViews</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>AppTags</name></type> <name>appTags</name> <range>: <expr><call><name><name>item</name><operator>.</operator><name>getTags</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
                <decl_stmt><decl><type><name>TextView</name></type> <name>tv</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>getLayoutInflater</name><argument_list>()</argument_list></call><operator>.</operator><call><name>inflate</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>view_tagtemplate</name></name></expr></argument>, <argument><expr><name>tagContainer</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>tv</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>appTags</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name><name>FlowLayout</name><operator>.</operator><name>LayoutParams</name></name></type> <name>params</name> <init>= <expr><operator>new</operator> <call><name><name>FlowLayout</name><operator>.</operator><name>LayoutParams</name></name><argument_list>(<argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>, <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>setMargins</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>tv</name><operator>.</operator><name>setLayoutParams</name></name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>tagContainer</name><operator>.</operator><name>addView</name></name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><call><name><name>tagContainer</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>item</name><operator>.</operator><name>getTags</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>AppInfoFilter</name></type> <name>getFilter</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>filter</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>filter</name> <operator>=</operator> <operator>new</operator> <call><name>AppInfoFilter</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        <return>return <expr><name>filter</name></expr>;</return>
    }</block></function>

    <class><specifier>public</specifier> class <name>AppInfoFilter</name> <super><extends>extends <name>Filter</name></extends></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>AppTags</name></argument>&gt;</argument_list></name></type> <name>filterAppTagses</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><name>CharSequence</name></type> <name>filterString</name></decl>;</decl_stmt>

        <function><specifier>public</specifier> <type><name>void</name></type> <name>setFilterAppTagses</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>AppTags</name></argument>&gt;</argument_list></name></type> <name>filterAppTagses</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>filterAppTagses</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>filterAppTagses</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>filterAppTagses</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>filterAppTagses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></function>

        <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
        <annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <type><name>FilterResults</name></type> <name>performFiltering</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>prefix</name></decl></parameter>)</parameter_list> <block>{
            <comment type="line">// Always called from background thread</comment>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>AppInfo</name></argument>&gt;</argument_list></name></type> <name>apps</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>originalData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>FilterResults</name></type> <name>results</name> <init>= <expr><operator>new</operator> <call><name>FilterResults</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>filter</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>prefix</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>filter</name> <operator>=</operator> <call><name><name>prefix</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>(<argument><expr><call><name><name>Locale</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>apps</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{
                <decl_stmt><decl><type><name>AppInfo</name></type> <name>item</name> <init>= <expr><call><name><name>apps</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>appName</name> <init>= <expr><call><name><name>item</name><operator>.</operator><name>getAppName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>(<argument><expr><call><name><name>Locale</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>description</name> <init>= <expr><call><name><name>item</name><operator>.</operator><name>getDescription</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>(<argument><expr><call><name><name>Locale</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name><name>filter</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>appName</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>description</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>apps</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <elseif>else <if>if <condition>(<expr><operator>!</operator><call><name><name>item</name><operator>.</operator><name>getTags</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>containsAll</name><argument_list>(<argument><expr><name>filterAppTagses</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>apps</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></elseif></if>
            }</block></for>
            <expr_stmt><expr><name><name>results</name><operator>.</operator><name>count</name></name> <operator>=</operator> <call><name><name>apps</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>results</name><operator>.</operator><name>values</name></name> <operator>=</operator> <name>apps</name></expr>;</expr_stmt>
            <return>return <expr><name>results</name></expr>;</return>
        }</block></function>

        <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
        <annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <type><name>void</name></type> <name>publishResults</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>prefix</name></decl></parameter>, <parameter><decl><type><name>FilterResults</name></type> <name>results</name></decl></parameter>)</parameter_list> <block>{
            <if>if <condition>(<expr><name><name>results</name><operator>.</operator><name>values</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
            <expr_stmt><expr><name>filterString</name> <operator>=</operator> <name>prefix</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>data</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>data</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><operator>(</operator><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>AppInfo</name></argument>&gt;</argument_list></name><operator>)</operator> <name><name>results</name><operator>.</operator><name>values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyDataSetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><specifier>public</specifier> <type><name>CharSequence</name></type> <name>getFilterString</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>filterString</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/screens/list/AppListFragment.java" hash="790f9de91559d507ed9e6f704f83127afd4fd7a4"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>screens</name><operator>.</operator><name>list</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>design</name><operator>.</operator><name>widget</name><operator>.</operator><name>Snackbar</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentActivity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>content</name><operator>.</operator><name>ContextCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>view</name><operator>.</operator><name>GravityCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItemCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>widget</name><operator>.</operator><name>DrawerLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>widget</name><operator>.</operator><name>SwipeRefreshLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>LinearLayoutManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>RecyclerView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>SearchView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>InputType</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Menu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>futuremind</name><operator>.</operator><name>recyclerviewfastscroll</name><operator>.</operator><name>FastScroller</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>gson</name><operator>.</operator><name>Gson</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>gson</name><operator>.</operator><name>GsonBuilder</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Inject</name></name>;</import>

<import>import <name><name>butterknife</name><operator>.</operator><name>BindView</name></name>;</import>
<import>import <name><name>butterknife</name><operator>.</operator><name>ButterKnife</name></name>;</import>
<import>import <name><name>butterknife</name><operator>.</operator><name>Unbinder</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>AppStoreApp</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppInfo</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppTags</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>screens</name><operator>.</operator><name>details</name><operator>.</operator><name>AppDetailsActivity</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>screens</name><operator>.</operator><name>navigation</name><operator>.</operator><name>CategoryFilter</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>mvp</name><operator>.</operator><name>BasePresenterFragment</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>mvp</name><operator>.</operator><name>PresenterFactory</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>ui</name><operator>.</operator><name>BaseActivity</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>ui</name><operator>.</operator><name>BaseViewHolder</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>ui</name><operator>.</operator><name>DividerItemDecoration</name></name>;</import>


<class><specifier>public</specifier> class <name>AppListFragment</name> <super><extends>extends <name><name>BasePresenterFragment</name><argument_list type="generic">&lt;<argument><name><name>AppListContract</name><operator>.</operator><name>Presenter</name></name></argument>, <argument><name><name>AppListContract</name><operator>.</operator><name>View</name></name></argument>&gt;</argument_list></name></extends>
        <implements>implements <name><name>AppListContract</name><operator>.</operator><name>View</name></name>, <name><name>BaseViewHolder</name><operator>.</operator><name>ClickListener</name></name>, <name><name>FilterListAdapter</name><operator>.</operator><name>FilterListener</name></name>, <name><name>SwipeRefreshLayout</name><operator>.</operator><name>OnRefreshListener</name></name></implements></super> <block>{
    <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ARG_KEY_CATEGORYFILTER</name> <init>= <expr><literal type="string">"categoryFilter"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>list_appinfos</name></name></expr></argument>)</argument_list></annotation> <type><name>RecyclerView</name></type> <name>appList</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>drawerlayout</name></name></expr></argument>)</argument_list></annotation> <type><name>DrawerLayout</name></type> <name>drawerLayout</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>list_tagfilter</name></name></expr></argument>)</argument_list></annotation> <type><name>RecyclerView</name></type> <name>filterList</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>appinfos_fastscroll</name></name></expr></argument>)</argument_list></annotation> <type><name>FastScroller</name></type> <name>fastscroller</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>swipe_refresh</name></name></expr></argument>)</argument_list></annotation> <type><name>SwipeRefreshLayout</name></type> <name>swipeRefresh</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Inject</name></annotation>
    <type><name><name>PresenterFactory</name><argument_list type="generic">&lt;<argument><name><name>AppListContract</name><operator>.</operator><name>Presenter</name></name></argument>&gt;</argument_list></name></type> <name>presenterFactory</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SearchView</name></type> <name>searchView</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Unbinder</name></type> <name>unbinder</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AppListAdapter</name></type> <name>appListAdapter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FilterListAdapter</name></type> <name>filterListAdapter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>AppTags</name></argument>&gt;</argument_list></name></type> <name>appTags</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name><name>BaseActivity</name><operator>.</operator><name>OnBackKeyPressedListener</name></name></type> <name>closeDrawerOnBackKeyListener</name></decl>;</decl_stmt>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Fragment</name></type> <name>newInstance</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>CategoryFilter</name></type> <name>categoryFilter</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>AppListFragment</name></type> <name>fragment</name> <init>= <expr><operator>new</operator> <call><name>AppListFragment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Bundle</name></type> <name>args</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>putParcelable</name></name><argument_list>(<argument><expr><name>ARG_KEY_CATEGORYFILTER</name></expr></argument>, <argument><expr><name>categoryFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fragment</name><operator>.</operator><name>setArguments</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>fragment</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>DaggerAppListComponent</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>appComponent</name><argument_list>(<argument><expr><call><name><name>AppStoreApp</name><operator>.</operator><name>Injector</name><operator>.</operator><name>INSTANCE</name><operator>.</operator><name>getAppComponent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>appListModule</name><argument_list>(<argument><expr><operator>new</operator> <call><name>AppListModule</name><argument_list>(<argument><expr><call><name>getArguments</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call><operator>.</operator><call><name>inject</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setHasOptionsMenu</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Nullable</name></annotation>
    <annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>View</name></type> <name>onCreateView</name><parameter_list>(<parameter><decl><type><name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>ViewGroup</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>View</name></type> <name>layout</name> <init>= <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>fragment_applist_layout</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>unbinder</name> <operator>=</operator> <call><name><name>ButterKnife</name><operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>layout</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onRefresh</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>getPresenter</name><argument_list>()</argument_list></call><operator>.</operator><call><name>refreshData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onViewCreated</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>appList</name><operator>.</operator><name>setLayoutManager</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>LinearLayoutManager</name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>appList</name><operator>.</operator><name>addItemDecoration</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DividerItemDecoration</name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>DividerItemDecoration</name><operator>.</operator><name>VERTICAL_LIST</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>appListAdapter</name> <operator>=</operator> <operator>new</operator> <call><name>AppListAdapter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>appListAdapter</name><operator>.</operator><name>setHasStableIds</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>appListAdapter</name><operator>.</operator><name>setItemClickListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>appList</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>appListAdapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>fastscroller</name><operator>.</operator><name>setRecyclerView</name></name><argument_list>(<argument><expr><name>appList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fastscroller</name><operator>.</operator><name>setBubbleColor</name></name><argument_list>(<argument><expr><call><name><name>ContextCompat</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>colorAccent</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>swipeRefresh</name><operator>.</operator><name>setOnRefreshListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>swipeRefresh</name><operator>.</operator><name>setColorSchemeColors</name></name><argument_list>(<argument><expr><call><name><name>ContextCompat</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>colorAccent</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>filterList</name><operator>.</operator><name>setLayoutManager</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>LinearLayoutManager</name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>filterList</name><operator>.</operator><name>addItemDecoration</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DividerItemDecoration</name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>DividerItemDecoration</name><operator>.</operator><name>VERTICAL_LIST</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>filterListAdapter</name> <operator>=</operator> <operator>new</operator> <call><name>FilterListAdapter</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>filterList</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>filterListAdapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>FragmentActivity</name></type> <name>activity</name> <init>= <expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>activity</name> <operator>instanceof</operator> <name>BaseActivity</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>closeDrawerOnBackKeyListener</name> <operator>=</operator> <lambda><parameter_list>()</parameter_list> -&gt; <block>{
                <if>if <condition>(<expr><name>drawerLayout</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>drawerLayout</name><operator>.</operator><name>isDrawerVisible</name></name><argument_list>(<argument><expr><name><name>GravityCompat</name><operator>.</operator><name>END</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>drawerLayout</name><operator>.</operator><name>closeDrawer</name></name><argument_list>(<argument><expr><name><name>GravityCompat</name><operator>.</operator><name>END</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                }</block></then></if>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            }</block></lambda></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>BaseActivity</name><operator>)</operator> <name>activity</name><operator>)</operator><operator>.</operator><call><name>addOnBackKeyPressedListener</name><argument_list>(<argument><expr><name>closeDrawerOnBackKeyListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onViewCreated</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>updateTagCount</name><parameter_list>(<parameter><decl><type><name>TagMap</name></type> <name>tagMap</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>filterListAdapter</name><operator>.</operator><name>updateTagMap</name></name><argument_list>(<argument><expr><name>tagMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>filterListAdapter</name><operator>.</operator><name>notifyDataSetChanged</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onPresenterReady</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>AppListContract</name><operator>.</operator><name>Presenter</name></name></type> <name>presenter</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onPresenterReady</name></name><argument_list>(<argument><expr><name>presenter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>NonNull</name></annotation>
    <annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name><name>PresenterFactory</name><argument_list type="generic">&lt;<argument><name><name>AppListContract</name><operator>.</operator><name>Presenter</name></name></argument>&gt;</argument_list></name></type> <name>getPresenterFactory</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>presenterFactory</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDestroyView</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>unbinder</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>unbinder</name><operator>.</operator><name>unbind</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>FragmentActivity</name></type> <name>activity</name> <init>= <expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>closeDrawerOnBackKeyListener</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>activity</name> <operator>instanceof</operator> <name>BaseActivity</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>BaseActivity</name><operator>)</operator> <name>activity</name><operator>)</operator><operator>.</operator><call><name>removeOnBackKeyPressedListener</name><argument_list>(<argument><expr><name>closeDrawerOnBackKeyListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDestroyView</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>showAppList</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AppInfo</name></argument>&gt;</argument_list></name></type> <name>appInfos</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>appListAdapter</name><operator>.</operator><name>setData</name></name><argument_list>(<argument><expr><name>appInfos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>appListAdapter</name><operator>.</operator><name>getFilter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setFilterAppTagses</name><argument_list>(<argument><expr><name>appTags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>appListAdapter</name><operator>.</operator><name>getFilter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><call><name><name>appListAdapter</name><operator>.</operator><name>getFilter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFilterString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>swipeRefresh</name><operator>.</operator><name>setRefreshing</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setHasOptionsMenu</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>showLoadingScreen</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>swipeRefresh</name><operator>.</operator><name>setRefreshing</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setHasOptionsMenu</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>showError</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Snackbar</name><operator>.</operator><name>make</name></name><argument_list>(<argument><expr><name>appList</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error</name></name></expr></argument>, <argument><expr><name><name>Snackbar</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreateOptionsMenu</name><parameter_list>(<parameter><decl><type><name>Menu</name></type> <name>menu</name></decl></parameter>, <parameter><decl><type><name>MenuInflater</name></type> <name>inflater</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>menu</name><operator>.</operator><name>applist_fragment</name></name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>MenuItem</name></type> <name>searchItem</name> <init>= <expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_search</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>searchView</name> <operator>=</operator> <operator>(</operator><name>SearchView</name><operator>)</operator> <call><name><name>MenuItemCompat</name><operator>.</operator><name>getActionView</name></name><argument_list>(<argument><expr><name>searchItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>searchView</name><operator>.</operator><name>setQueryHint</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>hint_type_to_filter</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>searchView</name><operator>.</operator><name>setInputType</name></name><argument_list>(<argument><expr><name><name>InputType</name><operator>.</operator><name>TYPE_TEXT_FLAG_NO_SUGGESTIONS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>searchView</name><operator>.</operator><name>setOnQueryTextListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>SearchView</name><operator>.</operator><name>OnQueryTextListener</name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>boolean</name></type> <name>onQueryTextSubmit</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>query</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>appListAdapter</name><operator>.</operator><name>getFilter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name><name>searchView</name><operator>.</operator><name>isIconified</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>searchView</name><operator>.</operator><name>setIconified</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>boolean</name></type> <name>onQueryTextChange</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>appListAdapter</name><operator>.</operator><name>getFilter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreateOptionsMenu</name></name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>inflater</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onOptionsItemSelected</name><parameter_list>(<parameter><decl><type><name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
        <switch>switch <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_search</name></name></expr>:</case>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_filter</name></name></expr>:</case>
                <expr_stmt><expr><call><name>toggleTagFilterDrawer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            <default>default:</default>
                <return>return <expr><call><name><name>super</name><operator>.</operator><name>onOptionsItemSelected</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></switch>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onItemClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>itemId</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>AppDetailsActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Gson</name></type> <name>gson</name> <init>= <expr><operator>new</operator> <call><name>GsonBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>AppDetailsActivity</name><operator>.</operator><name>ARG_KEY</name></name></expr></argument>, <argument><expr><call><name><name>appListAdapter</name><operator>.</operator><name>getItem</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toJson</name><argument_list>(<argument><expr><name>gson</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>toggleTagFilterDrawer</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>drawerLayout</name><operator>.</operator><name>isDrawerOpen</name></name><argument_list>(<argument><expr><name><name>GravityCompat</name><operator>.</operator><name>END</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>drawerLayout</name><operator>.</operator><name>closeDrawer</name></name><argument_list>(<argument><expr><name><name>GravityCompat</name><operator>.</operator><name>END</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>drawerLayout</name><operator>.</operator><name>openDrawer</name></name><argument_list>(<argument><expr><name><name>GravityCompat</name><operator>.</operator><name>END</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onNewFilterTags</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>AppTags</name></argument>&gt;</argument_list></name></type> <name>appTagses</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>appTags</name> <operator>=</operator> <name>appTagses</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>appListAdapter</name><operator>.</operator><name>getFilter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setFilterAppTagses</name><argument_list>(<argument><expr><name>appTagses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>appListAdapter</name><operator>.</operator><name>getFilter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><call><name><name>appListAdapter</name><operator>.</operator><name>getFilter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFilterString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>restoreSelectedTags</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>AppTags</name></argument>&gt;</argument_list></name></type> <name>appTags</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>filterListAdapter</name><operator>.</operator><name>setSelectedItems</name></name><argument_list>(<argument><expr><name>appTags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>AppTags</name></argument>&gt;</argument_list></name></type> <name>getSelectedTags</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>appTags</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/screens/list/FilterListAdapter.java" hash="8fe8cd675ea4334b6ba5a33b1d699614eefd1dcf"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>screens</name><operator>.</operator><name>list</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>SparseBooleanArray</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>CheckBox</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>butterknife</name><operator>.</operator><name>BindView</name></name>;</import>
<import>import <name><name>butterknife</name><operator>.</operator><name>ButterKnife</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppTags</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>ui</name><operator>.</operator><name>BaseAdapter</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>ui</name><operator>.</operator><name>BaseViewHolder</name></name>;</import>


<class><specifier>public</specifier> class <name>FilterListAdapter</name> <super><extends>extends <name><name>BaseAdapter</name><argument_list type="generic">&lt;<argument><name><name>FilterListAdapter</name><operator>.</operator><name>ViewHolder</name></name></argument>&gt;</argument_list></name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>AppTags</name></argument>&gt;</argument_list></name></type> <name>data</name> <init>= <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><call><name><name>AppTags</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>FilterListener</name></type> <name>filterListener</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>SparseBooleanArray</name></type> <name>selectedItems</name> <init>= <expr><operator>new</operator> <call><name>SparseBooleanArray</name><argument_list>(<argument><expr><call><name><name>AppTags</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><empty_stmt>;</empty_stmt>
    <decl_stmt><decl><type><name>TagMap</name></type> <name>tagMap</name> <init>= <expr><operator>new</operator> <call><name>TagMap</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <interface>interface <name>FilterListener</name> <block>{
        <function_decl><type><name>void</name></type> <name>onNewFilterTags</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>AppTags</name></argument>&gt;</argument_list></name></type> <name>appTagses</name></decl></parameter>)</parameter_list>;</function_decl>
    }</block></interface>

    <constructor><specifier>public</specifier> <name>FilterListAdapter</name><parameter_list>(<parameter><decl><type><name>FilterListener</name></type> <name>filterListener</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>filterListener</name></name> <operator>=</operator> <name>filterListener</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setItemClickListener</name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>view</name></decl></parameter>, <parameter><decl><name>position</name></decl></parameter>, <parameter><decl><name>itemId</name></decl></parameter>)</parameter_list> -&gt; <block>{

            <if>if <condition>(<expr><call><name><name>data</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>AppTags</name><operator>.</operator><name>FREE</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>deselectTag</name><argument_list>(<argument><expr><name><name>AppTags</name><operator>.</operator><name>PAID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>data</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>AppTags</name><operator>.</operator><name>PAID</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>deselectTag</name><argument_list>(<argument><expr><name><name>AppTags</name><operator>.</operator><name>FREE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif></if>

            <expr_stmt><expr><call><name><name>selectedItems</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><operator>!</operator><call><name><name>selectedItems</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyItemChanged</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>filterListener</name><operator>.</operator><name>onNewFilterTags</name></name><argument_list>(<argument><expr><call><name>getActiveAppTags</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>updateTagMap</name><parameter_list>(<parameter><decl><type><name>TagMap</name></type> <name>tagMap</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tagMap</name></name> <operator>=</operator> <name>tagMap</name></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name><name>FilterListAdapter</name><operator>.</operator><name>ViewHolder</name></name></type> <name>onCreateSDMViewHolder</name><parameter_list>(<parameter><decl><type><name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>, <parameter><decl><type><name>ViewGroup</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>viewType</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>View</name></type> <name>layout</name> <init>= <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>adapter_tagfilter_line</name></name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>new</operator> <call><name>ViewHolder</name><argument_list>(<argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onBindSDMViewHolder</name><parameter_list>(<parameter><decl><type><name><name>FilterListAdapter</name><operator>.</operator><name>ViewHolder</name></name></type> <name>holder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>AppTags</name></type> <name>tag</name> <init>= <expr><call><name>getItem</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><call><name><name>selectedItems</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>tagMap</name><operator>.</operator><name>getCount</name></name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>AppTags</name></type> <name>getItem</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>data</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>getItemCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>data</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setSelectedItems</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>AppTags</name></argument>&gt;</argument_list></name></type> <name>appTags</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>changed</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>AppTags</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <if>if <condition>(<expr><call><name><name>appTags</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>data</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>selectedItems</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>changed</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>

        <if>if <condition>(<expr><name>changed</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>notifyDataSetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>filterListener</name><operator>.</operator><name>onNewFilterTags</name></name><argument_list>(<argument><expr><call><name>getActiveAppTags</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <class><specifier>static</specifier> class <name>ViewHolder</name> <super><extends>extends <name>BaseViewHolder</name></extends></super> <block>{
        <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tagname</name></name></expr></argument>)</argument_list></annotation> <type><name>TextView</name></type> <name>tagName</name></decl>;</decl_stmt>
        <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tagcount</name></name></expr></argument>)</argument_list></annotation> <type><name>TextView</name></type> <name>tagCount</name></decl>;</decl_stmt>
        <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>checkbox</name></name></expr></argument>)</argument_list></annotation> <type><name>CheckBox</name></type> <name>checkBox</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>ViewHolder</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>itemView</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>itemView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ButterKnife</name><operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>itemView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><specifier>public</specifier> <type><name>void</name></type> <name>bind</name><parameter_list>(<parameter><decl><type><name>AppTags</name></type> <name>item</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>checked</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tagNumber</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>tagName</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>item</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>tagCount</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>getQuantityString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>plurals</name><operator>.</operator><name>x_items</name></name></expr></argument>, <argument><expr><name>tagNumber</name></expr></argument>, <argument><expr><name>tagNumber</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>checkBox</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><name>checked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>deselectTag</name><parameter_list>(<parameter><decl><type><name>AppTags</name></type> <name>tag</name></decl></parameter>)</parameter_list> <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>selectedItems</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>key</name> <init>= <expr><call><name><name>selectedItems</name><operator>.</operator><name>keyAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>data</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>tag</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>selectedItems</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>notifyDataSetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></function>

    <function><specifier>private</specifier> <type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>AppTags</name></argument>&gt;</argument_list></name></type> <name>getActiveAppTags</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>AppTags</name></argument>&gt;</argument_list></name></type> <name>activeAppTagses</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>selectedItems</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>key</name> <init>= <expr><call><name><name>selectedItems</name><operator>.</operator><name>keyAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>selectedItems</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>activeAppTagses</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>data</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></for>

        <return>return <expr><name>activeAppTagses</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/screens/list/TagMap.java" hash="de36bcbd7ecbc6faba64504d5006df84e58960e9"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>screens</name><operator>.</operator><name>list</name></name>;</package>


<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppInfo</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppTags</name></name>;</import>

<class><specifier>public</specifier> class <name>TagMap</name> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>AppTags</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>tagCounts</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>TagMap</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>TagMap</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>AppInfo</name></argument>&gt;</argument_list></name></type> <name>appInfos</name></decl></parameter>)</parameter_list> <block>{
        <for>for <control>(<init><decl><type><name>AppTags</name></type> <name>tag</name> <range>: <expr><call><name><name>AppTags</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><call><name><name>tagCounts</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

        <for>for <control>(<init><decl><type><name>AppInfo</name></type> <name>info</name> <range>: <expr><name>appInfos</name></expr></range></decl></init>)</control> <block>{
            <for>for <control>(<init><decl><type><name>AppTags</name></type> <name>tag</name> <range>: <expr><call><name><name>info</name><operator>.</operator><name>getTags</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><call><name><name>tagCounts</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><call><name><name>tagCounts</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
        }</block></for>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>getCount</name><parameter_list>(<parameter><decl><type><name>AppTags</name></type> <name>tag</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>tagCounts</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name><name>tagCounts</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</return></block></then>
        <else>else <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></else></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>US</name></name></expr></argument>, <argument><expr><literal type="string">"TagMap(%s)"</literal></expr></argument>, <argument><expr><name>tagCounts</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/screens/details/AppDetailsActivity.java" hash="6cc5f29dd5290f71fb2ee13ee003f59c1dd21ed6"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>screens</name><operator>.</operator><name>details</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toolbar</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>

<import>import <name><name>butterknife</name><operator>.</operator><name>BindView</name></name>;</import>
<import>import <name><name>butterknife</name><operator>.</operator><name>ButterKnife</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>ui</name><operator>.</operator><name>BaseActivity</name></name>;</import>


<class><specifier>public</specifier> class <name>AppDetailsActivity</name> <super><extends>extends <name>BaseActivity</name></extends></super> <block>{
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ARG_KEY</name> <init>= <expr><literal type="string">"appInfo"</literal></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>activity_appdetails_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ButterKnife</name><operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>savedInstanceState</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>AppDetailsFragment</name></type> <name>fragment</name> <init>= <expr><call><name><name>AppDetailsFragment</name><operator>.</operator><name>newInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>beginTransaction</name><argument_list>()</argument_list></call>
                    <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>contentFrame</name></name></expr></argument>, <argument><expr><name>fragment</name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/screens/navigation/NavigationFragment.java" hash="19879cf37b67a71a61631a88b74ad4028a47b3a2"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>screens</name><operator>.</operator><name>navigation</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>customtabs</name><operator>.</operator><name>CustomTabsIntent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>design</name><operator>.</operator><name>widget</name><operator>.</operator><name>NavigationView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>design</name><operator>.</operator><name>widget</name><operator>.</operator><name>Snackbar</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>content</name><operator>.</operator><name>ContextCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>AlertDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>format</name><operator>.</operator><name>DateFormat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Menu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Inject</name></name>;</import>

<import>import <name><name>butterknife</name><operator>.</operator><name>BindView</name></name>;</import>
<import>import <name><name>butterknife</name><operator>.</operator><name>ButterKnife</name></name>;</import>
<import>import <name><name>butterknife</name><operator>.</operator><name>Unbinder</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>AppStoreApp</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>BuildConfig</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>github</name><operator>.</operator><name>GithubApi</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>screens</name><operator>.</operator><name>settings</name><operator>.</operator><name>SettingsActivity</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>mvp</name><operator>.</operator><name>BasePresenterFragment</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>mvp</name><operator>.</operator><name>PresenterFactory</name></name>;</import>


<class><specifier>public</specifier> class <name>NavigationFragment</name> <super><extends>extends <name><name>BasePresenterFragment</name><argument_list type="generic">&lt;<argument><name><name>NavigationContract</name><operator>.</operator><name>Presenter</name></name></argument>, <argument><name><name>NavigationContract</name><operator>.</operator><name>View</name></name></argument>&gt;</argument_list></name></extends>
        <implements>implements <name><name>NavigationContract</name><operator>.</operator><name>View</name></name>, <name><name>NavigationView</name><operator>.</operator><name>OnNavigationItemSelectedListener</name></name></implements></super> <block>{

    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>footer_nav</name></name></expr></argument>)</argument_list></annotation> <type><name>NavigationView</name></type> <name>navFooter</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>header_version_text</name></name></expr></argument>)</argument_list></annotation> <type><name>TextView</name></type> <name>versionText</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>navigationview</name></name></expr></argument>)</argument_list></annotation> <type><name>NavigationView</name></type> <name>navigationView</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>update_banner</name></name></expr></argument>)</argument_list></annotation> <type><name>View</name></type> <name>updateBanner</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>OnCategorySelectedListener</name></type> <name>onCategorySelectedListener</name></decl>;</decl_stmt>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>NavigationFragment</name></type> <name>newInstance</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>NavigationFragment</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <decl_stmt><decl><annotation>@<name>Inject</name></annotation>
    <type><name><name>PresenterFactory</name><argument_list type="generic">&lt;<argument><name><name>NavigationContract</name><operator>.</operator><name>Presenter</name></name></argument>&gt;</argument_list></name></type> <name>presenterFactory</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Unbinder</name></type> <name>unbinder</name></decl>;</decl_stmt>

    <function><annotation>@<name>NonNull</name></annotation>
    <annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name><name>PresenterFactory</name><argument_list type="generic">&lt;<argument><name><name>NavigationContract</name><operator>.</operator><name>Presenter</name></name></argument>&gt;</argument_list></name></type> <name>getPresenterFactory</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>presenterFactory</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>DaggerNavigationComponent</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>appComponent</name><argument_list>(<argument><expr><call><name><name>AppStoreApp</name><operator>.</operator><name>Injector</name><operator>.</operator><name>INSTANCE</name><operator>.</operator><name>getAppComponent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call><operator>.</operator><call><name>inject</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Nullable</name></annotation>
    <annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>View</name></type> <name>onCreateView</name><parameter_list>(<parameter><decl><type><name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>ViewGroup</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>View</name></type> <name>view</name> <init>= <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>fragment_navigation_layout</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>unbinder</name> <operator>=</operator> <call><name><name>ButterKnife</name><operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>view</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onViewCreated</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onViewCreated</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>versionText</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name><name>BuildConfig</name><operator>.</operator><name>VERSION_NAME</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>navFooter</name><operator>.</operator><name>setNavigationItemSelectedListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>item</name></decl></parameter></parameter_list> -&gt; <block>{
            <expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>SettingsActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>navigationView</name><operator>.</operator><name>setNavigationItemSelectedListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDestroyView</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>unbinder</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>unbinder</name><operator>.</operator><name>unbind</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDestroyView</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>showUpdateSnackbar</name><parameter_list>(<parameter><decl><type><name><name>GithubApi</name><operator>.</operator><name>Release</name></name></type> <name>release</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>release</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
        <expr_stmt><expr><call><name><name>Snackbar</name>
                <operator>.</operator><name>make</name></name><argument_list>(<argument><expr><name>navigationView</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>update</name></name></expr></argument>, <argument><expr><name><name>Snackbar</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>setAction</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>view_update</name></name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>view</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>getPresenter</name><argument_list>()</argument_list></call><operator>.</operator><call><name>buildChangelog</name><argument_list>(<argument><expr><name>release</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>showUpdateErrorToast</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>update_error</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>enableUpdateAvailableText</name><parameter_list>(<parameter><decl><type><name><name>GithubApi</name><operator>.</operator><name>Release</name></name></type> <name>release</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>release</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>updateBanner</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>updateBanner</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>getPresenter</name><argument_list>()</argument_list></call><operator>.</operator><call><name>buildChangelog</name><argument_list>(<argument><expr><name>release</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>showDownload</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>url</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>CustomTabsIntent</name><operator>.</operator><name>Builder</name></name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name><name>CustomTabsIntent</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setToolbarColor</name></name><argument_list>(<argument><expr><call><name><name>ContextCompat</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>colorPrimary</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setSecondaryToolbarColor</name></name><argument_list>(<argument><expr><call><name><name>ContextCompat</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>colorPrimary</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CustomTabsIntent</name></type> <name>customTabsIntent</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>customTabsIntent</name><operator>.</operator><name>launchUrl</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>showChangelog</name><parameter_list>(<parameter><decl><type><name><name>GithubApi</name><operator>.</operator><name>Release</name></name></type> <name>release</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Date</name></type> <name>date</name> <init>= <expr><name><name>release</name><operator>.</operator><name>publishDate</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>desc</name> <init>= <expr><name><name>release</name><operator>.</operator><name>releaseDescription</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><name><name>release</name><operator>.</operator><name>releaseName</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>tag</name> <init>= <expr><name><name>release</name><operator>.</operator><name>tagName</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>message</name> <init>=
                <expr><call><name><name>DateFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"MMM"</literal></expr></argument>, <argument><expr><name>date</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name><name>DateFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"dd"</literal></expr></argument>, <argument><expr><name>date</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"\n"</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name>tag</name> <operator>+</operator> <literal type="string">": "</literal> <operator>+</operator> <name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name>buildFromGithub</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><name>message</name> <operator>+</operator> <name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><name>message</name> <operator>+</operator> <name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>build_from_fdroid</name></name> <operator>+</operator> <literal type="string">"\n"</literal> <operator>+</operator> <name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setPositiveButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>update_confirm</name></name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>dialog</name></decl></parameter>, <parameter><decl><name>id</name></decl></parameter>)</parameter_list> -&gt; <block type="pseudo"><expr><call><name>getPresenter</name><argument_list>()</argument_list></call><operator>.</operator><call><name>downloadUpdate</name><argument_list>(<argument><expr><name>release</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setNegativeButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>cancel</name></name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>dialog</name></decl></parameter>, <parameter><decl><name>id</name></decl></parameter>)</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>dialog</name><operator>.</operator><name>dismiss</name></name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>AlertDialog</name></type> <name>dialog</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onNavigationItemSelected</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>MenuItem</name></type> <name>clickedItem</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>CategoryFilter</name></type> <name>clickedFilter</name> <init>= <expr><call><name><name>menuItemCategoryFilterMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>clickedItem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>navigationView</name><operator>.</operator><name>getMenu</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><name>MenuItem</name></type> <name>item</name> <init>= <expr><call><name><name>navigationView</name><operator>.</operator><name>getMenu</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getItem</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>CategoryFilter</name></type> <name>filter</name> <init>= <expr><call><name><name>menuItemCategoryFilterMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><call><name><name>filter</name><operator>.</operator><name>getPrimaryCategory</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal>
                    <operator>||</operator> <call><name><name>filter</name><operator>.</operator><name>getSecondaryCategory</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal>
                    <operator>||</operator> <call><name><name>filter</name><operator>.</operator><name>getTertiaryCategory</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal>
                    <operator>||</operator> <operator>(</operator><call><name><name>filter</name><operator>.</operator><name>getPrimaryCategory</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>clickedFilter</name><operator>.</operator><name>getPrimaryCategory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <call><name><name>filter</name><operator>.</operator><name>getSecondaryCategory</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>clickedFilter</name><operator>.</operator><name>getSecondaryCategory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                    <operator>||</operator> <call><name><name>filter</name><operator>.</operator><name>getPrimaryCategory</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>app_category_everything</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                    <operator>||</operator> <call><name><name>filter</name><operator>.</operator><name>getPrimaryCategory</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>app_category_new</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name><name>clickedItem</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getPresenter</name><argument_list>()</argument_list></call><operator>.</operator><call><name>notifySelectedFilter</name><argument_list>(<argument><expr><name>clickedFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>onCategorySelectedListener</name><operator>.</operator><name>onCategorySelected</name></name><argument_list>(<argument><expr><name>clickedFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>MenuItem</name></argument>, <argument><name>CategoryFilter</name></argument>&gt;</argument_list></name></type> <name>menuItemCategoryFilterMap</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>showNavigationItems</name><parameter_list>(<parameter><decl><type><name>NavigationData</name></type> <name>navigationData</name></decl></parameter>, <parameter><decl><type><name>CategoryFilter</name></type> <name>selectedItem</name></decl></parameter>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>Menu</name></type> <name>menu</name> <init>= <expr><call><name><name>navigationView</name><operator>.</operator><name>getMenu</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>menuItemCategoryFilterMap</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>CategoryFilter</name></type> <name>noFilterFilter</name> <init>= <expr><operator>new</operator> <call><name>CategoryFilter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>MenuItem</name></type> <name>noFilterItem</name> <init>= <expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>Menu</name><operator>.</operator><name>NONE</name></name></expr></argument>, <argument><expr><name><name>Menu</name><operator>.</operator><name>NONE</name></name></expr></argument>, <argument><expr><name><name>Menu</name><operator>.</operator><name>NONE</name></name></expr></argument>, <argument><expr><call><name><name>noFilterFilter</name><operator>.</operator><name>getName</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>menuItemCategoryFilterMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>noFilterItem</name></expr></argument>, <argument><expr><name>noFilterFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>n</name> <init>= <expr><call><name>getContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>app_category_new</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CategoryFilter</name></type> <name>newAppsFilter</name> <init>= <expr><operator>new</operator> <call><name>CategoryFilter</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>MenuItem</name></type> <name>newAppsItem</name> <init>= <expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>Menu</name><operator>.</operator><name>NONE</name></name></expr></argument>, <argument><expr><name><name>Menu</name><operator>.</operator><name>NONE</name></name></expr></argument>, <argument><expr><name><name>Menu</name><operator>.</operator><name>NONE</name></name></expr></argument>, <argument><expr><call><name><name>newAppsFilter</name><operator>.</operator><name>getName</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>menuItemCategoryFilterMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>newAppsItem</name></expr></argument>, <argument><expr><name>newAppsFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>CategoryFilter</name></type> <name>primaryFilter</name> <range>: <expr><call><name><name>navigationData</name><operator>.</operator><name>getPrimaryCategories</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>groupId</name> <init>= <expr><call><name><name>navigationData</name><operator>.</operator><name>getPrimaryCategories</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>indexOf</name><argument_list>(<argument><expr><name>primaryFilter</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>MenuItem</name></type> <name>primaryItem</name> <init>= <expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>Menu</name><operator>.</operator><name>NONE</name></name></expr></argument>, <argument><expr><name><name>Menu</name><operator>.</operator><name>NONE</name></name></expr></argument>, <argument><expr><name><name>Menu</name><operator>.</operator><name>NONE</name></name></expr></argument>, <argument><expr><call><name><name>primaryFilter</name><operator>.</operator><name>getName</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>menuItemCategoryFilterMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>primaryItem</name></expr></argument>, <argument><expr><name>primaryFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for>for <control>(<init><decl><type><name>CategoryFilter</name></type> <name>secondaryFilter</name> <range>: <expr><call><name><name>navigationData</name><operator>.</operator><name>getSecondaryCategories</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>primaryFilter</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{
                    <decl_stmt><decl><type><name>int</name></type> <name>secondGroupId</name> <init>= <expr><call><name><name>navigationData</name><operator>.</operator><name>getSecondaryCategories</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>primaryFilter</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>indexOf</name><argument_list>(<argument><expr><name>secondaryFilter</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>MenuItem</name></type> <name>secondaryItem</name> <init>= <expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>groupId</name></expr></argument>, <argument><expr><name><name>Menu</name><operator>.</operator><name>NONE</name></name></expr></argument>, <argument><expr><name><name>Menu</name><operator>.</operator><name>NONE</name></name></expr></argument>, <argument><expr><literal type="string">"   "</literal> <operator>+</operator> <call><name><name>secondaryFilter</name><operator>.</operator><name>getName</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>menuItemCategoryFilterMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>secondaryItem</name></expr></argument>, <argument><expr><name>secondaryFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <for>for <control>(<init><decl><type><name>CategoryFilter</name></type> <name>tertiaryFilter</name> <range>: <expr><call><name><name>navigationData</name><operator>.</operator><name>getTertiaryCategories</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>secondaryFilter</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{
                        <decl_stmt><decl><type><name>MenuItem</name></type> <name>tertiaryItem</name> <init>= <expr><call><name><name>menu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>secondGroupId</name></expr></argument>, <argument><expr><name><name>Menu</name><operator>.</operator><name>NONE</name></name></expr></argument>, <argument><expr><name><name>Menu</name><operator>.</operator><name>NONE</name></name></expr></argument>, <argument><expr><literal type="string">"      "</literal> <operator>+</operator> <call><name><name>tertiaryFilter</name><operator>.</operator><name>getName</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>menuItemCategoryFilterMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>tertiaryItem</name></expr></argument>, <argument><expr><name>tertiaryFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>tertiaryItem</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></for>
                }</block></for>
        }</block></for>


        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>navigationView</name><operator>.</operator><name>getMenu</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><name>MenuItem</name></type> <name>item</name> <init>= <expr><call><name><name>navigationView</name><operator>.</operator><name>getMenu</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getItem</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>CategoryFilter</name></type> <name>filter</name> <init>= <expr><call><name><name>menuItemCategoryFilterMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><call><name><name>filter</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>selectedItem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>item</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if> <comment type="line">// only one checked</comment>
        }</block></for>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>selectFilter</name><parameter_list>(<parameter><decl><type><name>CategoryFilter</name></type> <name>toSelect</name></decl></parameter>)</parameter_list> <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>navigationView</name><operator>.</operator><name>getMenu</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><name>MenuItem</name></type> <name>item</name> <init>= <expr><call><name><name>navigationView</name><operator>.</operator><name>getMenu</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getItem</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>CategoryFilter</name></type> <name>filter</name> <init>= <expr><call><name><name>menuItemCategoryFilterMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>filter</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>toSelect</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><call><name><name>onCategorySelectedListener</name><operator>.</operator><name>onCategorySelected</name></name><argument_list>(<argument><expr><name>toSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setOnCategorySelectedListener</name><parameter_list>(<parameter><decl><type><name>OnCategorySelectedListener</name></type> <name>onCategorySelectedListener</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>onCategorySelectedListener</name></name> <operator>=</operator> <name>onCategorySelectedListener</name></expr>;</expr_stmt>
    }</block></function>


    <interface><specifier>public</specifier> interface <name>OnCategorySelectedListener</name> <block>{
        <function_decl><type><name>void</name></type> <name>onCategorySelected</name><parameter_list>(<parameter><decl><type><name>CategoryFilter</name></type> <name>filter</name></decl></parameter>)</parameter_list>;</function_decl>
    }</block></interface>

    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>buildFromGithub</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>signatures</name> <init>=
                <expr><call><name><name>AppStoreApp</name><operator>.</operator><name>getSignatures</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"subreddit.android.appstore"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>String</name></type> <name>signature</name> <range>: <expr><name>signatures</name></expr></range></decl></init>)</control> <block>{
            <if>if <condition>(<expr><call><name><name>signature</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>AppStoreApp</name><operator>.</operator><name>GITHUB_SIGNATURE</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
        }</block></for>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/screens/details/AppDetailsComponent.java" hash="54446965378ac313f1ea237012e8d9427c1d5630"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>screens</name><operator>.</operator><name>details</name></name>;</package>

<import>import <name><name>dagger</name><operator>.</operator><name>Component</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>AppComponent</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>dagger</name><operator>.</operator><name>FragmentScope</name></name>;</import>


<interface><annotation>@<name>FragmentScope</name></annotation>
<annotation>@<name>Component</name><argument_list>(<argument><expr><name>modules</name> <operator>=</operator> <name><name>AppDetailsModule</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>dependencies</name> <operator>=</operator> <name><name>AppComponent</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> interface <name>AppDetailsComponent</name> <block>{
    <function_decl><type><name>void</name></type> <name>inject</name><parameter_list>(<parameter><decl><type><name>AppDetailsFragment</name></type> <name>fragment</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></interface>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/screens/details/AppDetailsContract.java" hash="8ca30e9a6b0c6ae5aae0cfbc3f6034c05a43f3dd"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>screens</name><operator>.</operator><name>details</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppInfo</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>scrapers</name><operator>.</operator><name>ScrapeResult</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>mvp</name><operator>.</operator><name>BasePresenter</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>mvp</name><operator>.</operator><name>BaseView</name></name>;</import>


<interface><specifier>public</specifier> interface <name>AppDetailsContract</name> <block>{
    <interface>interface <name>View</name> <super><extends>extends <name>BaseView</name></extends></super> <block>{

        <function_decl><type><name>void</name></type> <name>displayDetails</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>AppInfo</name></type> <name>appInfo</name></decl></parameter>)</parameter_list>;</function_decl>

        <function_decl><type><name>void</name></type> <name>displayScreenshots</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>ScrapeResult</name></type> <name>scrapeResult</name></decl></parameter>)</parameter_list>;</function_decl>

        <function_decl><type><name>void</name></type> <name>displayIcon</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>AppInfo</name></type> <name>appInfo</name></decl></parameter>)</parameter_list>;</function_decl>
    }</block></interface>

    <interface>interface <name>Presenter</name> <super><extends>extends <name><name>BasePresenter</name><argument_list type="generic">&lt;<argument><name>View</name></argument>&gt;</argument_list></name></extends></super> <block>{

    }</block></interface>
}</block></interface>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/screens/list/AppListPresenter.java" hash="27e2172747e02d72c7a3fbd833136dfc2a7a0300"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>screens</name><operator>.</operator><name>list</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>Observable</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>android</name><operator>.</operator><name>schedulers</name><operator>.</operator><name>AndroidSchedulers</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>disposables</name><operator>.</operator><name>Disposable</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>functions</name><operator>.</operator><name>Function</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>schedulers</name><operator>.</operator><name>Schedulers</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppInfo</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppTags</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>wiki</name><operator>.</operator><name>WikiRepository</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>screens</name><operator>.</operator><name>navigation</name><operator>.</operator><name>CategoryFilter</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>screens</name><operator>.</operator><name>settings</name><operator>.</operator><name>SettingsActivity</name></name>;</import>
<import>import <name><name>timber</name><operator>.</operator><name>log</name><operator>.</operator><name>Timber</name></name>;</import>


<class><specifier>public</specifier> class <name>AppListPresenter</name> <super><implements>implements <name><name>AppListContract</name><operator>.</operator><name>Presenter</name></name></implements></super> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>WikiRepository</name></type> <name>repository</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>CategoryFilter</name></type> <name>categoryFilter</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>SharedPreferences</name></type> <name>sharedPreferences</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Disposable</name></type> <name>listUpdater</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Disposable</name></type> <name>tagUpdater</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>AppListContract</name><operator>.</operator><name>View</name></name></type> <name>view</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>AppListPresenter</name><parameter_list>(<parameter><decl><type><name>WikiRepository</name></type> <name>repository</name></decl></parameter>, <parameter><decl><type><name>CategoryFilter</name></type> <name>categoryFilter</name></decl></parameter>, <parameter><decl><type><name>SharedPreferences</name></type> <name>preferences</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>repository</name></name> <operator>=</operator> <name>repository</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>categoryFilter</name></name> <operator>=</operator> <name>categoryFilter</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sharedPreferences</name></name> <operator>=</operator> <name>preferences</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>bundle</name></decl></parameter>)</parameter_list> <block>{

    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAttachView</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>AppListContract</name><operator>.</operator><name>View</name></name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>view</name></name> <operator>=</operator> <name>view</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>showLoadingScreen</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>AppInfo</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>filteredData</name> <init>= <expr><call><name><name>repository</name><operator>.</operator><name>getAppList</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>observeOn</name><argument_list>(<argument><expr><call><name><name>Schedulers</name><operator>.</operator><name>computation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>appInfos</name></decl></parameter></parameter_list> -&gt; <block>{
                    <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>AppInfo</name></argument>&gt;</argument_list></name></type> <name>data</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>appInfos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AppInfo</name></argument>&gt;</argument_list></name></type> <name>filteredData1</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>Timber</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><literal type="string">"Filtering to %s %s %s %s"</literal></expr></argument>,<argument><expr><call><name><name>categoryFilter</name><operator>.</operator><name>getPrimaryCategory</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>categoryFilter</name><operator>.</operator><name>getSecondaryCategory</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>categoryFilter</name><operator>.</operator><name>getTertiaryCategory</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>categoryFilter</name><operator>.</operator><name>isNewlyAdded</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <for>for <control>(<init><decl><type><name>AppInfo</name></type> <name>app</name> <range>: <expr><name>data</name></expr></range></decl></init>)</control> <block>{
                        <if>if <condition>(<expr><call><name><name>app</name><operator>.</operator><name>getTags</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name><name>AppTags</name><operator>.</operator><name>NEW</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>categoryFilter</name><operator>.</operator><name>isNewlyAdded</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name><name>filteredData1</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>app</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <continue>continue;</continue>
                        }</block></then></if>
                        <if>if <condition>(<expr><operator>(</operator><call><name><name>app</name><operator>.</operator><name>getPrimaryCategory</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>categoryFilter</name><operator>.</operator><name>getPrimaryCategory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>categoryFilter</name><operator>.</operator><name>getPrimaryCategory</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator>
                                <operator>(</operator><call><name><name>app</name><operator>.</operator><name>getSecondaryCategory</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>categoryFilter</name><operator>.</operator><name>getSecondaryCategory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>categoryFilter</name><operator>.</operator><name>getSecondaryCategory</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator>
                                <operator>(</operator><call><name><name>app</name><operator>.</operator><name>getTertiaryCategory</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>categoryFilter</name><operator>.</operator><name>getTertiaryCategory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>categoryFilter</name><operator>.</operator><name>getTertiaryCategory</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name><name>filteredData1</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>app</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></for>
                    <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>filteredData1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><name>filteredData1</name></expr>;</return>
                }</block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>replay</name><argument_list>()</argument_list></call><operator>.</operator><call><name>refCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>listUpdater</name> <operator>=</operator> <call><name><name>filteredData</name>
                <operator>.</operator><name>observeOn</name></name><argument_list>(<argument><expr><call><name><name>AndroidSchedulers</name><operator>.</operator><name>mainThread</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>appInfos</name></decl></parameter></parameter_list> -&gt; <block>{
                    <expr_stmt><expr><call><name><name>Timber</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><literal type="string">"showAppList(%s items)"</literal></expr></argument>, <argument><expr><call><name><name>appInfos</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>AppListPresenter</name><operator>.</operator><name>this</name><operator>.</operator><name>view</name><operator>.</operator><name>showAppList</name></name><argument_list>(<argument><expr><name>appInfos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if>if <condition>(<expr><call><name>saveTagFiltersSelected</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>AppListPresenter</name><operator>.</operator><name>this</name><operator>.</operator><name>view</name><operator>.</operator><name>restoreSelectedTags</name></name><argument_list>(<argument><expr><call><name>getSavedTagFilters</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>

                }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>tagUpdater</name> <operator>=</operator> <call><name><name>filteredData</name>
                <operator>.</operator><name>observeOn</name></name><argument_list>(<argument><expr><call><name><name>Schedulers</name><operator>.</operator><name>computation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>Function</name><argument_list type="generic">&lt;<argument><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>AppInfo</name></argument>&gt;</argument_list></name></argument>, <argument><name>TagMap</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>TagMap</name></type> <name>apply</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>AppInfo</name></argument>&gt;</argument_list></name></type> <name>appInfos</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
                        <return>return <expr><operator>new</operator> <call><name>TagMap</name><argument_list>(<argument><expr><name>appInfos</name></expr></argument>)</argument_list></call></expr>;</return>
                    }</block></function>
                }</block></class></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>observeOn</name><argument_list>(<argument><expr><call><name><name>AndroidSchedulers</name><operator>.</operator><name>mainThread</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>tagMap</name></decl></parameter></parameter_list> -&gt; <block>{
                    <expr_stmt><expr><call><name><name>Timber</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><literal type="string">"updateTagCount(%s)"</literal></expr></argument>, <argument><expr><name>tagMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>AppListPresenter</name><operator>.</operator><name>this</name><operator>.</operator><name>view</name><operator>.</operator><name>updateTagCount</name></name><argument_list>(<argument><expr><name>tagMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>filteredData</name>
                <operator>.</operator><name>observeOn</name></name><argument_list>(<argument><expr><call><name><name>AndroidSchedulers</name><operator>.</operator><name>mainThread</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>appInfos</name></decl></parameter></parameter_list> -&gt; <block>{
                    <if>if <condition>(<expr><call><name><name>appInfos</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>showError</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDetachView</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>saveTagFiltersSelected</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>saveSelectedTags</name><argument_list>(<argument><expr><call><name><name>AppListPresenter</name><operator>.</operator><name>this</name><operator>.</operator><name>view</name><operator>.</operator><name>getSelectedTags</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>listUpdater</name><operator>.</operator><name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tagUpdater</name><operator>.</operator><name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>view</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onSaveInstanceState</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>bundle</name></decl></parameter>)</parameter_list> <block>{

    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDestroy</name><parameter_list>()</parameter_list> <block>{

    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>refreshData</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>showLoadingScreen</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>repository</name><operator>.</operator><name>refresh</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>saveTagFiltersSelected</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>sharedPreferences</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>SettingsActivity</name><operator>.</operator><name>PREF_KEY_SAVE_TAG_FILTERS</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>AppTags</name></argument>&gt;</argument_list></name></type> <name>getSavedTagFilters</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AppTags</name></argument>&gt;</argument_list></name></type> <name>data</name> <init>= <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><call><name><name>AppTags</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>AppTags</name></argument>&gt;</argument_list></name></type> <name>appTags</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>data</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <if>if <condition>(<expr><call><name><name>sharedPreferences</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"savedTags_"</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>appTags</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>data</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>

        <return>return <expr><name>appTags</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>saveSelectedTags</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>AppTags</name></argument>&gt;</argument_list></name></type> <name>appTags</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AppTags</name></argument>&gt;</argument_list></name></type> <name>data</name> <init>= <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><call><name><name>AppTags</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>SharedPreferences</name><operator>.</operator><name>Editor</name></name></type> <name>editor</name> <init>= <expr><call><name><name>sharedPreferences</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>data</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <if>if <condition>(<expr><call><name><name>appTags</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>data</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><literal type="string">"savedTags_"</literal> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>

        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/screens/details/AppDetailsModule.java" hash="195bf0869f36e9cb22300df4bcd372f5a827bf8b"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>screens</name><operator>.</operator><name>details</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>gson</name><operator>.</operator><name>Gson</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>gson</name><operator>.</operator><name>GsonBuilder</name></name>;</import>

<import>import <name><name>dagger</name><operator>.</operator><name>Module</name></name>;</import>
<import>import <name><name>dagger</name><operator>.</operator><name>Provides</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppInfo</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>scrapers</name><operator>.</operator><name>MediaScraper</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>dagger</name><operator>.</operator><name>FragmentScope</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>mvp</name><operator>.</operator><name>PresenterFactory</name></name>;</import>


<class><annotation>@<name>Module</name></annotation>
<specifier>public</specifier> class <name>AppDetailsModule</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>AppInfo</name></type> <name>appInfo</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>AppDetailsModule</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>activity</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Gson</name></type> <name>gson</name> <init>= <expr><operator>new</operator> <call><name>GsonBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>appInfo</name> <operator>=</operator> <call><name><name>AppInfo</name><operator>.</operator><name>fromJson</name></name><argument_list>(<argument><expr><name>gson</name></expr></argument>, <argument><expr><call><name><name>activity</name><operator>.</operator><name>getIntent</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStringExtra</name><argument_list>(<argument><expr><name><name>AppDetailsActivity</name><operator>.</operator><name>ARG_KEY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Provides</name></annotation>
    <annotation>@<name>FragmentScope</name></annotation>
    <specifier>public</specifier> <type><name>AppInfo</name></type> <name>provideAppInfo</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>appInfo</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Provides</name></annotation>
    <annotation>@<name>FragmentScope</name></annotation>
    <specifier>public</specifier> <type><name><name>PresenterFactory</name><argument_list type="generic">&lt;<argument><name><name>AppDetailsContract</name><operator>.</operator><name>Presenter</name></name></argument>&gt;</argument_list></name></type> <name>providePresenterFactory</name><parameter_list>(
            <parameter><decl><type><specifier>final</specifier> <name>SharedPreferences</name></type> <name>preferences</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>MediaScraper</name></type> <name>mediaScraper</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>AppInfo</name></type> <name>appInfo</name></decl></parameter>
    )</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <class><super><name><name>PresenterFactory</name><argument_list type="generic">&lt;<argument><name><name>AppDetailsContract</name><operator>.</operator><name>Presenter</name></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name><name>AppDetailsContract</name><operator>.</operator><name>Presenter</name></name></type> <name>create</name><parameter_list>()</parameter_list> <block>{
                <return>return <expr><operator>new</operator> <call><name>AppDetailsPresenter</name><argument_list>(<argument><expr><name>preferences</name></expr></argument>, <argument><expr><name>mediaScraper</name></expr></argument>, <argument><expr><name>appInfo</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>AppDetailsContract</name><operator>.</operator><name>Presenter</name></extends></argument>&gt;</argument_list></name></type> <name>getTypeClazz</name><parameter_list>()</parameter_list> <block>{
                <return>return <expr><name><name>AppDetailsPresenter</name><operator>.</operator><name>class</name></name></expr>;</return>
            }</block></function>
        }</block></class></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/screens/details/AppDetailsPresenter.java" hash="f20b808e5f22b30c106bb41cfefda3cd7d5fe645"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>screens</name><operator>.</operator><name>details</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>

<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>Observer</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>android</name><operator>.</operator><name>schedulers</name><operator>.</operator><name>AndroidSchedulers</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>disposables</name><operator>.</operator><name>Disposable</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>schedulers</name><operator>.</operator><name>Schedulers</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppInfo</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>scrapers</name><operator>.</operator><name>MediaScraper</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>scrapers</name><operator>.</operator><name>ScrapeResult</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>screens</name><operator>.</operator><name>settings</name><operator>.</operator><name>SettingsActivity</name></name>;</import>


<class><specifier>public</specifier> class <name>AppDetailsPresenter</name> <super><implements>implements <name><name>AppDetailsContract</name><operator>.</operator><name>Presenter</name></name></implements></super> <block>{
    <decl_stmt><decl><type><name><name>AppDetailsContract</name><operator>.</operator><name>View</name></name></type> <name>view</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>SharedPreferences</name></type> <name>preferences</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>MediaScraper</name></type> <name>mediaScraper</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AppInfo</name></type> <name>appInfoItem</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Disposable</name></type> <name>disposable</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>AppDetailsPresenter</name><parameter_list>(<parameter><decl><type><name>SharedPreferences</name></type> <name>preferences</name></decl></parameter>, <parameter><decl><type><name>MediaScraper</name></type> <name>mediaScraper</name></decl></parameter>, <parameter><decl><type><name>AppInfo</name></type> <name>appInfoItem</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>preferences</name></name> <operator>=</operator> <name>preferences</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mediaScraper</name></name> <operator>=</operator> <name>mediaScraper</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>appInfoItem</name></name> <operator>=</operator> <name>appInfoItem</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>bundle</name></decl></parameter>)</parameter_list> <block>{

    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAttachView</name><parameter_list>(<parameter><decl><type><name><name>AppDetailsContract</name><operator>.</operator><name>View</name></name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>view</name></name> <operator>=</operator> <name>view</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>displayDetails</name></name><argument_list>(<argument><expr><name>appInfoItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name><name>preferences</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>SettingsActivity</name><operator>.</operator><name>PREF_KEY_LOAD_MEDIA</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mediaScraper</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>appInfoItem</name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>subscribeOn</name><argument_list>(<argument><expr><call><name><name>Schedulers</name><operator>.</operator><name>io</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>observeOn</name><argument_list>(<argument><expr><call><name><name>AndroidSchedulers</name><operator>.</operator><name>mainThread</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>Observer</name><argument_list type="generic">&lt;<argument><name>ScrapeResult</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
                        <function><annotation>@<name>Override</name></annotation>
                        <specifier>public</specifier> <type><name>void</name></type> <name>onSubscribe</name><parameter_list>(<parameter><decl><type><name>Disposable</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{
                            <expr_stmt><expr><name>disposable</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
                        }</block></function>

                        <function><annotation>@<name>Override</name></annotation>
                        <specifier>public</specifier> <type><name>void</name></type> <name>onNext</name><parameter_list>(<parameter><decl><type><name>ScrapeResult</name></type> <name>scrapeResult</name></decl></parameter>)</parameter_list> <block>{
                            <expr_stmt><expr><call><name><name>AppDetailsPresenter</name><operator>.</operator><name>this</name><operator>.</operator><name>view</name><operator>.</operator><name>displayIcon</name></name><argument_list>(<argument><expr><name>appInfoItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>AppDetailsPresenter</name><operator>.</operator><name>this</name><operator>.</operator><name>view</name><operator>.</operator><name>displayScreenshots</name></name><argument_list>(<argument><expr><name>scrapeResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></function>

                        <function><annotation>@<name>Override</name></annotation>
                        <specifier>public</specifier> <type><name>void</name></type> <name>onError</name><parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                            <comment type="line">// TODO</comment>
                        }</block></function>

                        <function><annotation>@<name>Override</name></annotation>
                        <specifier>public</specifier> <type><name>void</name></type> <name>onComplete</name><parameter_list>()</parameter_list> <block>{

                        }</block></function>
                    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDetachView</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>disposable</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>disposable</name><operator>.</operator><name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>view</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onSaveInstanceState</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>bundle</name></decl></parameter>)</parameter_list> <block>{

    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDestroy</name><parameter_list>()</parameter_list> <block>{

    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/screens/details/ScreenshotDialog.java" hash="2beb223c8c80f911943eb5d7a81ab840f611e1d3"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>screens</name><operator>.</operator><name>details</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Dialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewPager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toolbar</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>butterknife</name><operator>.</operator><name>BindView</name></name>;</import>
<import>import <name><name>butterknife</name><operator>.</operator><name>ButterKnife</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>R</name></name>;</import>

<class><specifier>public</specifier> class <name>ScreenshotDialog</name> <super><extends>extends <name>Dialog</name></extends> <implements>implements <name><name>View</name><operator>.</operator><name>OnClickListener</name></name></implements></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>urls</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>currentImage</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>screenshot_dialog_pager</name></name></expr></argument>)</argument_list></annotation> <type><name>ViewPager</name></type> <name>viewPager</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>screenshot_dialog_toolbar</name></name></expr></argument>)</argument_list></annotation> <type><name>Toolbar</name></type> <name>toolbar</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ScreenshotDialog</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>urls</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>currentImage</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>style</name><operator>.</operator><name>AppTheme_Black</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>currentImage</name></name> <operator>=</operator> <name>currentImage</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>urls</name></name> <operator>=</operator> <name>urls</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>dialog_screenshot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ButterKnife</name><operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>toolbar</name><operator>.</operator><name>setNavigationIcon</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ic_arrow_back_white_48px</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>toolbar</name><operator>.</operator><name>setNavigationOnClickListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>toolbar</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>screenshots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ScreenshotsAdapter</name></type> <name>screenshotsAdapter</name> <init>= <expr><operator>new</operator> <call><name>ScreenshotsAdapter</name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>screenshotsAdapter</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>urls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewPager</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>screenshotsAdapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewPager</name><operator>.</operator><name>setCurrentItem</name></name><argument_list>(<argument><expr><name>currentImage</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>viewPager</name><operator>.</operator><name>addOnPageChangeListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>ViewPager</name><operator>.</operator><name>OnPageChangeListener</name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onPageScrolled</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>positionOffset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>positionOffsetPixels</name></decl></parameter>)</parameter_list> <block>{

            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onPageSelected</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>updatePageIndicator</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onPageScrollStateChanged</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{

            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updatePageIndicator</name><argument_list>(<argument><expr><name>currentImage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>updatePageIndicator</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>toolbar</name><operator>.</operator><name>setSubtitle</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>position</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>urls</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>dismiss</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/backend/DeadLinkException.java" hash="593335993554ebb1844ce66a73cd5a3d083b1dec"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>

<class><specifier>public</specifier> class <name>DeadLinkException</name> <super><extends>extends <name>Exception</name></extends></super> <block>{
    <constructor><specifier>public</specifier> <name>DeadLinkException</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>url</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>US</name></name></expr></argument>, <argument><expr><literal type="string">"Link 404ed: %s"</literal></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/screens/details/ScreenshotViewPager.java" hash="46c9a39499e2cd88bb06b3343618473c11c46969"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>screens</name><operator>.</operator><name>details</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Rect</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>Drawable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>view</name><operator>.</operator><name>PagerAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewPager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>TypedValue</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageView</name></name>;</import>

<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>screens</name><operator>.</operator><name>details</name><operator>.</operator><name>ScreenshotsAdapter</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Created by andrewadams on 2017-09-29.
 */</comment>

<class><specifier>public</specifier> class <name>ScreenshotViewPager</name> <super><extends>extends <name>ViewPager</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name>ScreenshotsAdapter</name></type> <name>screenshotsAdapter</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ScreenshotViewPager</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>ScreenshotViewPager</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onMeasure</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>widthMeasureSpec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>heightMeasureSpec</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>screenshotsAdapter</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>View</name></type> <name>currentView</name> <init>= <expr><call><name><name>screenshotsAdapter</name><operator>.</operator><name>getCurrentView</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>currentView</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>ImageView</name></type> <name>imageView</name> <init>= <expr><operator>(</operator><name>ImageView</name><operator>)</operator> <call><name><name>currentView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>gallery_image</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Drawable</name></type> <name>drawable</name> <init>= <expr><call><name><name>imageView</name><operator>.</operator><name>getDrawable</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>drawable</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>Rect</name></type> <name>drawableBounds</name> <init>= <expr><call><name><name>drawable</name><operator>.</operator><name>getBounds</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><call><name><name>drawableBounds</name><operator>.</operator><name>height</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><call><name><name>drawableBounds</name><operator>.</operator><name>width</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>height</name> <operator>&gt;</operator> <name>width</name></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>newHeight</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>TypedValue</name><operator>.</operator><name>applyDimension</name></name><argument_list>(<argument><expr><name><name>TypedValue</name><operator>.</operator><name>COMPLEX_UNIT_DIP</name></name></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDisplayMetrics</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>heightMeasureSpec</name> <operator>=</operator> <call><name><name>MeasureSpec</name><operator>.</operator><name>makeMeasureSpec</name></name><argument_list>(<argument><expr><name>newHeight</name></expr></argument>, <argument><expr><name><name>MeasureSpec</name><operator>.</operator><name>EXACTLY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <elseif>else <if>if <condition>(<expr><name>height</name> <operator>&lt;</operator> <name>width</name></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>newHeight</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>TypedValue</name><operator>.</operator><name>applyDimension</name></name><argument_list>(<argument><expr><name><name>TypedValue</name><operator>.</operator><name>COMPLEX_UNIT_DIP</name></name></expr></argument>, <argument><expr><literal type="number">75</literal></expr></argument>, <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDisplayMetrics</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>heightMeasureSpec</name> <operator>=</operator> <call><name><name>MeasureSpec</name><operator>.</operator><name>makeMeasureSpec</name></name><argument_list>(<argument><expr><name>newHeight</name></expr></argument>, <argument><expr><name><name>MeasureSpec</name><operator>.</operator><name>EXACTLY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if></elseif></if>
                }</block></then></if>
            }</block></then></if>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onMeasure</name></name><argument_list>(<argument><expr><name>widthMeasureSpec</name></expr></argument>, <argument><expr><name>heightMeasureSpec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>setAdapter</name><parameter_list>(<parameter><decl><type><name>PagerAdapter</name></type> <name>adapter</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>screenshotsAdapter</name> <operator>=</operator> <operator>(</operator><name>ScreenshotsAdapter</name><operator>)</operator> <name>adapter</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/backend/DeviceIdentifier.java" hash="6a48d036c31d4bad7fa124dc7ff00c1d37db9ea0"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceManager</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>

<class><specifier>public</specifier> class <name>DeviceIdentifier</name> <block>{
    <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PREF_KEY</name> <init>= <expr><literal type="string">"device.uuid"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>DeviceIdentifier</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>}</block></constructor>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getUUID</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>prefs</name> <init>= <expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>uuid</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>PREF_KEY</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>uuid</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>uuid</name> <operator>=</operator> <call><name><name>UUID</name><operator>.</operator><name>randomUUID</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>putString</name><argument_list>(<argument><expr><name>PREF_KEY</name></expr></argument>, <argument><expr><name>uuid</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>apply</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>uuid</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/backend/HttpModule.java" hash="d89a860bb76e3ed5b6a5b42a02afdfdff0d2f9b0"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>gson</name><operator>.</operator><name>Gson</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>gson</name><operator>.</operator><name>GsonBuilder</name></name>;</import>

<import>import <name><name>dagger</name><operator>.</operator><name>Module</name></name>;</import>
<import>import <name><name>dagger</name><operator>.</operator><name>Provides</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>OkHttpClient</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>logging</name><operator>.</operator><name>HttpLoggingInterceptor</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>BuildConfig</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>dagger</name><operator>.</operator><name>ApplicationScope</name></name>;</import>

<class><annotation>@<name>Module</name></annotation>
<specifier>public</specifier> class <name>HttpModule</name> <block>{

    <function><annotation>@<name>Provides</name></annotation>
    <annotation>@<name>ApplicationScope</name></annotation>
    <type><name>Gson</name></type> <name>provideGson</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>GsonBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>create</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Provides</name></annotation>
    <annotation>@<name>ApplicationScope</name></annotation>
    <type><name>OkHttpClient</name></type> <name>provideOkHttpClient</name><parameter_list>(<parameter><decl><type><name>UserAgentInterceptor</name></type> <name>userAgent</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>OkHttpClient</name><operator>.</operator><name>Builder</name></name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name><name>OkHttpClient</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>BuildConfig</name><operator>.</operator><name>DEBUG</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>HttpLoggingInterceptor</name></type> <name>interceptor</name> <init>= <expr><operator>new</operator> <call><name>HttpLoggingInterceptor</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>interceptor</name><operator>.</operator><name>setLevel</name></name><argument_list>(<argument><expr><name><name>HttpLoggingInterceptor</name><operator>.</operator><name>Level</name><operator>.</operator><name>BODY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInterceptor</name></name><argument_list>(<argument><expr><name>interceptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>addInterceptor</name></name><argument_list>(<argument><expr><name>userAgent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>builder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/backend/UnsupportedScrapeTargetException.java" hash="8e24a8580b4ad248cc782f3436273dd2b60bf34a"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>

<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppInfo</name></name>;</import>

<class><specifier>public</specifier> class <name>UnsupportedScrapeTargetException</name> <super><extends>extends <name>IllegalArgumentException</name></extends></super> <block>{
    <constructor><specifier>public</specifier> <name>UnsupportedScrapeTargetException</name><parameter_list>(<parameter><decl><type><name>AppInfo</name></type> <name>appInfo</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>US</name></name></expr></argument>, <argument><expr><literal type="string">"%s has no supported scrape target: %s"</literal></expr></argument>, <argument><expr><name>appInfo</name></expr></argument>, <argument><expr><call><name><name>appInfo</name><operator>.</operator><name>getDownloads</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/backend/scrapers/BaseScrapeResult.java" hash="fa315042e4ce7642ea3c342ac546bf9020974511"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>scrapers</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>


<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>BaseScrapeResult</name> <super><implements>implements <name>ScrapeResult</name></implements></super> <block>{
    <decl_stmt><decl><specifier>protected</specifier> <type><name>String</name></type> <name>iconUrl</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>screenshotUrls</name></decl>;</decl_stmt>

    <constructor><specifier>protected</specifier> <name>BaseScrapeResult</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>iconUrl</name></decl></parameter>, <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>screenshotUrls</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>iconUrl</name></name> <operator>=</operator> <name>iconUrl</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>screenshotUrls</name></name> <operator>=</operator> <name>screenshotUrls</name></expr>;</expr_stmt>
    }</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/backend/scrapers/ImgSize.java" hash="61cbf90b7ed15b7da627fe9b939ce5b50356b9fa"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>scrapers</name></name>;</package>


<class><specifier>public</specifier> class <name>ImgSize</name> <block>{
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DONT_CARE</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>sizePixel</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>ImgSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sizePixel</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sizePixel</name></name> <operator>=</operator> <name>sizePixel</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>ImgSize</name></type> <name>dontCare</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>ImgSize</name><argument_list>(<argument><expr><name>DONT_CARE</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>ImgSize</name></type> <name>px</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pixel</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>ImgSize</name><argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>getSizePixel</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>sizePixel</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/backend/UserAgentInterceptor.java" hash="17c8a78f60ab70f7dcc924f30a94ddb11a0506f0"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageManager</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>

<import>import <name><name>okhttp3</name><operator>.</operator><name>Interceptor</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>Request</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>Response</name></name>;</import>
<import>import <name><name>timber</name><operator>.</operator><name>log</name><operator>.</operator><name>Timber</name></name>;</import>


<class><specifier>public</specifier> class <name>UserAgentInterceptor</name> <super><implements>implements <name>Interceptor</name></implements></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>userAgent</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>UserAgentInterceptor</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>PackageInfo</name></type> <name>packageInfo</name></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>packageInfo</name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getPackageManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPackageInfo</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>PackageManager</name><operator>.</operator><name>NameNotFoundException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Timber</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>userAgent</name></name> <operator>=</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>US</name></name></expr></argument>, <argument><expr><literal type="string">"android:%s:%s"</literal></expr></argument>, <argument><expr><name><name>packageInfo</name><operator>.</operator><name>packageName</name></name></expr></argument>, <argument><expr><name><name>packageInfo</name><operator>.</operator><name>versionName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>Response</name></type> <name>intercept</name><parameter_list>(<parameter><decl><type><name>Chain</name></type> <name>chain</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Request</name></type> <name>originRequest</name> <init>= <expr><call><name><name>chain</name><operator>.</operator><name>request</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Request</name></type> <name>requestWithUserAgent</name> <init>= <expr><call><name><name>originRequest</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>header</name><argument_list>(<argument><expr><literal type="string">"User-Agent"</literal></expr></argument>, <argument><expr><name>userAgent</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>chain</name><operator>.</operator><name>proceed</name></name><argument_list>(<argument><expr><name>requestWithUserAgent</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/backend/scrapers/MediaScraper.java" hash="66a4032e56f8b1b24efabb2272f553ea70bc08b6"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>scrapers</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>

<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>Observable</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppInfo</name></name>;</import>

<interface><specifier>public</specifier> interface <name>MediaScraper</name> <block>{
    <function_decl><annotation>@<name>NonNull</name></annotation>
    <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>ScrapeResult</name></argument>&gt;</argument_list></name></type> <name>get</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>AppInfo</name></type> <name>appToScrape</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></interface>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/screens/details/ScreenshotsAdapter.java" hash="69acb7534880f7a1db2f060e51705e290eca7279"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>screens</name><operator>.</operator><name>details</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>view</name><operator>.</operator><name>PagerAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>FrameLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageView</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>Glide</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>butterknife</name><operator>.</operator><name>ButterKnife</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>ui</name><operator>.</operator><name>glide</name><operator>.</operator><name>PlaceHolderRequestListener</name></name>;</import>

<class><specifier>public</specifier> class <name>ScreenshotsAdapter</name> <super><extends>extends <name>PagerAdapter</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>imagesPerPage</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Context</name></type> <name>context</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>LayoutInflater</name></type> <name>layoutInflater</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>urls</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ScreenshotClickedListener</name></type> <name>l</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type> <name>currentView</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ScreenshotsAdapter</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>imagesPerPage</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>imagesPerPage</name></name> <operator>=</operator> <name>imagesPerPage</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>layoutInflater</name> <operator>=</operator> <operator>(</operator><name>LayoutInflater</name><operator>)</operator> <call><name><name>context</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>LAYOUT_INFLATER_SERVICE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>urls</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>urls</name></name> <operator>=</operator> <name>urls</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyDataSetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>getCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>urls</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>isViewFromObject</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>object</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><name>view</name> <operator>==</operator> <name>object</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>Object</name></type> <name>instantiateItem</name><parameter_list>(<parameter><decl><type><name>ViewGroup</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>View</name></type> <name>itemView</name> <init>= <expr><call><name><name>layoutInflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>adapter_gallery_image</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ImageView</name></type> <name>galleryImage</name> <init>= <expr><call><name><name>ButterKnife</name><operator>.</operator><name>findById</name></name><argument_list>(<argument><expr><name>itemView</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>gallery_image</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>View</name></type> <name>galleryPlaceholder</name> <init>= <expr><call><name><name>ButterKnife</name><operator>.</operator><name>findById</name></name><argument_list>(<argument><expr><name>itemView</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>gallery_placeholder</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Glide</name><operator>.</operator><name>with</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>load</name><argument_list>(<argument><expr><call><name><name>urls</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>listener</name><argument_list>(<argument><expr><operator>new</operator> <call><name>PlaceHolderRequestListener</name><argument_list>(<argument><expr><name>galleryImage</name></expr></argument>, <argument><expr><name>galleryPlaceholder</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>into</name><argument_list>(<argument><expr><name>galleryImage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>galleryImage</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>view</name></decl></parameter></parameter_list> -&gt; <block>{
            <if>if <condition>(<expr><name>l</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>l</name><operator>.</operator><name>onScreenshotClicked</name></name><argument_list>(<argument><expr><call><name><name>urls</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>container</name><operator>.</operator><name>addView</name></name><argument_list>(<argument><expr><name>itemView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>itemView</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>destroyItem</name><parameter_list>(<parameter><decl><type><name>ViewGroup</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>object</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>container</name><operator>.</operator><name>removeView</name></name><argument_list>(<argument><expr><operator>(</operator><name>FrameLayout</name><operator>)</operator> <name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>float</name></type> <name>getPageWidth</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>super</name><operator>.</operator><name>getPageWidth</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>imagesPerPage</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setScreenshotClickedListener</name><parameter_list>(<parameter><decl><type><name>ScreenshotClickedListener</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>l</name></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>setPrimaryItem</name><parameter_list>(<parameter><decl><type><name>ViewGroup</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>object</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>currentView</name> <operator>=</operator> <operator>(</operator><name>View</name><operator>)</operator> <name>object</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setPrimaryItem</name></name><argument_list>(<argument><expr><name>container</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>View</name></type> <name>getCurrentView</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>currentView</name></expr>;</return>
    }</block></function>

    <interface>interface <name>ScreenshotClickedListener</name> <block>{
        <function_decl><type><name>void</name></type> <name>onScreenshotClicked</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>url</name></decl></parameter>)</parameter_list>;</function_decl>
    }</block></interface>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/backend/scrapers/ScrapeResult.java" hash="95859e3d8637ace90571a1e2a3407c665782e20e"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>scrapers</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>

<interface><specifier>public</specifier> interface <name>ScrapeResult</name> <block>{

    <comment type="block" format="javadoc">/**
     * @param width  if you don't care, put your hands... err put -1
     * @param height same as width
     * @return fitting url pointing to an image
     */</comment>
    <function_decl><annotation>@<name>Nullable</name></annotation>
    <type><name>String</name></type> <name>getIconUrl</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>ImgSize</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>ImgSize</name></type> <name>height</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getScreenshotUrls</name><parameter_list>()</parameter_list>;</function_decl>
}</block></interface>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/backend/scrapers/LiveMediaScraper.java" hash="ce5425d062f4ee52e665209354a0256361754765"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>scrapers</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>util</name><operator>.</operator><name>LruCache</name></name>;</import>

<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>Observable</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>OkHttpClient</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>UnsupportedScrapeTargetException</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppInfo</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>Download</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>scrapers</name><operator>.</operator><name>caching</name><operator>.</operator><name>ScrapeDiskCache</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>scrapers</name><operator>.</operator><name>gplay</name><operator>.</operator><name>GPlayScraper</name></name>;</import>
<import>import <name><name>timber</name><operator>.</operator><name>log</name><operator>.</operator><name>Timber</name></name>;</import>

<class><specifier>public</specifier> class <name>LiveMediaScraper</name> <super><implements>implements <name>MediaScraper</name></implements></super> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>LruCache</name><argument_list type="generic">&lt;<argument><name>AppInfo</name></argument>, <argument><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>ScrapeResult</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>scrapeCache</name> <init>= <expr><operator>new</operator> <call><name><name>LruCache</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>ScrapeDiskCache</name></type> <name>scrapeDiskCache</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>GPlayScraper</name></type> <name>gPlayScraper</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>LiveMediaScraper</name><parameter_list>(<parameter><decl><type><name>ScrapeDiskCache</name></type> <name>scrapeDiskCache</name></decl></parameter>, <parameter><decl><type><name>OkHttpClient</name></type> <name>client</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>scrapeDiskCache</name></name> <operator>=</operator> <name>scrapeDiskCache</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>gPlayScraper</name></name> <operator>=</operator> <operator>new</operator> <call><name>GPlayScraper</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>NonNull</name></annotation>
    <annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>ScrapeResult</name></argument>&gt;</argument_list></name></type> <name>get</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <specifier>final</specifier> <name>AppInfo</name></type> <name>appToScrape</name></decl></parameter>)</parameter_list> <block>{
        <synchronized>synchronized <init>(<expr><name>scrapeCache</name></expr>)</init> <block>{
            <decl_stmt><decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>ScrapeResult</name></argument>&gt;</argument_list></name></type> <name>scrapeResultObserver</name> <init>= <expr><call><name><name>scrapeCache</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>appToScrape</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>scrapeResultObserver</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>scrapeResultObserver</name> <operator>=</operator> <call><name><name>scrapeDiskCache</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>appToScrape</name></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>switchIfEmpty</name><argument_list>(
                                <argument><expr><call><name>doScrape</name><argument_list>(<argument><expr><name>appToScrape</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>doOnNext</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>scrapeResult</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>scrapeDiskCache</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>appToScrape</name></expr></argument>, <argument><expr><name>scrapeResult</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr></argument>
                        )</argument_list></call>
                        <operator>.</operator><call><name>cache</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>scrapeCache</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>appToScrape</name></expr></argument>, <argument><expr><name>scrapeResultObserver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block type="pseudo"><expr_stmt><expr><call><name><name>Timber</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><literal type="string">"Using cached result for %s"</literal></expr></argument>, <argument><expr><name>appToScrape</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
            <return>return <expr><name>scrapeResultObserver</name></expr>;</return>
        }</block></synchronized>
    }</block></function>

    <function><specifier>private</specifier> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>ScrapeResult</name></argument>&gt;</argument_list></name></type> <name>doScrape</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>AppInfo</name></type> <name>appToScrape</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Timber</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><literal type="string">"Scraping %s"</literal></expr></argument>, <argument><expr><call><name><name>appToScrape</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>Download</name></type> <name>download</name> <range>: <expr><call><name><name>appToScrape</name><operator>.</operator><name>getDownloads</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
            <switch>switch <condition>(<expr><call><name><name>download</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <case>case <expr><name>GPLAY</name></expr>:</case>
                    <return>return <expr><call><name><name>gPlayScraper</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>appToScrape</name></expr></argument>)</argument_list></call></expr>;</return>
                <default>default:</default>
                    <expr_stmt><expr><call><name><name>Timber</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><literal type="string">"No scraper available for type %s"</literal></expr></argument>, <argument><expr><call><name><name>download</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></switch>
        }</block></for>
        <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>error</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>UnsupportedScrapeTargetException</name><argument_list>(<argument><expr><name>appToScrape</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/backend/scrapers/gplay/GPlayResult.java" hash="4269b18d4392167107eeef43b7c9dd171bc75ae1"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>scrapers</name><operator>.</operator><name>gplay</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>

<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>scrapers</name><operator>.</operator><name>BaseScrapeResult</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>scrapers</name><operator>.</operator><name>ImgSize</name></name>;</import>


<class><specifier>public</specifier> class <name>GPlayResult</name> <super><extends>extends <name>BaseScrapeResult</name></extends></super> <block>{

    <constructor><specifier>public</specifier> <name>GPlayResult</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>iconUrl</name></decl></parameter>, <parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>screenshotUrls</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>iconUrl</name></expr></argument>, <argument><expr><name>screenshotUrls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Nullable</name></annotation>
    <annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>String</name></type> <name>getIconUrl</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>ImgSize</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>ImgSize</name></type> <name>height</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>width</name><operator>.</operator><name>getSizePixel</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ImgSize</name><operator>.</operator><name>DONT_CARE</name></name></expr>)</condition><then> <block>{
            <return>return <expr><name>iconUrl</name></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><name>iconUrl</name> <operator>+</operator> <literal type="string">"=w"</literal> <operator>+</operator> <call><name><name>width</name><operator>.</operator><name>getSizePixel</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getScreenshotUrls</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>screenshotUrls</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>US</name></name></expr></argument>, <argument><expr><literal type="string">"GPlayResult(iconUrl=%s, screenshotUrls=%s"</literal></expr></argument>, <argument><expr><name>iconUrl</name></expr></argument>, <argument><expr><name>screenshotUrls</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/backend/scrapers/caching/CachedScrape.java" hash="46053c0fda0eaad2a9ef535f11105f16f969c2d1"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>scrapers</name><operator>.</operator><name>caching</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Constructor</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>InvocationTargetException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>

<import>import <name><name>io</name><operator>.</operator><name>realm</name><operator>.</operator><name>RealmList</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>realm</name><operator>.</operator><name>RealmObject</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>realm</name><operator>.</operator><name>annotations</name><operator>.</operator><name>PrimaryKey</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppInfo</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>scrapers</name><operator>.</operator><name>BaseScrapeResult</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>scrapers</name><operator>.</operator><name>ImgSize</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>scrapers</name><operator>.</operator><name>ScrapeResult</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>RealmString</name></name>;</import>

<class><specifier>public</specifier> class <name>CachedScrape</name> <super><extends>extends <name>RealmObject</name></extends></super> <block>{
    <constructor><specifier>public</specifier> <name>CachedScrape</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>CachedScrape</name><parameter_list>(<parameter><decl><type><name>AppInfo</name></type> <name>appInfo</name></decl></parameter>, <parameter><decl><type><name>ScrapeResult</name></type> <name>scrapeResult</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name> <operator>=</operator> <call><name><name>appInfo</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>scrapeResultClassName</name></name> <operator>=</operator> <call><name><name>scrapeResult</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>iconUrl</name></name> <operator>=</operator> <call><name><name>scrapeResult</name><operator>.</operator><name>getIconUrl</name></name><argument_list>(<argument><expr><call><name><name>ImgSize</name><operator>.</operator><name>dontCare</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ImgSize</name><operator>.</operator><name>dontCare</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>screenshotUrls</name></name> <operator>=</operator> <call><name><name>RealmString</name><operator>.</operator><name>fromCollection</name></name><argument_list>(<argument><expr><call><name><name>scrapeResult</name><operator>.</operator><name>getScreenshotUrls</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <decl_stmt><decl><annotation>@<name>PrimaryKey</name></annotation>
    <type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>scrapeResultClassName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>iconUrl</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>RealmList</name><argument_list type="generic">&lt;<argument><name>RealmString</name></argument>&gt;</argument_list></name></type> <name>screenshotUrls</name></decl>;</decl_stmt>

    <function><specifier>public</specifier> <type><name>BaseScrapeResult</name></type> <name>toBaseScrapeResult</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>ClassNotFoundException</name></expr></argument>, <argument><expr><name>NoSuchMethodException</name></expr></argument>, <argument><expr><name>IllegalAccessException</name></expr></argument>, <argument><expr><name>InvocationTargetException</name></expr></argument>, <argument><expr><name>InstantiationException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>c</name> <init>= <expr><call><name><name>Class</name><operator>.</operator><name>forName</name></name><argument_list>(<argument><expr><name>scrapeResultClassName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Constructor</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>cons</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>getConstructor</name></name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>Collection</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>(</operator><name>BaseScrapeResult</name><operator>)</operator> <call><name><name>cons</name><operator>.</operator><name>newInstance</name></name><argument_list>(<argument><expr><name>iconUrl</name></expr></argument>, <argument><expr><call><name><name>RealmString</name><operator>.</operator><name>toCollection</name></name><argument_list>(<argument><expr><name>screenshotUrls</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/backend/scrapers/caching/ScrapeDiskCache.java" hash="f92afc0dc699f7febc2ff1ce48289aac980cf1cb"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>scrapers</name><operator>.</operator><name>caching</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>

<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>Observable</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>ObservableEmitter</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>ObservableOnSubscribe</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>functions</name><operator>.</operator><name>Function</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>realm</name><operator>.</operator><name>Realm</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppInfo</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>scrapers</name><operator>.</operator><name>ScrapeResult</name></name>;</import>
<import>import <name><name>timber</name><operator>.</operator><name>log</name><operator>.</operator><name>Timber</name></name>;</import>

<class><specifier>public</specifier> class <name>ScrapeDiskCache</name> <block>{

    <constructor><specifier>public</specifier> <name>ScrapeDiskCache</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>put</name><parameter_list>(<parameter><decl><type><name>AppInfo</name></type> <name>appInfo</name></decl></parameter>, <parameter><decl><type><name>ScrapeResult</name></type> <name>scrapeResult</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Timber</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><literal type="string">"Storing &lt;%s,%s&gt;"</literal></expr></argument>, <argument><expr><name>appInfo</name></expr></argument>, <argument><expr><name>scrapeResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Realm</name></type> <name>realm</name> <init>= <expr><call><name><name>Realm</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>realm</name><operator>.</operator><name>beginTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>realm</name><operator>.</operator><name>copyToRealmOrUpdate</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>CachedScrape</name><argument_list>(<argument><expr><name>appInfo</name></expr></argument>, <argument><expr><name>scrapeResult</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>realm</name><operator>.</operator><name>commitTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>ScrapeResult</name></argument>&gt;</argument_list></name></type> <name>get</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>AppInfo</name></type> <name>appInfo</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><name><name>Observable</name><operator>.</operator></name>&lt;<name>CachedScrape</name><operator>&gt;</operator><call><name>create</name><argument_list>(
                <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>emitter</name></decl></parameter></parameter_list> -&gt; <block>{
                    <decl_stmt><decl><type><name>Realm</name></type> <name>realm</name> <init>= <expr><call><name><name>Realm</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>CachedScrape</name></type> <name>cachedScrape</name> <init>= <expr><call><name><name>realm</name><operator>.</operator><name>where</name></name><argument_list>(<argument><expr><name><name>CachedScrape</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>equalTo</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><call><name><name>appInfo</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>findFirst</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>cachedScrape</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>emitter</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><name>cachedScrape</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                    <expr_stmt><expr><call><name><name>emitter</name><operator>.</operator><name>onComplete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></lambda></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>cachedScrape</name></decl></parameter></parameter_list> -&gt; <block>{
                    <decl_stmt><decl><type><name>ScrapeResult</name></type> <name>scrapeResult</name> <init>= <expr><call><name><name>cachedScrape</name><operator>.</operator><name>toBaseScrapeResult</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>Timber</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><literal type="string">"Returning get(%s): %s"</literal></expr></argument>, <argument><expr><name>appInfo</name></expr></argument>, <argument><expr><name>scrapeResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><name>scrapeResult</name></expr>;</return>
                }</block></lambda></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/backend/reddit/TokenApi.java" hash="e0d417b8d9d70f514033da9de0bcb8a5d6b2f4ae"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name></name>;</package>


<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>Observable</name></name>;</import>
<import>import <name><name>retrofit2</name><operator>.</operator><name>http</name><operator>.</operator><name>Field</name></name>;</import>
<import>import <name><name>retrofit2</name><operator>.</operator><name>http</name><operator>.</operator><name>FormUrlEncoded</name></name>;</import>
<import>import <name><name>retrofit2</name><operator>.</operator><name>http</name><operator>.</operator><name>Header</name></name>;</import>
<import>import <name><name>retrofit2</name><operator>.</operator><name>http</name><operator>.</operator><name>POST</name></name>;</import>

<interface><specifier>public</specifier> interface <name>TokenApi</name> <block>{
    <decl_stmt><decl><type><name>String</name></type> <name>BASEURL</name> <init>= <expr><literal type="string">"https://www.reddit.com/"</literal></expr></init></decl>;</decl_stmt>

    <function_decl><annotation>@<name>FormUrlEncoded</name></annotation>
    <annotation>@<name>POST</name><argument_list>(<argument><expr><literal type="string">"api/v1/access_token"</literal></expr></argument>)</argument_list></annotation>
    <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>TokenApi</name><operator>.</operator><name>Token</name></name></argument>&gt;</argument_list></name></type> <name>getUserlessAuthToken</name><parameter_list>(<parameter><decl><type><annotation>@<name>Header</name><argument_list>(<argument><expr><literal type="string">"Authorization"</literal></expr></argument>)</argument_list></annotation> <name>String</name></type> <name>authentication</name></decl></parameter>,
                                                    <parameter><decl><type><annotation>@<name>Field</name><argument_list>(<argument><expr><literal type="string">"device_id"</literal></expr></argument>)</argument_list></annotation> <name>String</name></type> <name>deviceId</name></decl></parameter>,
                                                    <parameter><decl><type><annotation>@<name>Field</name><argument_list>(<argument><expr><literal type="string">"grant_type"</literal></expr></argument>)</argument_list></annotation> <name>String</name></type> <name>grant_type</name></decl></parameter>,
                                                    <parameter><decl><type><annotation>@<name>Field</name><argument_list>(<argument><expr><literal type="string">"scope"</literal></expr></argument>)</argument_list></annotation> <name>String</name></type> <name>scope</name></decl></parameter>)</parameter_list>;</function_decl>

    <class>class <name>Token</name> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>access_token</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>token_type</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>expires_in</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>scope</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>issuedTime</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isExpired</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>issuedTime</name> <operator>+</operator> <name>expires_in</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</return>
        }</block></function>

        <function><specifier>public</specifier> <type><name>String</name></type> <name>getAuthorizationString</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>token_type</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>access_token</name></expr>;</return>
        }</block></function>
    }</block></class>
}</block></interface>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/backend/scrapers/gplay/GPlayScraper.java" hash="9ecfbaf25dd3795fa6c26c3813afe182f9da772c"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>scrapers</name><operator>.</operator><name>gplay</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>

<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>Observable</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>OkHttpClient</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>Request</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>DeadLinkException</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppInfo</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>Download</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>scrapers</name><operator>.</operator><name>ImgSize</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>scrapers</name><operator>.</operator><name>MediaScraper</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>scrapers</name><operator>.</operator><name>ScrapeResult</name></name>;</import>
<import>import <name><name>timber</name><operator>.</operator><name>log</name><operator>.</operator><name>Timber</name></name>;</import>

<class><specifier>public</specifier> class <name>GPlayScraper</name> <super><implements>implements <name>MediaScraper</name></implements></super> <block>{
    <comment type="line">// TODO: okhttp</comment>
    <decl_stmt><decl><type><specifier>final</specifier> <name>OkHttpClient</name></type> <name>client</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>GPlayScraper</name><parameter_list>(<parameter><decl><type><name>OkHttpClient</name></type> <name>client</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>client</name></name> <operator>=</operator> <name>client</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>NonNull</name></annotation>
    <annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>ScrapeResult</name></argument>&gt;</argument_list></name></type> <name>get</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <specifier>final</specifier> <name>AppInfo</name></type> <name>appToScrape</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><name><name>Observable</name>
                <operator>.</operator></name>&lt;<name>String</name><operator>&gt;</operator><call><name>create</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>emitter</name></decl></parameter></parameter_list> -&gt; <block>{
                    <for>for <control>(<init><decl><type><name>Download</name></type> <name>d</name> <range>: <expr><call><name><name>appToScrape</name><operator>.</operator><name>getDownloads</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
                        <if>if <condition>(<expr><call><name><name>d</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Download</name><operator>.</operator><name>Type</name><operator>.</operator><name>GPLAY</name></name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name><name>Timber</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><literal type="string">"Scraping %s"</literal></expr></argument>, <argument><expr><call><name><name>d</name><operator>.</operator><name>getTarget</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>emitter</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><call><name><name>d</name><operator>.</operator><name>getTarget</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></for>
                    <expr_stmt><expr><call><name><name>emitter</name><operator>.</operator><name>onComplete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></lambda></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>s</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>client</name><operator>.</operator><name>newCall</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Request</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>url</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>execute</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>response</name></decl></parameter></parameter_list> -&gt; <block>{</block>
                    if (response.code(</lambda></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">404</literal></expr></return>)</block>
                        <throw>throw <argument_list>new <argument><expr><call><name>DeadLinkException</name><argument_list>(<argument><expr><call><name><name>response</name><operator>.</operator><name>request</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>url</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument></argument_list></throw>;</function>

                    <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>urls</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>body</name> <init>= <expr><call><name><name>response</name><operator>.</operator><name>body</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>string</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>iconStart</name> <init>= <expr><call><name><name>body</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="string">"&lt;img class=\"cover-image\""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>iconEnd</name> <init>= <expr><call><name><name>body</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="string">"\" alt=\"Cover art\""</literal></expr></argument>, <argument><expr><name>iconStart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>iconUrl</name> <init>= <expr><call><name><name>body</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><call><name><name>body</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="string">"lh"</literal></expr></argument>, <argument><expr><name>iconStart</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>iconEnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>Timber</name><operator>.</operator><name>v</name></name><argument_list>(<argument><expr><literal type="string">"%s | icon url: %s"</literal></expr></argument>, <argument><expr><name>appToScrape</name></expr></argument>, <argument><expr><name>iconUrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="line">// Strip size parameter we generate these</comment>
                    <expr_stmt><expr><name>iconUrl</name> <operator>=</operator> <call><name><name>iconUrl</name><operator>.</operator><name>replaceAll</name></name><argument_list>(<argument><expr><literal type="string">"=(w|h)\\d+"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if>if <condition>(<expr><operator>!</operator><call><name><name>iconUrl</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"http://"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>iconUrl</name> <operator>=</operator> <literal type="string">"http://"</literal> <operator>+</operator> <name>iconUrl</name></expr>;</expr_stmt></block></then></if>
                    <while>while <condition>(<expr><call><name><name>body</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"&lt;img class=\"screenshot\""</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><call><name><name>body</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="string">"&lt;img class=\"screenshot\""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><call><name><name>body</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="string">"itemprop=\"screenshot\""</literal></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>String</name></type> <name>screenUrl</name> <init>= <expr><call><name><name>body</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>subStart</name> <init>= <expr><call><name><name>screenUrl</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="string">"lh"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>subEnd</name> <init>= <expr><call><name><name>screenUrl</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="string">"\""</literal></expr></argument>, <argument><expr><name>subStart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>screenUrl</name> <operator>=</operator> <call><name><name>screenUrl</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>subStart</name></expr></argument>, <argument><expr><name>subEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>body</name> <operator>=</operator> <call><name><name>body</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><call><name><name>body</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>Timber</name><operator>.</operator><name>v</name></name><argument_list>(<argument><expr><literal type="string">"%s | screenshot url: %s"</literal></expr></argument>, <argument><expr><name>appToScrape</name></expr></argument>, <argument><expr><name>screenUrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="line">// Strip size parameter we generate these</comment>
                        <expr_stmt><expr><name>screenUrl</name> <operator>=</operator> <call><name><name>screenUrl</name><operator>.</operator><name>replaceAll</name></name><argument_list>(<argument><expr><literal type="string">"=(w|h)\\d+"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if>if <condition>(<expr><operator>!</operator><call><name><name>screenUrl</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"http://"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>screenUrl</name> <operator>=</operator> <literal type="string">"http://"</literal> <operator>+</operator> <name>screenUrl</name></expr>;</expr_stmt></block></then></if>
                        <expr_stmt><expr><call><name><name>urls</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>screenUrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></while>

                    <return>return <expr><operator>new</operator> <call><name>GPlayResult</name><argument_list>(<argument><expr><name>iconUrl</name></expr></argument>, <argument><expr><name>urls</name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></class>)
                <expr_stmt><expr><operator>.</operator><call><name>toList</name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>scrapeResults</name></decl></parameter></parameter_list> -&gt; <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>iconUrl</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>screenshotUrls</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <for>for <control>(<init><decl><type><name>ScrapeResult</name></type> <name>scrapeResult</name> <range>: <expr><name>scrapeResults</name></expr></range></decl></init>)</control> <block>{
                        <if>if <condition>(<expr><call><name><name>scrapeResult</name><operator>.</operator><name>getIconUrl</name></name><argument_list>(<argument><expr><call><name><name>ImgSize</name><operator>.</operator><name>dontCare</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ImgSize</name><operator>.</operator><name>dontCare</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>iconUrl</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>iconUrl</name> <operator>=</operator> <call><name><name>scrapeResult</name><operator>.</operator><name>getIconUrl</name></name><argument_list>(<argument><expr><call><name><name>ImgSize</name><operator>.</operator><name>dontCare</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ImgSize</name><operator>.</operator><name>dontCare</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                        <expr_stmt><expr><call><name><name>screenshotUrls</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>scrapeResult</name><operator>.</operator><name>getScreenshotUrls</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></for>
                    <return>return <expr><operator>new</operator> <call><name>GPlayResult</name><argument_list>(<argument><expr><name>iconUrl</name></expr></argument>, <argument><expr><name>screenshotUrls</name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }
}
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/backend/reddit/TokenRepository.java" hash="c0413146a78f4daa1a23fa06d59d8638bb05fbd1"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Base64</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>gson</name><operator>.</operator><name>Gson</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>gson</name><operator>.</operator><name>JsonSyntaxException</name></name>;</import>

<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>Observable</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>schedulers</name><operator>.</operator><name>Schedulers</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>DeviceIdentifier</name></name>;</import>
<import>import <name><name>timber</name><operator>.</operator><name>log</name><operator>.</operator><name>Timber</name></name>;</import>

<class><specifier>public</specifier> class <name>TokenRepository</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>CLIENT_ID</name> <init>= <expr><literal type="string">"8i-tKlCSV9P_fQ"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PREF_KEY</name> <init>= <expr><literal type="string">"reddit.token.userlessauth"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>DeviceIdentifier</name></type> <name>deviceIdentifier</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>TokenApi</name></type> <name>tokenApi</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>encodedCredentials</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Gson</name></type> <name>gson</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>SharedPreferences</name></type> <name>preferences</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>TokenRepository</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>,
                           <parameter><decl><type><name>DeviceIdentifier</name></type> <name>deviceIdentifier</name></decl></parameter>,
                           <parameter><decl><type><name>TokenApi</name></type> <name>tokenApi</name></decl></parameter>,
                           <parameter><decl><type><name>Gson</name></type> <name>gson</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>deviceIdentifier</name></name> <operator>=</operator> <name>deviceIdentifier</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>gson</name></name> <operator>=</operator> <name>gson</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tokenApi</name></name> <operator>=</operator> <name>tokenApi</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>credentials</name> <init>= <expr><name>CLIENT_ID</name> <operator>+</operator> <literal type="string">":"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>encodedCredentials</name> <operator>=</operator> <literal type="string">"Basic "</literal> <operator>+</operator> <call><name><name>Base64</name><operator>.</operator><name>encodeToString</name></name><argument_list>(<argument><expr><call><name><name>credentials</name><operator>.</operator><name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Base64</name><operator>.</operator><name>NO_WRAP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>preferences</name> <operator>=</operator> <call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>TokenApi</name><operator>.</operator><name>Token</name></name></argument>&gt;</argument_list></name></type> <name>getUserlessAuthToken</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>Observable</name><operator>.</operator></name>&lt;<name><name>TokenApi</name><operator>.</operator><name>Token</name></name><operator>&gt;</operator><call><name>create</name><argument_list>(
                <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>emitter</name></decl></parameter></parameter_list> -&gt; <block>{
                    <decl_stmt><decl><type><name><name>TokenApi</name><operator>.</operator><name>Token</name></name></type> <name>token</name> <init>= <expr><call><name>getToken</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>token</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>emitter</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                    <expr_stmt><expr><call><name><name>emitter</name><operator>.</operator><name>onComplete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></lambda></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>switchIfEmpty</name><argument_list>(<argument><expr><call><name><name>tokenApi</name><operator>.</operator><name>getUserlessAuthToken</name></name>
                        <argument_list>(
                                <argument><expr><name>encodedCredentials</name></expr></argument>,
                                <argument><expr><call><name><name>deviceIdentifier</name><operator>.</operator><name>getUUID</name></name><argument_list>()</argument_list></call></expr></argument>,
                                <argument><expr><literal type="string">"https://oauth.reddit.com/grants/installed_client"</literal></expr></argument>,
                                <argument><expr><literal type="string">"wikiread"</literal></expr></argument>
                        )</argument_list></call>
                        <operator>.</operator><call><name>subscribeOn</name><argument_list>(<argument><expr><call><name><name>Schedulers</name><operator>.</operator><name>io</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>doOnNext</name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>storeToken</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Nullable</name></annotation>
    <type><name><name>TokenApi</name><operator>.</operator><name>Token</name></name></type> <name>getToken</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>TokenApi</name><operator>.</operator><name>Token</name></name></type> <name>token</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>token</name> <operator>=</operator> <call><name><name>gson</name><operator>.</operator><name>fromJson</name></name><argument_list>(<argument><expr><call><name><name>preferences</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>PREF_KEY</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>TokenApi</name><operator>.</operator><name>Token</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>JsonSyntaxException</name></type> <name>ignore</name></decl></parameter>)</parameter_list> <block>{}</block></catch></try>
        <if>if <condition>(<expr><name>token</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>token</name><operator>.</operator><name>isExpired</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>Timber</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><literal type="string">"TokenApi expired!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></then></if>
        <return>return <expr><name>token</name></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>storeToken</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>TokenApi</name><operator>.</operator><name>Token</name></name></type> <name>token</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>preferences</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>putString</name><argument_list>(<argument><expr><name>PREF_KEY</name></expr></argument>, <argument><expr><call><name><name>gson</name><operator>.</operator><name>toJson</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>apply</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/backend/reddit/wiki/WikiRepository.java" hash="0a1059246bc9c67d0e37d327da578df7b1ec151f"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>wiki</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>

<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>Observable</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppInfo</name></name>;</import>


<interface><specifier>public</specifier> interface <name>WikiRepository</name> <block>{
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>AppInfo</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getAppList</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>refresh</name><parameter_list>()</parameter_list>;</function_decl>
}</block></interface>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/backend/reddit/wiki/WikiApi.java" hash="958b472f509258abb2e24c0b2c539980d2ecc343"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>wiki</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>

<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>Observable</name></name>;</import>
<import>import <name><name>retrofit2</name><operator>.</operator><name>http</name><operator>.</operator><name>GET</name></name>;</import>
<import>import <name><name>retrofit2</name><operator>.</operator><name>http</name><operator>.</operator><name>Header</name></name>;</import>
<import>import <name><name>retrofit2</name><operator>.</operator><name>http</name><operator>.</operator><name>Query</name></name>;</import>

<interface>interface <name>WikiApi</name> <block>{
    <decl_stmt><decl><type><name>String</name></type> <name>BASEURL</name> <init>= <expr><literal type="string">"https://oauth.reddit.com/"</literal></expr></init></decl>;</decl_stmt>

    <function_decl><annotation>@<name>GET</name><argument_list>(<argument><expr><literal type="string">"r/Android/wiki/page"</literal></expr></argument>)</argument_list></annotation>
    <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>Response</name><operator>.</operator><name>Page</name></name></argument>&gt;</argument_list></name></type> <name>getWikiPage</name><parameter_list>(<parameter><decl><type><annotation>@<name>Header</name><argument_list>(<argument><expr><literal type="string">"Authorization"</literal></expr></argument>)</argument_list></annotation> <name>String</name></type> <name>authentication</name></decl></parameter>,
                                          <parameter><decl><type><annotation>@<name>Query</name><argument_list>(<argument><expr><literal type="string">"page"</literal></expr></argument>)</argument_list></annotation> <name>String</name></type> <name>page</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><annotation>@<name>GET</name><argument_list>(<argument><expr><literal type="string">"r/Android/wiki/revisions/page&amp;limit"</literal></expr></argument>)</argument_list></annotation>
    <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>Response</name><operator>.</operator><name>Revisions</name></name></argument>&gt;</argument_list></name></type> <name>getWikiRevisions</name><parameter_list>(<parameter><decl><type><annotation>@<name>Header</name><argument_list>(<argument><expr><literal type="string">"Authorization"</literal></expr></argument>)</argument_list></annotation> <name>String</name></type> <name>authentication</name></decl></parameter>,
                                                    <parameter><decl><type><annotation>@<name>Query</name><argument_list>(<argument><expr><literal type="string">"page"</literal></expr></argument>)</argument_list></annotation> <name>String</name></type> <name>page</name></decl></parameter>,
                                                    <parameter><decl><type><annotation>@<name>Query</name><argument_list>(<argument><expr><literal type="string">"limit"</literal></expr></argument>)</argument_list></annotation> <name>String</name></type> <name>lim</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><annotation>@<name>GET</name><argument_list>(<argument><expr><literal type="string">"r/Android/wiki/page&amp;v"</literal></expr></argument>)</argument_list></annotation>
    <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>Response</name><operator>.</operator><name>Page</name></name></argument>&gt;</argument_list></name></type> <name>getWikiRevision</name><parameter_list>(<parameter><decl><type><annotation>@<name>Header</name><argument_list>(<argument><expr><literal type="string">"Authorization"</literal></expr></argument>)</argument_list></annotation> <name>String</name></type> <name>authentication</name></decl></parameter>,
                                              <parameter><decl><type><annotation>@<name>Query</name><argument_list>(<argument><expr><literal type="string">"page"</literal></expr></argument>)</argument_list></annotation> <name>String</name></type> <name>page</name></decl></parameter>,
                                              <parameter><decl><type><annotation>@<name>Query</name><argument_list>(<argument><expr><literal type="string">"v"</literal></expr></argument>)</argument_list></annotation> <name>String</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><annotation>@<name>GET</name><argument_list>(<argument><expr><literal type="string">"r/Android/wiki/page&amp;v&amp;v2"</literal></expr></argument>)</argument_list></annotation>
    <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>Response</name><operator>.</operator><name>Page</name></name></argument>&gt;</argument_list></name></type> <name>getWikiRevisionDiff</name><parameter_list>(<parameter><decl><type><annotation>@<name>Header</name><argument_list>(<argument><expr><literal type="string">"Authorization"</literal></expr></argument>)</argument_list></annotation> <name>String</name></type> <name>authentication</name></decl></parameter>,
                                                  <parameter><decl><type><annotation>@<name>Query</name><argument_list>(<argument><expr><literal type="string">"page"</literal></expr></argument>)</argument_list></annotation> <name>String</name></type> <name>page</name></decl></parameter>,
                                                  <parameter><decl><type><annotation>@<name>Query</name><argument_list>(<argument><expr><literal type="string">"v"</literal></expr></argument>)</argument_list></annotation> <name>String</name></type> <name>id1</name></decl></parameter>,
                                                  <parameter><decl><type><annotation>@<name>Query</name><argument_list>(<argument><expr><literal type="string">"v2"</literal></expr></argument>)</argument_list></annotation> <name>String</name></type> <name>id2</name></decl></parameter>)</parameter_list>;</function_decl>

    <class>class <name>Response</name> <block>{
        <class><specifier>static</specifier> class <name>Page</name> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>kind</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Data</name></type> <name>data</name></decl>;</decl_stmt>

            <class><specifier>static</specifier> class <name>Data</name> <block>{
                <decl_stmt><decl><type><name>long</name></type> <name>revision_date</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>content_md</name></decl>;</decl_stmt>
            }</block></class>
        }</block></class>

        <class><specifier>static</specifier> class <name>Revisions</name> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>kind</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Revisions</name><operator>.</operator><name>Data</name></name></type> <name>data</name></decl>;</decl_stmt>

            <class><specifier>static</specifier> class <name>Data</name> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>modhash</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>Revisions</name><operator>.</operator><name>Children</name></name></argument>&gt;</argument_list></name></type> <name>children</name></decl>;</decl_stmt>
            }</block></class>

            <class><specifier>static</specifier> class <name>Children</name> <block>{
                <decl_stmt><decl><type><name>long</name></type> <name>timestamp</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>reason</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Author</name></type> <name>author</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>page</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>id</name></decl>;</decl_stmt>
            }</block></class>

            <class><specifier>static</specifier> class <name>Author</name> <block>{

            }</block></class>
        }</block></class>
    }</block></class>
}</block></interface>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/backend/reddit/wiki/parser/AppParser.java" hash="383441a940f1db35d8f700e2c1f8b334c058f921"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>wiki</name><operator>.</operator><name>parser</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppInfo</name></name>;</import>


<interface><specifier>public</specifier> interface <name>AppParser</name> <block>{
    <enum>enum <name>Column</name> <block>{
        <decl><name>NAME</name></decl>, <decl><name>PRICE</name></decl>, <decl><name>DEVICE</name></decl>, <decl><name>DESCRIPTION</name></decl>, <decl><name>CONTACT</name></decl>
    }</block></enum>

    <function_decl><type><name>void</name></type> <name>parse</name><parameter_list>(<parameter><decl><type><name>AppInfo</name></type> <name>appInfo</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Column</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>rawColumns</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></interface>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/backend/reddit/wiki/parser/BaseParser.java" hash="b7aa2ab650715ea43c345a7559914f5bb0337b2c"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>wiki</name><operator>.</operator><name>parser</name></name>;</package>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>BaseParser</name> <super><implements>implements <name>AppParser</name></implements></super> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>EncodingFixer</name></type> <name>encodingFixer</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>BaseParser</name><parameter_list>(<parameter><decl><type><name>EncodingFixer</name></type> <name>encodingFixer</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>encodingFixer</name></name> <operator>=</operator> <name>encodingFixer</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><name>String</name></type> <name>fixEncoding</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>input</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>encodingFixer</name><operator>.</operator><name>fixHtmlEscapes</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>String</name></type> <name>fixMarkdown</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>input</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>encodingFixer</name><operator>.</operator><name>convertMarkdownToHtml</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>String</name></type> <name>convertSubredditsToLinks</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>input</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>encodingFixer</name><operator>.</operator><name>convertSubredditsToLinks</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/backend/reddit/wiki/parser/CategoryParser.java" hash="a804571d087c50f21fa94c39832bbb41029ef6af"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>wiki</name><operator>.</operator><name>parser</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppInfo</name></name>;</import>


<class><specifier>public</specifier> class <name>CategoryParser</name> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>EncodingFixer</name></type> <name>encodingFixer</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>CategoryParser</name><parameter_list>(<parameter><decl><type><name>EncodingFixer</name></type> <name>encodingFixer</name></decl></parameter>)</parameter_list> <block>{

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>encodingFixer</name></name> <operator>=</operator> <name>encodingFixer</name></expr>;</expr_stmt>
    }</block></constructor>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>parse</name><parameter_list>(<parameter><decl><type><name>AppInfo</name></type> <name>appInfo</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>rawCategories</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>processedCategories</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>unprocessed</name> <range>: <expr><name>rawCategories</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><call><name><name>processedCategories</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>encodingFixer</name><operator>.</operator><name>fixHtmlEscapes</name></name><argument_list>(<argument><expr><name>unprocessed</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
        <expr_stmt><expr><call><name><name>appInfo</name><operator>.</operator><name>setCategories</name></name><argument_list>(<argument><expr><name>processedCategories</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/backend/reddit/wiki/LiveWikiRepository.java" hash="e0afbfd04c283b87986767b2413bdb42131f4121"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>wiki</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>

<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>Observable</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>schedulers</name><operator>.</operator><name>Schedulers</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>subjects</name><operator>.</operator><name>ReplaySubject</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppInfo</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppTags</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>TokenRepository</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>wiki</name><operator>.</operator><name>caching</name><operator>.</operator><name>WikiDiskCache</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>wiki</name><operator>.</operator><name>parser</name><operator>.</operator><name>BodyParser</name></name>;</import>
<import>import <name><name>timber</name><operator>.</operator><name>log</name><operator>.</operator><name>Timber</name></name>;</import>


<class><specifier>public</specifier> class <name>LiveWikiRepository</name> <super><implements>implements <name>WikiRepository</name></implements></super> <block>{
    <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>NUMOFREVISIONS</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>WikiDiskCache</name></type> <name>wikiDiskCache</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>TokenRepository</name></type> <name>tokenRepository</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>WikiApi</name></type> <name>wikiApi</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>BodyParser</name></type> <name>bodyParser</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>ReplaySubject</name><argument_list type="generic">&lt;<argument><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>AppInfo</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>dataReplayer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>authString</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>LiveWikiRepository</name><parameter_list>(<parameter><decl><type><name>TokenRepository</name></type> <name>tokenRepository</name></decl></parameter>,
                              <parameter><decl><type><name>WikiDiskCache</name></type> <name>wikiDiskCache</name></decl></parameter>,
                              <parameter><decl><type><name>BodyParser</name></type> <name>bodyParser</name></decl></parameter>,
                              <parameter><decl><type><name>WikiApi</name></type> <name>wikiApi</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tokenRepository</name></name> <operator>=</operator> <name>tokenRepository</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>wikiDiskCache</name></name> <operator>=</operator> <name>wikiDiskCache</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bodyParser</name></name> <operator>=</operator> <name>bodyParser</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>wikiApi</name></name> <operator>=</operator> <name>wikiApi</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <specifier>synchronized</specifier> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>AppInfo</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getAppList</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>dataReplayer</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>dataReplayer</name> <operator>=</operator> <call><name><name>ReplaySubject</name><operator>.</operator><name>createWithSize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>wikiDiskCache</name><operator>.</operator><name>getAll</name></name><argument_list>()</argument_list></call>
                    <operator>.</operator><call><name>switchIfEmpty</name><argument_list>(<argument><expr><call><name>loadData</name><argument_list>()</argument_list></call><operator>.</operator><call><name>doOnNext</name><argument_list>(<argument><expr><name>wikiDiskCache</name><operator>::</operator><name>putAll</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>appInfos</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>dataReplayer</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><name>appInfos</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>dataReplayer</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>refresh</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>loadData</name><argument_list>()</argument_list></call><operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>appInfos</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>dataReplayer</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><name>appInfos</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>AppInfo</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>loadData</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>tokenRepository</name><operator>.</operator><name>getUserlessAuthToken</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>subscribeOn</name><argument_list>(<argument><expr><call><name><name>Schedulers</name><operator>.</operator><name>io</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>flatMap</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>token</name></decl></parameter></parameter_list> -&gt; <block>{
                    <expr_stmt><expr><call><name>saveAuthString</name><argument_list>(<argument><expr><call><name><name>token</name><operator>.</operator><name>getAuthorizationString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><call><name><name>wikiApi</name><operator>.</operator><name>getWikiPage</name></name><argument_list>(<argument><expr><call><name><name>token</name><operator>.</operator><name>getAuthorizationString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"apps"</literal></expr></argument>)</argument_list></call></expr>;</return>
                }</block></lambda></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>flatMap</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>response</name></decl></parameter></parameter_list> -&gt; <block>{
                    <expr_stmt><expr><call><name><name>Timber</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><call><name><name>response</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>long</name></type> <name>timeStart</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>AppInfo</name></argument>&gt;</argument_list></name></type> <name>infos</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>infos</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>bodyParser</name><operator>.</operator><name>parseBody</name></name><argument_list>(<argument><expr><name><name>response</name><operator>.</operator><name>data</name><operator>.</operator><name>content_md</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>long</name></type> <name>timeStop</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>Timber</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><literal type="string">"Initial parse: Parsed %d items in %dms"</literal></expr></argument>, <argument><expr><call><name><name>infos</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>timeStop</name> <operator>-</operator> <name>timeStart</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="line">// get list of revision IDs</comment>
                    <return>return <expr><call><name><name>wikiApi</name><operator>.</operator><name>getWikiRevisions</name></name><argument_list>(<argument><expr><name>authString</name></expr></argument>, <argument><expr><literal type="string">"apps"</literal></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>NUMOFREVISIONS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>flatMap</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>idsResponse</name></decl></parameter></parameter_list> -&gt; <block>{
                                <decl_stmt><decl><type><name>String</name></type> <name>revisionId</name> <init>= <expr><call><name><name>idsResponse</name><operator>.</operator><name>data</name><operator>.</operator><name>children</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>NUMOFREVISIONS</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>id</name></expr></init></decl>;</decl_stmt>
                                <return>return <expr><call><name><name>wikiApi</name><operator>.</operator><name>getWikiRevision</name></name><argument_list>(<argument><expr><name>authString</name></expr></argument>, <argument><expr><literal type="string">"apps"</literal></expr></argument>, <argument><expr><name>revisionId</name></expr></argument>)</argument_list></call>
                                        <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>revisionResponse</name></decl></parameter></parameter_list> -&gt; <block>{
                                            <decl_stmt><decl><type><name>long</name></type> <name>newAppsTaggerTimeStart</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                                            <for>for <control>(<init><decl><type><name>AppInfo</name></type> <name>r</name> <range>: <expr><name>infos</name></expr></range></decl></init>)</control> <block>{
                                                <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>r</name><operator>.</operator><name>getAppName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                                                <if>if <condition>(<expr><call><name><name>name</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"&amp;"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                                    <decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><call><name><name>name</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="string">"&amp;"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                                                    <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"amp;"</literal> <operator>+</operator> <call><name><name>name</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><call><name><name>name</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                                }</block></then></if>
                                                <if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>revisionResponse</name><operator>.</operator><name>data</name><operator>.</operator><name>content_md</name></name><operator>)</operator><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                                    <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>addTag</name></name><argument_list>(<argument><expr><name><name>AppTags</name><operator>.</operator><name>NEW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                                }</block></then></if>
                                            }</block></for>
                                            <decl_stmt><decl><type><name>long</name></type> <name>newAppsTaggerTimeStop</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                                            <expr_stmt><expr><call><name><name>Timber</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><literal type="string">"Tagged all NEW items in %dms"</literal></expr></argument>, <argument><expr><operator>(</operator><name>newAppsTaggerTimeStop</name> <operator>-</operator> <name>newAppsTaggerTimeStart</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                            <return>return <expr><name>infos</name></expr>;</return>
                                        }</block></lambda></expr></argument>)</argument_list></call>
                                        <operator>.</operator><call><name>onErrorReturn</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>throwable</name></decl></parameter></parameter_list> -&gt; <block>{
                                            <expr_stmt><expr><call><name><name>Timber</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name>throwable</name></expr></argument>, <argument><expr><literal type="string">"Error while fetching wiki revision: "</literal> <operator>+</operator> <name>revisionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                            <return>return <expr><name>infos</name></expr>;</return>
                                        }</block></lambda></expr></argument>)</argument_list></call></expr>;</return>
                            }</block></lambda></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>onErrorReturn</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>throwable</name></decl></parameter></parameter_list> -&gt; <block>{
                                <expr_stmt><expr><call><name><name>Timber</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name>throwable</name></expr></argument>, <argument><expr><literal type="string">"Error while checking for new apps"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <return>return <expr><name>infos</name></expr>;</return>
                            }</block></lambda></expr></argument>)</argument_list></call></expr>;</return>
                }</block></lambda></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>onErrorReturn</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>throwable</name></decl></parameter></parameter_list> -&gt; <block>{
                    <expr_stmt><expr><call><name><name>Timber</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name>throwable</name></expr></argument>, <argument><expr><literal type="string">"Error while fetching wiki repository"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
                }</block></lambda></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>String</name></type> <name>saveAuthString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>authString</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>authString</name></name> <operator>=</operator> <name>authString</name></expr>;</expr_stmt>
        <return>return <expr><name>authString</name></expr>;</return>
    }</block></function>


}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/screens/details/AppDetailsFragment.java" hash="0d9ef0ee5c953700449ccc45672791a9cfde4a84"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>screens</name><operator>.</operator><name>details</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Dialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>customtabs</name><operator>.</operator><name>CustomTabsIntent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>design</name><operator>.</operator><name>widget</name><operator>.</operator><name>AppBarLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>design</name><operator>.</operator><name>widget</name><operator>.</operator><name>CollapsingToolbarLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>design</name><operator>.</operator><name>widget</name><operator>.</operator><name>FloatingActionButton</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>content</name><operator>.</operator><name>ContextCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>AlertDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toolbar</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Html</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>method</name><operator>.</operator><name>LinkMovementMethod</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>EditText</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>wefika</name><operator>.</operator><name>flowlayout</name><operator>.</operator><name>FlowLayout</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Inject</name></name>;</import>

<import>import <name><name>butterknife</name><operator>.</operator><name>BindView</name></name>;</import>
<import>import <name><name>butterknife</name><operator>.</operator><name>ButterKnife</name></name>;</import>
<import>import <name><name>butterknife</name><operator>.</operator><name>OnClick</name></name>;</import>
<import>import <name><name>butterknife</name><operator>.</operator><name>Unbinder</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>AppStoreApp</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppInfo</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppTags</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>Contact</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>Download</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>scrapers</name><operator>.</operator><name>ScrapeResult</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>mvp</name><operator>.</operator><name>BasePresenterFragment</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>mvp</name><operator>.</operator><name>PresenterFactory</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>ui</name><operator>.</operator><name>glide</name><operator>.</operator><name>GlideApp</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>ui</name><operator>.</operator><name>glide</name><operator>.</operator><name>IconRequest</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>util</name><operator>.</operator><name>ui</name><operator>.</operator><name>glide</name><operator>.</operator><name>PlaceHolderRequestListener</name></name>;</import>
<import>import <name><name>timber</name><operator>.</operator><name>log</name><operator>.</operator><name>Timber</name></name>;</import>


<class><specifier>public</specifier> class <name>AppDetailsFragment</name> <super><extends>extends <name><name>BasePresenterFragment</name><argument_list type="generic">&lt;<argument><name><name>AppDetailsContract</name><operator>.</operator><name>Presenter</name></name></argument>, <argument><name><name>AppDetailsContract</name><operator>.</operator><name>View</name></name></argument>&gt;</argument_list></name></extends>
        <implements>implements <name><name>AppDetailsContract</name><operator>.</operator><name>View</name></name>, <name><name>ScreenshotsAdapter</name><operator>.</operator><name>ScreenshotClickedListener</name></name>, <name><name>View</name><operator>.</operator><name>OnClickListener</name></name>, <name><name>Toolbar</name><operator>.</operator><name>OnMenuItemClickListener</name></name></implements></super> <block>{
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>download_fab</name></name></expr></argument>)</argument_list></annotation> <type><name>FloatingActionButton</name></type> <name>downloadButton</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>details_toolbar</name></name></expr></argument>)</argument_list></annotation> <type><name>Toolbar</name></type> <name>toolbar</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>collapsingToolbar</name></name></expr></argument>)</argument_list></annotation> <type><name>CollapsingToolbarLayout</name></type> <name>collapsingToolbar</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>appbar</name></name></expr></argument>)</argument_list></annotation> <type><name>AppBarLayout</name></type> <name>appBar</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>icon_frame</name></name></expr></argument>)</argument_list></annotation> <type><name>View</name></type> <name>iconFrame</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>icon_image</name></name></expr></argument>)</argument_list></annotation> <type><name>ImageView</name></type> <name>iconImage</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>icon_placeholder</name></name></expr></argument>)</argument_list></annotation> <type><name>View</name></type> <name>iconPlaceholder</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>title_secondary</name></name></expr></argument>)</argument_list></annotation> <type><name>TextView</name></type> <name>secondaryTitle</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tag_container</name></name></expr></argument>)</argument_list></annotation> <type><name>FlowLayout</name></type> <name>tagContainer</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>screenshot_pager</name></name></expr></argument>)</argument_list></annotation> <type><name>ScreenshotViewPager</name></type> <name>screenshotPager</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>description</name></name></expr></argument>)</argument_list></annotation> <type><name>TextView</name></type> <name>description</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>REDDIT_MSG_URL_HEADER</name> <init>= <expr><literal type="string">"https://www.reddit.com/message/compose/?to=/r/Android&amp;subject=**RAS Flag Report**&amp;message="</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>contactItems</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>downloadItems</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>screenshotUrls</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>ScreenshotsAdapter</name></type> <name>screenshotsAdapter</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Download</name></argument>&gt;</argument_list></name></type> <name>downloads</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Contact</name></argument>&gt;</argument_list></name></type> <name>contacts</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Inject</name></annotation>
    <type><name><name>PresenterFactory</name><argument_list type="generic">&lt;<argument><name><name>AppDetailsContract</name><operator>.</operator><name>Presenter</name></name></argument>&gt;</argument_list></name></type> <name>presenterFactory</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Unbinder</name></type> <name>unbinder</name></decl>;</decl_stmt>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>AppDetailsFragment</name></type> <name>newInstance</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>AppDetailsFragment</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>DaggerAppDetailsComponent</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>appComponent</name><argument_list>(<argument><expr><call><name><name>AppStoreApp</name><operator>.</operator><name>Injector</name><operator>.</operator><name>INSTANCE</name><operator>.</operator><name>getAppComponent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>appDetailsModule</name><argument_list>(<argument><expr><operator>new</operator> <call><name>AppDetailsModule</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call><operator>.</operator><call><name>inject</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onMenuItemClick</name><parameter_list>(<parameter><decl><type><name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
        <switch>switch <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_contact</name></name></expr>:</case> <block>{
                <expr_stmt><expr><call><name>onContactClicked</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            }</block>
            <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_flag</name></name></expr>:</case> <block>{
                <decl_stmt><decl><type><name>EditText</name></type> <name>flagMessage</name> <init>= <expr><operator>(</operator><operator>(</operator><name>EditText</name><operator>)</operator> <call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLayoutInflater</name><argument_list>()</argument_list></call><operator>.</operator><call><name>inflate</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>dialog_flag</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Dialog</name></type> <name>d</name> <init>= <expr><operator>new</operator> <call><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>setTitle</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>flag</name></name></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>setMessage</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>flag_text</name></name></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>setNegativeButton</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>cancel</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>setPositiveButton</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ok</name></name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
                            <function><annotation>@<name>Override</name></annotation>
                            <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>DialogInterface</name></type> <name>dialogInterface</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{
                                <if>if <condition>(<expr><call><name><name>flagMessage</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                                    <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>no_message</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                }</block></then> <else>else <block>{
                                    <expr_stmt><expr><call><name>openInChrome</name><argument_list>(<argument><expr><name>REDDIT_MSG_URL_HEADER</name> <operator>+</operator> <literal type="string">"*****"</literal> <operator>+</operator> <call><name><name>collapsingToolbar</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" REPORT"</literal> <operator>+</operator> <literal type="string">"*****"</literal> <operator>+</operator> <literal type="string">"%0A"</literal> <operator>+</operator> <operator>(</operator><call><name><name>flagMessage</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                }</block></else></if>
                            }</block></function>
                        }</block></class></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>setView</name><argument_list>(<argument><expr><name>flagMessage</name></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            }</block>
        }</block></switch>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Nullable</name></annotation>
    <annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>View</name></type> <name>onCreateView</name><parameter_list>(<parameter><decl><type><name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>ViewGroup</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>View</name></type> <name>layout</name> <init>= <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>fragment_appdetails_layout</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>unbinder</name> <operator>=</operator> <call><name><name>ButterKnife</name><operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>toolbar</name><operator>.</operator><name>setContentInsetStartWithNavigation</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>appBar</name><operator>.</operator><name>addOnOffsetChangedListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>AppBarLayout</name><operator>.</operator><name>OnOffsetChangedListener</name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onOffsetChanged</name><parameter_list>(<parameter><decl><type><name>AppBarLayout</name></type> <name>appBarLayout</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>verticalOffset</name></decl></parameter>)</parameter_list> <block>{
                <decl_stmt><decl><type><name>float</name></type> <name>scrollRange</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name><name>appBarLayout</name><operator>.</operator><name>getTotalScrollRange</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>fadeHeaderItems</name><argument_list>(<argument><expr><name>scrollRange</name></expr></argument>, <argument><expr><name>verticalOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>layout</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onViewCreated</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onViewCreated</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>toolbar</name><operator>.</operator><name>setNavigationIcon</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ic_close_white_24dp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>toolbar</name><operator>.</operator><name>setNavigationOnClickListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>toolbar</name><operator>.</operator><name>inflateMenu</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>menu</name><operator>.</operator><name>appdetails_fragment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>toolbar</name><operator>.</operator><name>setOnMenuItemClickListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>screenshotsAdapter</name> <operator>=</operator> <operator>new</operator> <call><name>ScreenshotsAdapter</name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>screenshotPager</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>screenshotsAdapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>screenshotPager</name><operator>.</operator><name>setOffscreenPageLimit</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>screenshotsAdapter</name><operator>.</operator><name>setScreenshotClickedListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>NonNull</name></annotation>
    <annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name><name>PresenterFactory</name><argument_list type="generic">&lt;<argument><name><name>AppDetailsContract</name><operator>.</operator><name>Presenter</name></name></argument>&gt;</argument_list></name></type> <name>getPresenterFactory</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>presenterFactory</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDestroyView</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>unbinder</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>unbinder</name><operator>.</operator><name>unbind</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDestroyView</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>OnClick</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>download_fab</name></name></expr></argument>)</argument_list></annotation>
    <type><name>void</name></type> <name>onDownloadClicked</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>downloads</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>openDownload</name><argument_list>(<argument><expr><call><name><name>downloads</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><operator>new</operator> <call><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>setItems</name><argument_list>(
                            <argument><expr><call><name><name>downloadItems</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>CharSequence</name><index>[<expr><call><name><name>downloadItems</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><lambda><parameter_list>(<parameter><decl><name>dialogInterface</name></decl></parameter>, <parameter><decl><name>i</name></decl></parameter>)</parameter_list> -&gt; <block type="pseudo"><expr><call><name>openDownload</name><argument_list>(<argument><expr><call><name><name>downloads</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><type><name>void</name></type> <name>onContactClicked</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>contacts</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>openContact</name><argument_list>(<argument><expr><call><name><name>contacts</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><operator>new</operator> <call><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>setItems</name><argument_list>(
                            <argument><expr><call><name><name>contactItems</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>CharSequence</name><index>[<expr><call><name><name>contactItems</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><lambda><parameter_list>(<parameter><decl><name>dialogInterface</name></decl></parameter>, <parameter><decl><name>i</name></decl></parameter>)</parameter_list> -&gt; <block type="pseudo"><expr><call><name>openContact</name><argument_list>(<argument><expr><call><name><name>contacts</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><type><name>void</name></type> <name>openDownload</name><parameter_list>(<parameter><decl><type><name>Download</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_VIEW</name></name></expr></argument>, <argument><expr><call><name><name>d</name><operator>.</operator><name>getDownloadUri</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Timber</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="string">"Problem launching intent for a Download link"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>displayToast</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>no_download_client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <function><type><name>void</name></type> <name>openContact</name><parameter_list>(<parameter><decl><type><name>Contact</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{
        <switch>switch <condition>(<expr><call><name><name>c</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <case>case <expr><name>EMAIL</name></expr>:</case>
                <try>try <block>{
                    <expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_SENDTO</name></name></expr></argument>, <argument><expr><call><name><name>Uri</name><operator>.</operator><name>fromParts</name></name><argument_list>(<argument><expr><literal type="string">"mailto"</literal></expr></argument>, <argument><expr><call><name><name>c</name><operator>.</operator><name>getTarget</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>Timber</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="string">"Problem launching intent for Email contact"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>displayToast</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>no_email_client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>

                <break>break;</break>
            <case>case <expr><name>WEBSITE</name></expr>:</case>
                <comment type="line">// TODO do reddit apps recognize a specific message intent?</comment>
                <expr_stmt><expr><call><name>openInChrome</name><argument_list>(<argument><expr><call><name><name>c</name><operator>.</operator><name>getTarget</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>REDDIT_USERNAME</name></expr>:</case>
                <expr_stmt><expr><call><name>openInChrome</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>US</name></name></expr></argument>, <argument><expr><literal type="string">"http://www.reddit.com/message/compose/?to=%s"</literal></expr></argument>, <argument><expr><call><name><name>c</name><operator>.</operator><name>getTarget</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><call><name>openInChrome</name><argument_list>(<argument><expr><call><name><name>c</name><operator>.</operator><name>getTarget</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></switch>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>displayDetails</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>AppInfo</name></type> <name>appInfo</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>appInfo</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>collapsingToolbar</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><call><name><name>appInfo</name><operator>.</operator><name>getAppName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>secondaryTitle</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>appInfo</name><operator>.</operator><name>getSecondaryCategory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>downloads</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>appInfo</name><operator>.</operator><name>getDownloads</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>contacts</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>appInfo</name><operator>.</operator><name>getContacts</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>N</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>description</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>Html</name><operator>.</operator><name>fromHtml</name></name><argument_list>(<argument><expr><call><name><name>appInfo</name><operator>.</operator><name>getDescription</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Html</name><operator>.</operator><name>FROM_HTML_MODE_COMPACT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>description</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>Html</name><operator>.</operator><name>fromHtml</name></name><argument_list>(<argument><expr><call><name><name>appInfo</name><operator>.</operator><name>getDescription</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name><name>description</name><operator>.</operator><name>setMovementMethod</name></name><argument_list>(<argument><expr><call><name><name>LinkMovementMethod</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>tagContainer</name><operator>.</operator><name>removeAllViews</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>AppTags</name></type> <name>appTags</name> <range>: <expr><call><name><name>appInfo</name><operator>.</operator><name>getTags</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
            <decl_stmt><decl><type><name>TextView</name></type> <name>tv</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>LayoutInflater</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>inflate</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>view_tagtemplate</name></name></expr></argument>, <argument><expr><name>tagContainer</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>tv</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>appTags</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>FlowLayout</name><operator>.</operator><name>LayoutParams</name></name></type> <name>params</name> <init>= <expr><operator>new</operator> <call><name><name>FlowLayout</name><operator>.</operator><name>LayoutParams</name></name><argument_list>(<argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>, <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>setMargins</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>tv</name><operator>.</operator><name>setLayoutParams</name></name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>tagContainer</name><operator>.</operator><name>addView</name></name><argument_list>(<argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name><name>tagContainer</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>appInfo</name><operator>.</operator><name>getTags</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>createMenus</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>createMenus</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>downloadItems</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>contactItems</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>Download</name></type> <name>d</name> <range>: <expr><name>downloads</name></expr></range></decl></init>)</control> <block>{
            <switch>switch <condition>(<expr><call><name><name>d</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <case>case <expr><name>GPLAY</name></expr>:</case>
                    <expr_stmt><expr><call><name><name>downloadItems</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>gplay</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name>FDROID</name></expr>:</case>
                    <expr_stmt><expr><call><name><name>downloadItems</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>fdroid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name>WEBSITE</name></expr>:</case>
                    <expr_stmt><expr><call><name><name>downloadItems</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>website</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">": "</literal> <operator>+</operator> <call><name><name>d</name><operator>.</operator><name>getTarget</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
            }</block></switch>
        }</block></for>
        <for>for <control>(<init><decl><type><name>Contact</name></type> <name>c</name> <range>: <expr><name>contacts</name></expr></range></decl></init>)</control> <block>{
            <switch>switch <condition>(<expr><call><name><name>c</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <case>case <expr><name>EMAIL</name></expr>:</case>
                    <expr_stmt><expr><call><name><name>contactItems</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>mail</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">": "</literal> <operator>+</operator> <call><name><name>c</name><operator>.</operator><name>getTarget</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name>WEBSITE</name></expr>:</case>
                    <expr_stmt><expr><call><name><name>contactItems</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>website</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">": "</literal> <operator>+</operator> <call><name><name>c</name><operator>.</operator><name>getTarget</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name>REDDIT_USERNAME</name></expr>:</case>
                    <expr_stmt><expr><call><name><name>contactItems</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>reddit</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">": "</literal> <operator>+</operator> <call><name><name>c</name><operator>.</operator><name>getTarget</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
            }</block></switch>
        }</block></for>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>openInChrome</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>url</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>CustomTabsIntent</name><operator>.</operator><name>Builder</name></name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name><name>CustomTabsIntent</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setToolbarColor</name></name><argument_list>(<argument><expr><call><name><name>ContextCompat</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>colorPrimary</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setSecondaryToolbarColor</name></name><argument_list>(<argument><expr><call><name><name>ContextCompat</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>colorPrimary</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CustomTabsIntent</name></type> <name>customTabsIntent</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>customTabsIntent</name><operator>.</operator><name>launchUrl</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>displayToast</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>displayScreenshots</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>ScrapeResult</name></type> <name>scrapeResult</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>scrapeResult</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>screenshotUrls</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>scrapeResult</name><operator>.</operator><name>getScreenshotUrls</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>screenshotPager</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>screenshotsAdapter</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>screenshotUrls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block type="pseudo"><expr_stmt><expr><call><name><name>screenshotPager</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>displayIcon</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>AppInfo</name></type> <name>appInfo</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>appInfo</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>iconFrame</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>GlideApp</name><operator>.</operator><name>with</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>load</name><argument_list>(<argument><expr><operator>new</operator> <call><name>IconRequest</name><argument_list>(<argument><expr><name>appInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>listener</name><argument_list>(<argument><expr><operator>new</operator> <call><name>PlaceHolderRequestListener</name><argument_list>(<argument><expr><name>iconImage</name></expr></argument>, <argument><expr><name>iconPlaceholder</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>into</name><argument_list>(<argument><expr><name>iconImage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block type="pseudo"><expr_stmt><expr><call><name><name>iconFrame</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onScreenshotClicked</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>url</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>ScreenshotDialog</name></type> <name>dialog</name> <init>= <expr><operator>new</operator> <call><name>ScreenshotDialog</name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>screenshotUrls</name></expr></argument>, <argument><expr><call><name><name>screenshotUrls</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>getWindow</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAttributes</name><argument_list>()</argument_list></call><operator>.</operator><name>windowAnimations</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>style</name><operator>.</operator><name>ScreenshotDialogTheme</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>fadeHeaderItems</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>scrollRange</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>verticalOffset</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>float</name></type> <name>fadeFactor</name> <init>= <expr><literal type="number">1.0f</literal> <operator>-</operator> <call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>verticalOffset</name> <operator>/</operator> <name>scrollRange</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>secondaryTitle</name><operator>.</operator><name>setAlpha</name></name><argument_list>(<argument><expr><name>fadeFactor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tagContainer</name><operator>.</operator><name>setAlpha</name></name><argument_list>(<argument><expr><name>fadeFactor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>iconFrame</name><operator>.</operator><name>setAlpha</name></name><argument_list>(<argument><expr><name>fadeFactor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/backend/reddit/wiki/parser/DescriptionColumnParser.java" hash="9009135491a1aa303554875bda4d74fa5c34e297"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>wiki</name><operator>.</operator><name>parser</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppInfo</name></name>;</import>

<class><specifier>public</specifier> class <name>DescriptionColumnParser</name> <super><extends>extends <name>BaseParser</name></extends></super> <block>{

    <constructor><specifier>public</specifier> <name>DescriptionColumnParser</name><parameter_list>(<parameter><decl><type><name>EncodingFixer</name></type> <name>encodingFixer</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>encodingFixer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>parse</name><parameter_list>(<parameter><decl><type><name>AppInfo</name></type> <name>appInfo</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Column</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>rawColumns</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>rawDescriptionString</name> <init>= <expr><call><name><name>rawColumns</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Column</name><operator>.</operator><name>DESCRIPTION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>fixedDescription</name> <init>= <expr><call><name>fixEncoding</name><argument_list>(<argument><expr><name>rawDescriptionString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>fixedDescription</name> <operator>=</operator> <call><name>fixMarkdown</name><argument_list>(<argument><expr><name>fixedDescription</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>fixedDescription</name> <operator>=</operator> <call><name>convertSubredditsToLinks</name><argument_list>(<argument><expr><name>fixedDescription</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>appInfo</name><operator>.</operator><name>setDescription</name></name><argument_list>(<argument><expr><name>fixedDescription</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/backend/reddit/wiki/parser/DeviceColumnParser.java" hash="f49560d61dc7f22c74715927df1ba948f484d19c"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>wiki</name><operator>.</operator><name>parser</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppInfo</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppTags</name></name>;</import>


<class><specifier>public</specifier> class <name>DeviceColumnParser</name> <super><extends>extends <name>BaseParser</name></extends></super> <block>{

    <constructor><specifier>public</specifier> <name>DeviceColumnParser</name><parameter_list>(<parameter><decl><type><name>EncodingFixer</name></type> <name>encodingFixer</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>encodingFixer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>parse</name><parameter_list>(<parameter><decl><type><name>AppInfo</name></type> <name>appInfo</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Column</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>rawColumns</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>rawDeviceString</name> <init>= <expr><call><name><name>rawColumns</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Column</name><operator>.</operator><name>DEVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>rawDeviceString</name><operator>.</operator><name>toLowerCase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><literal type="string">"watch"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>appInfo</name><operator>.</operator><name>getTags</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name><name>AppTags</name><operator>.</operator><name>WEAR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><call><name><name>rawDeviceString</name><operator>.</operator><name>toLowerCase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><literal type="string">"phone"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>appInfo</name><operator>.</operator><name>getTags</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name><name>AppTags</name><operator>.</operator><name>PHONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><call><name><name>rawDeviceString</name><operator>.</operator><name>toLowerCase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><literal type="string">"tablet"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>appInfo</name><operator>.</operator><name>getTags</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name><name>AppTags</name><operator>.</operator><name>TABLET</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/backend/reddit/wiki/parser/ContactColumnParser.java" hash="b8120d0e38a0d6872ac8fcb9d805883689bee211"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>wiki</name><operator>.</operator><name>parser</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Matcher</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Pattern</name></name>;</import>

<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppInfo</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>Contact</name></name>;</import>
<import>import <name><name>timber</name><operator>.</operator><name>log</name><operator>.</operator><name>Timber</name></name>;</import>


<class><specifier>public</specifier> class <name>ContactColumnParser</name> <super><extends>extends <name>BaseParser</name></extends></super> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <specifier>static</specifier> <name>Pattern</name></type> <name>EMAIL_PATTERN</name> <init>= <expr><call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><literal type="string">"(\\b[\\w._%+-]+@[\\w.-]+\\.[\\w]{2,}\\b)"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <specifier>static</specifier> <name>Pattern</name></type> <name>REDDIT_PATTERN</name> <init>= <expr><call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><literal type="string">"(/u/[\\-_\\w]+\\b)"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <specifier>static</specifier> <name>Pattern</name></type> <name>WEBSITE_MATCHER</name> <init>= <expr><call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><literal type="string">"(?:\\[.+\\])\\((http.?://.+)\\)"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ContactColumnParser</name><parameter_list>(<parameter><decl><type><name>EncodingFixer</name></type> <name>encodingFixer</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>encodingFixer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>parse</name><parameter_list>(<parameter><decl><type><name>AppInfo</name></type> <name>appInfo</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Column</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>rawColumns</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>raw</name> <init>= <expr><call><name><name>rawColumns</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Column</name><operator>.</operator><name>CONTACT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Matcher</name></type> <name>emailMatcher</name> <init>= <expr><call><name><name>EMAIL_PATTERN</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>emailMatcher</name><operator>.</operator><name>find</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>Contact</name></type> <name>contact</name> <init>= <expr><operator>new</operator> <call><name>Contact</name><argument_list>(<argument><expr><name><name>Contact</name><operator>.</operator><name>Type</name><operator>.</operator><name>EMAIL</name></name></expr></argument>, <argument><expr><call><name><name>emailMatcher</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>appInfo</name><operator>.</operator><name>addContact</name></name><argument_list>(<argument><expr><name>contact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <decl_stmt><decl><type><name>Matcher</name></type> <name>redditMatcher</name> <init>= <expr><call><name><name>REDDIT_PATTERN</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>redditMatcher</name><operator>.</operator><name>find</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>Contact</name></type> <name>contact</name> <init>= <expr><operator>new</operator> <call><name>Contact</name><argument_list>(<argument><expr><name><name>Contact</name><operator>.</operator><name>Type</name><operator>.</operator><name>REDDIT_USERNAME</name></name></expr></argument>, <argument><expr><call><name><name>redditMatcher</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>appInfo</name><operator>.</operator><name>addContact</name></name><argument_list>(<argument><expr><name>contact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <decl_stmt><decl><type><name>Matcher</name></type> <name>webSiteMatcher</name> <init>= <expr><call><name><name>WEBSITE_MATCHER</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>webSiteMatcher</name><operator>.</operator><name>find</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>Contact</name></type> <name>contact</name> <init>= <expr><operator>new</operator> <call><name>Contact</name><argument_list>(<argument><expr><name><name>Contact</name><operator>.</operator><name>Type</name><operator>.</operator><name>WEBSITE</name></name></expr></argument>, <argument><expr><call><name><name>webSiteMatcher</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>appInfo</name><operator>.</operator><name>addContact</name></name><argument_list>(<argument><expr><name>contact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <if>if <condition>(<expr><call><name><name>appInfo</name><operator>.</operator><name>getContacts</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>Timber</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><literal type="string">"No contacts parsed from %s"</literal></expr></argument>, <argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>appInfo</name><operator>.</operator><name>addContact</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Contact</name><argument_list>(<argument><expr><name><name>Contact</name><operator>.</operator><name>Type</name><operator>.</operator><name>UNKNOWN</name></name></expr></argument>, <argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/backend/reddit/wiki/parser/EncodingFixer.java" hash="ef1c5f5f0082e208cec1bfd151b5a874091efe23"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>wiki</name><operator>.</operator><name>parser</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Html</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Matcher</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Pattern</name></name>;</import>

<class><specifier>public</specifier> class <name>EncodingFixer</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Pattern</name></type> <name>URL_MARKDOWN_PATTERN</name> <init>= <expr><call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><literal type="string">"(\\[(.*?)\\]\\s{0,1}\\((http.*?)\\))"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Pattern</name></type> <name>BOLD_MARKDOWN_PATTERN</name> <init>= <expr><call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><literal type="string">"(\\*\\*(.*?)\\*\\*)"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Pattern</name></type> <name>SUBREDDIT_PATTERN</name> <init>= <expr><call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><literal type="string">"(\\/r\\/.*?(?!\\S))"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>fixHtmlEscapes</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>input</name></decl></parameter>)</parameter_list> <block>{
        <comment type="line">//noinspection deprecation</comment>
        <return>return <expr><call><name><name>Html</name><operator>.</operator><name>fromHtml</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>convertMarkdownToHtml</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>input</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>input</name> <operator>=</operator> <call><name>urlMarkdownToHtml</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>input</name> <operator>=</operator> <call><name>boldMarkdownToHtml</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>input</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>convertSubredditsToLinks</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>input</name></decl></parameter>)</parameter_list> <block>{
        <comment type="line">// Converts subreddit mentions to links in HTML</comment>
        <decl_stmt><decl><type><name>Matcher</name></type> <name>subredditMatcher</name> <init>= <expr><call><name><name>SUBREDDIT_PATTERN</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>subredditMatcher</name><operator>.</operator><name>find</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>matchedSubreddit</name> <init>= <expr><call><name><name>subredditMatcher</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>String</name></type> <name>fixedString</name> <init>= <expr><literal type="string">"&lt;a href=\"https://www.reddit.com"</literal> <operator>+</operator> <name>matchedSubreddit</name> <operator>+</operator>
                    <literal type="string">"\"&gt;"</literal> <operator>+</operator> <name>matchedSubreddit</name> <operator>+</operator> <literal type="string">"&lt;/a&gt;"</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>input</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>replaceAll</name></name><argument_list>(<argument><expr><name>matchedSubreddit</name> <operator>+</operator> <literal type="string">"(?!\\S)"</literal></expr></argument>, <argument><expr><name>fixedString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <return>return <expr><name>input</name></expr>;</return>
    }</block></function>

    <comment type="line">// Converts string with link markdown to HTML</comment>
    <function><specifier>private</specifier> <type><name>String</name></type> <name>urlMarkdownToHtml</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>string</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Matcher</name></type> <name>urlMarkdownMatcher</name> <init>= <expr><call><name><name>URL_MARKDOWN_PATTERN</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>urlMarkdownMatcher</name><operator>.</operator><name>find</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>matchedString</name> <init>= <expr><call><name><name>urlMarkdownMatcher</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>matchedUrl</name> <init>= <expr><call><name><name>urlMarkdownMatcher</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>String</name></type> <name>fixedString</name> <init>= <expr><literal type="string">"&lt;a href=\""</literal> <operator>+</operator> <name>matchedUrl</name> <operator>+</operator> <literal type="string">"\"&gt;"</literal> <operator>+</operator> <name>matchedString</name> <operator>+</operator> <literal type="string">"&lt;/a&gt;"</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>string</name> <operator>=</operator> <call><name><name>string</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><call><name><name>urlMarkdownMatcher</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fixedString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <return>return <expr><name>string</name></expr>;</return>
    }</block></function>

    <comment type="line">// Converts string with bold markdown to HTML</comment>
    <function><specifier>private</specifier> <type><name>String</name></type> <name>boldMarkdownToHtml</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>string</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Matcher</name></type> <name>boldMarkdownMatcher</name> <init>= <expr><call><name><name>BOLD_MARKDOWN_PATTERN</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>boldMarkdownMatcher</name><operator>.</operator><name>find</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>matchedString</name> <init>= <expr><call><name><name>boldMarkdownMatcher</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>String</name></type> <name>fixedString</name> <init>= <expr><literal type="string">"&lt;b&gt;"</literal> <operator>+</operator> <name>matchedString</name> <operator>+</operator> <literal type="string">"&lt;/b&gt;"</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>string</name> <operator>=</operator> <call><name><name>string</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><call><name><name>boldMarkdownMatcher</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fixedString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <return>return <expr><name>string</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/backend/reddit/wiki/parser/PriceColumnParser.java" hash="bb198764f6515d928d5e475593bb5267cac503c2"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>wiki</name><operator>.</operator><name>parser</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppInfo</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppTags</name></name>;</import>


<class><specifier>public</specifier> class <name>PriceColumnParser</name> <super><extends>extends <name>BaseParser</name></extends></super> <block>{

    <constructor><specifier>public</specifier> <name>PriceColumnParser</name><parameter_list>(<parameter><decl><type><name>EncodingFixer</name></type> <name>encodingFixer</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>encodingFixer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>parse</name><parameter_list>(<parameter><decl><type><name>AppInfo</name></type> <name>appInfo</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Column</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>rawColumns</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>rawPriceString</name> <init>= <expr><call><name><name>rawColumns</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Column</name><operator>.</operator><name>PRICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>rawPriceString</name><operator>.</operator><name>toLowerCase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><literal type="string">"free"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>appInfo</name><operator>.</operator><name>getTags</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name><name>AppTags</name><operator>.</operator><name>FREE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><call><name><name>rawPriceString</name><operator>.</operator><name>toLowerCase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><literal type="string">"paid"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>appInfo</name><operator>.</operator><name>getTags</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name><name>AppTags</name><operator>.</operator><name>PAID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/backend/reddit/wiki/parser/NameColumnParser.java" hash="64ca4829fe4a5bc1e9a0fec1b3345bd323c6fac3"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>wiki</name><operator>.</operator><name>parser</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Matcher</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Pattern</name></name>;</import>

<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppInfo</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>Download</name></name>;</import>
<import>import <name><name>timber</name><operator>.</operator><name>log</name><operator>.</operator><name>Timber</name></name>;</import>


<class><specifier>public</specifier> class <name>NameColumnParser</name> <super><extends>extends <name>BaseParser</name></extends></super> <block>{
    <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>Pattern</name></type> <name>NAME_PATTERN</name> <init>= <expr><call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><literal type="string">"^(?:\\[(.+)\\]\\((.+)\\))$"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>NameColumnParser</name><parameter_list>(<parameter><decl><type><name>EncodingFixer</name></type> <name>encodingFixer</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>encodingFixer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>parse</name><parameter_list>(<parameter><decl><type><name>AppInfo</name></type> <name>appInfo</name></decl></parameter>, <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Column</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>rawColumns</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>rawNameString</name> <init>= <expr><call><name><name>rawColumns</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>Column</name><operator>.</operator><name>NAME</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>appName</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>downloadUrl</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Download</name><operator>.</operator><name>Type</name></name></type> <name>downloadType</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Matcher</name></type> <name>matcher</name> <init>= <expr><call><name><name>NAME_PATTERN</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><name>rawNameString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>matcher</name><operator>.</operator><name>matches</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>appName</name> <operator>=</operator> <call><name><name>matcher</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>downloadUrl</name> <operator>=</operator> <call><name><name>matcher</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>replaceAll</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// TODO more parsing of different types</comment>
            <if>if <condition>(<expr><call><name><name>downloadUrl</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"://play.google.com/store"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>downloadUrl</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"://market.android.com"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>downloadType</name> <operator>=</operator> <name><name>Download</name><operator>.</operator><name>Type</name><operator>.</operator><name>GPLAY</name></name></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>downloadType</name> <operator>=</operator> <name><name>Download</name><operator>.</operator><name>Type</name><operator>.</operator><name>UNKNOWN</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>Timber</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><literal type="string">"Unknown download url: %s"</literal></expr></argument>, <argument><expr><name>downloadUrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>appName</name> <operator>=</operator> <name>rawNameString</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>downloadUrl</name> <operator>=</operator> <name>rawNameString</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>downloadType</name> <operator>=</operator> <name><name>Download</name><operator>.</operator><name>Type</name><operator>.</operator><name>UNKNOWN</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Timber</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><literal type="string">"parseNameField(%s) failed"</literal></expr></argument>, <argument><expr><name>rawNameString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name><name>appInfo</name><operator>.</operator><name>setAppName</name></name><argument_list>(<argument><expr><call><name>fixEncoding</name><argument_list>(<argument><expr><name>appName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>appInfo</name><operator>.</operator><name>addDownload</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Download</name><argument_list>(<argument><expr><name>downloadType</name></expr></argument>, <argument><expr><name>downloadUrl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/backend/reddit/wiki/caching/CachedAppInfo.java" hash="3ab1d50d221310422d66a450139ad57f19e5d962"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>wiki</name><operator>.</operator><name>caching</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>gson</name><operator>.</operator><name>Gson</name></name>;</import>

<import>import <name><name>io</name><operator>.</operator><name>realm</name><operator>.</operator><name>RealmObject</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppInfo</name></name>;</import>

<class><specifier>public</specifier> class <name>CachedAppInfo</name> <super><extends>extends <name>RealmObject</name></extends></super> <block>{
    <constructor><specifier>public</specifier> <name>CachedAppInfo</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>CachedAppInfo</name><parameter_list>(<parameter><decl><type><name>Gson</name></type> <name>gson</name></decl></parameter>, <parameter><decl><type><name>AppInfo</name></type> <name>appInfo</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>json</name> <operator>=</operator> <call><name><name>appInfo</name><operator>.</operator><name>toJson</name></name><argument_list>(<argument><expr><name>gson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <decl_stmt><decl><type><name>String</name></type> <name>json</name></decl>;</decl_stmt>

    <function><specifier>public</specifier> <type><name>AppInfo</name></type> <name>toAppInfo</name><parameter_list>(<parameter><decl><type><name>Gson</name></type> <name>gson</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>AppInfo</name><operator>.</operator><name>fromJson</name></name><argument_list>(<argument><expr><name>gson</name></expr></argument>, <argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/backend/github/GithubRepository.java" hash="d5d468b80feff8738473638968829f7ee0a3639a"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>github</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>Observable</name></name>;</import>

<interface><specifier>public</specifier> interface <name>GithubRepository</name> <block>{

    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>GithubApi</name><operator>.</operator><name>Release</name></name></argument>&gt;</argument_list></name></type> <name>getLatestRelease</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>GithubApi</name><operator>.</operator><name>Contributor</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getContributors</name><parameter_list>()</parameter_list>;</function_decl>

}</block></interface>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/backend/reddit/wiki/parser/BodyParser.java" hash="9ead9a0770c1b980ffd40e410ceb2130437f2626"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>wiki</name><operator>.</operator><name>parser</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Matcher</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Pattern</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Inject</name></name>;</import>

<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppInfo</name></name>;</import>

<class><specifier>public</specifier> class <name>BodyParser</name> <block>{
    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>AppParser</name></argument>&gt;</argument_list></name></type> <name>appParsers</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CategoryParser</name></type> <name>categoryParser</name></decl>;</decl_stmt>

    <constructor><annotation>@<name>Inject</name></annotation>
    <specifier>public</specifier> <name>BodyParser</name><parameter_list>(<parameter><decl><type><name>CategoryParser</name></type> <name>categoryParser</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>AppParser</name></argument>&gt;</argument_list></name></type> <name>appParsers</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>appParsers</name></name> <operator>=</operator> <name>appParsers</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>categoryParser</name></name> <operator>=</operator> <name>categoryParser</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>AppInfo</name></argument>&gt;</argument_list></name></type> <name>parseBody</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>bodyString</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>AppInfo</name></argument>&gt;</argument_list></name></type> <name>parsedOutput</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>lines</name> <init>= <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><call><name><name>bodyString</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>parsedOutput</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name>parseCategoryBlocks</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>parsedOutput</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Pattern</name></type> <name>CATEGORY_PATTERN</name> <init>= <expr><call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><literal type="string">"^(#+)(?:\\s*+)(.+?)$"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>AppInfo</name></argument>&gt;</argument_list></name></type> <name>parseCategoryBlocks</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>categories</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>block</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>AppInfo</name></argument>&gt;</argument_list></name></type> <name>parsedOutput</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>currentCategory</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>currentLevel</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>currentBlockStart</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>linePos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>linePos</name> <operator>&lt;</operator> <call><name><name>block</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>linePos</name><operator>++</operator></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><name>Matcher</name></type> <name>matcher</name> <init>= <expr><call><name><name>CATEGORY_PATTERN</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><call><name><name>block</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>linePos</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>matcher</name><operator>.</operator><name>matches</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>foundLevel</name> <init>= <expr><call><name><name>matcher</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>foundCategory</name> <init>= <expr><call><name><name>matcher</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>currentCategory</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>currentCategory</name> <operator>=</operator> <name>foundCategory</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>currentLevel</name> <operator>=</operator> <name>foundLevel</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>currentBlockStart</name> <operator>=</operator> <name>linePos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                }</block></then> <elseif>else <if>if <condition>(<expr><name>currentLevel</name> <operator>==</operator> <name>foundLevel</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>currentCategories</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>categories</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>currentCategories</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>currentCategory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>parsedOutput</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name>parseCategoryBlocks</name><argument_list>(<argument><expr><name>currentCategories</name></expr></argument>, <argument><expr><call><name><name>block</name><operator>.</operator><name>subList</name></name><argument_list>(<argument><expr><name>currentBlockStart</name></expr></argument>, <argument><expr><name>linePos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><name>currentCategory</name> <operator>=</operator> <name>foundCategory</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>currentBlockStart</name> <operator>=</operator> <name>linePos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                }</block></then></if></elseif></if>
            }</block></then> <elseif>else <if>if <condition>(<expr><name>linePos</name> <operator>==</operator> <call><name><name>block</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>currentCategory</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>newCategories</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>categories</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>newCategories</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>currentCategory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>parsedOutput</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name>parseCategoryBlocks</name><argument_list>(<argument><expr><name>newCategories</name></expr></argument>, <argument><expr><call><name><name>block</name><operator>.</operator><name>subList</name></name><argument_list>(<argument><expr><name>currentBlockStart</name></expr></argument>, <argument><expr><call><name><name>block</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>parsedOutput</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name>parseAppBlock</name><argument_list>(<argument><expr><name>categories</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if></elseif></if>
        }</block></for>
        <return>return <expr><name>parsedOutput</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Pattern</name></type> <name>COLUMN_LINE_PATTERN</name> <init>= <expr><call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><literal type="string">"^(?:\\:-+\\|){5}$"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// i.e. "## Action" blocks</comment>
    <function><specifier>private</specifier> <type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>AppInfo</name></argument>&gt;</argument_list></name></type> <name>parseAppBlock</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>categories</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>block</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>AppInfo</name></argument>&gt;</argument_list></name></type> <name>appInfos</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>cleanStart</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">// Skip table headers.</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>block</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <expr_stmt><expr><name>cleanStart</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>line</name> <init>= <expr><call><name><name>block</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>COLUMN_LINE_PATTERN</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>matches</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
        }</block></for>

        <comment type="line">// One more so we skip what we matched (the table headers)</comment>
        <expr_stmt><expr><name>cleanStart</name><operator>++</operator></expr>;</expr_stmt>

        <comment type="line">// Empty block?</comment>
        <if>if <condition>(<expr><name>cleanStart</name> <operator>==</operator> <call><name><name>block</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>appInfos</name></expr>;</return></block></then></if>

        <comment type="line">// Now these should be the apps followed by a few empty lines.</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>cleanStart</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>block</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>line</name> <init>= <expr><call><name><name>block</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>split</name> <init>= <expr><call><name><name>line</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"\\|"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>split</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">5</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

            <decl_stmt><decl><type><name>AppInfo</name></type> <name>app</name> <init>= <expr><operator>new</operator> <call><name>AppInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>categoryParser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>app</name></expr></argument>, <argument><expr><name>categories</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name><name>AppParser</name><operator>.</operator><name>Column</name></name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>columnMap</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>columnMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>AppParser</name><operator>.</operator><name>Column</name><operator>.</operator><name>NAME</name></name></expr></argument>, <argument><expr><name><name>split</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>columnMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>AppParser</name><operator>.</operator><name>Column</name><operator>.</operator><name>PRICE</name></name></expr></argument>, <argument><expr><name><name>split</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>columnMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>AppParser</name><operator>.</operator><name>Column</name><operator>.</operator><name>DEVICE</name></name></expr></argument>, <argument><expr><name><name>split</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>columnMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>AppParser</name><operator>.</operator><name>Column</name><operator>.</operator><name>DESCRIPTION</name></name></expr></argument>, <argument><expr><name><name>split</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>columnMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>AppParser</name><operator>.</operator><name>Column</name><operator>.</operator><name>CONTACT</name></name></expr></argument>, <argument><expr><name><name>split</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for>for <control>(<init><decl><type><name>AppParser</name></type> <name>parser</name> <range>: <expr><name>appParsers</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><call><name><name>parser</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>app</name></expr></argument>, <argument><expr><name>columnMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
            <expr_stmt><expr><call><name><name>appInfos</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>app</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>appInfos</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/backend/github/GithubApi.java" hash="0eb1661f6936511121ff19e9224acac7c3a641cc"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>github</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>gson</name><operator>.</operator><name>annotations</name><operator>.</operator><name>SerializedName</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>Observable</name></name>;</import>
<import>import <name><name>retrofit2</name><operator>.</operator><name>http</name><operator>.</operator><name>GET</name></name>;</import>

<interface><specifier>public</specifier> interface <name>GithubApi</name> <block>{
    <decl_stmt><decl><type><name>String</name></type> <name>BASEURL</name> <init>= <expr><literal type="string">"https://api.github.com/"</literal></expr></init></decl>;</decl_stmt>

    <function_decl><annotation>@<name>GET</name><argument_list>(<argument><expr><literal type="string">"repos/d4rken/reddit-android-appstore/releases/latest"</literal></expr></argument>)</argument_list></annotation>
    <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Release</name></argument>&gt;</argument_list></name></type> <name>getLatestRelease</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><annotation>@<name>GET</name><argument_list>(<argument><expr><literal type="string">"repos/d4rken/reddit-android-appstore/contributors"</literal></expr></argument>)</argument_list></annotation>
    <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Contributor</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getContributors</name><parameter_list>()</parameter_list>;</function_decl>

    <class>class <name>Release</name> <block>{
        <decl_stmt><decl><annotation>@<name>SerializedName</name><argument_list>(<argument><expr><literal type="string">"url"</literal></expr></argument>)</argument_list></annotation> <specifier>public</specifier> <type><name>String</name></type> <name>releaseUrl</name></decl>;</decl_stmt>
        <decl_stmt><decl><annotation>@<name>SerializedName</name><argument_list>(<argument><expr><literal type="string">"tag_name"</literal></expr></argument>)</argument_list></annotation> <specifier>public</specifier> <type><name>String</name></type> <name>tagName</name></decl>;</decl_stmt>
        <decl_stmt><decl><annotation>@<name>SerializedName</name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></annotation> <specifier>public</specifier> <type><name>String</name></type> <name>releaseName</name></decl>;</decl_stmt>
        <decl_stmt><decl><annotation>@<name>SerializedName</name><argument_list>(<argument><expr><literal type="string">"body"</literal></expr></argument>)</argument_list></annotation> <specifier>public</specifier> <type><name>String</name></type> <name>releaseDescription</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>public</specifier> <type><name>boolean</name></type> <name>prerelease</name></decl>;</decl_stmt>
        <decl_stmt><decl><annotation>@<name>SerializedName</name><argument_list>(<argument><expr><literal type="string">"published_at"</literal></expr></argument>)</argument_list></annotation> <specifier>public</specifier> <type><name>Date</name></type> <name>publishDate</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Assets</name></argument>&gt;</argument_list></name></type> <name>assets</name></decl>;</decl_stmt>

        <class><specifier>public</specifier> <specifier>static</specifier> class <name>Assets</name> <block>{
            <decl_stmt><decl><annotation>@<name>SerializedName</name><argument_list>(<argument><expr><literal type="string">"browser_download_url"</literal></expr></argument>)</argument_list></annotation> <specifier>public</specifier> <type><name>String</name></type> <name>downloadUrl</name></decl>;</decl_stmt>
            <decl_stmt><decl><specifier>public</specifier> <type><name>long</name></type> <name>size</name></decl>;</decl_stmt>
        }</block></class>
    }</block></class>

    <class>class <name>Contributor</name> <block>{
        <decl_stmt><decl><annotation>@<name>SerializedName</name><argument_list>(<argument><expr><literal type="string">"login"</literal></expr></argument>)</argument_list></annotation> <specifier>public</specifier> <type><name>String</name></type> <name>username</name></decl>;</decl_stmt>
    }</block></class>
}</block></interface>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/backend/data/AppTags.java" hash="ea4a74167e226182dbb73304b1d534df014adb50"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name></name>;</package>


<enum><specifier>public</specifier> enum <name>AppTags</name> <block>{
    <comment type="line">// Price</comment>
    <decl><name>FREE</name></decl>, <decl><name>PAID</name></decl>,
    <comment type="line">// Format</comment>
    <decl><name>PHONE</name></decl>, <decl><name>TABLET</name></decl>, <decl><name>WEAR</name></decl>,
    <comment type="line">// New to wiki</comment>
    <decl><name>NEW</name></decl>
}</block></enum>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/backend/github/LiveGithubRepository.java" hash="5fa5abeaaa887e84db0a7565831bc79bcb0b2979"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>github</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>Observable</name></name>;</import>

<class><specifier>public</specifier> class <name>LiveGithubRepository</name> <super><implements>implements <name>GithubRepository</name></implements></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>GithubApi</name></type> <name>githubApi</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>GithubApi</name><operator>.</operator><name>Release</name></name></argument>&gt;</argument_list></name></type> <name>latestReleaseCache</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>GithubApi</name><operator>.</operator><name>Contributor</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>latestContributorsCache</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>LiveGithubRepository</name><parameter_list>(<parameter><decl><type><name>GithubApi</name></type> <name>githubApi</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>githubApi</name></name> <operator>=</operator> <name>githubApi</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>GithubApi</name><operator>.</operator><name>Release</name></name></argument>&gt;</argument_list></name></type> <name>getLatestRelease</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>latestReleaseCache</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>latestReleaseCache</name> <operator>=</operator> <call><name><name>githubApi</name><operator>.</operator><name>getLatestRelease</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>cache</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        <return>return <expr><name>latestReleaseCache</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>GithubApi</name><operator>.</operator><name>Contributor</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getContributors</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>latestContributorsCache</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>latestContributorsCache</name> <operator>=</operator> <call><name><name>githubApi</name><operator>.</operator><name>getContributors</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>cache</name><argument_list>()</argument_list></call>
                    <operator>.</operator><call><name>onErrorReturn</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>throwable</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>latestContributorsCache</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/backend/data/Contact.java" hash="7204552ee0e96d512ea40f27e0f9e58ececc03ce"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>

<import>import <name><name>timber</name><operator>.</operator><name>log</name><operator>.</operator><name>Timber</name></name>;</import>


<class><specifier>public</specifier> class <name>Contact</name> <block>{

    <enum><specifier>public</specifier> enum <name>Type</name> <block>{
        <decl><name>EMAIL</name></decl>, <decl><name>WEBSITE</name></decl>, <decl><name>REDDIT_USERNAME</name></decl>, <decl><name>UNKNOWN</name></decl>
    }</block></enum>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Type</name></type> <name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>target</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>Contact</name><parameter_list>(<parameter><decl><type><name>Type</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>target</name></name> <operator>=</operator> <name>target</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>NonNull</name></annotation>
    <specifier>public</specifier> <type><name>Type</name></type> <name>getType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>type</name></expr>;</return>
    }</block></function>


    <function><annotation>@<name>NonNull</name></annotation>
    <specifier>public</specifier> <type><name>String</name></type> <name>getTarget</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>target</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/androidTest/java/subreddit/android/appstore/ApplicationTest.java" hash="11373f1e145f34fb2366a02f9f46ff3f9702f727"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Application</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>test</name><operator>.</operator><name>ApplicationTestCase</name></name>;</import>

<comment type="block" format="javadoc">/**
 * &lt;a href="http://d.android.com/tools/testing/testing_android.html"&gt;Testing Fundamentals&lt;/a&gt;
 */</comment>
<class><specifier>public</specifier> class <name>ApplicationTest</name> <super><extends>extends <name><name>ApplicationTestCase</name><argument_list type="generic">&lt;<argument><name>Application</name></argument>&gt;</argument_list></name></extends></super> <block>{
    <constructor><specifier>public</specifier> <name>ApplicationTest</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name><name>Application</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
}</block></class></unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/backend/reddit/wiki/caching/WikiDiskCache.java" hash="76307b2631b4594c75cbacee3886879b0431d6c0"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>reddit</name><operator>.</operator><name>wiki</name><operator>.</operator><name>caching</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>gson</name><operator>.</operator><name>Gson</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>gson</name><operator>.</operator><name>GsonBuilder</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>

<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>Observable</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>ObservableEmitter</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>ObservableOnSubscribe</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>functions</name><operator>.</operator><name>Function</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>schedulers</name><operator>.</operator><name>Schedulers</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>realm</name><operator>.</operator><name>Realm</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>realm</name><operator>.</operator><name>RealmResults</name></name>;</import>
<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name><operator>.</operator><name>AppInfo</name></name>;</import>
<import>import <name><name>timber</name><operator>.</operator><name>log</name><operator>.</operator><name>Timber</name></name>;</import>

<class><specifier>public</specifier> class <name>WikiDiskCache</name> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>Gson</name></type> <name>gson</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>WikiDiskCache</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>gson</name> <operator>=</operator> <operator>new</operator> <call><name>GsonBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>putAll</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>AppInfo</name></argument>&gt;</argument_list></name></type> <name>appInfos</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Timber</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><literal type="string">"Storing %d appinfos"</literal></expr></argument>, <argument><expr><call><name><name>appInfos</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Realm</name></type> <name>realm</name> <init>= <expr><call><name><name>Realm</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>realm</name><operator>.</operator><name>beginTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>realm</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name><name>CachedAppInfo</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>AppInfo</name></type> <name>appInfo</name> <range>: <expr><name>appInfos</name></expr></range></decl></init>)</control> <block>{
            <decl_stmt><decl><type><name>long</name></type> <name>start</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>realm</name><operator>.</operator><name>copyToRealm</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>CachedAppInfo</name><argument_list>(<argument><expr><name>gson</name></expr></argument>, <argument><expr><name>appInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>stop</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>Timber</name><operator>.</operator><name>v</name></name><argument_list>(<argument><expr><literal type="string">"Stored: %s (%d ms)"</literal></expr></argument>, <argument><expr><name>appInfo</name></expr></argument>, <argument><expr><operator>(</operator><name>stop</name> <operator>-</operator> <name>start</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name><name>realm</name><operator>.</operator><name>commitTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>AppInfo</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getAll</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Timber</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><literal type="string">"Getting all cached AppInfos"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// TODO invalidate old data at some point?</comment>
        <return>return <expr><name><name>Observable</name><operator>.</operator></name>&lt;<name><name>RealmResults</name><argument_list type="generic">&lt;<argument><name>CachedAppInfo</name></argument>&gt;</argument_list></name><operator>&gt;</operator><call><name>create</name><argument_list>(
                <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>emitter</name></decl></parameter></parameter_list> -&gt; <block>{
                    <decl_stmt><decl><type><name>Realm</name></type> <name>realm</name> <init>= <expr><call><name><name>Realm</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>RealmResults</name><argument_list type="generic">&lt;<argument><name>CachedAppInfo</name></argument>&gt;</argument_list></name></type> <name>realmResults</name> <init>= <expr><call><name><name>realm</name><operator>.</operator><name>where</name></name><argument_list>(<argument><expr><name><name>CachedAppInfo</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>findAll</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><operator>!</operator><call><name><name>realmResults</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>emitter</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><name>realmResults</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
                    <else>else <block type="pseudo"><expr_stmt><expr><call><name><name>Timber</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><literal type="string">"No AppInfos cached"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
                    <expr_stmt><expr><call><name><name>emitter</name><operator>.</operator><name>onComplete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></lambda></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>subscribeOn</name><argument_list>(<argument><expr><call><name><name>Schedulers</name><operator>.</operator><name>io</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>cachedAppInfos</name></decl></parameter></parameter_list> -&gt; <block>{
                    <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>AppInfo</name></argument>&gt;</argument_list></name></type> <name>appInfos</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>Timber</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><literal type="string">"Returned %d AppInfos from cache"</literal></expr></argument>, <argument><expr><call><name><name>cachedAppInfos</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <for>for <control>(<init><decl><type><name>CachedAppInfo</name></type> <name>cachedAppInfo</name> <range>: <expr><name>cachedAppInfos</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><call><name><name>appInfos</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>cachedAppInfo</name><operator>.</operator><name>toAppInfo</name></name><argument_list>(<argument><expr><name>gson</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
                    <return>return <expr><name>appInfos</name></expr>;</return>
                }</block></lambda></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/backend/data/Download.java" hash="23e5a3cb67ff84034bd50c24cec8402658a72d23"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>

<class><specifier>public</specifier> class <name>Download</name> <block>{

    <enum><specifier>public</specifier> enum <name>Type</name> <block>{
        <decl><name>GPLAY</name></decl>, <decl><name>FDROID</name></decl>, <decl><name>WEBSITE</name></decl>, <decl><name>UNKNOWN</name></decl>
    }</block></enum>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Type</name></type> <name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>target</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>Download</name><parameter_list>(<parameter><decl><type><name>Type</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>target</name></name> <operator>=</operator> <name>target</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>NonNull</name></annotation>
    <specifier>public</specifier> <type><name>Type</name></type> <name>getType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>type</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>NonNull</name></annotation>
    <specifier>public</specifier> <type><name>String</name></type> <name>getTarget</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>target</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return can return NULL if type is UNKNOWN
     */</comment>
    <function><annotation>@<name>Nullable</name></annotation>
    <specifier>public</specifier> <type><name>Uri</name></type> <name>getDownloadUri</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>US</name></name></expr></argument>, <argument><expr><literal type="string">"Download(type=%s, target=%s)"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>o</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
        <if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name>getClass</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>o</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>

        <decl_stmt><decl><type><name>Download</name></type> <name>download</name> <init>= <expr><operator>(</operator><name>Download</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>

        <return>return <expr><name>type</name> <operator>==</operator> <name><name>download</name><operator>.</operator><name>type</name></name> <operator>&amp;&amp;</operator> <call><name><name>target</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>download</name><operator>.</operator><name>target</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name><name>type</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <call><name><name>target</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/androidTest/java/subreddit/android/appstore/screens/list/AppListTest.java" hash="13fa63a77fb075ea605b45272703589457718fdd"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>screens</name><operator>.</operator><name>list</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>test</name><operator>.</operator><name>rule</name><operator>.</operator><name>ActivityTestRule</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>test</name><operator>.</operator><name>runner</name><operator>.</operator><name>AndroidJUnit4</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Rule</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>runner</name><operator>.</operator><name>RunWith</name></name>;</import>

<import>import <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>screens</name><operator>.</operator><name>MainActivity</name></name>;</import>


<class><annotation>@<name>RunWith</name><argument_list>(<argument><expr><name><name>AndroidJUnit4</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> class <name>AppListTest</name> <block>{
    <decl_stmt><decl><annotation>@<name>Rule</name></annotation>
    <specifier>public</specifier> <type><name><name>ActivityTestRule</name><argument_list type="generic">&lt;<argument><name>MainActivity</name></argument>&gt;</argument_list></name></type> <name>testRule</name> <init>= <expr><operator>new</operator> <call><name><name>ActivityTestRule</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>MainActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="reddit-android-appstore/app/src/main/java/subreddit/android/appstore/backend/data/AppInfo.java" hash="14610333dc6108a4475705e6b9ebe20b5026c8f1"><package>package <name><name>subreddit</name><operator>.</operator><name>android</name><operator>.</operator><name>appstore</name><operator>.</operator><name>backend</name><operator>.</operator><name>data</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>gson</name><operator>.</operator><name>Gson</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>gson</name><operator>.</operator><name>JsonSyntaxException</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedHashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>timber</name><operator>.</operator><name>log</name><operator>.</operator><name>Timber</name></name>;</import>


<class><specifier>public</specifier> class <name>AppInfo</name> <super><implements>implements <name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>AppInfo</name></argument>&gt;</argument_list></name></implements></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>AppTags</name></argument>&gt;</argument_list></name></type> <name>appTagsCollection</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedHashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Contact</name></argument>&gt;</argument_list></name></type> <name>contacts</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Download</name></argument>&gt;</argument_list></name></type> <name>downloads</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>description</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>appName</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>categories</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>AppInfo</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setCategories</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>categories</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>categories</name></name> <operator>=</operator> <name>categories</name></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getCategories</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>categories</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getPrimaryCategory</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>categories</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getSecondaryCategory</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>categories</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getTertiaryCategory</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>categories</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getAppName</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>appName</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getDescription</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>description</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Contact</name></argument>&gt;</argument_list></name></type> <name>getContacts</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>contacts</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Download</name></argument>&gt;</argument_list></name></type> <name>getDownloads</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>downloads</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>AppTags</name></argument>&gt;</argument_list></name></type> <name>getTags</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>appTagsCollection</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>AppTags</name></argument>&gt;</argument_list></name></type> <name>addTag</name><parameter_list>(<parameter><decl><type><name>AppTags</name></type> <name>tag</name></decl></parameter>)</parameter_list> <block>{
        <if>if<condition>(<expr><operator>!</operator><call><name><name>appTagsCollection</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name><name>appTagsCollection</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>appTagsCollection</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>addContact</name><parameter_list>(<parameter><decl><type><name>Contact</name></type> <name>contact</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>contacts</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>contact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setDescription</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>description</name></name> <operator>=</operator> <name>description</name></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setAppName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>appName</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>appName</name></name> <operator>=</operator> <name>appName</name></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>addDownload</name><parameter_list>(<parameter><decl><type><name>Download</name></type> <name>download</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>downloads</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>download</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>toJson</name><parameter_list>(<parameter><decl><type><name>Gson</name></type> <name>gson</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>gson</name><operator>.</operator><name>toJson</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Nullable</name></annotation>
    <specifier>public</specifier> <specifier>static</specifier> <type><name>AppInfo</name></type> <name>fromJson</name><parameter_list>(<parameter><decl><type><name>Gson</name></type> <name>gson</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>jsonString</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>jsonString</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>
        <try>try <block>{
            <return>return <expr><call><name><name>gson</name><operator>.</operator><name>fromJson</name></name><argument_list>(<argument><expr><name>jsonString</name></expr></argument>, <argument><expr><name><name>AppInfo</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>JsonSyntaxException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Timber</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="string">"Failed to create AppInfo from: %s"</literal></expr></argument>, <argument><expr><name>jsonString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></catch></try>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>compareTo</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>AppInfo</name></type> <name>appInfo</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>appName</name><operator>.</operator><name>compareToIgnoreCase</name></name><argument_list>(<argument><expr><name><name>appInfo</name><operator>.</operator><name>appName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getAppName</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>o</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
        <if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name>getClass</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>o</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>

        <decl_stmt><decl><type><name>AppInfo</name></type> <name>appInfo</name> <init>= <expr><operator>(</operator><name>AppInfo</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name><name>downloads</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>appInfo</name><operator>.</operator><name>downloads</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>appName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>appInfo</name><operator>.</operator><name>appName</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name><name>downloads</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <call><name><name>appName</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

}</block></class>

</unit>

</unit>
