<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5">

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/test/java/vocabletrainer/heinecke/aron/vocabletrainer/FormatterTest.java" hash="ee0d98e98e008c6f90a14dbe40f2fd2f6923f6dc"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Formatter</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>assertEquals</name></name>;</import>

<class><specifier>public</specifier> class <name>FormatterTest</name> <block>{
    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>format_isCorrect</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Formatter</name></type> <name>fmt</name> <init>= <expr><operator>new</operator> <call><name>Formatter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>fmt</name><operator>.</operator><name>changeSI</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>bytes_1024</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>bytes_mib</name> <init>= <expr><literal type="number">1048576</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>bytes_1000</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>bytes_mb</name> <init>= <expr><literal type="number">1000000</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"1 KiB"</literal></expr></argument>, <argument><expr><call><name><name>fmt</name><operator>.</operator><name>formatBytes</name></name><argument_list>(<argument><expr><name>bytes_1024</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"1 MiB"</literal></expr></argument>, <argument><expr><call><name><name>fmt</name><operator>.</operator><name>formatBytes</name></name><argument_list>(<argument><expr><name>bytes_mib</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"1,000 B"</literal></expr></argument>, <argument><expr><call><name><name>fmt</name><operator>.</operator><name>formatBytes</name></name><argument_list>(<argument><expr><name>bytes_1000</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"976.6 KiB"</literal></expr></argument>, <argument><expr><call><name><name>fmt</name><operator>.</operator><name>formatBytes</name></name><argument_list>(<argument><expr><name>bytes_mb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class></unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/test/java/vocabletrainer/heinecke/aron/vocabletrainer/MultiMeaningFormatterTest.java" hash="f58774705fa902acc1e8b0dce8da8f6a942b0d4e"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Rule</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>rules</name><operator>.</operator><name>ExpectedException</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>

<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>CSVCustomFormat</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>MultiMeaningHandler</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>*</name></name>;</import>
<import>import static <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>MultiMeaningHandler</name><operator>.</operator><name>ERROR_MSG_FORMAT</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Tests for multi-meaning formatting
 */</comment>
<class><specifier>public</specifier> class <name>MultiMeaningFormatterTest</name> <block>{
    <decl_stmt><decl><annotation>@<name>Rule</name></annotation>
    <specifier>public</specifier> <type><name>ExpectedException</name></type> <name>exception</name> <init>= <expr><call><name><name>ExpectedException</name><operator>.</operator><name>none</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>importMultiValueFormatTest_Full</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>CSVCustomFormat</name></type> <name>format</name> <init>= <expr><name><name>CSVCustomFormat</name><operator>.</operator><name>DEFAULT</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>MultiMeaningHandler</name></type> <name>mmh</name> <init>= <expr><operator>new</operator> <call><name>MultiMeaningHandler</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>meaningsInput</name> <init>= <expr><block>{<expr><literal type="string">"A/1"</literal></expr>,<expr><literal type="string">"B\\2"</literal></expr>,<expr><literal type="string">"C3"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>meanings</name> <init>= <expr><literal type="string">"A\\/1/B\\\\2/C3"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>format</name><operator>.</operator><name>isMultiValueEnabled</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>format</name><operator>.</operator><name>isMVEscapeEnabled</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>output</name> <init>= <expr><call><name><name>mmh</name><operator>.</operator><name>formatMultiMeaning</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>meaningsInput</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>meanings</name></expr></argument>,<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>importMultiValueFormatTest_NoEscape</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>CSVCustomFormat</name></type> <name>formatDefault</name> <init>= <expr><name><name>CSVCustomFormat</name><operator>.</operator><name>DEFAULT</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CSVCustomFormat</name></type> <name>format</name> <init>= <expr><operator>new</operator> <call><name>CSVCustomFormat</name><argument_list>(<argument><expr><call><name><name>formatDefault</name><operator>.</operator><name>getFormat</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>formatDefault</name><operator>.</operator><name>getMultiValueChar</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>MultiMeaningHandler</name></type> <name>mmh</name> <init>= <expr><operator>new</operator> <call><name>MultiMeaningHandler</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>meaningsInput</name> <init>= <expr><block>{<expr><literal type="string">"A/1"</literal></expr>,<expr><literal type="string">"B\\2"</literal></expr>,<expr><literal type="string">"C3"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>meanings</name> <init>= <expr><literal type="string">"A/1/B\\2/C3"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>format</name><operator>.</operator><name>isMultiValueEnabled</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>format</name><operator>.</operator><name>isMVEscapeEnabled</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>output</name> <init>= <expr><call><name><name>mmh</name><operator>.</operator><name>formatMultiMeaning</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>meaningsInput</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>meanings</name></expr></argument>,<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>importMultiValueFormatTest_NoMultivalue</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>exception</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><name><name>IllegalArgumentException</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>exception</name><operator>.</operator><name>expectMessage</name></name><argument_list>(<argument><expr><name>ERROR_MSG_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CSVCustomFormat</name></type> <name>formatDefault</name> <init>= <expr><name><name>CSVCustomFormat</name><operator>.</operator><name>DEFAULT</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CSVCustomFormat</name></type> <name>format</name> <init>= <expr><operator>new</operator> <call><name>CSVCustomFormat</name><argument_list>(<argument><expr><call><name><name>formatDefault</name><operator>.</operator><name>getFormat</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="null">null</literal></expr></argument>,<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>MultiMeaningHandler</name></type> <name>mmh</name> <init>= <expr><operator>new</operator> <call><name>MultiMeaningHandler</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>meaningsInput</name> <init>= <expr><block>{<expr><literal type="string">"A/1"</literal></expr>,<expr><literal type="string">"B\\2"</literal></expr>,<expr><literal type="string">"C3"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>meanings</name> <init>= <expr><literal type="string">"A\\/1/B\\\\2/C3"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>format</name><operator>.</operator><name>isMultiValueEnabled</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>format</name><operator>.</operator><name>isMVEscapeEnabled</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mmh</name><operator>.</operator><name>formatMultiMeaning</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>meaningsInput</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>importMultiValueFormatTest_NoMultivalue2</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>exception</name><operator>.</operator><name>expect</name></name><argument_list>(<argument><expr><name><name>IllegalArgumentException</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>exception</name><operator>.</operator><name>expectMessage</name></name><argument_list>(<argument><expr><name>ERROR_MSG_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CSVCustomFormat</name></type> <name>formatDefault</name> <init>= <expr><name><name>CSVCustomFormat</name><operator>.</operator><name>DEFAULT</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CSVCustomFormat</name></type> <name>format</name> <init>= <expr><operator>new</operator> <call><name>CSVCustomFormat</name><argument_list>(<argument><expr><call><name><name>formatDefault</name><operator>.</operator><name>getFormat</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="null">null</literal></expr></argument>,<argument><expr><call><name><name>formatDefault</name><operator>.</operator><name>getEscapeMVChar</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>MultiMeaningHandler</name></type> <name>mmh</name> <init>= <expr><operator>new</operator> <call><name>MultiMeaningHandler</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>meaningsInput</name> <init>= <expr><block>{<expr><literal type="string">"A/1"</literal></expr>,<expr><literal type="string">"B\\2"</literal></expr>,<expr><literal type="string">"C3"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>meanings</name> <init>= <expr><literal type="string">"A\\/1/B\\\\2/C3"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>format</name><operator>.</operator><name>isMultiValueEnabled</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>format</name><operator>.</operator><name>isMVEscapeEnabled</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mmh</name><operator>.</operator><name>formatMultiMeaning</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>meaningsInput</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/test/java/vocabletrainer/heinecke/aron/vocabletrainer/MultiMeaningParserTest.java" hash="cde863c5f8d0fd468f26f422743302cbd0e52552"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>CSVCustomFormat</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>MultiMeaningHandler</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>*</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Tests for multi-meaning parsing
 */</comment>
<class><specifier>public</specifier> class <name>MultiMeaningParserTest</name> <block>{
    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>importMultiValueEscapingTest_Full</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>CSVCustomFormat</name></type> <name>format</name> <init>= <expr><name><name>CSVCustomFormat</name><operator>.</operator><name>DEFAULT</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>MultiMeaningHandler</name></type> <name>mmh</name> <init>= <expr><operator>new</operator> <call><name>MultiMeaningHandler</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>meaningsInput</name> <init>= <expr><block>{<expr><literal type="string">"A\\/1"</literal></expr>,<expr><literal type="string">"B\\\\2"</literal></expr>,<expr><literal type="string">"C3"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>meanings</name> <init>= <expr><block>{<expr><literal type="string">"A/1"</literal></expr>,<expr><literal type="string">"B\\2"</literal></expr>,<expr><literal type="string">"C3"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>format</name><operator>.</operator><name>isMultiValueEnabled</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>format</name><operator>.</operator><name>isMVEscapeEnabled</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input</name> <init>= <expr><call><name>joinStringArray</name><argument_list>(<argument><expr><name>meaningsInput</name></expr></argument>,<argument><expr><call><name><name>format</name><operator>.</operator><name>getMultiValueChar</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><call><name><name>mmh</name><operator>.</operator><name>parseMultiMeaning</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertArrayEquals</name><argument_list>(<argument><expr><name>meanings</name></expr></argument>,<argument><expr><call><name><name>result</name><operator>.</operator><name>toArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>importMultiValueEscapingTest_Single</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>CSVCustomFormat</name></type> <name>format</name> <init>= <expr><name><name>CSVCustomFormat</name><operator>.</operator><name>DEFAULT</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>MultiMeaningHandler</name></type> <name>mmh</name> <init>= <expr><operator>new</operator> <call><name>MultiMeaningHandler</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>meaningsInput</name> <init>= <expr><block>{<expr><literal type="string">"A\\/1"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>meanings</name> <init>= <expr><block>{<expr><literal type="string">"A/1"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input</name> <init>= <expr><call><name>joinStringArray</name><argument_list>(<argument><expr><name>meaningsInput</name></expr></argument>,<argument><expr><call><name><name>format</name><operator>.</operator><name>getMultiValueChar</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><call><name><name>mmh</name><operator>.</operator><name>parseMultiMeaning</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertArrayEquals</name><argument_list>(<argument><expr><name>meanings</name></expr></argument>,<argument><expr><call><name><name>result</name><operator>.</operator><name>toArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>importMultiValueEscapingTest_No_Escape</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>CSVCustomFormat</name></type> <name>formatDefault</name> <init>= <expr><name><name>CSVCustomFormat</name><operator>.</operator><name>DEFAULT</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CSVCustomFormat</name></type> <name>format</name> <init>= <expr><operator>new</operator> <call><name>CSVCustomFormat</name><argument_list>(<argument><expr><call><name><name>formatDefault</name><operator>.</operator><name>getFormat</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>formatDefault</name><operator>.</operator><name>getMultiValueChar</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>MultiMeaningHandler</name></type> <name>mmh</name> <init>= <expr><operator>new</operator> <call><name>MultiMeaningHandler</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>format</name><operator>.</operator><name>isMultiValueEnabled</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>format</name><operator>.</operator><name>isMVEscapeEnabled</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>meaningsInput</name> <init>= <expr><block>{<expr><literal type="string">"A\\/1"</literal></expr>,<expr><literal type="string">"B\\\\2"</literal></expr>,<expr><literal type="string">"C3"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>meanings</name> <init>= <expr><block>{<expr><literal type="string">"A\\"</literal></expr>,<expr><literal type="string">"1"</literal></expr>,<expr><literal type="string">"B\\\\2"</literal></expr>,<expr><literal type="string">"C3"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input</name> <init>= <expr><call><name>joinStringArray</name><argument_list>(<argument><expr><name>meaningsInput</name></expr></argument>,<argument><expr><call><name><name>format</name><operator>.</operator><name>getMultiValueChar</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><call><name><name>mmh</name><operator>.</operator><name>parseMultiMeaning</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertArrayEquals</name><argument_list>(<argument><expr><name>meanings</name></expr></argument>,<argument><expr><call><name><name>result</name><operator>.</operator><name>toArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>importMultiValueEscapingTest_No_Multivalue</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>CSVCustomFormat</name></type> <name>formatDefault</name> <init>= <expr><name><name>CSVCustomFormat</name><operator>.</operator><name>DEFAULT</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CSVCustomFormat</name></type> <name>format</name> <init>= <expr><operator>new</operator> <call><name>CSVCustomFormat</name><argument_list>(<argument><expr><call><name><name>formatDefault</name><operator>.</operator><name>getFormat</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><literal type="null">null</literal></expr></argument>,<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>MultiMeaningHandler</name></type> <name>mmh</name> <init>= <expr><operator>new</operator> <call><name>MultiMeaningHandler</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>format</name><operator>.</operator><name>isMVEscapeEnabled</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>format</name><operator>.</operator><name>isMultiValueEnabled</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>meaningsInput</name> <init>= <expr><block>{<expr><literal type="string">"A\\/1"</literal></expr>,<expr><literal type="string">"B\\\\2"</literal></expr>,<expr><literal type="string">"C3"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>meanings</name> <init>= <expr><block>{<expr><literal type="string">"A\\/1/B\\\\2/C3"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input</name> <init>= <expr><call><name>joinStringArray</name><argument_list>(<argument><expr><name>meaningsInput</name></expr></argument>,<argument><expr><call><name><name>formatDefault</name><operator>.</operator><name>getMultiValueChar</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><call><name><name>mmh</name><operator>.</operator><name>parseMultiMeaning</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertArrayEquals</name><argument_list>(<argument><expr><name>meanings</name></expr></argument>,<argument><expr><call><name><name>result</name><operator>.</operator><name>toArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>importMultiValueEscapingTest_Full_Trim</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>CSVCustomFormat</name></type> <name>format</name> <init>= <expr><name><name>CSVCustomFormat</name><operator>.</operator><name>DEFAULT</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>MultiMeaningHandler</name></type> <name>mmh</name> <init>= <expr><operator>new</operator> <call><name>MultiMeaningHandler</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>meaningsInput</name> <init>= <expr><block>{<expr><literal type="string">" A \\/1 "</literal></expr>,<expr><literal type="string">" B\\\\2 "</literal></expr>,<expr><literal type="string">" C3 "</literal></expr>,<expr><literal type="string">" C \\ /4"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>meanings</name> <init>= <expr><block>{<expr><literal type="string">"A /1"</literal></expr>,<expr><literal type="string">"B\\2"</literal></expr>,<expr><literal type="string">"C3"</literal></expr>,<expr><literal type="string">"C"</literal></expr>,<expr><literal type="string">"4"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>format</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>format</name><operator>.</operator><name>isMultiValueEnabled</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>format</name><operator>.</operator><name>isMVEscapeEnabled</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input</name> <init>= <expr><call><name>joinStringArray</name><argument_list>(<argument><expr><name>meaningsInput</name></expr></argument>,<argument><expr><call><name><name>format</name><operator>.</operator><name>getMultiValueChar</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><call><name><name>mmh</name><operator>.</operator><name>parseMultiMeaning</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertArrayEquals</name><argument_list>(<argument><expr><name>meanings</name></expr></argument>,<argument><expr><call><name><name>result</name><operator>.</operator><name>toArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>importMultiValueEscapingTest_Full_No_Trim</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>CSVCustomFormat</name></type> <name>formatDefault</name> <init>= <expr><name><name>CSVCustomFormat</name><operator>.</operator><name>DEFAULT</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CSVCustomFormat</name></type> <name>format</name> <init>= <expr><operator>new</operator> <call><name>CSVCustomFormat</name><argument_list>(
                <argument><expr><call><name><name>formatDefault</name><operator>.</operator><name>getFormat</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>withIgnoreSurroundingSpaces</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>MultiMeaningHandler</name></type> <name>mmh</name> <init>= <expr><operator>new</operator> <call><name>MultiMeaningHandler</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>meaningsInput</name> <init>= <expr><block>{<expr><literal type="string">" A \\/1 "</literal></expr>,<expr><literal type="string">" B\\\\2 "</literal></expr>,<expr><literal type="string">" C3 "</literal></expr>,<expr><literal type="string">" C \\ /4"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>meanings</name> <init>= <expr><block>{<expr><literal type="string">" A /1 "</literal></expr>,<expr><literal type="string">" B\\2 "</literal></expr>,<expr><literal type="string">" C3 "</literal></expr>,<expr><literal type="string">" C  "</literal></expr>,<expr><literal type="string">"4"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>format</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>format</name><operator>.</operator><name>isMultiValueEnabled</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>format</name><operator>.</operator><name>isMVEscapeEnabled</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>input</name> <init>= <expr><call><name>joinStringArray</name><argument_list>(<argument><expr><name>meaningsInput</name></expr></argument>,<argument><expr><call><name><name>format</name><operator>.</operator><name>getMultiValueChar</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><call><name><name>mmh</name><operator>.</operator><name>parseMultiMeaning</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertArrayEquals</name><argument_list>(<argument><expr><name>meanings</name></expr></argument>,<argument><expr><call><name><name>result</name><operator>.</operator><name>toArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Join String array
     * @param array array of string
     * @param c join char
     * @return
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>joinStringArray</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>String</name><index>[]</index></name></type> <name>array</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{
        <return>return <expr><call><name><name>Arrays</name><operator>.</operator><name>stream</name></name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>reduce</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>,<argument><expr><lambda><parameter_list>(<parameter><decl><name>x</name></decl></parameter>,<parameter><decl><name>y</name></decl></parameter>)</parameter_list> -&gt; <block>{
            <if>if<condition>(<expr><call><name><name>x</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <return>return <expr><name>x</name> <operator>+</operator> <name>c</name> <operator>+</operator> <name>y</name></expr>;</return>
            }</block></then> <else>else <block>{
                <return>return <expr><name>y</name></expr>;</return>
            }</block></else></if>
        }</block></lambda></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/lib/CEditText.java" hash="d3c5c132a0a89598aad582b4cd523eef0f2bab21"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>Drawable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>design</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextInputEditText</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Custom EditText that does not display setError messages
 */</comment>
<class><specifier>public</specifier> class <name>CEditText</name> <super><extends>extends <name>TextInputEditText</name></extends></super> <block>{

    <constructor><specifier>public</specifier> <name>CEditText</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>CEditText</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>CEditText</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defStyleAttr</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>defStyleAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>setError</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>error</name></decl></parameter>, <parameter><decl><type><name>Drawable</name></type> <name>icon</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><literal type="string">"CEditText"</literal></expr></argument>,<argument><expr><literal type="string">"called setError"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setCompoundDrawables</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>icon</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/lib/CSVHeaders.java" hash="1760658cffeb5db05ac34df8d9171d75e14f60cc"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name></name>;</package>

<comment type="block" format="javadoc">/**
 * Class for header commands
 */</comment>
<class><specifier>public</specifier> class <name>CSVHeaders</name> <block>{
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name><name>String</name><index>[]</index></name></type> <name>CSV_METADATA_START</name> <init>= <expr><block>{<expr><literal type="string">"TABLE\\"</literal></expr>, <expr><literal type="string">"//INFO"</literal></expr>, <expr><literal type="string">"//START//"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>CSV_METADATA_COMMENT</name> <init>= <expr><literal type="string">"Name, A, B"</literal></expr></init></decl>;</decl_stmt>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/lib/CustomEditTextPreference.java" hash="78cf4b7d26d1fa4655ef57548330fbeea62513a6"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>preference</name><operator>.</operator><name>EditTextPreference</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Custom EditTextPreference
 * Created by Aron Heinecke
 */</comment>
<class><specifier>public</specifier> class <name>CustomEditTextPreference</name> <super><extends>extends <name>EditTextPreference</name></extends></super> <block>{
    <constructor><specifier>public</specifier> <name>CustomEditTextPreference</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defStyleAttr</name></decl></parameter>,
                                    <parameter><decl><type><name>int</name></type> <name>defStyleRes</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>defStyleAttr</name></expr></argument>, <argument><expr><name>defStyleRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    <constructor><specifier>public</specifier> <name>CustomEditTextPreference</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defStyleAttr</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>defStyleAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    <constructor><specifier>public</specifier> <name>CustomEditTextPreference</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    <constructor><specifier>public</specifier> <name>CustomEditTextPreference</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/lib/DPIHelper.java" hash="800d93895cf4557c7430c14323e02b2352cc5923"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>Resources</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>TypedValue</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Helper class for DPI calc
 */</comment>
<class><specifier>public</specifier> class <name>DPIHelper</name> <block>{
    <comment type="block" format="javadoc">/**
     * Convert DP to Pixels
     *
     * @param r  Resource
     * @param dp dp to convert
     * @return pixels float
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>float</name></type> <name>DPIToPixels</name><parameter_list>(<parameter><decl><type><name>Resources</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dp</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>TypedValue</name><operator>.</operator><name>applyDimension</name></name><argument_list>(<argument><expr><name><name>TypedValue</name><operator>.</operator><name>COMPLEX_UNIT_DIP</name></name></expr></argument>, <argument><expr><name>dp</name></expr></argument>, <argument><expr><call><name><name>r</name><operator>.</operator><name>getDisplayMetrics</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/lib/CSVCustomFormat.java" hash="f744cdff8ca77bffe2d5bc570aee8e9ec5167279"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcel</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcelable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name><operator>.</operator><name>CSVFormat</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Serializable</name></name>;</import>

<comment type="block" format="javadoc">/**
 * CSV Custom Format
 * Ads multi-value per cell to the format
 */</comment>
<class><specifier>public</specifier> class <name>CSVCustomFormat</name> <super><implements>implements <name>Serializable</name>, <name>Parcelable</name></implements></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>CSVFormat</name></type> <name>format</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Character</name></type> <name>multiValueChar</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Character</name></type> <name>escapeMVChar</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>multiValueCharString</name></decl>;</decl_stmt> <comment type="line">// store for performance</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>escapeMVCharString</name></decl>;</decl_stmt> <comment type="line">// store for performance</comment>

    <comment type="block">/*
     * DEFAULT custom format using CSVFormat.DEFAULT and '/' for multi value (enabled)
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>CSVCustomFormat</name></type> <name>DEFAULT</name> <init>= <expr><operator>new</operator> <call><name>CSVCustomFormat</name><argument_list>(<argument><expr><call><name><name>CSVFormat</name><operator>.</operator><name>DEFAULT</name><operator>.</operator><name>withIgnoreSurroundingSpaces</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Custom Format with default multi value settings&lt;br&gt;
     *     Multi value is enabled and set to '/' char
     * @param format
     */</comment>
    <constructor><specifier>public</specifier> <name>CSVCustomFormat</name> <parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>CSVFormat</name></type> <name>format</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>format</name></expr></argument>,<argument><expr><literal type="char">'/'</literal></expr></argument>,<argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * New Custom Format
     * @param format CSVFormat
     * @param multiValueChar null disable multi value support
     * @param escapeMVChar null disable escaping support
     */</comment>
    <constructor><specifier>public</specifier> <name>CSVCustomFormat</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>CSVFormat</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Character</name></type> <name>multiValueChar</name></decl></parameter>,
                           <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Character</name></type> <name>escapeMVChar</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>multiValueChar</name></name> <operator>=</operator> <name>multiValueChar</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>escapeMVChar</name></name> <operator>=</operator> <name>escapeMVChar</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>multiValueCharString</name></name> <operator>=</operator> <ternary><condition><expr><name>multiValueChar</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>multiValueChar</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>escapeMVCharString</name></name> <operator>=</operator> <ternary><condition><expr><name>escapeMVChar</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>escapeMVChar</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>protected</specifier> <name>CSVCustomFormat</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>format</name> <operator>=</operator> <operator>(</operator><name>CSVFormat</name><operator>)</operator> <call><name><name>in</name><operator>.</operator><name>readSerializable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>tmpMultiValueChar</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>multiValueChar</name> <operator>=</operator> <ternary><condition><expr><name>tmpMultiValueChar</name> <operator>!=</operator> <name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>char</name><operator>)</operator> <name>tmpMultiValueChar</name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>tmpEscapeMVChar</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>escapeMVChar</name> <operator>=</operator> <ternary><condition><expr><name>tmpEscapeMVChar</name> <operator>!=</operator> <name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr> ?</condition><then> <expr><operator>(</operator><name>char</name><operator>)</operator> <name>tmpEscapeMVChar</name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>multiValueCharString</name></name> <operator>=</operator> <ternary><condition><expr><name>multiValueChar</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>multiValueChar</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>escapeMVCharString</name></name> <operator>=</operator> <ternary><condition><expr><name>escapeMVChar</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>escapeMVChar</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
    }</block></constructor>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>Creator</name><argument_list type="generic">&lt;<argument><name>CSVCustomFormat</name></argument>&gt;</argument_list></name></type> <name>CREATOR</name> <init>= <expr><operator>new</operator> <class><super><name><name>Creator</name><argument_list type="generic">&lt;<argument><name>CSVCustomFormat</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>CSVCustomFormat</name></type> <name>createFromParcel</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><operator>new</operator> <call><name>CSVCustomFormat</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name><name>CSVCustomFormat</name><index>[]</index></name></type> <name>newArray</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><operator>new</operator> <name><name>CSVCustomFormat</name><index>[<expr><name>size</name></expr>]</index></name></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <function><specifier>public</specifier> <type><name>CSVFormat</name></type> <name>getFormat</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>format</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Nullable</name></annotation>
    <specifier>public</specifier> <type><name>Character</name></type> <name>getMultiValueChar</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>multiValueChar</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Nullable</name></annotation>
    <specifier>public</specifier> <type><name>Character</name></type> <name>getEscapeMVChar</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>escapeMVChar</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isMultiValueEnabled</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>multiValueChar</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isMVEscapeEnabled</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>escapeMVChar</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a string representation of the multi-value char
     * @return
     */</comment>
    <function><specifier>public</specifier> <type><name>String</name></type> <name>getMultiValueCharString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>multiValueCharString</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a string representation of the escape multi-value char
     * @return
     */</comment>
    <function><specifier>public</specifier> <type><name>String</name></type> <name>getEscapeMVCharString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>escapeMVCharString</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns IgnoreSurroundingSpaces state for trimming&lt;br&gt;
     *     Can be set in CSVFormat with ignoreSurroundingSpaces
     * @return state
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>trim</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name><name>format</name><operator>.</operator><name>getIgnoreSurroundingSpaces</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>describeContents</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>writeToParcel</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>parcel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeSerializable</name></name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeSerializable</name></name><argument_list>(<argument><expr><name>multiValueChar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeSerializable</name></name><argument_list>(<argument><expr><name>escapeMVChar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>multiValueCharString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>escapeMVCharString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/lib/DatabaseContext.java" hash="e9daa940f8571fd105245f778a96d206a17fc4c5"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ContextWrapper</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>DatabaseErrorHandler</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>sqlite</name><operator>.</operator><name>SQLiteDatabase</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Adapted from http://stackoverflow.com/a/9168969
 */</comment>

<comment type="block" format="javadoc">/**
 * Custom database context, ignoring all other specifics and using only the privded file
 */</comment>
<class>class <name>DatabaseContext</name> <super><extends>extends <name>ContextWrapper</name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>DEBUG_CONTEXT</name> <init>= <expr><literal type="string">"DatabaseContext"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>File</name></type> <name>file</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Creates a new DatabaseContext, which will just use the specified file for any DB requests
     *
     * @param base
     * @param file
     */</comment>
    <constructor><specifier>public</specifier> <name>DatabaseContext</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>file</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>File</name></type> <name>getDatabasePath</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><name>file</name></expr>;</return>
    }</block></function>

    <comment type="block">/* this version is called for android devices &gt;= api-11. thank to @damccull for fixing this. */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>SQLiteDatabase</name></type> <name>openOrCreateDatabase</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name><name>SQLiteDatabase</name><operator>.</operator><name>CursorFactory</name></name></type> <name>factory</name></decl></parameter>, <parameter><decl><type><name>DatabaseErrorHandler</name></type> <name>errorHandler</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name>openOrCreateDatabase</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>factory</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block">/* this version is called for android devices &lt; api-11 */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>SQLiteDatabase</name></type> <name>openOrCreateDatabase</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name><name>SQLiteDatabase</name><operator>.</operator><name>CursorFactory</name></name></type> <name>factory</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>result</name> <init>= <expr><call><name><name>SQLiteDatabase</name><operator>.</operator><name>openOrCreateDatabase</name></name><argument_list>(<argument><expr><call><name>getDatabasePath</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// SQLiteDatabase result = super.openOrCreateDatabase(name, mode, factory);</comment>
        <if>if <condition>(<expr><call><name><name>Log</name><operator>.</operator><name>isLoggable</name></name><argument_list>(<argument><expr><name>DEBUG_CONTEXT</name></expr></argument>, <argument><expr><name><name>Log</name><operator>.</operator><name>WARN</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>DEBUG_CONTEXT</name></expr></argument>, <argument><expr><literal type="string">"openOrCreateDatabase("</literal> <operator>+</operator> <name>name</name> <operator>+</operator> <literal type="string">",,) = "</literal> <operator>+</operator> <call><name><name>result</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
}</block></class></unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/lib/Function.java" hash="b3b1d8efd12b2402c0624c662fa7f7165233813a"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name></name>;</package>

<comment type="block" format="javadoc">/**
 * Simple pre API level 24 re-implementation of java.util.function.Function
 * @param &lt;R&gt; return type
 * @param &lt;P&gt; param type
 */</comment>
<interface><specifier>public</specifier> interface <name><name>Function</name><parameter_list>&lt;<parameter><name>R</name></parameter>,<parameter><name>P</name></parameter>&gt;</parameter_list></name> <block>{
    <comment type="block" format="javadoc">/**
     * Function to pass
     * @param param Param of function
     * @return Return value
     */</comment>
    <function_decl><type><name>R</name></type> <name>function</name><parameter_list>(<parameter><decl><type><name>P</name></type> <name>param</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></interface>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/lib/Formatter.java" hash="552b32a9a25b6e9d3206db4c5cfe33d42f695f8d"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>DecimalFormat</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Formatter&lt;br&gt;
 * Help library with consts and custom formats
 */</comment>
<class><specifier>public</specifier> class <name>Formatter</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><literal type="string">"Formatter"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>DecimalFormat</name></type> <name>formatBytes</name> <init>= <expr><operator>new</operator> <call><name>DecimalFormat</name><argument_list>(<argument><expr><literal type="string">"#,##0.#"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>USE_SI</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>units</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"B"</literal></expr>, <expr><literal type="string">"KB"</literal></expr>, <expr><literal type="string">"MB"</literal></expr>, <expr><literal type="string">"GB"</literal></expr>, <expr><literal type="string">"TB"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>unit_si</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"B"</literal></expr>, <expr><literal type="string">"KiB"</literal></expr>, <expr><literal type="string">"MiB"</literal></expr>, <expr><literal type="string">"GiB"</literal></expr>, <expr><literal type="string">"TiB"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Format bytes to human readable string
     *
     * @param i bytes amount
     * @return String, for ex. 5,4MiB
     */</comment>
    <function><specifier>public</specifier> <type><name>String</name></type> <name>formatBytes</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="string">"0"</literal></expr>;</return></block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>digitGroups</name> <init>= <expr><call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>log10</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name><name>Math</name><operator>.</operator><name>log10</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>USE_SI</name></expr> ?</condition><then> <expr><literal type="number">1024</literal></expr> </then><else>: <expr><literal type="number">1000</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>formatBytes</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>i</name> <operator>/</operator> <call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>USE_SI</name></expr> ?</condition><then> <expr><literal type="number">1024</literal></expr> </then><else>: <expr><literal type="number">1000</literal></expr></else></ternary></expr></argument>, <argument><expr><name>digitGroups</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>USE_SI</name></expr> ?</condition><then> <expr><name><name>unit_si</name><index>[<expr><name>digitGroups</name></expr>]</index></name></expr> </then><else>: <expr><name><name>units</name><index>[<expr><name>digitGroups</name></expr>]</index></name></expr></else></ternary><operator>)</operator></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Format file length
     *
     * @param file
     * @return (empty) String with the file length
     */</comment>
    <function><specifier>public</specifier> <type><name>String</name></type> <name>formatFileLength</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>File</name></type> <name>file</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>file</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>file</name><operator>.</operator><name>isFile</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>formatBytes</name><argument_list>(<argument><expr><call><name><name>file</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><literal type="string">""</literal></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Change SI notation usage
     *
     * @param use_si
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>changeSI</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>use_si</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>USE_SI</name> <operator>=</operator> <name>use_si</name></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/lib/MultiMeaningHandler.java" hash="1c17fd99a564be57f6e30c6c1f1367782d2f1431"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Multi meaning handler
 */</comment>
<class><specifier>public</specifier> class <name>MultiMeaningHandler</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>CSVCustomFormat</name></type> <name>cFormat</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>escapedEscapeChar</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>escapedMChar</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>ERROR_MSG_FORMAT</name> <init>= <expr><literal type="string">"Can't format multi meaning without supporting format!"</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * New multi meaning handler
     * @param cFormat Format to use
     */</comment>
    <constructor><specifier>public</specifier> <name>MultiMeaningHandler</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>CSVCustomFormat</name></type> <name>cFormat</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cFormat</name></name> <operator>=</operator> <name>cFormat</name></expr>;</expr_stmt>

        <comment type="line">//setup for performance</comment>
        <if>if<condition>(<expr><call><name><name>cFormat</name><operator>.</operator><name>getEscapeMVChar</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>escapedEscapeChar</name> <operator>=</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><call><name><name>cFormat</name><operator>.</operator><name>getEscapeMVChar</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cFormat</name><operator>.</operator><name>getEscapeMVChar</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>escapedMChar</name> <operator>=</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><call><name><name>cFormat</name><operator>.</operator><name>getEscapeMVChar</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cFormat</name><operator>.</operator><name>getMultiValueChar</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>escapedEscapeChar</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>escapedMChar</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        }</block></else></if>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * Convert multi-meaning formatted string to a list of meanings&lt;br&gt;
     *     Does nothing if no escape / multi-value char is set
     * @param input Input string
     * @return List of meanings
     */</comment>
    <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>parseMultiMeaning</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>input</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>meanings</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>escaped</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>trim</name> <init>= <expr><call><name><name>cFormat</name><operator>.</operator><name>getFormat</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getIgnoreSurroundingSpaces</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>handleEscape</name> <init>= <expr><call><name><name>cFormat</name><operator>.</operator><name>getMultiValueChar</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;</operator> <call><name><name>cFormat</name><operator>.</operator><name>getEscapeMVChar</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>handleMultiValue</name> <init>= <expr><call><name><name>cFormat</name><operator>.</operator><name>getMultiValueChar</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>input</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>escaped</name></expr>)</condition><then><block>{
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>escaped</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            }</block></then> <elseif>else <if>if<condition>(<expr><name>handleEscape</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <call><name><name>cFormat</name><operator>.</operator><name>getEscapeMVChar</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
                <expr_stmt><expr><name>escaped</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            }</block></then></if></elseif> <elseif>else <if>if<condition>(<expr><name>handleMultiValue</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <call><name><name>cFormat</name><operator>.</operator><name>getMultiValueChar</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>meanings</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>trim</name></expr> ?</condition><then> <expr><call><name><name>builder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>builder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setLength</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// reset builder</comment>
            }</block></then></if></elseif> <else>else <block>{
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
        <if>if<condition>(<expr><call><name><name>builder</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name><name>meanings</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>trim</name></expr> ?</condition><then> <expr><call><name><name>builder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>builder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <return>return <expr><name>meanings</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Convert multi meanings to multi-meaning formatted string
     * @param meanings List of meanings to format
     * @return multi-meaning formatted String
     */</comment>
    <function><specifier>public</specifier> <type><name>String</name></type> <name>formatMultiMeaning</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>meanings</name></decl></parameter>)</parameter_list> <block>{
        <if>if<condition>(<expr><call><name><name>cFormat</name><operator>.</operator><name>getMultiValueChar</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><name>ERROR_MSG_FORMAT</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>boolean</name></type> <name>first</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>String</name></type> <name>meaning</name> <range>: <expr><name>meanings</name></expr></range></decl></init>)</control> <block>{ <comment type="line">// do not use streams for builder performance?</comment>
            <if>if<condition>(<expr><name>first</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>cFormat</name><operator>.</operator><name>getMultiValueChar</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <if>if<condition>(<expr><name>escapedEscapeChar</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(
                    <argument><expr><call><name><name>meaning</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><call><name><name>cFormat</name><operator>.</operator><name>getEscapeMVCharString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>escapedEscapeChar</name></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><call><name><name>cFormat</name><operator>.</operator><name>getMultiValueCharString</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>escapedMChar</name></expr></argument>)</argument_list></call></expr></argument>
                )</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>meaning</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
        <return>return <expr><call><name><name>builder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/lib/ParcableTools.java" hash="276a488508c9194a46dd13f56a91f70062b394d1"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcel</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Date</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Tools to help making stuff parable
 */</comment>
<class><specifier>public</specifier> class <name>ParcableTools</name> <block>{
    <comment type="block" format="javadoc">/**
     * Read boolean from parcel
     * @param in
     * @return
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>readParcableBool</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Parcel</name></type> <name>in</name></decl></parameter>)</parameter_list><block>{
        <return>return <expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Write boolean to pacel
     * @param in
     * @param data
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>writeParcableBool</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Parcel</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>data</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>writeInt</name></name><argument_list>( <argument><expr><ternary><condition><expr><name>data</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Read date from parcel
     * @param in
     * @return null if -1 as value
     */</comment>
    <function><annotation>@<name>Nullable</name></annotation>
    <specifier>public</specifier> <specifier>static</specifier> <type><name>Date</name></type> <name>readParcableDate</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Parcel</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>data</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>readLong</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>data</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Write date to parcel
     * @param in
     * @param data Date, can be null
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>writeParcableDate</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Parcel</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Date</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{
        <if>if<condition>(<expr><name>data</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>writeLong</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>writeLong</name></name><argument_list>(<argument><expr><call><name><name>data</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/lib/Trainer/TrainerInput.java" hash="f5a0b930a092518b56e2fe6d781c21bcd39f01e8"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Trainer</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Input element for the trainer
 */</comment>
<interface><specifier>public</specifier> interface <name>TrainerInput</name> <block>{
    <enum>enum <name>INPUT_STATE</name> <block>{
        <decl><name>VALID</name></decl>,<decl><name>INVALID</name></decl>,<decl><name>DUPLICATE</name></decl>
    }</block></enum>
    <comment type="block" format="javadoc">/**
     * Get data of input
     * @return Input data to verify&lt;br&gt;
     *     The order of elements is expected to correlate with the no for setInputState
     */</comment>
    <function_decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getData</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Set state of input
     * @param input Input no
     * @param newState New state
     */</comment>
    <function_decl><type><name>void</name></type> <name>setInputState</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>INPUT_STATE</name></type> <name>newState</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Set input to specified value
     * @param input Input no
     * @param newValue New Value
     */</comment>
    <function_decl><type><name>void</name></type> <name>setInputValue</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>newValue</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Set amount of input elements
     * @param newAmount New Amount
     */</comment>
    <function_decl><type><name>void</name></type> <name>setAmountInputs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>newAmount</name></decl></parameter>)</parameter_list>;</function_decl>
}</block></interface>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/lib/Storage/BasicFileEntry.java" hash="188b1cb704b316f15c05ab2fb4270a89750cdfe8"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name></name>;</package>

<comment type="block" format="javadoc">/**
 * Basic File entry only holding size &amp; name
 */</comment>
<class><specifier>public</specifier> class <name>BasicFileEntry</name> <block>{
    <comment type="line">// type integer ids, to be used by constructor callers</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>TYPE_FILE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>TYPE_DIR</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>TYPE_UP</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>iSize</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>size</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>typeID</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>boolean</name></type> <name>underline</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * New Basic FileEntry
     *
     * @param name      entry name column
     * @param size      String for size column
     * @param iSize     long for size comparision
     * @param typeID    int for specifying the type of this entry (fe.: virtual entry)
     * @param underline underline this entry if true
     */</comment>
    <constructor><specifier>public</specifier> <name>BasicFileEntry</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>long</name></type> <name>iSize</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>typeID</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>underline</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>typeID</name></name> <operator>=</operator> <name>typeID</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>underline</name></name> <operator>=</operator> <name>underline</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>iSize</name></name> <operator>=</operator> <name>iSize</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>name</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getSize</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>size</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isUnderline</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>underline</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>getTypeID</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>typeID</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>long</name></type> <name>getISize</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>iSize</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/lib/SessionStorageManager.java" hash="dfbeaebed642388c45351529a1544c0003daab1a"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>sqlite</name><operator>.</operator><name>SQLiteStatement</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>

<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>TrainerSettings</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>VEntry</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>VList</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Trainer</name><operator>.</operator><name>Trainer</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Manager for sessions, loading saving of settings
 */</comment>
<class><specifier>public</specifier> class <name>SessionStorageManager</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>KEY_SOLVE_TIMES_TO</name> <init>= <expr><literal type="string">"t_solve"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>KEY_MODE</name> <init>= <expr><literal type="string">"mode"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>KEY_TIPS_ALLOWED</name> <init>= <expr><literal type="string">"tips"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>KEY_GIVEN_TIPS</name> <init>= <expr><literal type="string">"t_tips_given"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>KEY_FAILED</name> <init>= <expr><literal type="string">"t_failed"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>KEY_CASE_SENSITIVE</name> <init>= <expr><literal type="string">"t_case_sensitive"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>KEY_VOCABLE_ID</name> <init>= <expr><literal type="string">"t_last_voc_id"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>KEY_VOCABLE_LST_ID</name> <init>= <expr><literal type="string">"t_last_lst_id"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>KEY_TRIM_SPACES</name> <init>= <expr><literal type="string">"t_trim_spaces"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>KEY_ADDITION_AUTO</name> <init>= <expr><literal type="string">"t_addition_auto"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>BIND_KEY</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>BIND_VAL</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>Database</name></type> <name>db</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Create a new session storage manager
     *
     * @param db Database to use
     */</comment>
    <constructor><specifier>public</specifier> <name>SessionStorageManager</name><parameter_list>(<parameter><decl><type><name>Database</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>db</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * Save session settings
     *
     * @param settings
     * @return
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>saveSession</name><parameter_list>(<parameter><decl><type><name>TrainerSettings</name></type> <name>settings</name></decl></parameter>)</parameter_list> <block>{
        <if>if<condition>(<expr><name>settings</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>Writer</name></type> <name>w</name> <init>= <expr><operator>new</operator> <call><name>Writer</name><argument_list>(<argument><expr><name>settings</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>w</name><operator>.</operator><name>write</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Load TrainerSettings
     * @return null on failure
     */</comment>
    <function><specifier>public</specifier> <type><name>TrainerSettings</name></type> <name>loadSession</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>Loader</name></type> <name>l</name> <init>= <expr><operator>new</operator> <call><name>Loader</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>l</name><operator>.</operator><name>load</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Write vocable
     * @param entry
     * @return true on success
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>saveLastVoc</name><parameter_list>(<parameter><decl><type><name>VEntry</name></type> <name>entry</name></decl></parameter>)</parameter_list><block>{
        <decl_stmt><decl><type><name>Writer</name></type> <name>w</name> <init>= <expr><operator>new</operator> <call><name>Writer</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>,<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>w</name><operator>.</operator><name>writeVocable</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Save table selection for session
     * @param lists
     * @return true on success
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>saveSessionTbls</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>VList</name></argument>&gt;</argument_list></name></type> <name>lists</name></decl></parameter>)</parameter_list><block>{
        <return>return <expr><call><name><name>db</name><operator>.</operator><name>createSession</name></name><argument_list>(<argument><expr><name>lists</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Load table selection of session
     * @return
     */</comment>
    <function><specifier>public</specifier> <type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>VList</name></argument>&gt;</argument_list></name></type> <name>loadSessionTbls</name><parameter_list>()</parameter_list><block>{
        <return>return <expr><call><name><name>db</name><operator>.</operator><name>getSessionTables</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Loader class, handling session loading from db
     */</comment>
    <class><specifier>private</specifier> class <name>Loader</name> <block>{
        <decl_stmt><decl><specifier>private</specifier> <type><name>Database</name></type> <name>db</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><name>SQLiteStatement</name></type> <name>stm</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>map</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Creates a new loader&lt;br&gt;
         *     call load() to actually load a session
         * @param db
         */</comment>
        <constructor><specifier>public</specifier> <name>Loader</name><parameter_list>(<parameter><decl><type><name>Database</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>db</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="block" format="javadoc">/**
         * Does the actual loading
         * @return null on errors
         */</comment>
        <function><specifier>public</specifier> <type><name>TrainerSettings</name></type> <name>load</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><name>map</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>getSessionData</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>map</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            }</block></then></if>
            <decl_stmt><decl><type><name>int</name></type> <name>failed</name> <init>= <expr><call><name>getInt</name><argument_list>(<argument><expr><name>KEY_FAILED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Trainer</name><operator>.</operator><name>TEST_MODE</name></name></type> <name>mode</name> <init>= <expr><call><name><name>Trainer</name><operator>.</operator><name>TEST_MODE</name><operator>.</operator><name>fromInt</name></name><argument_list>(<argument><expr><call><name>getInt</name><argument_list>(<argument><expr><name>KEY_MODE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>tips</name> <init>= <expr><call><name>getInt</name><argument_list>(<argument><expr><name>KEY_GIVEN_TIPS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>timesToSolve</name> <init>= <expr><call><name>getInt</name><argument_list>(<argument><expr><name>KEY_SOLVE_TIMES_TO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>allowTips</name> <init>= <expr><call><name>getBoolean</name><argument_list>(<argument><expr><name>KEY_TIPS_ALLOWED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>caseSensitive</name> <init>= <expr><call><name>getBoolean</name><argument_list>(<argument><expr><name>KEY_CASE_SENSITIVE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>trimSpaces</name> <init>= <expr><call><name>getBoolean</name><argument_list>(<argument><expr><name>KEY_TRIM_SPACES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>additionAuto</name> <init>= <expr><call><name>getBoolean</name><argument_list>(<argument><expr><name>KEY_ADDITION_AUTO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>VEntry</name></type> <name>entry</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><call><name><name>map</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>KEY_VOCABLE_ID</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>map</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>KEY_VOCABLE_LST_ID</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
                <decl_stmt><decl><type><name>int</name></type> <name>vocID</name> <init>= <expr><call><name>getInt</name><argument_list>(<argument><expr><name>KEY_VOCABLE_ID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>lstID</name> <init>= <expr><call><name>getInt</name><argument_list>(<argument><expr><name>KEY_VOCABLE_LST_ID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>getVocable</name></name><argument_list>(<argument><expr><name>vocID</name></expr></argument>,<argument><expr><name>lstID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <return>return <expr><operator>new</operator> <call><name>TrainerSettings</name><argument_list>(<argument><expr><name>timesToSolve</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>allowTips</name></expr></argument>,<argument><expr><name>tips</name></expr></argument>,<argument><expr><name>failed</name></expr></argument>,<argument><expr><name>caseSensitive</name></expr></argument>,<argument><expr><name>entry</name></expr></argument>,<argument><expr><name>trimSpaces</name></expr></argument>, <argument><expr><name>additionAuto</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="block" format="javadoc">/**
         * Get int from map
         * @param key
         * @return
         */</comment>
        <function><specifier>private</specifier> <type><name>int</name></type> <name>getInt</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list><block>{
            <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="block" format="javadoc">/**
         * Get boolean from map
         * @param key
         * @return
         */</comment>
        <function><specifier>private</specifier> <type><name>boolean</name></type> <name>getBoolean</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list><block>{
            <return>return <expr><call><name><name>Boolean</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Writer class, handling session writing to DB
     */</comment>
    <class><specifier>private</specifier> class <name>Writer</name> <block>{
        <decl_stmt><decl><type><name>TrainerSettings</name></type> <name>settings</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SQLiteStatement</name></type> <name>stm</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Creates a new writer&lt;br&gt;
         * call write() to actually insert the settings
         *
         * @param settings
         * @param db
         */</comment>
        <constructor><specifier>public</specifier> <name>Writer</name><parameter_list>(<parameter><decl><type><name>TrainerSettings</name></type> <name>settings</name></decl></parameter>, <parameter><decl><type><name>Database</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>settings</name></name> <operator>=</operator> <name>settings</name></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="block" format="javadoc">/**
         * Prepares writing, init statement
         */</comment>
        <function><specifier>private</specifier> <type><name>void</name></type> <name>prepareWrite</name><parameter_list>()</parameter_list><block>{
            <expr_stmt><expr><name>stm</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>getSessionInsertStm</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="block" format="javadoc">/**
         * End write
         * @param success commits changes on true
         */</comment>
        <function><specifier>private</specifier> <type><name>void</name></type> <name>endWrite</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>success</name></decl></parameter>)</parameter_list><block>{
            <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>endSessionTransaction</name></name><argument_list>(<argument><expr><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="block" format="javadoc">/**
         * Writes data to DB
         *
         * @return true on success
         */</comment>
        <function><specifier>public</specifier> <type><name>boolean</name></type> <name>write</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><literal type="string">"write"</literal></expr></argument>,<argument><expr><literal type="string">"entry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>prepareWrite</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>success</name> <init>= <expr><call><name>write_</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>endWrite</name><argument_list>(<argument><expr><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>success</name></expr>;</return>
        }</block></function>

        <comment type="block" format="javadoc">/**
         * Inner writing function, not caring about transactions, stm etc
         * @return true on success
         */</comment>
        <function><specifier>private</specifier> <type><name>boolean</name></type> <name>write_</name><parameter_list>()</parameter_list> <block>{
            <if>if <condition>(<expr><call><name>exec</name><argument_list>(<argument><expr><name>KEY_MODE</name></expr></argument>, <argument><expr><call><name><name>settings</name><operator>.</operator><name>mode</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
            <if>if <condition>(<expr><call><name>exec</name><argument_list>(<argument><expr><name>KEY_GIVEN_TIPS</name></expr></argument>, <argument><expr><name><name>settings</name><operator>.</operator><name>tipsGiven</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
            <if>if <condition>(<expr><call><name>exec</name><argument_list>(<argument><expr><name>KEY_FAILED</name></expr></argument>, <argument><expr><name><name>settings</name><operator>.</operator><name>timesFailed</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
            <if>if <condition>(<expr><call><name>exec</name><argument_list>(<argument><expr><name>KEY_SOLVE_TIMES_TO</name></expr></argument>, <argument><expr><name><name>settings</name><operator>.</operator><name>timesToSolve</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
            <if>if <condition>(<expr><call><name>exec</name><argument_list>(<argument><expr><name>KEY_TIPS_ALLOWED</name></expr></argument>,<argument><expr><name><name>settings</name><operator>.</operator><name>allowTips</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
            <if>if <condition>(<expr><call><name>exec</name><argument_list>(<argument><expr><name>KEY_CASE_SENSITIVE</name></expr></argument>,<argument><expr><name><name>settings</name><operator>.</operator><name>caseSensitive</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
            <if>if <condition>(<expr><call><name>exec</name><argument_list>(<argument><expr><name>KEY_TRIM_SPACES</name></expr></argument>,<argument><expr><name><name>settings</name><operator>.</operator><name>trimSpaces</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
            <if>if <condition>(<expr><call><name>exec</name><argument_list>(<argument><expr><name>KEY_ADDITION_AUTO</name></expr></argument>,<argument><expr><name><name>settings</name><operator>.</operator><name>additionAuto</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
            <if>if <condition>(<expr><operator>!</operator><call><name>writeVocable_</name><argument_list>(<argument><expr><name><name>settings</name><operator>.</operator><name>questioning</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>

            <expr_stmt><expr><call><name><name>stm</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></function>

        <comment type="block" format="javadoc">/**
         * Write vocable&lt;br&gt;
         *     public method doing prepare &amp; commit
         * @param entry
         * @return true on success
         */</comment>
        <function><specifier>public</specifier> <type><name>boolean</name></type> <name>writeVocable</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>VEntry</name></type> <name>entry</name></decl></parameter>)</parameter_list><block>{
            <expr_stmt><expr><call><name>prepareWrite</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>success</name> <init>= <expr><call><name>writeVocable_</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>endWrite</name><argument_list>(<argument><expr><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>success</name></expr>;</return>
        }</block></function>

        <comment type="block" format="javadoc">/**
         * Write vocable to session&lt;br&gt;
         *     internal, does not preapre &amp; commit changes
         * @param entry
         * @return true on success
         */</comment>
        <function><specifier>private</specifier> <type><name>boolean</name></type> <name>writeVocable_</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>VEntry</name></type> <name>entry</name></decl></parameter>)</parameter_list><block>{
            <if>if <condition>(<expr><name>entry</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
                <if>if<condition>(<expr><call><name>exec</name><argument_list>(<argument><expr><name>KEY_VOCABLE_ID</name></expr></argument>,<argument><expr><call><name><name>entry</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
                <if>if<condition>(<expr><call><name>exec</name><argument_list>(<argument><expr><name>KEY_VOCABLE_LST_ID</name></expr></argument>,<argument><expr><call><name><name>entry</name><operator>.</operator><name>getList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
            }</block></then></if>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></function>

        <comment type="block" format="javadoc">/**
         * @see {exec}
         * @param key
         * @param value
         * @return
         */</comment>
        <function><specifier>private</specifier> <type><name>boolean</name></type> <name>exec</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list><block>{
            <return>return <expr><call><name>exec</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="block" format="javadoc">/**
         * @see {exec}
         * @param key
         * @param value
         * @return
         */</comment>
        <function><specifier>private</specifier> <type><name>boolean</name></type> <name>exec</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><call><name>exec</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="block" format="javadoc">/**
         * Execute write for key, value
         *
         * @param key
         * @param value
         * @return false if &lt;b&gt;no errors&lt;/b&gt; occoured
         */</comment>
        <function><specifier>private</specifier> <type><name>boolean</name></type> <name>exec</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><literal type="string">"TrainerSettings"</literal></expr></argument>,<argument><expr><literal type="string">"writing"</literal><operator>+</operator><name>key</name><operator>+</operator><literal type="string">" "</literal><operator>+</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>stm</name><operator>.</operator><name>bindString</name></name><argument_list>(<argument><expr><name>BIND_KEY</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>stm</name><operator>.</operator><name>bindString</name></name><argument_list>(<argument><expr><name>BIND_VAL</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>stm</name><operator>.</operator><name>executeInsert</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><literal type="string">"TrainerSettings"</literal></expr></argument>, <argument><expr><literal type="string">"unable to insert key"</literal> <operator>+</operator> <name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            }</block></then> <else>else <block>{
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            }</block></else></if>
        }</block></function>
    }</block></class>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/lib/Storage/GenericSpinnerEntry.java" hash="ed39cd2917bed59ccb959de46bb25b26933b72b9"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name></name>;</package>

<comment type="block" format="javadoc">/**
 * Generic spinner entry
 *
 * @param &lt;T&gt; Object type for value of element
 */</comment>
<class><specifier>public</specifier> class <name><name>GenericSpinnerEntry</name><parameter_list>&lt;<parameter><name>T</name></parameter>&gt;</parameter_list></name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name>T</name></type> <name>object</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>displayText</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Create a new GenericSpinnerEntry
     *
     * @param object      Object bound with this selection
     * @param displayText Text to display for this element
     */</comment>
    <constructor><specifier>public</specifier> <name>GenericSpinnerEntry</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>object</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>displayText</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>object</name></name> <operator>=</operator> <name>object</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>displayText</name></name> <operator>=</operator> <name>displayText</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * Returns text to display for element
     *
     * @return
     */</comment>
    <function><specifier>private</specifier> <type><name>String</name></type> <name>getDisplayText</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>displayText</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getDisplayText</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns object bound by this element
     *
     * @return
     */</comment>
    <function><specifier>public</specifier> <type><name>T</name></type> <name>getObject</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>object</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/lib/Storage/FileEntry.java" hash="7b9c48ca7fd5c608378d17d1d0f9e6611f00d7a0"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>

<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Formatter</name></name>;</import>

<comment type="block" format="javadoc">/**
 * File VEntry holding also a real file
 */</comment>
<class><specifier>public</specifier> class <name>FileEntry</name> <super><extends>extends <name>BasicFileEntry</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>File</name></type> <name>file</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * New FileEntry
     *
     * @param file File
     * @param fmt  Formatter for length
     */</comment>
    <constructor><specifier>public</specifier> <name>FileEntry</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>File</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Formatter</name></type> <name>fmt</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><call><name><name>file</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>fmt</name><operator>.</operator><name>formatFileLength</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>file</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><call><name><name>file</name><operator>.</operator><name>isFile</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>TYPE_FILE</name></expr> </then><else>: <expr><name>TYPE_DIR</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><call><name><name>file</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>file</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>File</name></type> <name>getFile</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>file</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isFile</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>file</name><operator>.</operator><name>isFile</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/lib/Storage/TrainerSettings.java" hash="797d8ade0b4dd0c99662e313e26057c28e89ab97"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcel</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcelable</name></name>;</import>

<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Trainer</name><operator>.</operator><name>Trainer</name></name>;</import>

<import>import static <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>ParcableTools</name><operator>.</operator><name>readParcableBool</name></name>;</import>
<import>import static <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>ParcableTools</name><operator>.</operator><name>writeParcableBool</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Trainer settings obj
 * TODO: evaluate build pattern
 */</comment>
<class><specifier>public</specifier> class <name>TrainerSettings</name> <super><implements>implements <name>Parcelable</name></implements></super> <block>{
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>timesToSolve</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>Trainer</name><operator>.</operator><name>TEST_MODE</name></name></type> <name>mode</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>boolean</name></type> <name>allowTips</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>tipsGiven</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>timesFailed</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>boolean</name></type> <name>caseSensitive</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>boolean</name></type> <name>trimSpaces</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>boolean</name></type> <name>additionAuto</name></decl>;</decl_stmt>


    <comment type="block" format="javadoc">/**
     * Last questioning, outstanding vocable&lt;br&gt;
     * &lt;b&gt;Can be null!&lt;/b&gt;
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <type><name>VEntry</name></type> <name>questioning</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Create a new Trainer Settings storage with default starting values
     *
     * @param timesToSolve number of times each vocable has to be solved correct
     * @param mode training mode
     * @param allowTips allow tips
     * @param caseSensitive check input case sensitive
     * @param trimSpaces ignore sourrounding spaces (input &amp; output)
     * @param additionAuto Automatically show next after addition value
     */</comment>
    <constructor><specifier>public</specifier> <name>TrainerSettings</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>timesToSolve</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>Trainer</name><operator>.</operator><name>TEST_MODE</name></name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>allowTips</name></decl></parameter>,
                           <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>caseSensitive</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>trimSpaces</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>additionAuto</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>timesToSolve</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>allowTips</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>caseSensitive</name></expr></argument>,<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>trimSpaces</name></expr></argument>, <argument><expr><name>additionAuto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * Create a new Trainer Settings storage
     *
     * @param timesToSolve number of times each vocable has to be solved correct
     * @param mode training mode
     * @param allowTips allow tips
     * @param tipsGiven number of tips given already (session continue)
     * @param failedTimes number of times a vocable was entered wrong (session continue)
     * @param caseSensitive check input case sensitive
     * @param questioning last entry displayed (unsolved,session continue)
     * @param trimSpaces trim surrounding spaces (input &amp; solution)
     */</comment>
    <constructor><specifier>public</specifier> <name>TrainerSettings</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>timesToSolve</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>Trainer</name><operator>.</operator><name>TEST_MODE</name></name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>allowTips</name></decl></parameter>,
                           <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>tipsGiven</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>failedTimes</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>caseSensitive</name></decl></parameter>,
                           <parameter><decl><type><specifier>final</specifier> <name>VEntry</name></type> <name>questioning</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>trimSpaces</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>additionAuto</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>timesToSolve</name></name> <operator>=</operator> <name>timesToSolve</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>allowTips</name></name> <operator>=</operator> <name>allowTips</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tipsGiven</name></name> <operator>=</operator> <name>tipsGiven</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>timesFailed</name></name> <operator>=</operator> <name>failedTimes</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>caseSensitive</name></name> <operator>=</operator> <name>caseSensitive</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>questioning</name></name> <operator>=</operator> <name>questioning</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>trimSpaces</name></name> <operator>=</operator> <name>trimSpaces</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>additionAuto</name></name> <operator>=</operator> <name>additionAuto</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * Parcel constructor
     * @param in
     */</comment>
    <constructor><specifier>protected</specifier> <name>TrainerSettings</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>in</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>timesToSolve</name></name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <call><name><name>Trainer</name><operator>.</operator><name>TEST_MODE</name><operator>.</operator><name>fromInt</name></name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>allowTips</name></name> <operator>=</operator> <call><name>readParcableBool</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tipsGiven</name></name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>timesFailed</name></name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>caseSensitive</name></name> <operator>=</operator> <call><name>readParcableBool</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>questioning</name></name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readParcelable</name></name><argument_list>(<argument><expr><call><name><name>VEntry</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getClassLoader</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>trimSpaces</name></name> <operator>=</operator> <call><name>readParcableBool</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>additionAuto</name></name> <operator>=</operator> <call><name>readParcableBool</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>Creator</name><argument_list type="generic">&lt;<argument><name>TrainerSettings</name></argument>&gt;</argument_list></name></type> <name>CREATOR</name> <init>= <expr><operator>new</operator> <class><super><name><name>Creator</name><argument_list type="generic">&lt;<argument><name>TrainerSettings</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>TrainerSettings</name></type> <name>createFromParcel</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><operator>new</operator> <call><name>TrainerSettings</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name><name>TrainerSettings</name><index>[]</index></name></type> <name>newArray</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><operator>new</operator> <name><name>TrainerSettings</name><index>[<expr><name>size</name></expr>]</index></name></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>describeContents</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>writeToParcel</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>parcel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name>timesToSolve</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>mode</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>writeParcableBool</name><argument_list>(<argument><expr><name>parcel</name></expr></argument>,<argument><expr><name>allowTips</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name>tipsGiven</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name>timesFailed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>writeParcableBool</name><argument_list>(<argument><expr><name>parcel</name></expr></argument>,<argument><expr><name>caseSensitive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeParcelable</name></name><argument_list>(<argument><expr><name>questioning</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>writeParcableBool</name><argument_list>(<argument><expr><name>parcel</name></expr></argument>,<argument><expr><name>trimSpaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>writeParcableBool</name><argument_list>(<argument><expr><name>parcel</name></expr></argument>,<argument><expr><name>additionAuto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/lib/Trainer/Trainer.java" hash="dcccdfc8c25c051e856f95dda6ac45721ba26e1a"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Trainer</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcel</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcelable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Random</name></name>;</import>

<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Database</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>SessionStorageManager</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>TrainerSettings</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>VEntry</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>VList</name></name>;</import>

<import>import static <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>ParcableTools</name><operator>.</operator><name>readParcableBool</name></name>;</import>
<import>import static <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>ParcableTools</name><operator>.</operator><name>writeParcableBool</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Trainer class
 */</comment>
<class><specifier>public</specifier> class <name>Trainer</name> <super><implements>implements <name>Parcelable</name></implements></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><literal type="string">"Trainer"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Random</name></type> <name>rng</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>AB_MODE</name></type> <name>order</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>VList</name></argument>&gt;</argument_list></name></type> <name>lists</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>VList</name></argument>&gt;</argument_list></name></type> <name>unsolvedLists</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>VEntry</name></type> <name>cVocable</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>tips</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>total</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>unsolved</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>failed</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>timesToSolve</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>timesShowedSolution</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>showedSolution</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Database</name></type> <name>db</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>TrainerSettings</name></type> <name>settings</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>SessionStorageManager</name></type> <name>ssm</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>firstTimeVocLoad</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>lastAddition</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Creates a new Trainer
     *
     * @param lists     Vocable lists to use
     * @param settings   Trainer settings storage
     * @param newSession whether this is a new or a continued session
     */</comment>
    <constructor><specifier>public</specifier> <name>Trainer</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>VList</name></argument>&gt;</argument_list></name></type> <name>lists</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>TrainerSettings</name></type> <name>settings</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>newSession</name></decl></parameter>,
                   <parameter><decl><type><specifier>final</specifier> <name>SessionStorageManager</name></type> <name>ssm</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>lists</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>lists</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>settings</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw></block></then></if>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>settings</name></name> <operator>=</operator> <name>settings</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tips</name></name> <operator>=</operator> <name><name>settings</name><operator>.</operator><name>tipsGiven</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>failed</name></name> <operator>=</operator> <name><name>settings</name><operator>.</operator><name>timesFailed</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lists</name></name> <operator>=</operator> <name>lists</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lastAddition</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>timesToSolve</name></name> <operator>=</operator> <name><name>settings</name><operator>.</operator><name>timesToSolve</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unsolvedLists</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ssm</name></name> <operator>=</operator> <name>ssm</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>timesShowedSolution</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt><comment type="line">//todo: load from params</comment>
        <expr_stmt><expr><name>db</name> <operator>=</operator> <operator>new</operator> <call><name>Database</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rng</name> <operator>=</operator> <operator>new</operator> <call><name>Random</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>newSession</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>wipeSession</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><name>firstTimeVocLoad</name> <operator>=</operator> <name><name>settings</name><operator>.</operator><name>questioning</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>;</expr_stmt> <comment type="line">// load voc from settings.questioning</comment>
        <expr_stmt><expr><call><name>getTableData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>prepareData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>getNext</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>Creator</name><argument_list type="generic">&lt;<argument><name>Trainer</name></argument>&gt;</argument_list></name></type> <name>CREATOR</name> <init>= <expr><operator>new</operator> <class><super><name><name>Creator</name><argument_list type="generic">&lt;<argument><name>Trainer</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>Trainer</name></type> <name>createFromParcel</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><operator>new</operator> <call><name>Trainer</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name><name>Trainer</name><index>[]</index></name></type> <name>newArray</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><operator>new</operator> <name><name>Trainer</name><index>[<expr><name>size</name></expr>]</index></name></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Save vocable state&lt;br&gt;
     *  saves last vocable in question for later continue
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>saveVocState</name><parameter_list>()</parameter_list><block>{
        <if>if<condition>(<expr><operator>!</operator><call><name><name>ssm</name><operator>.</operator><name>saveLastVoc</name></name><argument_list>(<argument><expr><name>cVocable</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"unable to save vocable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Wipe DB from (previous) session
     *
     * @return true on success
     */</comment>
    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>wipeSession</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>db</name><operator>.</operator><name>wipeSessionPoints</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Calculate totals etc
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>prepareData</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>total</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>unsolved</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>VList</name></type> <name>tbl</name> <range>: <expr><name>lists</name></expr></range></decl></init>)</control> <block>{
            <expr_stmt><expr><name>total</name> <operator>+=</operator> <call><name><name>tbl</name><operator>.</operator><name>getTotalVocs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>unsolved</name> <operator>+=</operator> <call><name><name>tbl</name><operator>.</operator><name>getUnfinishedVocs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Retrieve information from DB
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>getTableData</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>getSessionTableData</name></name><argument_list>(<argument><expr><name>lists</name></expr></argument>, <argument><expr><name>unsolvedLists</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the solution of the current vocable
     *
     * @return
     */</comment>
    <function><specifier>public</specifier> <type><name>String</name></type> <name>getSolution</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"getSolution"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>timesShowedSolution</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>showedSolution</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <return>return <expr><call><name>getSolutionUnchecked</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>getSolutions</name><parameter_list>(<parameter><decl><type><name>TrainerInput</name></type> <name>input</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><name>timesShowedSolution</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>showedSolution</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>solutions</name> <init>= <expr><call><name>getSolutionsUnchecked</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>solutions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <expr_stmt><expr><call><name><name>input</name><operator>.</operator><name>setInputValue</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name><name>solutions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Get addition for current vocable
     * @return
     */</comment>
    <function><specifier>public</specifier> <type><name>String</name></type> <name>getCurrentAddition</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>cVocable</name><operator>.</operator><name>getAddition</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getLastAddition</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>lastAddition</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Get whether the vocable has an addition or not
     * @return true if addition != ''
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasLastAddition</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>!</operator><call><name>getLastAddition</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the solution to the current vocable&lt;br&gt;
     *     Does not count it as failed.
     *
     *     &lt;br&gt;&lt;br&gt;
     *         not to be confused with getSolutionUnchecked
     * @return Solution
     */</comment>
    <function><specifier>public</specifier> <type><name>String</name></type> <name>getSolutionUncounted</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"getSolutionUncounted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>cVocable</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Null vocable!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="string">""</literal></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name>getSolutionUnchecked</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns all possible solutions&lt;br&gt;
     * No null checks are done or failed counter changes are made
     *
     * @return Solution
     */</comment>
    <function><specifier>private</specifier> <type><name>String</name></type> <name>getSolutionUnchecked</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>order</name> <operator>==</operator> <name><name>AB_MODE</name><operator>.</operator><name>A</name></name></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><call><name><name>cVocable</name><operator>.</operator><name>getAString</name></name><argument_list>()</argument_list></call></expr>;</return></block></then>
        <else>else
            <block type="pseudo"><return>return <expr><call><name><name>cVocable</name><operator>.</operator><name>getBString</name></name><argument_list>()</argument_list></call></expr>;</return></block></else></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns possible solutions
     * @return
     */</comment>
    <function><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getSolutionsUnchecked</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>order</name> <operator>==</operator> <name><name>AB_MODE</name><operator>.</operator><name>A</name></name></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><call><name><name>cVocable</name><operator>.</operator><name>getAMeanings</name></name><argument_list>()</argument_list></call></expr>;</return></block></then>
        <else>else
            <block type="pseudo"><return>return <expr><call><name><name>cVocable</name><operator>.</operator><name>getBMeanings</name></name><argument_list>()</argument_list></call></expr>;</return></block></else></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Check two strings for equality, taking case sensitive &amp; space ignore settings into account
     * @param a
     * @param b
     * @return true if they are equals according to this trainings settings
     */</comment>
    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
        <if>if<condition>(<expr><name><name>settings</name><operator>.</operator><name>trimSpaces</name></name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name><name>a</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name><name>b</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><name><name>this</name><operator>.</operator><name>settings</name><operator>.</operator><name>caseSensitive</name></name></expr>)</condition><then><block>{
            <return>return <expr><call><name><name>a</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then><else>else<block>{
            <return>return <expr><call><name><name>a</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Check is candidate is one of the possible solutions
     *
     * @param candidate
     * @return solution if candidate is a correct, null otherwise
     * TODO: use an java.util.Optional when api min version is &gt;= 24
     */</comment>
    <function><annotation>@<name>Nullable</name></annotation>
    <specifier>private</specifier> <type><name>String</name></type> <name>isSolution</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>candidate</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>solutions</name> <init>= <expr><call><name>getSolutionsUnchecked</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name><name>settings</name><operator>.</operator><name>trimSpaces</name></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>candidate</name> <operator>=</operator> <call><name><name>candidate</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>

        <for>for<control>(<init><decl><type><name>String</name></type> <name>solution</name> <range>: <expr><name>solutions</name></expr></range></decl></init>)</control><block>{
            <if>if<condition>(<expr><name><name>settings</name><operator>.</operator><name>trimSpaces</name></name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>solution</name> <operator>=</operator> <call><name><name>solution</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
            <if>if<condition>(<expr><name><name>this</name><operator>.</operator><name>settings</name><operator>.</operator><name>caseSensitive</name></name> <operator>&amp;&amp;</operator> <call><name><name>solution</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>candidate</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><name>solution</name></expr>;</return></block></then>
            <elseif>else <if>if<condition>(<expr><call><name><name>solution</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>candidate</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><name>solution</name></expr>;</return></block></then></if></elseif></if>
        }</block></for>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Check a multi-meaning input for correctness
     * @param tInput
     * @return true if all is valid
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>checkSolutions</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>TrainerInput</name></type> <name>tInput</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"checkSolutions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>bSolved</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>solutions</name> <init>= <expr><call><name><name>tInput</name><operator>.</operator><name>getData</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>correct</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>solution</name></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>solutions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <expr_stmt><expr><name>solution</name> <operator>=</operator> <call><name><name>solutions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>result</name> <init>= <expr><call><name>isSolution</name><argument_list>(<argument><expr><name>solution</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>result</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
                <if>if<condition>(<expr><call><name><name>correct</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
                    <expr_stmt><expr><call><name><name>tInput</name><operator>.</operator><name>setInputState</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>TrainerInput</name><operator>.</operator><name>INPUT_STATE</name><operator>.</operator><name>DUPLICATE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>correct</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>tInput</name><operator>.</operator><name>setInputState</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>TrainerInput</name><operator>.</operator><name>INPUT_STATE</name><operator>.</operator><name>VALID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>bSolved</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>tInput</name><operator>.</operator><name>setInputState</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>TrainerInput</name><operator>.</operator><name>INPUT_STATE</name><operator>.</operator><name>INVALID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>

        <if>if<condition>(<expr><name>bSolved</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>bSolved</name> <operator>=</operator> <call><name><name>correct</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>getSolutionsUnchecked</name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if<condition>(<expr><name>bSolved</name></expr>)</condition><then> <block>{
            <if>if<condition>(<expr><operator>!</operator><name>showedSolution</name></expr>)</condition><then> <block>{ <comment type="line">// do not count retrieved solution as correct</comment>
                <expr_stmt><expr><call><name><name>cVocable</name><operator>.</operator><name>incrCorrect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>accountVocable</name><argument_list>(<argument><expr><name>bSolved</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>showedSolution</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>failed</name></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cVocable</name><operator>.</operator><name>incrWrong</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>bSolved</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the amount of solution meanings
     * @return
     */</comment>
    <function><specifier>public</specifier> <type><name>int</name></type> <name>getAmountSolutionMeanings</name><parameter_list>()</parameter_list><block>{
        <return>return <expr><call><name>getSolutionsUnchecked</name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Checks for correct solution &lt;br&gt;
     *     Retrieves next vocable if correct
     *
     * @param tSolution input to be checked against the solution
     * @return true on tSolution is correct
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>checkSolution</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>tSolution</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"checkSolution"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>bSolved</name> <init>= <expr><call><name>isSolution</name><argument_list>(<argument><expr><name>tSolution</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>bSolved</name></expr>)</condition><then> <block>{
            <if>if<condition>(<expr><operator>!</operator><name>showedSolution</name></expr>)</condition><then> <block>{ <comment type="line">// do not count retrieved solution as correct</comment>
                <expr_stmt><expr><call><name><name>cVocable</name><operator>.</operator><name>incrCorrect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>accountVocable</name><argument_list>(<argument><expr><name>bSolved</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>showedSolution</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then><else>else <block>{
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>failed</name></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cVocable</name><operator>.</operator><name>incrWrong</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>bSolved</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/** Accounts vocable as passed based on the parameter.&lt;br&gt;
     *     This function is called from external when checkSolution does not apply.
     * @param correct true when the vocable was answered correct
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>accountVocable</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>correct</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"accountVocable(correct:"</literal><operator>+</operator><name>correct</name><operator>+</operator><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>cVocable</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Null vocable!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>correct</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>cVocable</name><operator>.</operator><name>setPoints</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>cVocable</name><operator>.</operator><name>getPoints</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><call><name><name>cVocable</name><operator>.</operator><name>getPoints</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>timesToSolve</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>VList</name></type> <name>tbl</name> <init>= <expr><call><name><name>cVocable</name><operator>.</operator><name>getList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>tbl</name><operator>.</operator><name>setUnfinishedVocs</name></name><argument_list>(<argument><expr><call><name><name>tbl</name><operator>.</operator><name>getUnfinishedVocs</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>tbl</name><operator>.</operator><name>getUnfinishedVocs</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>unsolvedLists</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if>if <condition>(<expr><call><name><name>unsolvedLists</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>deleteSession</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"finished"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"getting next"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getNext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * function for modes where checkSolution doesn't apply&lt;br&gt;
     *     reads next vocable &amp; accounts passed=false as solution showed &amp; failed
     * @param passed vocable answered correctly
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>updateVocable</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>passed</name></decl></parameter>)</parameter_list><block>{
        <if>if<condition>(<expr><operator>!</operator><name>passed</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>failed</name></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>timesShowedSolution</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cVocable</name><operator>.</operator><name>incrWrong</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>cVocable</name><operator>.</operator><name>incrCorrect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name>accountVocable</name><argument_list>(<argument><expr><name>passed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns true when all vocables are solved as many times as expected
     *
     * @return
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isFinished</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>unsolvedLists</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Update cVocable points
     *
     * @return true on success
     */</comment>
    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>updateVocable</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>db</name><operator>.</operator><name>updateEntryProgress</name></name><argument_list>(<argument><expr><name>cVocable</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Get next vocable
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>getNext</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>cVocable</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><operator>!</operator><call><name>updateVocable</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"unable to update vocable!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            }</block></then></if>
            <expr_stmt><expr><name>lastAddition</name> <operator>=</operator> <call><name><name>cVocable</name><operator>.</operator><name>getAddition</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>showedSolution</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name><name>unsolvedLists</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"no unsolved lists remaining!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>selected</name> <init>= <expr><call><name><name>rng</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><call><name><name>unsolvedLists</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>VList</name></type> <name>tbl</name> <init>= <expr><call><name><name>unsolvedLists</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>selected</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"Tbl: "</literal><operator>+</operator><name>tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>allowRepetition</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>cVocable</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>allowRepetition</name> <operator>=</operator> <call><name><name>unsolvedLists</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name><name>unsolvedLists</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getUnfinishedVocs</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"one left"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>tbl</name><operator>.</operator><name>getUnfinishedVocs</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name><name>tbl</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>cVocable</name><operator>.</operator><name>getList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <comment type="line">// selected table has only one entry left</comment>
                    <comment type="line">// prevent repeating last vocable of table</comment>
                    <if>if <condition>(<expr><name>selected</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <call><name><name>unsolvedLists</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><name>selected</name><operator>--</operator></expr>;</expr_stmt></block></then>
                    <else>else
                        <block type="pseudo"><expr_stmt><expr><name>selected</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
                    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"selectionID:"</literal> <operator>+</operator> <name>selected</name> <operator>+</operator> <literal type="string">" max(-1):"</literal> <operator>+</operator> <call><name><name>unsolvedLists</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>tbl</name> <operator>=</operator> <call><name><name>unsolvedLists</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>selected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></elseif></if>
            }</block></then></if>

            <if>if<condition>(<expr><name>firstTimeVocLoad</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>firstTimeVocLoad</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>cVocable</name> <operator>=</operator> <name><name>settings</name><operator>.</operator><name>questioning</name></name></expr>;</expr_stmt>
            }</block></then><else>else <block>{
                <expr_stmt><expr><name>cVocable</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>getRandomTrainerEntry</name></name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr><name>cVocable</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>, <argument><expr><name>allowRepetition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <if>if <condition>(<expr><name>cVocable</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>wtf</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"New vocable is null!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <decl_stmt><decl><type><name>boolean</name></type> <name>mode</name> <init>= <expr><name><name>settings</name><operator>.</operator><name>mode</name></name> <operator>==</operator> <name><name>TEST_MODE</name><operator>.</operator><name>A</name></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>settings</name><operator>.</operator><name>mode</name></name> <operator>==</operator> <name><name>TEST_MODE</name><operator>.</operator><name>RANDOM</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name><name>rng</name><operator>.</operator><name>nextBoolean</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>mode</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>order</name> <operator>=</operator> <name><name>AB_MODE</name><operator>.</operator><name>A</name></name></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>order</name> <operator>=</operator> <name><name>AB_MODE</name><operator>.</operator><name>B</name></name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the non-solution column of the vocable&lt;br&gt;
     * returns an empty string when there is no current vocable
     *
     * @return
     */</comment>
    <function><specifier>public</specifier> <type><name>String</name></type> <name>getQuestion</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>cVocable</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="string">""</literal></expr>;</return></block></then></if>

        <return>return <expr><ternary><condition><expr><name>order</name> <operator>==</operator> <name><name>AB_MODE</name><operator>.</operator><name>A</name></name></expr> ?</condition><then> <expr><call><name><name>cVocable</name><operator>.</operator><name>getBString</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>cVocable</name><operator>.</operator><name>getAString</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the tip, increasing the counter&lt;br&gt;
     * returns an empty string when there is no current vocable
     *
     * @return
     */</comment>
    <function><specifier>public</specifier> <type><name>String</name></type> <name>getTip</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>cVocable</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="string">""</literal></expr>;</return></block></then></if>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tips</name></name><operator>++</operator></expr>;</expr_stmt>
        <return>return <expr><call><name><name>cVocable</name><operator>.</operator><name>getTip</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the column name of the question&lt;br&gt;
     * returns an empty string when there is no current vocable
     *
     * @return
     */</comment>
    <function><specifier>public</specifier> <type><name>String</name></type> <name>getColumnNameExercise</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>cVocable</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="string">"ERROR: No Column Name!"</literal></expr>;</return></block></then></if>

        <return>return <expr><ternary><condition><expr><name>order</name> <operator>==</operator> <name><name>AB_MODE</name><operator>.</operator><name>A</name></name></expr> ?</condition><then> <expr><call><name><name>cVocable</name><operator>.</operator><name>getList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNameB</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>cVocable</name><operator>.</operator><name>getList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNameA</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the column name of the solution&lt;br&gt;
     * returns an empty string when there is no current vocable
     *
     * @return
     */</comment>
    <function><specifier>public</specifier> <type><name>String</name></type> <name>getColumnNameSolution</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>cVocable</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="string">"ERROR: No Column Name!"</literal></expr>;</return></block></then></if>

        <return>return <expr><ternary><condition><expr><name>order</name> <operator>==</operator> <name><name>AB_MODE</name><operator>.</operator><name>B</name></name></expr> ?</condition><then> <expr><call><name><name>cVocable</name><operator>.</operator><name>getList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNameB</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>cVocable</name><operator>.</operator><name>getList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNameA</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return remaining vocables
     */</comment>
    <function><specifier>public</specifier> <type><name>int</name></type> <name>remaining</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>unsolved</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return solved vocables
     */</comment>
    <function><specifier>public</specifier> <type><name>int</name></type> <name>solved</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>total</name> <operator>-</operator> <name>unsolved</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>describeContents</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Parcel constructor
     * @param in
     */</comment>
    <constructor><specifier>protected</specifier> <name>Trainer</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>order</name> <operator>=</operator> <ternary><condition><expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name><name>AB_MODE</name><operator>.</operator><name>A</name></name></expr> </then><else>: <expr><name><name>AB_MODE</name><operator>.</operator><name>B</name></name></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name>lists</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>createTypedArrayList</name></name><argument_list>(<argument><expr><name><name>VList</name><operator>.</operator><name>CREATOR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>unsolvedLists</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>createTypedArrayList</name></name><argument_list>(<argument><expr><name><name>VList</name><operator>.</operator><name>CREATOR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cVocable</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readParcelable</name></name><argument_list>(<argument><expr><call><name><name>VEntry</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getClassLoader</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tips</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>total</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>unsolved</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>failed</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>timesToSolve</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>timesShowedSolution</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>showedSolution</name> <operator>=</operator> <call><name>readParcableBool</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>settings</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readParcelable</name></name><argument_list>(<argument><expr><call><name><name>TrainerSettings</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getClassLoader</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>firstTimeVocLoad</name> <operator>=</operator> <call><name>readParcableBool</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>lastAddition</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>TrainerSettings</name></type> <name>getSettings</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>settings</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>writeToParcel</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>parcel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>order</name> <operator>==</operator> <name><name>AB_MODE</name><operator>.</operator><name>A</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeTypedList</name></name><argument_list>(<argument><expr><name>lists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeTypedList</name></name><argument_list>(<argument><expr><name>unsolvedLists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeParcelable</name></name><argument_list>(<argument><expr><name>cVocable</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name>tips</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name>unsolved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name>failed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name>timesToSolve</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name>timesShowedSolution</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>writeParcableBool</name><argument_list>(<argument><expr><name>parcel</name></expr></argument>,<argument><expr><name>showedSolution</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeParcelable</name></name><argument_list>(<argument><expr><name>settings</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// ssm</comment>
        <comment type="line">// db</comment>
        <expr_stmt><expr><call><name>writeParcableBool</name><argument_list>(<argument><expr><name>parcel</name></expr></argument>, <argument><expr><name>firstTimeVocLoad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>lastAddition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Testing mode for trainer&lt;br&gt;
     *     Ask column a/b/a&amp;b random
     */</comment>
    <enum><specifier>public</specifier> enum <name>TEST_MODE</name> <block>{
        <decl><name>A</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>, <decl><name>B</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>, <decl><name>RANDOM</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></decl>;
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>id</name></decl>;</decl_stmt>

        <constructor><name>TEST_MODE</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><specifier>public</specifier> <specifier>static</specifier> <type><name>TEST_MODE</name></type> <name>fromInt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{
            <for>for <control>(<init><decl><type><name>TEST_MODE</name></type> <name>typÐµ</name> <range>: <expr><call><name><name>TEST_MODE</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
                <if>if <condition>(<expr><call><name><name>typÐµ</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>code</name></expr>)</condition><then> <block>{
                    <return>return <expr><name>typÐµ</name></expr>;</return>
                }</block></then></if>
            }</block></for>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></function>

        <function><specifier>public</specifier> <type><name>int</name></type> <name>getValue</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>id</name></expr>;</return>
        }</block></function>
    }</block></enum>

    <comment type="block" format="javadoc">/**
     * Enum to store the current column that is displayed
     */</comment>
    <enum><specifier>private</specifier> enum <name>AB_MODE</name> <block>{<decl><name>A</name></decl>, <decl><name>B</name></decl>}</block></enum>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/lib/Storage/VEntry.java" hash="b2d28a18f2523c37162ad8b8cd18cf1dcae11263"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcel</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcelable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Serializable</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import static <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Database</name><operator>.</operator><name>MIN_ID_TRESHOLD</name></name>;</import>
<import>import static <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>ParcableTools</name><operator>.</operator><name>readParcableBool</name></name>;</import>
<import>import static <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>ParcableTools</name><operator>.</operator><name>readParcableDate</name></name>;</import>
<import>import static <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>ParcableTools</name><operator>.</operator><name>writeParcableBool</name></name>;</import>
<import>import static <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>ParcableTools</name><operator>.</operator><name>writeParcableDate</name></name>;</import>
<import>import static <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>VList</name><operator>.</operator><name>isIDValid</name></name>;</import>

<comment type="block" format="javadoc">/**
 * DB Vocable Entry
 */</comment>
<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"JavaDoc"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> class <name>VEntry</name> <super><implements>implements <name>Serializable</name>, <name>Parcelable</name></implements></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>VList</name></type> <name>list</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>tip</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>addition</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>points</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Date</name></type> <name>last_used</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Date</name></type> <name>created</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>correct</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>wrong</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>meaningA</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>meaningB</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>changed</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>delete</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>CONCAT</name> <init>= <expr><literal type="string">"/"</literal></expr></init></decl>;</decl_stmt>


    <comment type="block" format="javadoc">/**
     * Creates a new VEntry with invalid ID &amp; empty fields
     * @param list
     */</comment>
    <constructor><specifier>public</specifier> <name>VEntry</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <specifier>final</specifier> <name>VList</name></type> <name>list</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>,<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * Creates a new VEntry
     *
     * @param meaningA
     * @param meaningB
     * @param tip
     * @param addition
     * @param id
     * @param list
     * @param points
     * @param last_used
     * @param created
     * @param correct
     * @param wrong
     */</comment>
    <constructor><specifier>public</specifier> <name>VEntry</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>meaningA</name></decl></parameter>,<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>meaningB</name></decl></parameter>,<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>tip</name></decl></parameter>,<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>addition</name></decl></parameter>,
                  <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>VList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>points</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Date</name></type> <name>last_used</name></decl></parameter>,<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Date</name></type> <name>created</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>correct</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wrong</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>meaningA</name></name> <operator>=</operator> <name>meaningA</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>meaningB</name></name> <operator>=</operator> <name>meaningB</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tip</name></name> <operator>=</operator> <name>tip</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>list</name></name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>points</name></name> <operator>=</operator> <name>points</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>created</name></name> <operator>=</operator> <name>created</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>last_used</name></name> <operator>=</operator> <name>last_used</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>correct</name></name> <operator>=</operator> <name>correct</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>wrong</name></name> <operator>=</operator> <name>wrong</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>addition</name></name> <operator>=</operator> <name>addition</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * Creates a new VEntry with 0 points
     *
     * @param meaningA
     * @param meaningB
     * @param tip
     * @param addition
     * @param id
     * @param list
     * @param last_used
     * @param created
     * @param correct
     * @param wrong
     */</comment>
    <constructor><specifier>public</specifier> <name>VEntry</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>meaningA</name></decl></parameter>,<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>meaningB</name></decl></parameter>,<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>tip</name></decl></parameter>,<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>addition</name></decl></parameter>,
            <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>,<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>VList</name></type> <name>list</name></decl></parameter>,<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Date</name></type> <name>last_used</name></decl></parameter>,<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Date</name></type> <name>created</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>correct</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>wrong</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>meaningA</name></expr></argument>,<argument><expr><name>meaningB</name></expr></argument>,<argument><expr><name>tip</name></expr></argument>,<argument><expr><name>addition</name></expr></argument>,<argument><expr><name>id</name></expr></argument>,<argument><expr><name>list</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>last_used</name></expr></argument>,<argument><expr><name>created</name></expr></argument>,<argument><expr><name>correct</name></expr></argument>,<argument><expr><name>wrong</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * Creates a 1:1 entry for spacers etc
     *  throw an IllegalArgumentException if ID should be valid
     * @param A meaning A entry
     * @param B meaning B entry
     * @param fID fake ID, has to be invalid
     * @param tip
     */</comment>
    <constructor><specifier>public</specifier> <name>VEntry</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>B</name></decl></parameter>,<parameter><decl><type><name>String</name></type> <name>tip</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fID</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>tip</name></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>,<argument><expr><name>fID</name></expr></argument>,<argument><expr><literal type="null">null</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="null">null</literal></expr></argument>,<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><call><name>isIDValid</name><argument_list>(<argument><expr><name>fID</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"no valid ID allowed!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>meaningA</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>meaningB</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * Creates a 1:1 VEntry for Importing with an invalid ID
     *
     * @param A
     * @param B
     * @param tip
     * @param addition
     * @param list
     */</comment>
    <constructor><specifier>public</specifier> <name>VEntry</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>B</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tip</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>addition</name></decl></parameter>, <parameter><decl><type><name>VList</name></type> <name>list</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>tip</name></expr></argument>,<argument><expr><name>addition</name></expr></argument>,<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>meaningA</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>meaningB</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * Creates a new VEntry with 0 points, ID &lt; MIN_ID_TRESHOLD &amp; current Date &amp; 0 correct, wrong
     *
     * @param meaningA
     * @param meaningB
     * @param tip
     * @param addition
     * @param list
     */</comment>
    <constructor><specifier>public</specifier> <name>VEntry</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>meaningA</name></decl></parameter>,<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>meaningB</name></decl></parameter>,<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>tip</name></decl></parameter>,<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>addition</name></decl></parameter>,<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>VList</name></type> <name>list</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>meaningA</name></expr></argument>,<argument><expr><name>meaningB</name></expr></argument>,<argument><expr><name>tip</name></expr></argument>,<argument><expr><name>addition</name></expr></argument>,<argument><expr><name>MIN_ID_TRESHOLD</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>list</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="null">null</literal></expr></argument>,<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>Creator</name><argument_list type="generic">&lt;<argument><name>VEntry</name></argument>&gt;</argument_list></name></type> <name>CREATOR</name> <init>= <expr><operator>new</operator> <class><super><name><name>Creator</name><argument_list type="generic">&lt;<argument><name>VEntry</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>VEntry</name></type> <name>createFromParcel</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><operator>new</operator> <call><name>VEntry</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name><name>VEntry</name><index>[]</index></name></type> <name>newArray</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><operator>new</operator> <name><name>VEntry</name><index>[<expr><name>size</name></expr>]</index></name></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Returns meanings for A Column
     *
     * @return
     */</comment>
    <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getAMeanings</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>meaningA</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Set A-Meanings
     *
     * @param AMeanings
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>setAMeanings</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>AMeanings</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>meaningA</name></name> <operator>=</operator> <name>AMeanings</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>changed</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns meanings for B Column
     *
     * @return
     */</comment>
    <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getBMeanings</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>meaningB</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Set B-Meanings
     *
     * @param BMeanings
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>setBMeanings</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>BMeanings</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>meaningB</name></name> <operator>=</operator> <name>BMeanings</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>changed</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Get Tip
     *
     * @return
     */</comment>
    <function><specifier>public</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>String</name></type> <name>getTip</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>tip</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Get addition
     *
     * @return
     */</comment>
    <function><specifier>public</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>String</name></type> <name>getAddition</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>addition</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Set Tip
     *
     * @param tip
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>setTip</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>tip</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tip</name></name> <operator>=</operator> <name>tip</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>changed</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getAString</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name>getBString</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" ID:"</literal> <operator>+</operator> <name>id</name> <operator>+</operator> <literal type="string">" P:"</literal> <operator>+</operator> <name>points</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Test for equality based on entry &amp; list ID
     * If both have no List, it is ignored.
     * If one has no list, they are not seen as equal.
     * @param entry
     * @return
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>VEntry</name></type> <name>entry</name></decl></parameter>)</parameter_list> <block>{
        <if>if<condition>(<expr><name>this</name> <operator>==</operator> <name>entry</name></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
        <if>if<condition>(<expr><call><name><name>this</name><operator>.</operator><name>getList</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
            <if>if<condition>(<expr><call><name><name>entry</name><operator>.</operator><name>getList</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><call><name><name>this</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>entry</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr>;</return></block></then>
            <else>else
                <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></else></if>
        }</block></then></if>
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>entry</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>getList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{
        <if>if<condition>(<expr><name>obj</name> <operator>instanceof</operator> <name>VEntry</name></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><call><name>equals</name><argument_list>(<argument><expr><operator>(</operator><name>VEntry</name><operator>)</operator> <name>obj</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
        <return>return <expr><call><name><name>super</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Check whether this entry is existing, according to it's ID&lt;br&gt;
     *     &lt;b&gt;Note:&lt;/b&gt; this is not a check whether this entity exists in the Database
     * @return true if the ID is valid
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isExisting</name><parameter_list>()</parameter_list><block>{
        <return>return <expr><call><name>isIDValid</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns whether the Data of this VEntry was changed
     *
     * @return
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isChanged</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>changed</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>VList</name></type> <name>getList</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>list</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>getPoints</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>points</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setPoints</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>points</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>points</name></name> <operator>=</operator> <name>points</name></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>getId</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>id</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setAddition</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>addition</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>addition</name></name> <operator>=</operator> <name>addition</name></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>Date</name></type> <name>getLast_used</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>last_used</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setLast_used</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>last_used</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>last_used</name></name> <operator>=</operator> <name>last_used</name></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>Date</name></type> <name>getCreated</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>created</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setCreated</name><parameter_list>(<parameter><decl><type><name>Date</name></type> <name>created</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>created</name></name> <operator>=</operator> <name>created</name></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>getCorrect</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>correct</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setCorrect</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>correct</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>correct</name></name> <operator>=</operator> <name>correct</name></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>incrCorrect</name><parameter_list>()</parameter_list> <block>{ <expr_stmt><expr><name><name>this</name><operator>.</operator><name>correct</name></name><operator>++</operator></expr>;</expr_stmt> }</block></function>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>getWrong</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>wrong</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setWrong</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>wrong</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>wrong</name></name> <operator>=</operator> <name>wrong</name></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>incrWrong</name><parameter_list>()</parameter_list> <block>{ <expr_stmt><expr><name><name>this</name><operator>.</operator><name>wrong</name></name><operator>++</operator></expr>;</expr_stmt> }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isDelete</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>delete</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setDelete</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>delete</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>delete</name></name> <operator>=</operator> <name>delete</name></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getAString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>TextUtils</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><name>CONCAT</name></expr></argument>,<argument><expr><name>meaningA</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getBString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>TextUtils</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><name>CONCAT</name></expr></argument>,<argument><expr><name>meaningB</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>describeContents</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Parcel constructor
     * @param in
     */</comment>
    <constructor><specifier>protected</specifier> <name>VEntry</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>meaningA</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>createStringArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>meaningB</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>createStringArrayList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tip</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>list</name> <operator>=</operator> <operator>(</operator><name>VList</name><operator>)</operator> <call><name><name>in</name><operator>.</operator><name>readValue</name></name><argument_list>(<argument><expr><call><name><name>VList</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getClassLoader</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>points</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>changed</name> <operator>=</operator> <call><name>readParcableBool</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>delete</name> <operator>=</operator> <call><name>readParcableBool</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>created</name> <operator>=</operator> <call><name>readParcableDate</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>last_used</name> <operator>=</operator> <call><name>readParcableDate</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>correct</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>wrong</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>addition</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>id</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>writeToParcel</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>parcel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeStringList</name></name><argument_list>(<argument><expr><name>meaningA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeStringList</name></name><argument_list>(<argument><expr><name>meaningB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>tip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeValue</name></name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name>points</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>writeParcableBool</name><argument_list>(<argument><expr><name>parcel</name></expr></argument>, <argument><expr><name>changed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>writeParcableBool</name><argument_list>(<argument><expr><name>parcel</name></expr></argument>, <argument><expr><name>delete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>writeParcableDate</name><argument_list>(<argument><expr><name>parcel</name></expr></argument>, <argument><expr><name>created</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>writeParcableDate</name><argument_list>(<argument><expr><name>parcel</name></expr></argument>, <argument><expr><name>last_used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name>correct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name>wrong</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>addition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/lib/Storage/VList.java" hash="6d3706adf9387fe67f383ab2d778983a1c261048"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcel</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcelable</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Date</name></name>;</import>

<import>import static <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Database</name><operator>.</operator><name>MIN_ID_TRESHOLD</name></name>;</import>

<comment type="block" format="javadoc">/**
 * DB Vocable List entry
 */</comment>
<class><specifier>public</specifier> class <name>VList</name> <super><implements>implements <name>Parcelable</name></implements></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>nameA</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>nameB</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Date</name></type> <name>created</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>totalVocs</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>unfinishedVocs</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Creates a new VList data object
     *
     * @param id    ID
     * @param nameA Name for A Column
     * @param nameB Name for B Column
     */</comment>
    <constructor><specifier>public</specifier> <name>VList</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>nameA</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>nameB</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Date</name></type> <name>created</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>nameA</name></name> <operator>=</operator> <name>nameA</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>nameB</name></name> <operator>=</operator> <name>nameB</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>created</name></name> <operator>=</operator> <name>created</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>totalVocs</name></name> <operator>=</operator> <name>MIN_ID_TRESHOLD</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unfinishedVocs</name></name> <operator>=</operator> <name>MIN_ID_TRESHOLD</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * Check whether this entry is existing, according to it's ID&lt;br&gt;
     *     &lt;b&gt;Note:&lt;/b&gt; this is not a check whether this entity exists in the Database
     * @return true if the ID is valid
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isExisting</name><parameter_list>()</parameter_list><block>{
        <return>return <expr><call><name>isIDValid</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Checks whether a given ID is valid, according to MIN_ID_TRESHOLD
     * @param id ID to check
     * @return true if ID is valid
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isIDValid</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>id</name></decl></parameter>)</parameter_list><block>{
        <return>return <expr><name>id</name> <operator>&gt;=</operator> <name>MIN_ID_TRESHOLD</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Create a new VList with none-ID -1 &amp; current Date
     *
     * @param nameA Name for A Column
     * @param nameB Name for B Column
     * @param name List Name
     */</comment>
    <constructor><specifier>public</specifier> <name>VList</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>nameA</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>nameB</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>MIN_ID_TRESHOLD</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>nameA</name></expr></argument>, <argument><expr><name>nameB</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * Creates a new table data object, ID only&lt;br&gt;
     * All fields except ID will be empty
     *
     * @param id
     */</comment>
    <constructor><specifier>public</specifier> <name>VList</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>,<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getId</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name>getName</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name>getNameA</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name>getNameB</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name>getTotalVocs</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name>getUnfinishedVocs</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Tests for equality based on list ID
     *
     * @param list
     * @return true when list IDs are equal
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>VList</name></type> <name>list</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>list</name></expr>)</condition><then> <block>{
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></then></if>
        <return>return <expr><name><name>this</name><operator>.</operator><name>id</name></name> <operator>==</operator> <call><name><name>list</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>obj</name> <operator>instanceof</operator> <name>VList</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name>equals</name><argument_list>(<argument><expr><operator>(</operator><name>VList</name><operator>)</operator> <name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>super</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the amount of vocables this table has&lt;br&gt;
     * The value can be -1 when not set!
     *
     * @return
     */</comment>
    <function><specifier>public</specifier> <type><name>int</name></type> <name>getTotalVocs</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>totalVocs</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setTotalVocs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>total</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>totalVocs</name></name> <operator>=</operator> <name>total</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the amount of unfinished vocables&lt;br&gt;
     * The value can be -1 when not set!
     *
     * @return
     */</comment>
    <function><specifier>public</specifier> <type><name>int</name></type> <name>getUnfinishedVocs</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>unfinishedVocs</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setUnfinishedVocs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>unfinished</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unfinishedVocs</name></name> <operator>=</operator> <name>unfinished</name></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getNameA</name><parameter_list>()</parameter_list> <block>{

        <return>return <expr><name>nameA</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setNameA</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>nameA</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>nameA</name></name> <operator>=</operator> <name>nameA</name></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getNameB</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>nameB</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setNameB</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>nameB</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>nameB</name></name> <operator>=</operator> <name>nameB</name></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>getId</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>id</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Set a new ID
     *
     * @param id new ID
     * @throws IllegalAccessError if a valid ID is already set
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>setId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isIDValid</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>IllegalAccessError</name><argument_list>(<argument><expr><literal type="string">"Can't override existing VList ID"</literal></expr></argument>)</argument_list></call></expr>;</throw></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt></block></else></if>
    }</block></function>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>name</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>Date</name></type> <name>getCreated</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>created</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>describeContents</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>writeToParcel</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>parcel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>nameA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>nameB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name>totalVocs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name>unfinishedVocs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeLong</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>created</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>created</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Parcel constructor
     * @param in
     */</comment>
    <constructor><specifier>protected</specifier> <name>VList</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>nameA</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nameB</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>totalVocs</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>unfinishedVocs</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>id</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>created</name> <operator>=</operator> <operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readLong</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>Creator</name><argument_list type="generic">&lt;<argument><name>VList</name></argument>&gt;</argument_list></name></type> <name>CREATOR</name> <init>= <expr><operator>new</operator> <class><super><name><name>Creator</name><argument_list type="generic">&lt;<argument><name>VList</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>VList</name></type> <name>createFromParcel</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><operator>new</operator> <call><name>VList</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name><name>VList</name><index>[]</index></name></type> <name>newArray</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><operator>new</operator> <name><name>VList</name><index>[<expr><name>size</name></expr>]</index></name></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/lib/Import/ImportFetcher.java" hash="29b87397d4b18738f28aaba273f315a3ffaa7519"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Import</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>AlertDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ProgressBar</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name><operator>.</operator><name>CSVParser</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name><operator>.</operator><name>CSVRecord</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>CSVCustomFormat</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Function</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>MultiMeaningHandler</name></name>;</import>

<import>import static <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>CSVHeaders</name><operator>.</operator><name>CSV_METADATA_START</name></name>;</import>

<comment type="block" format="javadoc">/**
 * ImportFetcher class&lt;br&gt;
 * Does the basic parsing work, passes data to specified ImportHandler
 */</comment>
<class><specifier>public</specifier> class <name>ImportFetcher</name> <super><extends>extends <name><name>AsyncTask</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>Integer</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><literal type="string">"ImportFetcher"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>MAX_RECORD_SIZE</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>ADDITION_RECORD_SIZE</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>MIN_RECORD_SIZE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>REC_V1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="line">// meanings A / name</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>REC_V2</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <comment type="line">// meanings B / colA</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>REC_V3</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt> <comment type="line">// tip / colB</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>REC_V4</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt> <comment type="line">// addition (voc only)</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>File</name></type> <name>source</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>CSVCustomFormat</name></type> <name>cformat</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ImportHandler</name></type> <name>handler</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>maxEntries</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>AlertDialog</name></type> <name>dialog</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ProgressBar</name></type> <name>progressBar</name></decl>;</decl_stmt> <comment type="line">// theoretical field leak, can only be solved by inlining this in the fragment</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>MessageProvider</name></type> <name>messageProvider</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Function</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>importCallback</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>boolean</name></type> <name>logErrors</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>lastUpdate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>StringBuilder</name></type> <name>log</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Creates a new importer&lt;br&gt;
     *     It takes a dialog with a progressbar as input to display progress.
     *     Alternative you can use
     *
     * @param cformat      Format to use
     * @param source      Source for parsing
     * @param handler     Data handler
     * @param maxEntries  max amount of entries in this file&lt;br&gt;
     *                    set to &gt; 0 to gain a "X/maxEntries" progress update
     * @param progressBar Progressbar updated when maxEntries is set, other the AlertDialog's Message is used&lt;br&gt;
     *                    Please not that the progressBar requires a style matching determinate / indeterminate mode
     * @param dialog      AlertDialog to show the progress on
     * @param messageProvider Message provider for logs
     * @param importCallback callback after successful import, given import log as param, return ignored
     * @param logErrors   disable error logging on false
     */</comment>
    <constructor><name>ImportFetcher</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CSVCustomFormat</name></type> <name>cformat</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>File</name></type> <name>source</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>ImportHandler</name></type> <name>handler</name></decl></parameter>,
                  <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>maxEntries</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>AlertDialog</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>ProgressBar</name></type> <name>progressBar</name></decl></parameter>,
                  <parameter><decl><type><specifier>final</specifier> <name>MessageProvider</name></type> <name>messageProvider</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>Function</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>importCallback</name></decl></parameter>,
                  <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>logErrors</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>source</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cformat</name></name> <operator>=</operator> <name>cformat</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>handler</name></name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>maxEntries</name></name> <operator>=</operator> <name>maxEntries</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>progressBar</name></name> <operator>=</operator> <name>progressBar</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dialog</name></name> <operator>=</operator> <name>dialog</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>log</name></name> <operator>=</operator> <operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>messageProvider</name></name> <operator>=</operator> <name>messageProvider</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>importCallback</name></name> <operator>=</operator> <name>importCallback</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>logErrors</name></name> <operator>=</operator> <name>logErrors</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onProgressUpdate</name><parameter_list>(<parameter><decl><type><name>Integer</name><modifier>...</modifier></type> <name>values</name></decl></parameter>)</parameter_list> <block>{
        <try>try <block>{ <comment type="line">// catch this, as display view change could lead to re-initializations</comment>
            <if>if <condition>(<expr><name>maxEntries</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>progressBar</name><operator>.</operator><name>setProgress</name></name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"unable to update progress"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onPostExecute</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>dismiss</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>importCallback</name><operator>.</operator><name>function</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list><block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"importCallback crash"</literal></expr></argument>,<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onPreExecute</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>progressBar</name><operator>.</operator><name>setIndeterminate</name></name><argument_list>(<argument><expr><name>maxEntries</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>progressBar</name><operator>.</operator><name>setMax</name></name><argument_list>(<argument><expr><name>maxEntries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onCancelled</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>cancel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"ConstantConditions"</literal></expr></argument>)</argument_list></annotation>
    <annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>String</name></type> <name>doInBackground</name><parameter_list>(<parameter><decl><type><name>Integer</name><modifier>...</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <block>{
        <try>try <init>(
                <decl><type><name>FileReader</name></type> <name>reader</name> <init>= <expr><operator>new</operator> <call><name>FileReader</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></init></decl>;
                <expr><name>BufferedReader</name> <name>bufferedReader</name> <operator>=</operator> <operator>new</operator> <call><name>BufferedReader</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;
                <expr><name>CSVParser</name> <name>parser</name> <operator>=</operator> <operator>new</operator> <call><name>CSVParser</name><argument_list>(<argument><expr><name>bufferedReader</name></expr></argument>, <argument><expr><call><name><name>cformat</name><operator>.</operator><name>getFormat</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>
        )</init> <block>{
            <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>MultiMeaningHandler</name></type> <name>multiMeaningHandler</name> <init>= <expr><operator>new</operator> <call><name>MultiMeaningHandler</name><argument_list>(<argument><expr><name>cformat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>tbl_start</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>empty_v</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>vocableAmount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>CSVRecord</name></type> <name>record</name> <range>: <expr><name>parser</name></expr></range></decl></init>)</control> <block>{
                <if>if <condition>(<expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>lastUpdate</name> <operator>&gt;</operator> <literal type="number">250</literal></expr>)</condition><then> <block>{ <comment type="line">// don't spam the UI thread</comment>
                    <expr_stmt><expr><call><name>publishProgress</name><argument_list>(<argument><expr><name>vocableAmount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>lastUpdate</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <if>if <condition>(<expr><call><name><name>record</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>MIN_RECORD_SIZE</name></expr>)</condition><then> <block>{ <comment type="line">// ignore, not enough values</comment>
                    <if>if<condition>(<expr><name>logErrors</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"ignoring entry, missing values: "</literal> <operator>+</operator> <call><name><name>record</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>messageProvider</name><operator>.</operator><name>E_NOT_ENOUGH_VALUES</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>record</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <continue>continue;</continue>
                }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>record</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>MAX_RECORD_SIZE</name> <operator>&amp;&amp;</operator> <name>logErrors</name></expr>)</condition><then> <block>{ <comment type="line">// warn, too many values</comment>
                    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"entry longer then necessary: "</literal> <operator>+</operator> <call><name><name>record</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>messageProvider</name><operator>.</operator><name>W_TOO_MANY_VALUES</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>record</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></elseif></if>
                <decl_stmt><decl><type><name>String</name></type> <name>v1</name> <init>= <expr><call><name><name>record</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>REC_V1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>v2</name> <init>= <expr><call><name><name>record</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>REC_V2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>v3</name> <init>= <expr><ternary><condition><expr><call><name><name>record</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>MIN_RECORD_SIZE</name></expr> ?</condition><then> <expr><name>empty_v</name></expr> </then><else>: <expr><call><name><name>record</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>REC_V3</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>tbl_start</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>newTable</name></name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>, <argument><expr><name>v3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>tbl_start</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                }</block></then> <elseif>else <comment type="line">//noinspection StatementWithEmptyBody</comment>
                    <if>if <condition>(<expr><name>tbl_start</name> <operator>=</operator> <operator>(</operator><call><name><name>v1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>CSV_METADATA_START</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>v2</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>CSV_METADATA_START</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>v3</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>CSV_METADATA_START</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><then> <block>{
                    <comment type="line">//do nothing</comment>
                }</block></then></if></elseif> <else>else <block>{
                    <expr_stmt><expr><name>vocableAmount</name><operator>++</operator></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>mA</name> <init>= <expr><call><name><name>multiMeaningHandler</name><operator>.</operator><name>parseMultiMeaning</name></name><argument_list>(<argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>mB</name> <init>= <expr><call><name><name>multiMeaningHandler</name><operator>.</operator><name>parseMultiMeaning</name></name><argument_list>(<argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>addition</name> <init>= <expr><ternary><condition><expr><call><name><name>record</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>ADDITION_RECORD_SIZE</name></expr> ?</condition><then> <expr><name>empty_v</name></expr> </then><else>: <expr><call><name><name>record</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>REC_V4</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>newEntry</name></name><argument_list>(<argument><expr><name>mA</name></expr></argument>, <argument><expr><name>mB</name></expr></argument>, <argument><expr><name>v3</name></expr></argument>,<argument><expr><name>addition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></for>
            <comment type="line">//prepend to start</comment>
            <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><call><name><name>messageProvider</name><operator>.</operator><name>formatIMPORTED_AMOUNT</name></name><argument_list>(<argument><expr><name>vocableAmount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>parser</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bufferedReader</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>reader</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></try> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally>
        <return>return <expr><call><name><name>log</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Message provider for the import log
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>MessageProvider</name> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>E_NOT_ENOUGH_VALUES</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>W_TOO_MANY_VALUES</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>I_IMPORTED_AMOUNT</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Creates a new MessageProvider
         * @param fragment Fragment for context resource retrieval
         */</comment>
        <constructor><specifier>public</specifier> <name>MessageProvider</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Fragment</name></type> <name>fragment</name></decl></parameter>)</parameter_list><block>{
            <expr_stmt><expr><name>E_NOT_ENOUGH_VALUES</name> <operator>=</operator> <call><name><name>fragment</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Import_Error_MIN_RECORD_SIZE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>W_TOO_MANY_VALUES</name> <operator>=</operator> <call><name><name>fragment</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Import_Warn_MAX_RECORD_SIZE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>I_IMPORTED_AMOUNT</name> <operator>=</operator> <call><name><name>fragment</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Import_Info_Import</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="block" format="javadoc">/**
         * Returns formatted IMPORT_AMOUNT with param
         * @param amount
         * @return formatted String
         */</comment>
        <function><type><name>String</name></type> <name>formatIMPORTED_AMOUNT</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>amount</name></decl></parameter>)</parameter_list><block>{
            <return>return <expr><call><name><name>I_IMPORTED_AMOUNT</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="char">'\n'</literal></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/lib/Import/ImportHandler.java" hash="1d951038a50466a317618a54bd188a93f6f706a2"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Import</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Interface for import handlers
 */</comment>
<interface><specifier>public</specifier> interface <name>ImportHandler</name> <block>{
    <comment type="block" format="javadoc">/**
     * Called when a new table starts&lt;br&gt;
     * Note that this function is not called when the provided source doesn't have table metadata.
     *
     * @param name    VList name
     * @param columnA Column A name
     * @param columnB Column B name
     */</comment>
    <function_decl><type><name>void</name></type> <name>newTable</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>columnA</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>columnB</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Called for a new VEntry, for last "newTable" called
     *
     * @param A list of A meanings
     * @param B list of B meanings
     * @param Tip tip
     * @param addition addition for vocable
     */</comment>
    <function_decl><type><name>void</name></type> <name>newEntry</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>B</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>Tip</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>addition</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Called when all entries where read
     */</comment>
    <function_decl><type><name>void</name></type> <name>finish</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Called directly before the start
     */</comment>
    <function_decl><type><name>void</name></type> <name>start</name><parameter_list>()</parameter_list>;</function_decl>
}</block></interface>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/lib/Import/ImportFetcherBuilder.java" hash="2d45a348dbc3cd611f6d7aeabd32e29b3fa44550"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Import</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>AlertDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ProgressBar</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>

<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>CSVCustomFormat</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Function</name></name>;</import>

<comment type="block" format="javadoc">/**
 * ImportFetcher builder&lt;br&gt;
 *     because ImportFetcher requires too many parameters
 */</comment>
<class><specifier>public</specifier> class <name>ImportFetcherBuilder</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name>CSVCustomFormat</name></type> <name>format</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>File</name></type> <name>source</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>ImportHandler</name></type> <name>handler</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>maxEntries</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>AlertDialog</name></type> <name>dialog</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>ProgressBar</name></type> <name>progressBar</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>ImportFetcher</name><operator>.</operator><name>MessageProvider</name></name></type> <name>messageProvider</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>Function</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>importCallback</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>logErrors</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <function><specifier>public</specifier> <type><name>ImportFetcherBuilder</name></type> <name>setFormat</name><parameter_list>(<parameter><decl><type><name>CSVCustomFormat</name></type> <name>format</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>ImportFetcherBuilder</name></type> <name>setSource</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>source</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>source</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>ImportFetcherBuilder</name></type> <name>setHandler</name><parameter_list>(<parameter><decl><type><name>ImportHandler</name></type> <name>handler</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>handler</name></name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>ImportFetcherBuilder</name></type> <name>setMaxEntries</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>maxEntries</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>maxEntries</name></name> <operator>=</operator> <name>maxEntries</name></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>ImportFetcherBuilder</name></type> <name>setDialog</name><parameter_list>(<parameter><decl><type><name>AlertDialog</name></type> <name>dialog</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dialog</name></name> <operator>=</operator> <name>dialog</name></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>ImportFetcherBuilder</name></type> <name>setProgressBar</name><parameter_list>(<parameter><decl><type><name>ProgressBar</name></type> <name>progressBar</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>progressBar</name></name> <operator>=</operator> <name>progressBar</name></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>ImportFetcherBuilder</name></type> <name>setMessageProvider</name><parameter_list>(<parameter><decl><type><name><name>ImportFetcher</name><operator>.</operator><name>MessageProvider</name></name></type> <name>messageProvider</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>messageProvider</name></name> <operator>=</operator> <name>messageProvider</name></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>ImportFetcherBuilder</name></type> <name>setImportCallback</name><parameter_list>(<parameter><decl><type><name><name>Function</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>importCallback</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>importCallback</name></name> <operator>=</operator> <name>importCallback</name></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>ImportFetcherBuilder</name></type> <name>setLogErrors</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>logErrors</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>logErrors</name></name> <operator>=</operator> <name>logErrors</name></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Finalize builder, create ImportFetcher
     * @return ImportFetcher
     */</comment>
    <function><specifier>public</specifier> <type><name>ImportFetcher</name></type> <name>createImportFetcher</name><parameter_list>()</parameter_list> <block>{
        <if>if<condition>(<expr><name>format</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>source</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>handler</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>dialog</name> <operator>==</operator> <literal type="null">null</literal>
                <operator>||</operator> <name>progressBar</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>messageProvider</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>importCallback</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw></block></then></if>
        <return>return <expr><operator>new</operator> <call><name>ImportFetcher</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>, <argument><expr><name>maxEntries</name></expr></argument>, <argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>progressBar</name></expr></argument>,
                <argument><expr><name>messageProvider</name></expr></argument>,<argument><expr><name>importCallback</name></expr></argument>,<argument><expr><name>logErrors</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class></unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/lib/Comparator/GenEntryComparator.java" hash="170f9503a0375daad932c45d1ca973868640a1a2"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Comparator</name></name>;</package>

<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>VEntry</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Comparator for entries&lt;br&gt;
 * Checks for top entry objects according to their ID&lt;br&gt;
 * can't handle more than one head entry
 */</comment>
<class><specifier>public</specifier> class <name>GenEntryComparator</name> <super><extends>extends <name><name>GenericComparator</name><argument_list type="generic">&lt;<argument><name>VEntry</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>headID</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Generic VEntry Comparator
     *
     * @param retrievers retrievers to use for comparision&lt;br&gt;
     *                   passed array order defines the comparision priority
     * @param headID     ID of entry to set on top
     */</comment>
    <constructor><specifier>public</specifier> <name>GenEntryComparator</name><parameter_list>(<parameter><decl><type><name><name>ValueRetriever</name><index>[]</index></name></type> <name>retrievers</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>headID</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>retrievers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>headID</name></name> <operator>=</operator> <name>headID</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>VEntry</name></type> <name>o1</name></decl></parameter>, <parameter><decl><type><name>VEntry</name></type> <name>o2</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>o1</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>headID</name></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if>
        <if>if <condition>(<expr><call><name><name>o2</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>headID</name></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
        <return>return <expr><call><name><name>super</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name>o1</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * A retriever
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>GenericComparator</name><operator>.</operator><name>ValueRetriever</name></name></type> <name>retA</name> <init>= <expr><operator>new</operator> <class><super><name><name>ValueRetriever</name><argument_list type="generic">&lt;<argument><name>VEntry</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>String</name></type> <name>getV</name><parameter_list>(<parameter><decl><type><name>VEntry</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><call><name><name>obj</name><operator>.</operator><name>getAString</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * B retriever
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>GenericComparator</name><operator>.</operator><name>ValueRetriever</name></name></type> <name>retB</name> <init>= <expr><operator>new</operator> <class><super><name><name>ValueRetriever</name><argument_list type="generic">&lt;<argument><name>VEntry</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>String</name></type> <name>getV</name><parameter_list>(<parameter><decl><type><name>VEntry</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><call><name><name>obj</name><operator>.</operator><name>getBString</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Tip retriever
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>GenericComparator</name><operator>.</operator><name>ValueRetriever</name></name></type> <name>retTip</name> <init>= <expr><operator>new</operator> <class><super><name><name>ValueRetriever</name><argument_list type="generic">&lt;<argument><name>VEntry</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>String</name></type> <name>getV</name><parameter_list>(<parameter><decl><type><name>VEntry</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><call><name><name>obj</name><operator>.</operator><name>getTip</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/lib/Import/PreviewParser.java" hash="db01b24132f7c57722242bc7524f986239b8bdbf"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Import</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>VEntry</name></name>;</import>

<import>import static <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Database</name><operator>.</operator><name>ID_RESERVED_SKIP</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Preview parser handler also counting parsing metadata stats&lt;br&gt;
 * Limiting amount of entries parsed per list
 */</comment>
<class><specifier>public</specifier> class <name>PreviewParser</name> <super><implements>implements <name>ImportHandler</name></implements></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>PARSE_LIMIT</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>VEntry</name></argument>&gt;</argument_list></name></type> <name>list</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>parsed_limiter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>tblCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>rows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>PreviewParser</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>VEntry</name></argument>&gt;</argument_list></name></type> <name>list</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>list</name></name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>newTable</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>columnA</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>columnB</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>VEntry</name><argument_list>(<argument><expr><name>columnA</name></expr></argument>, <argument><expr><name>columnB</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>ID_RESERVED_SKIP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>parsed_limiter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>tblCount</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>rows</name><operator>++</operator></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>newEntry</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>B</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>Tip</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>addition</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>rows</name><operator>++</operator></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>parsed_limiter</name> <operator>&lt;</operator> <name>PARSE_LIMIT</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>VEntry</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>Tip</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">//TODO: allow addition column</comment>
            <expr_stmt><expr><name>parsed_limiter</name><operator>++</operator></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns amount of rows detected
     *
     * @return
     */</comment>
    <function><specifier>public</specifier> <type><name>int</name></type> <name>getAmountRows</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>rows</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>finish</name><parameter_list>()</parameter_list> <block>{

    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>start</name><parameter_list>()</parameter_list> <block>{

    }</block></function>

    <comment type="block" format="javadoc">/**
     * Is parsed list raw data without list metadata
     *
     * @return
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isRawData</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>tblCount</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Is parsed list a multilist
     *
     * @return
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isMultiList</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>tblCount</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/lib/Import/Importer.java" hash="acd9403f2b8cc59763378bc25efa469d3a1c2e68"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Import</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Database</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>VEntry</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>VList</name></name>;</import>

<import>import static <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ContentValues</name><operator>.</operator><name>TAG</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Importer, does actual importing
 */</comment>
<class><specifier>public</specifier> class <name>Importer</name> <super><implements>implements <name>ImportHandler</name></implements></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>BUFFER_CAPACITY</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>PreviewParser</name></type> <name>previewParser</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>IMPORT_LIST_MODE</name></type> <name>mode</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>VList</name></type> <name>overrideList</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>VList</name></type> <name>currentList</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Database</name></type> <name>db</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>VEntry</name></argument>&gt;</argument_list></name></type> <name>insertBuffer</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>BUFFER_CAPACITY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>ignoreEntries</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>Importer</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>PreviewParser</name></type> <name>previewParser</name></decl></parameter>, <parameter><decl><type><name>IMPORT_LIST_MODE</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>VList</name></type> <name>overrideList</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>previewParser</name><operator>.</operator><name>isRawData</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>overrideList</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"RawData without passed table!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Missing table!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>previewParser</name></name> <operator>=</operator> <name>previewParser</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>overrideList</name></name> <operator>=</operator> <name>overrideList</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>db</name> <operator>=</operator> <operator>new</operator> <call><name>Database</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ignoreEntries</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>start</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// raw data or single list with create flag</comment>
        <if>if <condition>(<expr><call><name><name>previewParser</name><operator>.</operator><name>isRawData</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name><name>previewParser</name><operator>.</operator><name>isMultiList</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>mode</name> <operator>==</operator> <name><name>IMPORT_LIST_MODE</name><operator>.</operator><name>CREATE</name></name><operator>)</operator></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>currentList</name> <operator>=</operator> <name>overrideList</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>upsertVList</name></name><argument_list>(<argument><expr><name>currentList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>newTable</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>columnA</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>columnB</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>flushBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ignoreEntries</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>VList</name></type> <name>tbl</name> <init>= <expr><operator>new</operator> <call><name>VList</name><argument_list>(<argument><expr><name>columnA</name></expr></argument>, <argument><expr><name>columnB</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>previewParser</name><operator>.</operator><name>isRawData</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"New VList command on raw data list!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>previewParser</name><operator>.</operator><name>isMultiList</name></name><argument_list>()</argument_list></call> <operator>||</operator> <name>mode</name> <operator>!=</operator> <name><name>IMPORT_LIST_MODE</name><operator>.</operator><name>CREATE</name></name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name><name>VList</name><operator>.</operator><name>isIDValid</name></name><argument_list>(<argument><expr><call><name><name>db</name><operator>.</operator><name>getSetTableID</name></name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name><name>IMPORT_LIST_MODE</name><operator>.</operator><name>REPLACE</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>emptyList</name></name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <elseif>else <if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name><name>IMPORT_LIST_MODE</name><operator>.</operator><name>IGNORE</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>ignoreEntries</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                }</block></then></if></elseif></if>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>upsertVList</name></name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <expr_stmt><expr><name>currentList</name> <operator>=</operator> <name>tbl</name></expr>;</expr_stmt>
        }</block></then></if></elseif></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>newEntry</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>B</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>Tip</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>addition</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><operator>!</operator><name>ignoreEntries</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>insertBuffer</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>VEntry</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>Tip</name></expr></argument>, <argument><expr><name>addition</name></expr></argument>, <argument><expr><name>currentList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>insertBuffer</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>BUFFER_CAPACITY</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>flushBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Flushes the buffer and inserts everything
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>flushBuffer</name><parameter_list>()</parameter_list> <block>{
        <if>if<condition>(<expr><call><name><name>insertBuffer</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>upsertEntries</name></name><argument_list>(<argument><expr><name>insertBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>insertBuffer</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>insertBuffer</name><operator>.</operator><name>ensureCapacity</name></name><argument_list>(<argument><expr><name>BUFFER_CAPACITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>finish</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>flushBuffer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Import list handling mode
     */</comment>
    <enum><specifier>public</specifier> enum <name>IMPORT_LIST_MODE</name> <block>{
        <comment type="block" format="javadoc">/**
         * Replace existing list's vocables
         */</comment>
        <decl><name>REPLACE</name></decl>,
        <comment type="block" format="javadoc">/**
         * Add to existing lists
         */</comment>
        <decl><name>ADD</name></decl>,
        <comment type="block" format="javadoc">/**
         * Ignore existing lists
         */</comment>
        <decl><name>IGNORE</name></decl>,
        <comment type="block" format="javadoc">/**
         * Create new list
         */</comment>
        <decl><name>CREATE</name></decl>
    }</block></enum>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/lib/Comparator/GenFileEntryComparator.java" hash="46bdebed0300229494199c2c16883403a276cc73"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Comparator</name></name>;</package>


<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>BasicFileEntry</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Generic FileEntry comparator
 *
 * @param &lt;V&gt;
 */</comment>
<class><specifier>public</specifier> class <name><name>GenFileEntryComparator</name><parameter_list>&lt;<parameter><name>V</name> <extends>extends <name>Comparable</name></extends></parameter>&gt;</parameter_list></name> <super><extends>extends <name><name>GenericComparator</name><argument_list type="generic">&lt;<argument><name>BasicFileEntry</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name></extends></super> <block>{
    <comment type="block" format="javadoc">/**
     * Generic Comparator for BasicFileEntry
     *
     * @param retrievers retrievers to use for comparision&lt;br&gt;
     *                   passed array order defines the comparision priority
     */</comment>
    <constructor><specifier>public</specifier> <name>GenFileEntryComparator</name><parameter_list>(<parameter><decl><type><name><name>ValueRetriever</name><index>[]</index></name></type> <name>retrievers</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>retrievers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * type retriever&lt;br&gt;
     * should be used as first retriever to guarantee correct type orders
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>GenericComparator</name><operator>.</operator><name>ValueRetriever</name></name></type> <name>retType</name> <init>= <expr><operator>new</operator> <class><super><name><name>ValueRetriever</name><argument_list type="generic">&lt;<argument><name>BasicFileEntry</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>Integer</name></type> <name>getV</name><parameter_list>(<parameter><decl><type><name>BasicFileEntry</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{
            <if>if <condition>(<expr><call><name><name>obj</name><operator>.</operator><name>getTypeID</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>BasicFileEntry</name><operator>.</operator><name>TYPE_DIR</name></name></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if>
            <if>if <condition>(<expr><call><name><name>obj</name><operator>.</operator><name>getTypeID</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>BasicFileEntry</name><operator>.</operator><name>TYPE_UP</name></name></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return></block></then>
            <else>else
                <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></else></if>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * name retriever
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>GenericComparator</name><operator>.</operator><name>ValueRetriever</name></name></type> <name>retName</name> <init>= <expr><operator>new</operator> <class><super><name><name>ValueRetriever</name><argument_list type="generic">&lt;<argument><name>BasicFileEntry</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>String</name></type> <name>getV</name><parameter_list>(<parameter><decl><type><name>BasicFileEntry</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><call><name><name>obj</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * size retriever
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>GenericComparator</name><operator>.</operator><name>ValueRetriever</name></name></type> <name>retSize</name> <init>= <expr><operator>new</operator> <class><super><name><name>ValueRetriever</name><argument_list type="generic">&lt;<argument><name>BasicFileEntry</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>Long</name></type> <name>getV</name><parameter_list>(<parameter><decl><type><name>BasicFileEntry</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><call><name><name>obj</name><operator>.</operator><name>getISize</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/lib/Comparator/GenTableComparator.java" hash="0f549d62808cf0001f2d12230d5904375ac954e0"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Comparator</name></name>;</package>

<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>VList</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Generic comparator for lists&lt;br&gt;
 * Checks for top table objects according to their ID&lt;br&gt;
 * can't handle more than one head table
 */</comment>
<class><specifier>public</specifier> class <name>GenTableComparator</name> <super><extends>extends <name><name>GenericComparator</name><argument_list type="generic">&lt;<argument><name>VList</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>headID</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Generic VList Comparator
     *
     * @param retrievers retrievers to use for comparision&lt;br&gt;
     *                   passed array order defines the comparision priority
     * @param headID     ID of table to set on top
     */</comment>
    <constructor><specifier>public</specifier> <name>GenTableComparator</name><parameter_list>(<parameter><decl><type><name><name>ValueRetriever</name><index>[]</index></name></type> <name>retrievers</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>headID</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>retrievers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>headID</name></name> <operator>=</operator> <name>headID</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>VList</name></type> <name>o1</name></decl></parameter>, <parameter><decl><type><name>VList</name></type> <name>o2</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>o1</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>headID</name></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if>
        <if>if <condition>(<expr><call><name><name>o2</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>headID</name></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
        <return>return <expr><call><name><name>super</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name>o1</name></expr></argument>, <argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Name retriever
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>GenericComparator</name><operator>.</operator><name>ValueRetriever</name></name></type> <name>retName</name> <init>= <expr><operator>new</operator> <class><super><name><name>GenericComparator</name><operator>.</operator><name><name>ValueRetriever</name><argument_list type="generic">&lt;<argument><name>VList</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>String</name></type> <name>getV</name><parameter_list>(<parameter><decl><type><name>VList</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><call><name><name>obj</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * A retriever
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>GenericComparator</name><operator>.</operator><name>ValueRetriever</name></name></type> <name>retA</name> <init>= <expr><operator>new</operator> <class><super><name><name>GenericComparator</name><operator>.</operator><name><name>ValueRetriever</name><argument_list type="generic">&lt;<argument><name>VList</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>String</name></type> <name>getV</name><parameter_list>(<parameter><decl><type><name>VList</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><call><name><name>obj</name><operator>.</operator><name>getNameA</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * B retriever
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>GenericComparator</name><operator>.</operator><name>ValueRetriever</name></name></type> <name>retB</name> <init>= <expr><operator>new</operator> <class><super><name><name>GenericComparator</name><operator>.</operator><name><name>ValueRetriever</name><argument_list type="generic">&lt;<argument><name>VList</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>String</name></type> <name>getV</name><parameter_list>(<parameter><decl><type><name>VList</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><call><name><name>obj</name><operator>.</operator><name>getNameB</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/fragment/BaseFragment.java" hash="fe9048173f88ff0aa6963363b14c2d4ac2354825"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>fragment</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>AppCompatActivity</name></name>;</import>

<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>activity</name><operator>.</operator><name>FragmentActivity</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Base fragment to be used
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>BaseFragment</name> <super><extends>extends <name>Fragment</name></extends></super> <block>{
    <comment type="block" format="javadoc">/**
     * Returns the FragmentActivity&lt;br&gt;
     *     This assumes the parent activity is instance of FragmentActivity
     * @return FragmentActivity
     */</comment>
    <function><specifier>protected</specifier> <type><name>FragmentActivity</name></type> <name>getFragmentActivity</name><parameter_list>()</parameter_list><block>{
        <return>return <expr><operator>(</operator><name>FragmentActivity</name><operator>)</operator> <call><name>getActivity</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the current AppCompatActivity casted via getActivity
     * @return AppCompatActivity
     */</comment>
    <function><specifier>public</specifier> <type><name>AppCompatActivity</name></type> <name>getACActivity</name><parameter_list>()</parameter_list><block>{
        <return>return <expr><operator>(</operator><name>AppCompatActivity</name><operator>)</operator> <call><name>getActivity</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/lib/Comparator/GenericComparator.java" hash="fb55c15b0476875b1c743771d9773abfdea8bc4c"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Comparator</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Generic Comparator&lt;br&gt;
 * Allows for comparision over multiple values&lt;br&gt;
 *
 * @param &lt;T&gt;
 */</comment>
<class><specifier>public</specifier> class <name><name>GenericComparator</name><parameter_list>&lt;<parameter><name>T</name></parameter>, <parameter><name>V</name> <extends>extends <name>Comparable</name></extends></parameter>&gt;</parameter_list></name> <super><implements>implements <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></implements></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name><name><name>ValueRetriever</name><argument_list type="generic">&lt;<argument><name>T</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name><index>[]</index></name></type> <name>retrievers</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Generic Comparator
     *
     * @param retrievers retrievers to use for comparision&lt;br&gt;
     *                   passed array order defines the comparision priority
     */</comment>
    <constructor><name>GenericComparator</name><parameter_list>(<parameter><decl><type><name><name>ValueRetriever</name><index>[]</index></name></type> <name>retrievers</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>retrievers</name></name> <operator>=</operator> <name>retrievers</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>o1</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>o2</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>v</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>retrievers</name><operator>.</operator><name>length</name></name></expr>)</condition> <block>{
            <expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>retrievers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getV</name><argument_list>(<argument><expr><name>o1</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><name><name>retrievers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getV</name><argument_list>(<argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
        }</block></while>
        <return>return <expr><name>v</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Retrieves values for comparision
     *
     * @param &lt;T&gt;
     * @param &lt;V&gt;
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>abstract</specifier> class <name><name>ValueRetriever</name><parameter_list>&lt;<parameter><name>T</name></parameter>, <parameter><name>V</name></parameter>&gt;</parameter_list></name> <block>{
        <comment type="block" format="javadoc">/**
         * Returns value of object to compare with
         *
         * @param obj
         * @return
         */</comment>
        <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>V</name></type> <name>getV</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>obj</name></decl></parameter>)</parameter_list>;</function_decl>
    }</block></class>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/fragment/FormatFragment.java" hash="2893265bb0f558e7ac2f0759797524bfd044c4f4"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>fragment</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v14</name><operator>.</operator><name>preference</name><operator>.</operator><name>SwitchPreference</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>DialogFragment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>ActionBar</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>AlertDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>preference</name><operator>.</operator><name>EditTextPreference</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>preference</name><operator>.</operator><name>EditTextPreferenceDialogFragmentCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>preference</name><operator>.</operator><name>Preference</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceFragmentCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>InputFilter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Menu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>EditText</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name><operator>.</operator><name>CSVFormat</name></name>;</import>

<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>activity</name><operator>.</operator><name>ExImportActivity</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>activity</name><operator>.</operator><name>FragmentActivity</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>CSVCustomFormat</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>CustomEditTextPreference</name></name>;</import>

<import>import static <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>activity</name><operator>.</operator><name>MainActivity</name><operator>.</operator><name>PREFS_NAME</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Fragment for custom cFormat preferences
 */</comment>
<class><specifier>public</specifier> class <name>FormatFragment</name> <super><extends>extends <name>PreferenceFragmentCompat</name></extends> <implements>implements <name><name>FragmentActivity</name><operator>.</operator><name>BackButtonListener</name></name></implements></super> <block>{
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><literal type="string">"FormatFragment"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>C_DIALOG_TAG</name> <init>= <expr><literal type="string">"android.support.v7.preference.PreferenceFragment.DIALOG"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CHAR_POS</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="line">// char pos for first char</comment>
    <decl_stmt><decl><type><name>SwitchPreference</name></type> <name>swEscaping</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SwitchPreference</name></type> <name>swComment</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SwitchPreference</name></type> <name>swQuote</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SwitchPreference</name></type> <name>swHeaderLine</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SwitchPreference</name></type> <name>swIgnoreSpaces</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SwitchPreference</name></type> <name>swIgnEmptyLines</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SwitchPreference</name></type> <name>swMultimeaning</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SwitchPreference</name></type> <name>swMMEscape</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>EditTextPreference</name></type> <name>tEscaping</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>EditTextPreference</name></type> <name>tComment</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>EditTextPreference</name></type> <name>tQuote</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>EditTextPreference</name></type> <name>tDelimiter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>EditTextPreference</name></type> <name>tMultimeaning</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>EditTextPreference</name></type> <name>tMMEscape</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>InputFilter</name><index>[]</index></name></type> <name>lengthFilter</name> <init>= <expr><operator>new</operator> <name><name>InputFilter</name><index>[]</index></name> <block>{<expr><operator>new</operator> <call><name><name>InputFilter</name><operator>.</operator><name>LengthFilter</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>}</block></expr></init></decl>;</decl_stmt>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreatePreferences</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>rootKey</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>addPreferencesFromResource</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>xml</name><operator>.</operator><name>pref_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ActionBar</name></type> <name>ab</name> <init>= <expr><operator>(</operator><operator>(</operator><name>FragmentActivity</name><operator>)</operator> <call><name>getActivity</name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getSupportActionBar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>ab</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>ab</name><operator>.</operator><name>setSubtitle</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ab</name><operator>.</operator><name>setHomeButtonEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name>setHasOptionsMenu</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>swEscaping</name> <operator>=</operator> <operator>(</operator><name>SwitchPreference</name><operator>)</operator> <call><name>findPreference</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>k_pref_escape</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>swComment</name> <operator>=</operator> <operator>(</operator><name>SwitchPreference</name><operator>)</operator> <call><name>findPreference</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>k_pref_comment</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>swQuote</name> <operator>=</operator> <operator>(</operator><name>SwitchPreference</name><operator>)</operator> <call><name>findPreference</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>k_pref_quote</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>swHeaderLine</name> <operator>=</operator> <operator>(</operator><name>SwitchPreference</name><operator>)</operator> <call><name>findPreference</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>k_pref_first_line_header</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>swIgnEmptyLines</name> <operator>=</operator> <operator>(</operator><name>SwitchPreference</name><operator>)</operator> <call><name>findPreference</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>k_pref_ignore_empty_lines</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>swIgnoreSpaces</name> <operator>=</operator> <operator>(</operator><name>SwitchPreference</name><operator>)</operator> <call><name>findPreference</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>k_pref_ignore_spaces</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>swMultimeaning</name> <operator>=</operator> <operator>(</operator><name>SwitchPreference</name><operator>)</operator> <call><name>findPreference</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>k_pref_multi_transl</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>swMMEscape</name> <operator>=</operator> <operator>(</operator><name>SwitchPreference</name><operator>)</operator> <call><name>findPreference</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>k_pref_multi_transl_escape</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>tEscaping</name> <operator>=</operator> <operator>(</operator><name>EditTextPreference</name><operator>)</operator> <call><name>findPreference</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>k_pref_escape_char</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tQuote</name> <operator>=</operator> <operator>(</operator><name>EditTextPreference</name><operator>)</operator> <call><name>findPreference</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>k_pref_quote_char</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tDelimiter</name> <operator>=</operator> <operator>(</operator><name>EditTextPreference</name><operator>)</operator> <call><name>findPreference</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>k_pref_delimiter</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tComment</name> <operator>=</operator> <operator>(</operator><name>EditTextPreference</name><operator>)</operator> <call><name>findPreference</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>k_pref_comment_char</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tMultimeaning</name> <operator>=</operator> <operator>(</operator><name>EditTextPreference</name><operator>)</operator> <call><name>findPreference</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>k_pref_multi_transl_char</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tMMEscape</name> <operator>=</operator> <operator>(</operator><name>EditTextPreference</name><operator>)</operator> <call><name>findPreference</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>k_pref_multi_transl_escape_char</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onStart</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onStart</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>loadPrefs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onStop</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><call><name>verifyFormat</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>ExImportActivity</name><operator>.</operator><name>updateCustomFormat</name></name><argument_list>(<argument><expr><call><name>savePrefsToCSVFormat</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Load CSVFormat to preferences
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>loadPrefs</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>pref</name> <init>= <expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSharedPreferences</name><argument_list>(<argument><expr><name>PREFS_NAME</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>loadPrefsFromCSVFormat</name><argument_list>(<argument><expr><call><name><name>ExImportActivity</name><operator>.</operator><name>getCustomFormat</name></name><argument_list>(<argument><expr><name>pref</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Load preferences from CSV cFormat
     *
     * @param cformat CSVCustomFormat to load
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>loadPrefsFromCSVFormat</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CSVCustomFormat</name></type> <name>cformat</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>CSVFormat</name></type> <name>format</name> <init>= <expr><call><name><name>cformat</name><operator>.</operator><name>getFormat</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>swEscaping</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><call><name><name>format</name><operator>.</operator><name>isEscapeCharacterSet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>swQuote</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><call><name><name>format</name><operator>.</operator><name>isQuoteCharacterSet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>swComment</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><call><name><name>format</name><operator>.</operator><name>isCommentMarkerSet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>swHeaderLine</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><call><name><name>format</name><operator>.</operator><name>getSkipHeaderRecord</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>swIgnEmptyLines</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><call><name><name>format</name><operator>.</operator><name>getIgnoreEmptyLines</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>swIgnoreSpaces</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><call><name><name>format</name><operator>.</operator><name>getIgnoreSurroundingSpaces</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>swMultimeaning</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><call><name><name>cformat</name><operator>.</operator><name>isMultiValueEnabled</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>swMMEscape</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><call><name><name>cformat</name><operator>.</operator><name>isMVEscapeEnabled</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>tEscaping</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>format</name><operator>.</operator><name>getEscapeCharacter</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tComment</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>format</name><operator>.</operator><name>getCommentMarker</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tDelimiter</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>format</name><operator>.</operator><name>getDelimiter</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tQuote</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>format</name><operator>.</operator><name>getQuoteCharacter</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tMultimeaning</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>cformat</name><operator>.</operator><name>getMultiValueChar</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tMMEscape</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>cformat</name><operator>.</operator><name>getEscapeMVChar</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Verify the CSV Format input and return true on success&lt;br&gt;
     *     Shows a warning dialog on errors
     * @return
     */</comment>
    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>verifyFormat</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>partA</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <comment type="line">// we have to initialize this..</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>partB</name> <init>= <expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Pref_Delimiter</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>boolean</name></type> <name>passed</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>char</name></type> <name>delimiter</name> <init>= <expr><call><name><name>tDelimiter</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>charAt</name><argument_list>(<argument><expr><name>CHAR_POS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>swQuote</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>delimiter</name> <operator>==</operator> <call><name><name>tQuote</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>charAt</name><argument_list>(<argument><expr><name>CHAR_POS</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>partA</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Pref_Quote</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>passed</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>swEscaping</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>delimiter</name> <operator>==</operator> <call><name><name>tEscaping</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>charAt</name><argument_list>(<argument><expr><name>CHAR_POS</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>partA</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Pref_Escape</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>passed</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>swComment</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>delimiter</name> <operator>==</operator> <call><name><name>tComment</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>charAt</name><argument_list>(<argument><expr><name>CHAR_POS</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>partA</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Pref_Comment</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>passed</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>swMultimeaning</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>delimiter</name> <operator>==</operator> <call><name><name>tMultimeaning</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>charAt</name><argument_list>(<argument><expr><name>CHAR_POS</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>partA</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Pref_Multi_Transl</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>passed</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>swQuote</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>tQuote</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>charAt</name><argument_list>(<argument><expr><name>CHAR_POS</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>tComment</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>charAt</name><argument_list>(<argument><expr><name>CHAR_POS</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>partA</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Pref_Quote</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>partB</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Pref_Comment</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>passed</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>swEscaping</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>tEscaping</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>charAt</name><argument_list>(<argument><expr><name>CHAR_POS</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>tComment</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>charAt</name><argument_list>(<argument><expr><name>CHAR_POS</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>partA</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Pref_Escape</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>partB</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Pref_Comment</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>passed</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        }</block></then></if>

        <if>if<condition>(<expr><operator>!</operator><name>passed</name></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>String</name></type> <name>sA</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><name>partA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>sB</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><name>partB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>String</name></type> <name>msg</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Format_Error_Input_equals</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><literal type="string">"$A"</literal></expr></argument>,<argument><expr><name>sA</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><literal type="string">"$B"</literal></expr></argument>,<argument><expr><name>sB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name></type> <name>errorDiag</name> <init>= <expr><operator>new</operator> <call><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>errorDiag</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Format_Diag_error_Title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>errorDiag</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>errorDiag</name><operator>.</operator><name>setPositiveButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>GEN_Ok</name></name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>dialog</name></decl></parameter>, <parameter><decl><name>whichButton</name></decl></parameter>)</parameter_list> -&gt; <block>{
            }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>errorDiag</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <return>return <expr><name>passed</name></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Creates a CSVFormat object out of the settings
     *
     * @return
     */</comment>
    <function><specifier>private</specifier> <type><name>CSVCustomFormat</name></type> <name>savePrefsToCSVFormat</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>CSVFormat</name></type> <name>format</name> <init>= <expr><call><name><name>CSVFormat</name><operator>.</operator><name>newFormat</name></name><argument_list>(<argument><expr><call><name><name>tDelimiter</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>charAt</name><argument_list>(<argument><expr><name>CHAR_POS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>swEscaping</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>format</name> <operator>=</operator> <call><name><name>format</name><operator>.</operator><name>withEscape</name></name><argument_list>(<argument><expr><call><name><name>tEscaping</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>charAt</name><argument_list>(<argument><expr><name>CHAR_POS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><call><name><name>swComment</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>format</name> <operator>=</operator> <call><name><name>format</name><operator>.</operator><name>withCommentMarker</name></name><argument_list>(<argument><expr><call><name><name>tComment</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>charAt</name><argument_list>(<argument><expr><name>CHAR_POS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><call><name><name>swQuote</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>format</name> <operator>=</operator> <call><name><name>format</name><operator>.</operator><name>withQuote</name></name><argument_list>(<argument><expr><call><name><name>tQuote</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>charAt</name><argument_list>(<argument><expr><name>CHAR_POS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><call><name><name>swHeaderLine</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>format</name> <operator>=</operator> <call><name><name>format</name><operator>.</operator><name>withFirstRecordAsHeader</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><call><name><name>swIgnEmptyLines</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>format</name> <operator>=</operator> <call><name><name>format</name><operator>.</operator><name>withIgnoreEmptyLines</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><call><name><name>swIgnoreSpaces</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>format</name> <operator>=</operator> <call><name><name>format</name><operator>.</operator><name>withIgnoreSurroundingSpaces</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>

        <decl_stmt><decl><type><name>Character</name></type> <name>multiMeaningChar</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Character</name></type> <name>multiMeaningEscapeChar</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>swMultimeaning</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>multiMeaningChar</name> <operator>=</operator> <call><name><name>tMultimeaning</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>charAt</name><argument_list>(<argument><expr><name>CHAR_POS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><call><name><name>swMMEscape</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>multiMeaningEscapeChar</name> <operator>=</operator> <call><name><name>tMMEscape</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>charAt</name><argument_list>(<argument><expr><name>CHAR_POS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

        <return>return <expr><operator>new</operator> <call><name>CSVCustomFormat</name><argument_list>(<argument><expr><call><name><name>format</name><operator>.</operator><name>withAllowMissingColumnNames</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>multiMeaningChar</name></expr></argument>,<argument><expr><name>multiMeaningEscapeChar</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreateOptionsMenu</name><parameter_list>(<parameter><decl><type><name>Menu</name></type> <name>menu</name></decl></parameter>, <parameter><decl><type><name>MenuInflater</name></type> <name>inflater</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>menu</name><operator>.</operator><name>format_pref</name></name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreateOptionsMenu</name></name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>inflater</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onPrepareOptionsMenu</name><parameter_list>(<parameter><decl><type><name>Menu</name></type> <name>menu</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onPrepareOptionsMenu</name></name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onOptionsItemSelected</name><parameter_list>(<parameter><decl><type><name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
        <switch>switch <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>fResetDefault</name></name></expr>:</case>
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"reset to default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>loadPrefsFromCSVFormat</name><argument_list>(<argument><expr><name><name>CSVCustomFormat</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>fResetPrev</name></name></expr>:</case>
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"reset to previous"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>loadPrefs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></switch>
        <return>return <expr><call><name><name>super</name><operator>.</operator><name>onOptionsItemSelected</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onBackPressed</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>verifyFormat</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDisplayPreferenceDialog</name><parameter_list>(<parameter><decl><type><name>Preference</name></type> <name>preference</name></decl></parameter>)</parameter_list> <block>{
        <comment type="line">// hack for custom dialog to allow for edittext filters</comment>

        <comment type="line">// dialog shown</comment>
        <if>if <condition>(<expr><call><name>getFragmentManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findFragmentByTag</name><argument_list>(<argument><expr><name>C_DIALOG_TAG</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>DialogFragment</name></type> <name>f</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>preference</name> <operator>instanceof</operator> <name>CustomEditTextPreference</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>f</name> <operator>=</operator> <call><name><name>EditTextPreferenceDialog</name><operator>.</operator><name>newInstance</name></name><argument_list>(<argument><expr><call><name><name>preference</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>lengthFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDisplayPreferenceDialog</name></name><argument_list>(<argument><expr><name>preference</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <if>if <condition>(<expr><name>f</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>setTargetFragment</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><call><name>getFragmentManager</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>C_DIALOG_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Custom EditText preference dialog to allow for Filters
     * Because correct Android is hard.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>EditTextPreferenceDialog</name> <super><extends>extends <name>EditTextPreferenceDialogFragmentCompat</name></extends></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <type><name><name>InputFilter</name><index>[]</index></name></type> <name>filters</name></decl>;</decl_stmt>

        <function><specifier>public</specifier> <specifier>static</specifier> <type><name>EditTextPreferenceDialog</name></type> <name>newInstance</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name><name>InputFilter</name><index>[]</index></name></type> <name>filters</name></decl></parameter>)</parameter_list> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>EditTextPreferenceDialog</name></type>
                    <name>fragment</name> <init>= <expr><operator>new</operator> <call><name>EditTextPreferenceDialog</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>b</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>ARG_KEY</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>fragment</name><operator>.</operator><name>setArguments</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>fragment</name><operator>.</operator><name>filters</name></name> <operator>=</operator> <name>filters</name></expr>;</expr_stmt>
            <return>return <expr><name>fragment</name></expr>;</return>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <type><name>void</name></type> <name>onBindDialogView</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onBindDialogView</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>EditText</name><operator>)</operator><call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>edit</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>setFilters</name><argument_list>(<argument><expr><name>filters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/lib/Database.java" hash="beb908d70340f218ff67a542abd9864ab0f6833a"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ContentValues</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>sqlite</name><operator>.</operator><name>SQLiteDatabase</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>sqlite</name><operator>.</operator><name>SQLiteOpenHelper</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>sqlite</name><operator>.</operator><name>SQLiteStatement</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>SparseArray</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>SQLException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>TrainerSettings</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>VEntry</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>VList</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Database manager&lt;br&gt;
 * Doing all relevant DB stuff
 */</comment>
<class><specifier>public</specifier> class <name>Database</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><literal type="string">"Database"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>DB_NAME_DEV</name> <init>= <expr><literal type="string">"test1.db"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>DB_NAME_PRODUCTION</name> <init>= <expr><literal type="string">"voc.db"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>MIN_ID_TRESHOLD</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>ID_RESERVED_SKIP</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>TBL_VOCABLE</name> <init>= <expr><literal type="string">"`vocables2`"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>TBL_TABLES</name> <init>= <expr><literal type="string">"`voc_tables2`"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>TBL_SESSION</name> <init>= <expr><literal type="string">"`session`"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>TBL_SESSION_META</name> <init>= <expr><literal type="string">"`session_meta`"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>TBL_SESSION_TABLES</name> <init>= <expr><literal type="string">"`session_tables`"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>TBL_MEANING_A</name> <init>= <expr><literal type="string">"`meaning_a`"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>TBL_MEANING_B</name> <init>= <expr><literal type="string">"`meaning_b`"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>TBL_SESSION_VOC</name> <init>= <expr><literal type="string">"`session_voc`"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>KEY_VOC</name> <init>= <expr><literal type="string">"`voc`"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>KEY_NAME_A</name> <init>= <expr><literal type="string">"`name_a`"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>KEY_NAME_B</name> <init>= <expr><literal type="string">"`name_b`"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>KEY_TIP</name> <init>= <expr><literal type="string">"`tip`"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>KEY_TABLE</name> <init>= <expr><literal type="string">"`table`"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>KEY_LAST_USED</name> <init>= <expr><literal type="string">"`last_used`"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>KEY_NAME_TBL</name> <init>= <expr><literal type="string">"`name`"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>KEY_MEANING</name> <init>= <expr><literal type="string">"`meaning`"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>KEY_CREATED</name> <init>= <expr><literal type="string">"`created`"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>KEY_CORRECT</name> <init>= <expr><literal type="string">"`correct`"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>KEY_WRONG</name> <init>= <expr><literal type="string">"`wrong`"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>KEY_ADDITION</name> <init>= <expr><literal type="string">"`addition`"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>KEY_POINTS</name> <init>= <expr><literal type="string">"`points`"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>KEY_MKEY</name> <init>= <expr><literal type="string">"`key`"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>KEY_MVALUE</name> <init>= <expr><literal type="string">"`value`"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>SQLiteDatabase</name></type> <name>dbIntern</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt> <comment type="line">// DB to internal file, 99% of the time used</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><name>SQLiteDatabase</name></type> <name>db</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt> <comment type="line">// pointer to DB used in this class</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><name>internalDB</name></type> <name>helper</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Database for export / import
     *
     * @param context
     * @param file    // file to use for this DB
     */</comment>
    <constructor><specifier>public</specifier> <name>Database</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>File</name></type> <name>file</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>helper</name> <operator>=</operator> <operator>new</operator> <call><name>internalDB</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>db</name></name> <operator>=</operator> <call><name><name>helper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * Database object, using internal storage for this App (default DB file)
     *
     * @param context
     * @param dev     set to true for unit tests&lt;br&gt;
     *                no data will be saved
     */</comment>
    <constructor><specifier>public</specifier> <name>Database</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>dev</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>dbIntern</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>helper</name> <operator>=</operator> <operator>new</operator> <call><name>internalDB</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>dbIntern</name> <operator>=</operator> <call><name><name>helper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>db</name></name> <operator>=</operator> <name>dbIntern</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * Database object
     *
     * @param context
     */</comment>
    <constructor><specifier>public</specifier> <name>Database</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * Retrieve vocable by ID &amp; list ID
     * @param vocID
     * @param listID
     * @return VEntry with set List&lt;br&gt;
     *     Null on failure
     */</comment>
    <function><specifier>public</specifier> <type><name>VEntry</name></type> <name>getVocable</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>vocID</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>listID</name></decl></parameter>)</parameter_list><block>{
        <try>try <init>(<decl><type><name>Cursor</name></type> <name>cV</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>rawQuery</name></name><argument_list>(
                <argument><expr><literal type="string">"SELECT "</literal><operator>+</operator> <name>KEY_TIP</name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>KEY_ADDITION</name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>KEY_LAST_USED</name>
                    <operator>+</operator> <literal type="string">",tVoc."</literal> <operator>+</operator> <name>KEY_CREATED</name> <operator>+</operator><literal type="string">","</literal> <operator>+</operator> <name>KEY_CORRECT</name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>KEY_WRONG</name>
                    <operator>+</operator> <literal type="string">",tVoc."</literal> <operator>+</operator> <name>KEY_TABLE</name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>KEY_NAME_A</name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>KEY_NAME_B</name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>KEY_NAME_TBL</name>
                    <operator>+</operator> <literal type="string">",tList."</literal> <operator>+</operator> <name>KEY_CREATED</name>
                    <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>KEY_POINTS</name>
                <operator>+</operator> <literal type="string">" FROM "</literal> <operator>+</operator> <name>TBL_VOCABLE</name> <operator>+</operator> <literal type="string">" tVoc"</literal>
                <operator>+</operator> <literal type="string">" JOIN "</literal> <operator>+</operator> <name>TBL_TABLES</name> <operator>+</operator> <literal type="string">" tList ON tVoc."</literal> <operator>+</operator> <name>KEY_TABLE</name><operator>+</operator><literal type="string">" = tList."</literal> <operator>+</operator> <name>KEY_TABLE</name>
                <operator>+</operator> <literal type="string">" LEFT JOIN "</literal> <operator>+</operator> <name>TBL_SESSION</name> <operator>+</operator> <literal type="string">" ses ON tVoc."</literal> <operator>+</operator> <name>KEY_TABLE</name> <operator>+</operator> <literal type="string">" = ses."</literal> <operator>+</operator> <name>KEY_TABLE</name>
                    <operator>+</operator> <literal type="string">" AND tVoc."</literal> <operator>+</operator> <name>KEY_VOC</name> <operator>+</operator> <literal type="string">" = ses."</literal> <operator>+</operator> <name>KEY_VOC</name>
                <operator>+</operator> <literal type="string">" WHERE tVoc."</literal> <operator>+</operator> <name>KEY_TABLE</name> <operator>+</operator> <literal type="string">" = ? AND tVoc."</literal> <operator>+</operator> <name>KEY_VOC</name><operator>+</operator><literal type="string">" = ?"</literal></expr></argument>,
                <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>listID</name></expr></argument>)</argument_list></call></expr>,<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>vocID</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>)</init><block>{
            <if>if<condition>(<expr><call><name><name>cV</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
                <decl_stmt><decl><type><name>VList</name></type> <name>list</name> <init>= <expr><operator>new</operator> <call><name>VList</name><argument_list>(<argument><expr><name>listID</name></expr></argument>,<argument><expr><call><name><name>cV</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>cV</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name><name>cV</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>cV</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>meaningA</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>meaningB</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>VEntry</name></type> <name>vocable</name> <init>= <expr><operator>new</operator> <call><name>VEntry</name><argument_list>(<argument><expr><name>meaningA</name></expr></argument>,<argument><expr><name>meaningB</name></expr></argument>,<argument><expr><call><name><name>cV</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name><name>cV</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>vocID</name></expr></argument>,<argument><expr><name>list</name></expr></argument>,
                    <argument><expr><ternary><condition><expr><call><name><name>cV</name><operator>.</operator><name>isNull</name></name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>cV</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
                    <argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>cV</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>cV</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name><name>cV</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>cV</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name>getVocableMeanings</name><argument_list>(<argument><expr><name>TBL_MEANING_A</name></expr></argument>,<argument><expr><name>vocable</name></expr></argument>,<argument><expr><name>meaningA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>getVocableMeanings</name><argument_list>(<argument><expr><name>TBL_MEANING_B</name></expr></argument>,<argument><expr><name>vocable</name></expr></argument>,<argument><expr><name>meaningB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return>return <expr><name>vocable</name></expr>;</return>
            }</block></then><else>else<block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"vocable not found by ID!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            }</block></else></if>
        }</block></try>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Fill meaning list of vocable entry
     *
     * @param table Table to use
     * @param vocable Vocable as identifier
     * @param list List in which to insert
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>getVocableMeanings</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <specifier>final</specifier> <name>String</name></type> <name>table</name></decl></parameter>,<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <specifier>final</specifier> <name>VEntry</name></type> <name>vocable</name></decl></parameter>,<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>list</name></decl></parameter>)</parameter_list> <block>{
        <try>try <init>(<decl><type><name>Cursor</name></type> <name>cM</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>,<argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><name>KEY_MEANING</name></expr>}</block></expr></argument>,
            <argument><expr><name>KEY_TABLE</name><operator>+</operator><literal type="string">" = ? AND "</literal><operator>+</operator><name>KEY_VOC</name><operator>+</operator><literal type="string">" = ?"</literal></expr></argument>,
            <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>vocable</name><operator>.</operator><name>getList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>vocable</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>}</block></expr></argument>,
            <argument><expr><literal type="null">null</literal></expr></argument>,<argument><expr><literal type="null">null</literal></expr></argument>,<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
            <while>while<condition>(<expr><call><name><name>cM</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>cM</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
            <if>if<condition>(<expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"No meanings in "</literal><operator>+</operator><name>table</name><operator>+</operator><literal type="string">" for "</literal><operator>+</operator><name>vocable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></try>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Wipe all session points
     *
     * @return
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>wipeSessionPoints</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>TBL_SESSION</name> <operator>+</operator> <literal type="string">""</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></catch></try>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Retruns a List of Entries for the specified list&lt;br&gt;
     *     &lt;u&gt;No point data is being loaded&lt;/u&gt;
     *
     * @param list VList for which all entries should be retrieved
     * @return List&lt;VEntry&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>VEntry</name></argument>&gt;</argument_list></name></type> <name>getVocablesOfTable</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <specifier>final</specifier> <name>VList</name></type> <name>list</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>sqlMeaning</name> <init>= <expr><literal type="string">"SELECT "</literal><operator>+</operator><name>KEY_MEANING</name><operator>+</operator><literal type="string">","</literal><operator>+</operator><name>KEY_VOC</name><operator>+</operator><literal type="string">" voc FROM %s WHERE "</literal>
                <operator>+</operator><name>KEY_TABLE</name><operator>+</operator><literal type="string">" = ? ORDER BY voc"</literal></expr></init></decl>;</decl_stmt>
        <try>try <init>(
                <decl><type><name>Cursor</name></type> <name>cV</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>rawQuery</name></name><argument_list>(<argument><expr><literal type="string">"SELECT "</literal> <operator>+</operator> <name>KEY_TIP</name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>KEY_ADDITION</name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>KEY_LAST_USED</name>
                        <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>KEY_CREATED</name> <operator>+</operator><literal type="string">","</literal> <operator>+</operator> <name>KEY_CORRECT</name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>KEY_WRONG</name>
                        <operator>+</operator><literal type="string">","</literal> <operator>+</operator> <name>KEY_VOC</name>
                        <operator>+</operator> <literal type="string">" FROM "</literal> <operator>+</operator> <name>TBL_VOCABLE</name>
                        <operator>+</operator> <literal type="string">" WHERE "</literal> <operator>+</operator> <name>KEY_TABLE</name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;
                <expr><name>Cursor</name> <name>cMA</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>rawQuery</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>sqlMeaning</name></expr></argument>,<argument><expr><name>TBL_MEANING_A</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;
                <expr><name>Cursor</name> <name>cMB</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>rawQuery</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>sqlMeaning</name></expr></argument>,<argument><expr><name>TBL_MEANING_B</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;
        <expr/>)</init> <block>{
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>VEntry</name></argument>&gt;</argument_list></name></type> <name>lst</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>SparseArray</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>mapA</name> <init>= <expr><operator>new</operator> <call><name><name>SparseArray</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>SparseArray</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>mapB</name> <init>= <expr><operator>new</operator> <call><name><name>SparseArray</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>cV</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{

                <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>meaningA</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>meaningB</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>VEntry</name></type> <name>vocable</name> <init>= <expr><operator>new</operator> <call><name>VEntry</name><argument_list>(<argument><expr><name>meaningA</name></expr></argument>,<argument><expr><name>meaningB</name></expr></argument>,<argument><expr><call><name><name>cV</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name><name>cV</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>cV</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>list</name></expr></argument>,
                        <argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>cV</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>cV</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name><name>cV</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>cV</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name>mapA</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>vocable</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>meaningA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>mapB</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>vocable</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>meaningB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>lst</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>vocable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>

            <expr_stmt><expr><call><name>handleMeaningData</name><argument_list>(<argument><expr><name>cMA</name></expr></argument>,<argument><expr><name>mapA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>handleMeaningData</name><argument_list>(<argument><expr><name>cMB</name></expr></argument>,<argument><expr><name>mapB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><name>lst</name></expr>;</return>
        }</block></try>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Sort meanings from cursor into correct List:String from map
     *
     * @param cursor expected as [0] = String meaning, [1] = int ID
     * @param map
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>handleMeaningData</name><parameter_list>(<parameter><decl><type><name>Cursor</name></type> <name>cursor</name></decl></parameter>, <parameter><decl><type><name><name>SparseArray</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>map</name></decl></parameter>)</parameter_list><block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>lst</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>lastID</name> <init>= <expr><name>ID_RESERVED_SKIP</name></expr></init></decl>;</decl_stmt>
        <while>while<condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
            <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>id</name> <operator>==</operator> <name>ID_RESERVED_SKIP</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>wtf</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"ID is -1!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            <if>if<condition>(<expr><name>id</name> <operator>!=</operator> <name>lastID</name> <operator>||</operator> <name>lst</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>lst</name> <operator>=</operator> <call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>lastID</name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name><name>lst</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Debug function to retrieve points of entry
     *
     * @return
     */</comment>
    <function><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>getEntryPoints</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <specifier>final</specifier> <name>VEntry</name></type> <name>ent</name></decl></parameter>)</parameter_list> <block>{
        <try>try <init>(
                <decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>rawQuery</name></name><argument_list>(<argument><expr><literal type="string">"SELECT "</literal> <operator>+</operator> <name>KEY_POINTS</name> <operator>+</operator> <literal type="string">" "</literal>
                        <operator>+</operator> <literal type="string">"FROM "</literal> <operator>+</operator> <name>TBL_SESSION</name> <operator>+</operator> <literal type="string">" WHERE "</literal> <operator>+</operator> <name>KEY_TABLE</name> <operator>+</operator> <literal type="string">" = ? AND "</literal> <operator>+</operator> <name>KEY_VOC</name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>ent</name><operator>.</operator><name>getList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>ent</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;
        <expr/>)</init> <block>{
            <if>if <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block></then>
            <else>else
                <block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></else></if>
        }</block></try> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <throw>throw <expr><name>e</name></expr>;</throw>
        }</block></catch>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Get a list of all lists
     *
     * @return ArrayList&lt;\VList&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>VList</name></argument>&gt;</argument_list></name></type> <name>getTables</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>column</name> <init>= <expr><block>{<expr><name>KEY_TABLE</name></expr>,<expr><name>KEY_NAME_A</name></expr>,<expr><name>KEY_NAME_B</name></expr>,<expr><name>KEY_NAME_TBL</name></expr>,<expr><name>KEY_CREATED</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <try>try <init>(
                <decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name>TBL_TABLES</name></expr></argument>,<argument><expr><name>column</name></expr></argument>,<argument><expr><literal type="null">null</literal></expr></argument>,<argument><expr><literal type="null">null</literal></expr></argument>,<argument><expr><literal type="null">null</literal></expr></argument>,<argument><expr><literal type="null">null</literal></expr></argument>,<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;
        <expr/>)</init> <block>{
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>VList</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>VList</name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
            <return>return <expr><name>list</name></expr>;</return>
        }</block></try> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></catch>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Update or insert the provided VList data
     *
     * @param tbl
     * @return true on succuess
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>upsertVList</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <specifier>final</specifier> <name>VList</name></type> <name>tbl</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>v</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"upsertVList"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>tbl</name><operator>.</operator><name>isExisting</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <try>try <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>args</name> <init>= <expr><block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>tbl</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>}</block></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>ContentValues</name></type> <name>values</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_NAME_TBL</name></expr></argument>,<argument><expr><call><name><name>tbl</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_NAME_A</name></expr></argument>,<argument><expr><call><name><name>tbl</name><operator>.</operator><name>getNameA</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_NAME_B</name></expr></argument>,<argument><expr><call><name><name>tbl</name><operator>.</operator><name>getNameB</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>int</name></type> <name>updated</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>TBL_TABLES</name></expr></argument>,<argument><expr><name>values</name></expr></argument>,<argument><expr><name>KEY_TABLE</name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>,
                        <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>updated</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
                    <throw>throw <expr><operator>new</operator> <call><name>SQLException</name><argument_list>(<argument><expr><literal type="string">"Update error, updated: "</literal><operator>+</operator><name>updated</name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            }</block></catch></try>
        }</block></then> <else>else <block>{
            <try>try <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>tbl_id</name> <init>= <expr><call><name>getHighestTableID</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"highest TBL ID: "</literal> <operator>+</operator> <name>tbl_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>ContentValues</name></type> <name>values</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_TABLE</name></expr></argument>,<argument><expr><name>tbl_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_NAME_A</name></expr></argument>,<argument><expr><call><name><name>tbl</name><operator>.</operator><name>getNameA</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_NAME_B</name></expr></argument>,<argument><expr><call><name><name>tbl</name><operator>.</operator><name>getNameB</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_NAME_TBL</name></expr></argument>,<argument><expr><call><name><name>tbl</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>KEY_CREATED</name></expr></argument>,<argument><expr><call><name><name>tbl</name><operator>.</operator><name>getCreated</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>insertOrThrow</name></name><argument_list>(<argument><expr><name>TBL_TABLES</name></expr></argument>,<argument><expr><literal type="null">null</literal></expr></argument>,<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>tbl</name><operator>.</operator><name>setId</name></name><argument_list>(<argument><expr><name>tbl_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>wtf</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            }</block></catch></try>
        }</block></else></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Test is table exists
     *
     * @param db  Writeable database
     * @param tbl VList
     * @return true if it exists
     */</comment>
    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>testTableExists</name><parameter_list>(<parameter><decl><type><name>SQLiteDatabase</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>VList</name></type> <name>tbl</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>db</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"illegal sql db"</literal></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>
        <if>if <condition>(<expr><call><name><name>tbl</name><operator>.</operator><name>isExisting</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>

        <try>try <init>(
                <decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>rawQuery</name></name><argument_list>(<argument><expr><literal type="string">"SELECT 1 "</literal>
                        <operator>+</operator> <literal type="string">"FROM "</literal> <operator>+</operator> <name>TBL_TABLES</name>
                        <operator>+</operator> <literal type="string">" WHERE "</literal> <operator>+</operator> <name>KEY_TABLE</name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>tbl</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
            <return>return <expr><call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></try> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></catch>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Update and/or insert all Entries&lt;br&gt;
     * This function uses delete and changed flags in entries&lt;br&gt;
     *     &lt;u&gt;Does not update vocable metadata such as last used etc on changed flag.&lt;/u&gt;
     *
     * @param lst
     * @return true on success
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>upsertEntries</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>VEntry</name></argument>&gt;</argument_list></name></type> <name>lst</name></decl></parameter>)</parameter_list> <block>{
        <try>try <init>(
                <decl><type><name>SQLiteStatement</name></type> <name>delStm</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>compileStatement</name></name><argument_list>(<argument><expr><literal type="string">"DELETE FROM "</literal> <operator>+</operator> <name>TBL_VOCABLE</name> <operator>+</operator> <literal type="string">" WHERE "</literal> <operator>+</operator> <name>KEY_VOC</name> <operator>+</operator> <literal type="string">" = ? AND "</literal> <operator>+</operator> <name>KEY_TABLE</name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>)</argument_list></call></expr></init></decl>;
                <expr><name>SQLiteStatement</name> <name>updStm</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>compileStatement</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE "</literal> <operator>+</operator> <name>TBL_VOCABLE</name> <operator>+</operator> <literal type="string">" SET "</literal> <operator>+</operator> <name>KEY_ADDITION</name> <operator>+</operator> <literal type="string">" = ?,"</literal> <operator>+</operator> <name>KEY_TIP</name> <operator>+</operator> <literal type="string">" = ?"</literal>
                        <operator>+</operator> <literal type="string">"WHERE "</literal> <operator>+</operator> <name>KEY_TABLE</name> <operator>+</operator> <literal type="string">"= ? AND "</literal> <operator>+</operator> <name>KEY_VOC</name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>)</argument_list></call></expr>;
                <expr><name>SQLiteStatement</name> <name>insStm</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>compileStatement</name></name><argument_list>(<argument><expr><literal type="string">"INSERT INTO "</literal> <operator>+</operator> <name>TBL_VOCABLE</name> <operator>+</operator> <literal type="string">" ("</literal>
                        <operator>+</operator> <name>KEY_TABLE</name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>KEY_VOC</name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>KEY_TIP</name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>KEY_ADDITION</name>
                        <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>KEY_CREATED</name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>KEY_CORRECT</name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>KEY_WRONG</name>
                        <operator>+</operator> <literal type="string">") VALUES (?,?,?,?,?,?,?)"</literal></expr></argument>)</argument_list></call></expr>;
                <expr><name>SQLiteStatement</name> <name>insMeanA</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>compileStatement</name></name><argument_list>(<argument><expr><literal type="string">"INSERT INTO "</literal> <operator>+</operator> <name>TBL_MEANING_A</name> <operator>+</operator> <literal type="string">"("</literal>
                        <operator>+</operator> <name>KEY_TABLE</name> <operator>+</operator> <literal type="string">","</literal><operator>+</operator><name>KEY_VOC</name><operator>+</operator><literal type="string">","</literal><operator>+</operator><name>KEY_MEANING</name><operator>+</operator><literal type="string">") VALUES (?,?,?)"</literal></expr></argument>)</argument_list></call></expr>;
                <expr><name>SQLiteStatement</name> <name>insMeanB</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>compileStatement</name></name><argument_list>(<argument><expr><literal type="string">"INSERT INTO "</literal> <operator>+</operator> <name>TBL_MEANING_B</name> <operator>+</operator> <literal type="string">"("</literal>
                        <operator>+</operator> <name>KEY_TABLE</name> <operator>+</operator> <literal type="string">","</literal><operator>+</operator><name>KEY_VOC</name><operator>+</operator><literal type="string">","</literal><operator>+</operator><name>KEY_MEANING</name><operator>+</operator><literal type="string">") VALUES (?,?,?)"</literal></expr></argument>)</argument_list></call></expr>;

        <expr/>)</init> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>whereDelMeaning</name> <init>= <expr><name>KEY_TABLE</name> <operator>+</operator> <literal type="string">" = ? AND "</literal><operator>+</operator><name>KEY_VOC</name><operator>+</operator><literal type="string">" = ?"</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>beginTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>lastTableID</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>lastID</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>insertMeanings</name></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>VEntry</name></type> <name>entry</name> <range>: <expr><name>lst</name></expr></range></decl></init>)</control> <block>{
                <comment type="line">//Log.d(TAG, "processing " + entry + " of " + entry.getList());</comment>
                <if>if <condition>(<expr><call><name><name>entry</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>ID_RESERVED_SKIP</name></expr>)</condition><then> <comment type="line">// skip spacer</comment>
                    <block type="pseudo"><continue>continue;</continue></block></then></if>

                <expr_stmt><expr><name>insertMeanings</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name><name>entry</name><operator>.</operator><name>isExisting</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><call><name><name>entry</name><operator>.</operator><name>isDelete</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>entry</name><operator>.</operator><name>isChanged</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                        <comment type="line">// we need to clear meanings anyway</comment>
                        <decl_stmt><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>args</name> <init>= <expr><block>{<expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>}</block></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>TBL_MEANING_B</name></expr></argument>, <argument><expr><name>whereDelMeaning</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>TBL_MEANING_A</name></expr></argument>, <argument><expr><name>whereDelMeaning</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if>if <condition>(<expr><call><name><name>entry</name><operator>.</operator><name>isDelete</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name><name>delStm</name><operator>.</operator><name>clearBindings</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>delStm</name><operator>.</operator><name>bindLong</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>delStm</name><operator>.</operator><name>bindLong</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>delStm</name><operator>.</operator><name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>entry</name><operator>.</operator><name>isChanged</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name><name>updStm</name><operator>.</operator><name>clearBindings</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>updStm</name><operator>.</operator><name>bindString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getAddition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>updStm</name><operator>.</operator><name>bindString</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getTip</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>updStm</name><operator>.</operator><name>bindLong</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>updStm</name><operator>.</operator><name>bindLong</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>updStm</name><operator>.</operator><name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>insertMeanings</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                        }</block></then></if></elseif></if>
                    }</block></then></if>
                }</block></then> <elseif>else <if>if <condition>(<expr><operator>!</operator><call><name><name>entry</name><operator>.</operator><name>isDelete</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{ <comment type="line">// vocable created &amp; deleted in editor</comment>
                    <if>if <condition>(<expr><call><name><name>entry</name><operator>.</operator><name>getList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>lastTableID</name> <operator>||</operator> <name>lastID</name> <operator>&lt;</operator> <name>MIN_ID_TRESHOLD</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>lastTableID</name> <operator>=</operator> <call><name><name>entry</name><operator>.</operator><name>getList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"lastTableID: "</literal> <operator>+</operator> <name>lastTableID</name> <operator>+</operator> <literal type="string">" lastID: "</literal> <operator>+</operator> <name>lastID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>lastID</name> <operator>=</operator> <call><name>getHighestVocID</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>lastTableID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <expr_stmt><expr><name>lastID</name><operator>++</operator></expr>;</expr_stmt> <comment type="line">// make last ID to new ID</comment>
                    <expr_stmt><expr><call><name><name>insStm</name><operator>.</operator><name>clearBindings</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>insStm</name><operator>.</operator><name>bindLong</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>insStm</name><operator>.</operator><name>bindLong</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>lastID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>insStm</name><operator>.</operator><name>bindString</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getTip</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>insStm</name><operator>.</operator><name>bindString</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getAddition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>insStm</name><operator>.</operator><name>bindLong</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getCreated</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>insStm</name><operator>.</operator><name>bindLong</name></name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getCorrect</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>insStm</name><operator>.</operator><name>bindLong</name></name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>,<argument><expr><call><name><name>entry</name><operator>.</operator><name>getWrong</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>insStm</name><operator>.</operator><name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>insertMeanings</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>setId</name></name><argument_list>(<argument><expr><name>lastID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></elseif></if>

                <if>if<condition>(<expr><name>insertMeanings</name></expr>)</condition><then><block>{
                    <expr_stmt><expr><call><name><name>insMeanA</name><operator>.</operator><name>bindLong</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><call><name><name>entry</name><operator>.</operator><name>getList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>insMeanA</name><operator>.</operator><name>bindLong</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><call><name><name>entry</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <for>for<control>(<init><decl><type><name>String</name></type> <name>meaning</name> <range>: <expr><call><name><name>entry</name><operator>.</operator><name>getAMeanings</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
                        <expr_stmt><expr><call><name><name>insMeanA</name><operator>.</operator><name>bindString</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><name>meaning</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if<condition>(<expr><call><name><name>insMeanA</name><operator>.</operator><name>executeInsert</name></name><argument_list>()</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
                            <throw>throw <expr><operator>new</operator> <call><name>Exception</name><argument_list>(<argument><expr><literal type="string">"unable to insert meaning"</literal></expr></argument>)</argument_list></call></expr>;</throw>
                        }</block></then></if>
                    }</block></for>

                    <expr_stmt><expr><call><name><name>insMeanB</name><operator>.</operator><name>bindLong</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><call><name><name>entry</name><operator>.</operator><name>getList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>insMeanB</name><operator>.</operator><name>bindLong</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><call><name><name>entry</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <for>for<control>(<init><decl><type><name>String</name></type> <name>meaning</name> <range>: <expr><call><name><name>entry</name><operator>.</operator><name>getBMeanings</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
                        <expr_stmt><expr><call><name><name>insMeanB</name><operator>.</operator><name>bindString</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>meaning</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if<condition>(<expr><call><name><name>insMeanB</name><operator>.</operator><name>executeInsert</name></name><argument_list>()</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
                            <throw>throw <expr><operator>new</operator> <call><name>Exception</name><argument_list>(<argument><expr><literal type="string">"unable to insert meaning"</literal></expr></argument>)</argument_list></call></expr>;</throw>
                        }</block></then></if>
                    }</block></for>
                }</block></then></if>
            }</block></for>
            <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>setTransactionSuccessful</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></try> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></catch> <finally>finally <block>{
            <if>if <condition>(<expr><call><name><name>db</name><operator>.</operator><name>inTransaction</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"in transaction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>endTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></finally>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the ID of a table with the exact same naming &lt;br&gt;
     * this also updates the VList element itself to contains the right ID
     *
     * @param tbl VList to be used a search source
     * @return ID or  -1 if not found, -2 if an error occurred
     */</comment>
    <function><specifier>public</specifier> <type><name>int</name></type> <name>getSetTableID</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <specifier>final</specifier> <name>VList</name></type> <name>tbl</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>tbl</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>tbl</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><call><name><name>tbl</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>, <expr><call><name><name>tbl</name><operator>.</operator><name>getNameA</name></name><argument_list>()</argument_list></call></expr>, <expr><call><name><name>tbl</name><operator>.</operator><name>getNameB</name></name><argument_list>()</argument_list></call></expr>}</block></expr></init></decl>;</decl_stmt>
        <try>try <init>(
                <decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>rawQuery</name></name><argument_list>(<argument><expr><literal type="string">"SELECT "</literal> <operator>+</operator> <name>KEY_TABLE</name> <operator>+</operator> <literal type="string">" "</literal>
                        <operator>+</operator> <literal type="string">"FROM "</literal> <operator>+</operator> <name>TBL_TABLES</name> <operator>+</operator> <literal type="string">" "</literal>
                        <operator>+</operator> <literal type="string">"WHERE "</literal> <operator>+</operator> <name>KEY_NAME_TBL</name> <operator>+</operator> <literal type="string">" = ? "</literal>
                        <operator>+</operator> <literal type="string">"AND "</literal> <operator>+</operator> <name>KEY_NAME_A</name> <operator>+</operator> <literal type="string">" = ? "</literal>
                        <operator>+</operator> <literal type="string">"AND "</literal> <operator>+</operator> <name>KEY_NAME_B</name> <operator>+</operator> <literal type="string">"  = ? "</literal>
                        <operator>+</operator> <literal type="string">"LIMIT 1"</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>
        )</init> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>id</name> <operator>=</operator> <call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>tbl</name><operator>.</operator><name>setId</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>id</name></expr>;</return>
        }</block></try> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        }</block></catch>
    }</block></function>

    <function><specifier>public</specifier> <type><name>SQLiteStatement</name></type> <name>prepareInsertStatement</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>db</name><operator>.</operator><name>compileStatement</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the highest vocable ID for the specified table
     *
     * @param db
     * @param table table ID&lt;br&gt;
     *              This is on purpose no VList object
     * @return highest ID &lt;b&gt;or -1 if none is found&lt;/b&gt;
     */</comment>
    <function><specifier>private</specifier> <type><name>int</name></type> <name>getHighestVocID</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>SQLiteDatabase</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>table</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name><name>VList</name><operator>.</operator><name>isIDValid</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <try>try <init>(<decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>rawQuery</name></name><argument_list>(<argument><expr><literal type="string">"SELECT MAX("</literal> <operator>+</operator> <name>KEY_VOC</name> <operator>+</operator> <literal type="string">") "</literal>
                    <operator>+</operator> <literal type="string">"FROM "</literal> <operator>+</operator> <name>TBL_VOCABLE</name> <operator>+</operator> <literal type="string">" "</literal>
                    <operator>+</operator> <literal type="string">"WHERE "</literal> <operator>+</operator> <name>KEY_TABLE</name> <operator>+</operator> <literal type="string">" = ? "</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
                <if>if <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <return>return <expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
                }</block></then> <else>else <block>{
                    <return>return <expr><name>MIN_ID_TRESHOLD</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
                }</block></else></if>
            }</block></try> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                <throw>throw <expr><name>e</name></expr>;</throw>
            }</block></catch>
        }</block></then> <else>else <block>{
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"invalid table ID!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></else></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the highest table ID
     *
     * @param db
     * @return highest ID,  &lt;b&gt;-1 is none if found&lt;/b&gt;
     */</comment>
    <function><specifier>private</specifier> <type><name>int</name></type> <name>getHighestTableID</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>SQLiteDatabase</name></type> <name>db</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>db</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"invalid DB"</literal></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>

        <try>try <init>(<decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>rawQuery</name></name><argument_list>(<argument><expr><literal type="string">"SELECT MAX("</literal> <operator>+</operator> <name>KEY_TABLE</name> <operator>+</operator> <literal type="string">") "</literal>
                <operator>+</operator> <literal type="string">"FROM "</literal> <operator>+</operator> <name>TBL_TABLES</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{}</block></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
            <if>if <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><call><name><name>Arrays</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnNames</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then> <else>else <block>{
                <return>return <expr><name>MIN_ID_TRESHOLD</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
            }</block></else></if>
        }</block></try> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <throw>throw <expr><name>e</name></expr>;</throw>
        }</block></catch>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Deletes the given table and all its vocables
     *
     * @param tbl VList to delete
     * @return true on success
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>deleteTable</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <specifier>final</specifier> <name>VList</name></type> <name>tbl</name></decl></parameter>)</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>beginTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>arg</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>tbl</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>emptyList_</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>TBL_TABLES</name></expr></argument>, <argument><expr><name>KEY_TABLE</name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>setTransactionSuccessful</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></catch> <finally>finally <block>{
            <if>if <condition>(<expr><call><name><name>db</name><operator>.</operator><name>inTransaction</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>endTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></finally></try>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * directly calls table empty SQL&lt;br&gt;
     * &lt;u&gt;does not handle any transactions&lt;/u&gt;
     *
     * @param arg String array containing the tbl ID at [0]
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>emptyList_</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>TBL_SESSION</name></expr></argument>, <argument><expr><name>KEY_TABLE</name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>TBL_SESSION_TABLES</name></expr></argument>, <argument><expr><name>KEY_TABLE</name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>TBL_SESSION_VOC</name></expr></argument>, <argument><expr><name>KEY_TABLE</name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>,<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>TBL_VOCABLE</name></expr></argument>, <argument><expr><name>KEY_TABLE</name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>TBL_MEANING_B</name></expr></argument>, <argument><expr><name>KEY_TABLE</name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>,<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>TBL_MEANING_A</name></expr></argument>, <argument><expr><name>KEY_TABLE</name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>,<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Clear vocable list from all entries
     *
     * @param tbl
     * @return
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>emptyList</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <specifier>final</specifier> <name>VList</name></type> <name>tbl</name></decl></parameter>)</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>beginTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>emptyList_</name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>tbl</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>setTransactionSuccessful</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></catch> <finally>finally <block>{
            <if>if <condition>(<expr><call><name><name>db</name><operator>.</operator><name>inTransaction</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>endTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></finally></try>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Deletes the current session
     *
     * @return
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>deleteSession</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"entry deleteSession"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>beginTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>TBL_SESSION</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>TBL_SESSION_META</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>TBL_SESSION_TABLES</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>TBL_SESSION_VOC</name></expr></argument>,<argument><expr><literal type="null">null</literal></expr></argument>,<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>setTransactionSuccessful</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></catch> <finally>finally <block>{
            <if>if <condition>(<expr><call><name><name>db</name><operator>.</operator><name>inTransaction</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>endTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></finally></try>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"exit deleteSession"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Updates a transaction VEntry
     *
     * @param entry VEntry to update
     * @return true on success
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>updateEntryProgress</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>VEntry</name></type> <name>entry</name></decl></parameter>)</parameter_list> <block>{
        <try>try <init>(
                <decl><type><name>SQLiteStatement</name></type> <name>updStm</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>compileStatement</name></name><argument_list>(<argument><expr><literal type="string">"INSERT OR REPLACE INTO "</literal> <operator>+</operator> <name>TBL_SESSION</name> <operator>+</operator> <literal type="string">" ( "</literal> <operator>+</operator> <name>KEY_TABLE</name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>KEY_VOC</name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>KEY_POINTS</name> <operator>+</operator> <literal type="string">" )"</literal>
                        <operator>+</operator> <literal type="string">"VALUES (?,?,?)"</literal></expr></argument>)</argument_list></call></expr></init></decl>
        )</init> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">//TODO: update date</comment>
            <expr_stmt><expr><call><name><name>updStm</name><operator>.</operator><name>bindLong</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>updStm</name><operator>.</operator><name>bindLong</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>updStm</name><operator>.</operator><name>bindLong</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getPoints</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>updStm</name><operator>.</operator><name>executeInsert</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{ <comment type="line">// possible problem ( insert / update..)</comment>
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"updated voc points"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Inserted &lt; 1 columns!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            }</block></else></if>
        }</block></try> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></catch>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Starts a new session based on the table entries&lt;br&gt;
     * Overriding any old session data!
     *
     * @param lists The VList to use for this sessions
     * @return true on success
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>createSession</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>VList</name></argument>&gt;</argument_list></name></type> <name>lists</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"entry createSession"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>beginTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <try>try <init>(<decl><type><name>SQLiteStatement</name></type> <name>insStm</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>compileStatement</name></name><argument_list>(<argument><expr><literal type="string">"INSERT INTO "</literal> <operator>+</operator> <name>TBL_SESSION_TABLES</name> <operator>+</operator> <literal type="string">" ("</literal> <operator>+</operator> <name>KEY_TABLE</name> <operator>+</operator> <literal type="string">") VALUES (?)"</literal></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
            <for>for <control>(<init><decl><type><name>VList</name></type> <name>tbl</name> <range>: <expr><name>lists</name></expr></range></decl></init>)</control> <block>{
                <expr_stmt><expr><call><name><name>insStm</name><operator>.</operator><name>clearBindings</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>insStm</name><operator>.</operator><name>bindLong</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>tbl</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name><name>insStm</name><operator>.</operator><name>executeInsert</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>wtf</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"no new table inserted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
            <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>setTransactionSuccessful</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"exit createSession"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></try> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>wtf</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></catch> <finally>finally <block>{
            <if>if <condition>(<expr><call><name><name>db</name><operator>.</operator><name>inTransaction</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>endTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></finally>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the table selection from the stored session
     *
     * @return never null
     */</comment>
    <function><specifier>public</specifier> <type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>VList</name></argument>&gt;</argument_list></name></type> <name>getSessionTables</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>VList</name></argument>&gt;</argument_list></name></type> <name>lst</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <init>(<decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>rawQuery</name></name><argument_list>(<argument><expr><literal type="string">"SELECT ses."</literal> <operator>+</operator> <name>KEY_TABLE</name> <operator>+</operator> <literal type="string">" tbl,"</literal> <operator>+</operator> <name>KEY_NAME_A</name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>KEY_NAME_B</name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>KEY_NAME_TBL</name>
                    <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>KEY_CREATED</name>
                <operator>+</operator> <literal type="string">" FROM "</literal> <operator>+</operator> <name>TBL_SESSION_TABLES</name> <operator>+</operator> <literal type="string">" ses "</literal>
                <operator>+</operator> <literal type="string">"JOIN "</literal> <operator>+</operator> <name>TBL_TABLES</name> <operator>+</operator> <literal type="string">" tbls ON tbls."</literal> <operator>+</operator> <name>KEY_TABLE</name> <operator>+</operator> <literal type="string">" == ses."</literal> <operator>+</operator> <name>KEY_TABLE</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
            <while>while <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <expr_stmt><expr><call><name><name>lst</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>VList</name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
        }</block></try> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch>
        <return>return <expr><name>lst</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isSessionStored</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"entry isSessionStored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <init>(<decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>rawQuery</name></name><argument_list>(<argument><expr><literal type="string">"SELECT COUNT(*) FROM "</literal> <operator>+</operator> <name>TBL_SESSION_TABLES</name> <operator>+</operator> <literal type="string">" WHERE 1"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
            <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"found session"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            }</block></then></if>
        }</block></try> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>wtf</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"unable to get session lists row count"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Set total and unfinished vocables for each table, generate list of finished
     *
     * @param lists           list of VList to process
     * @param unfinishedLists List into which unfinished VList are added into
     * @param settings         TrainerSettings, used for points threshold etc
     * @return true on success
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>getSessionTableData</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>VList</name></argument>&gt;</argument_list></name></type> <name>lists</name></decl></parameter>,<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>VList</name></argument>&gt;</argument_list></name></type> <name>unfinishedLists</name></decl></parameter>,<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <specifier>final</specifier> <name>TrainerSettings</name></type> <name>settings</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>lists</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>unfinishedLists</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>lists</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>unfinishedLists</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>VList</name></type> <name>list</name> <range>: <expr><name>lists</name></expr></range></decl></init>)</control> <block>{
            <try>try <init>(
                    <decl><type><name>Cursor</name></type> <name>curLeng</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>rawQuery</name></name><argument_list>(<argument><expr><literal type="string">"SELECT COUNT(*) FROM "</literal> <operator>+</operator> <name>TBL_VOCABLE</name> <operator>+</operator> <literal type="string">" WHERE "</literal> <operator>+</operator> <name>KEY_TABLE</name> <operator>+</operator> <literal type="string">"  = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;
                    <expr><name>Cursor</name> <name>curFinished</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>rawQuery</name></name><argument_list>(<argument><expr><literal type="string">"SELECT COUNT(*) FROM "</literal> <operator>+</operator> <name>TBL_SESSION</name> <operator>+</operator> <literal type="string">" WHERE "</literal> <operator>+</operator> <name>KEY_TABLE</name> <operator>+</operator> <literal type="string">"  = ? AND "</literal> <operator>+</operator> <name>KEY_POINTS</name> <operator>+</operator> <literal type="string">" &gt;= ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>settings</name><operator>.</operator><name>timesToSolve</name></name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;
            <expr/>)</init> <block>{
                <if>if <condition>(<expr><operator>!</operator><call><name><name>curLeng</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>setTotalVocs</name></name><argument_list>(<argument><expr><call><name><name>curLeng</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><operator>!</operator><call><name><name>curFinished</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
                <decl_stmt><decl><type><name>int</name></type> <name>unfinished</name> <init>= <expr><call><name><name>list</name><operator>.</operator><name>getTotalVocs</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>curFinished</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>setUnfinishedVocs</name></name><argument_list>(<argument><expr><name>unfinished</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>unfinished</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>unfinishedLists</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><call><name><name>list</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>curLeng</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>curFinished</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></try> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            }</block></catch>
        }</block></for>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a random entry from the specified table, which matche the trainer settings criteria&lt;br&gt;
     * The VEntry is guaranteed to be not the "lastEntry" provided here
     *
     * @param list
     * @param ts
     * @param allowRepetition set to true to allow selecting the same vocable as lastEntry again
     * @return null on error
     */</comment>
    <function><specifier>public</specifier> <type><name>VEntry</name></type> <name>getRandomTrainerEntry</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>VList</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>VEntry</name></type> <name>lastEntry</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>TrainerSettings</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>allowRepetition</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"getRandomTrainerEntry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>lastID</name> <init>= <expr><name>MIN_ID_TRESHOLD</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>lastEntry</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>lastEntry</name><operator>.</operator><name>getList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>list</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>allowRepetition</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>lastID</name> <operator>=</operator> <call><name><name>lastEntry</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>arg</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>lastID</name></expr></argument>)</argument_list></call></expr>, <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>ts</name><operator>.</operator><name>timesToSolve</name></name></expr></argument>)</argument_list></call></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>v</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><call><name><name>Arrays</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <init>(
                <decl><type><name>Cursor</name></type> <name>cV</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>rawQuery</name></name><argument_list>(
                        <argument><expr><literal type="string">"SELECT "</literal><operator>+</operator> <name>KEY_TIP</name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>KEY_ADDITION</name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>KEY_LAST_USED</name>
                                <operator>+</operator> <literal type="string">",tbl."</literal> <operator>+</operator> <name>KEY_CREATED</name> <operator>+</operator><literal type="string">","</literal> <operator>+</operator> <name>KEY_CORRECT</name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>KEY_WRONG</name>
                                <operator>+</operator> <literal type="string">",tbl."</literal> <operator>+</operator> <name>KEY_VOC</name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>KEY_POINTS</name>
                        <operator>+</operator> <literal type="string">" FROM "</literal> <operator>+</operator> <name>TBL_VOCABLE</name> <operator>+</operator> <literal type="string">" tbl LEFT JOIN  "</literal> <operator>+</operator> <name>TBL_SESSION</name> <operator>+</operator> <literal type="string">" ses"</literal>
                        <operator>+</operator> <literal type="string">" ON tbl."</literal> <operator>+</operator> <name>KEY_VOC</name> <operator>+</operator> <literal type="string">" = ses."</literal> <operator>+</operator> <name>KEY_VOC</name> <operator>+</operator> <literal type="string">" AND tbl."</literal> <operator>+</operator> <name>KEY_TABLE</name> <operator>+</operator> <literal type="string">" = ses."</literal> <operator>+</operator> <name>KEY_TABLE</name> <operator>+</operator> <literal type="string">" "</literal>
                        <operator>+</operator> <literal type="string">" WHERE tbl."</literal> <operator>+</operator> <name>KEY_TABLE</name> <operator>+</operator> <literal type="string">" = ?"</literal>
                        <operator>+</operator> <literal type="string">" AND tbl."</literal> <operator>+</operator> <name>KEY_VOC</name> <operator>+</operator> <literal type="string">" != ?"</literal>
                        <operator>+</operator> <literal type="string">" AND ( "</literal> <operator>+</operator> <name>KEY_POINTS</name> <operator>+</operator> <literal type="string">" IS NULL OR "</literal> <operator>+</operator> <name>KEY_POINTS</name> <operator>+</operator> <literal type="string">" &lt; ? ) "</literal>
                        <operator>+</operator> <literal type="string">" ORDER BY RANDOM() LIMIT 1"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;
        <expr/>)</init> <block>{
            <if>if <condition>(<expr><call><name><name>cV</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>meaningA</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>meaningB</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>VEntry</name></type> <name>vocable</name> <init>= <expr><operator>new</operator> <call><name>VEntry</name><argument_list>(<argument><expr><name>meaningA</name></expr></argument>,<argument><expr><name>meaningB</name></expr></argument>,<argument><expr><call><name><name>cV</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name><name>cV</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>cV</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>list</name></expr></argument>,
                        <argument><expr><ternary><condition><expr><call><name><name>cV</name><operator>.</operator><name>isNull</name></name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>cV</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
                        <argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>cV</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><call><name><name>cV</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name><name>cV</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name><name>cV</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name>getVocableMeanings</name><argument_list>(<argument><expr><name>TBL_MEANING_A</name></expr></argument>,<argument><expr><name>vocable</name></expr></argument>,<argument><expr><name>meaningA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>getVocableMeanings</name><argument_list>(<argument><expr><name>TBL_MEANING_B</name></expr></argument>,<argument><expr><name>vocable</name></expr></argument>,<argument><expr><name>meaningB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return>return <expr><name>vocable</name></expr>;</return>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"no entries found!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            }</block></else></if>

        }</block></try> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></catch>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Get session meta value for specified key
     *
     * @param key
     * @return null if no entry is found
     */</comment>
    <function><specifier>public</specifier> <type><name>String</name></type> <name>getSessionMetaValue</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>key</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>

        <try>try <init>(
                <decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>rawQuery</name></name><argument_list>(<argument><expr><literal type="string">"SELECT "</literal> <operator>+</operator> <name>KEY_MVALUE</name> <operator>+</operator> <literal type="string">" FROM "</literal> <operator>+</operator> <name>TBL_SESSION_META</name> <operator>+</operator> <literal type="string">" WHERE "</literal> <operator>+</operator> <name>KEY_MKEY</name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>
                        , <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>
        )</init> <block>{
            <if>if <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"No value for key "</literal> <operator>+</operator> <name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            }</block></else></if>

        }</block></try> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"error on session meta retrieval"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></catch>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Set session key-value pair
     *
     * @param key
     * @param value
     * @return true on success
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>setSessionMetaValue</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <try>try <init>(
                <decl><type><name>SQLiteStatement</name></type> <name>updStm</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>compileStatement</name></name><argument_list>(<argument><expr><literal type="string">"INSERT OR REPLACE INTO "</literal> <operator>+</operator> <name>TBL_SESSION_META</name> <operator>+</operator> <literal type="string">" ( "</literal> <operator>+</operator> <name>KEY_MKEY</name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>KEY_MVALUE</name> <operator>+</operator> <literal type="string">" )"</literal>
                        <operator>+</operator> <literal type="string">"(?,?)"</literal></expr></argument>)</argument_list></call></expr></init></decl>
        )</init> <block>{
            <expr_stmt><expr><call><name><name>updStm</name><operator>.</operator><name>bindString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>updStm</name><operator>.</operator><name>bindString</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>updStm</name><operator>.</operator><name>executeInsert</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{ <comment type="line">// possible problem ( insert / update..)</comment>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Inserted &lt; 1 columns!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            }</block></else></if>
        }</block></try> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></catch>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a statement to insert / replace session meta storage values
     *
     * @return
     */</comment>
    <function><specifier>public</specifier> <type><name>SQLiteStatement</name></type> <name>getSessionInsertStm</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>beginTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>db</name><operator>.</operator><name>compileStatement</name></name><argument_list>(<argument><expr><literal type="string">"INSERT OR REPLACE INTO "</literal> <operator>+</operator> <name>TBL_SESSION_META</name> <operator>+</operator> <literal type="string">" ("</literal> <operator>+</operator> <name>KEY_MKEY</name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>KEY_MVALUE</name> <operator>+</operator> <literal type="string">") VALUES (?,?)"</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Ends a transaction created by the getSessionInsert Statement
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>endSessionTransaction</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>success</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><operator>!</operator><call><name><name>db</name><operator>.</operator><name>inTransaction</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"No transaction ongoing!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"transaction success: "</literal> <operator>+</operator> <name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>success</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>setTransactionSuccessful</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>endTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>



    <comment type="block" format="javadoc">/**
     * Returns a cursor on the session data
     *
     * @return map of all key-value pairs or &lt;b&gt;null&lt;/b&gt; on errors
     */</comment>
    <function><specifier>public</specifier> <type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getSessionData</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"entry getSessionData"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>map</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <init>(<decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>rawQuery</name></name><argument_list>(<argument><expr><literal type="string">"SELECT "</literal> <operator>+</operator> <name>KEY_MKEY</name> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator> <name>KEY_MVALUE</name> <operator>+</operator> <literal type="string">" FROM "</literal> <operator>+</operator> <name>TBL_SESSION_META</name> <operator>+</operator> <literal type="string">" WHERE 1"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
            <while>while <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
            <return>return <expr><name>map</name></expr>;</return>
        }</block></try> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>wtf</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Session data retrieval failure"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></catch>

    }</block></function>

    <class>class <name>internalDB</name> <super><extends>extends <name>SQLiteOpenHelper</name></extends></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>DATABASE_VERSION</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>sql_a</name> <init>= <expr><literal type="string">"CREATE TABLE "</literal> <operator>+</operator> <name>TBL_TABLES</name> <operator>+</operator> <literal type="string">" ("</literal>
                <operator>+</operator> <name>KEY_NAME_TBL</name> <operator>+</operator> <literal type="string">" TEXT NOT NULL,"</literal>
                <operator>+</operator> <name>KEY_TABLE</name> <operator>+</operator> <literal type="string">" INTEGER PRIMARY KEY,"</literal>
                <operator>+</operator> <name>KEY_NAME_A</name> <operator>+</operator> <literal type="string">" TEXT NOT NULL,"</literal>
                <operator>+</operator> <name>KEY_NAME_B</name> <operator>+</operator> <literal type="string">" TEXT NOT NULL,"</literal>
                <operator>+</operator> <name>KEY_CREATED</name> <operator>+</operator> <literal type="string">" INTEGER NOT NULL )"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>sql_b</name> <init>= <expr><literal type="string">"CREATE TABLE "</literal> <operator>+</operator> <name>TBL_VOCABLE</name> <operator>+</operator> <literal type="string">" ("</literal>
                <operator>+</operator> <name>KEY_TABLE</name> <operator>+</operator> <literal type="string">" INTEGER NOT NULL, "</literal>
                <operator>+</operator> <name>KEY_VOC</name> <operator>+</operator> <literal type="string">" INTEGER NOT NULL,"</literal>
                <operator>+</operator> <name>KEY_TIP</name> <operator>+</operator> <literal type="string">" TEXT,"</literal>
                <operator>+</operator> <name>KEY_ADDITION</name> <operator>+</operator> <literal type="string">"TEXT,"</literal>
                <operator>+</operator> <name>KEY_LAST_USED</name> <operator>+</operator> <literal type="string">" INTEGER,"</literal>
                <operator>+</operator> <name>KEY_CREATED</name> <operator>+</operator> <literal type="string">" INTEGER NOT NULL,"</literal>
                <operator>+</operator> <name>KEY_CORRECT</name> <operator>+</operator> <literal type="string">" INTEGER NOT NULL,"</literal>
                <operator>+</operator> <name>KEY_WRONG</name> <operator>+</operator> <literal type="string">" INTEGER NOT NULL,"</literal>
                <operator>+</operator> <literal type="string">"PRIMARY KEY ("</literal> <operator>+</operator> <name>KEY_TABLE</name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>KEY_VOC</name> <operator>+</operator> <literal type="string">") )"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>sql_c</name> <init>= <expr><literal type="string">"CREATE TABLE "</literal> <operator>+</operator> <name>TBL_MEANING_A</name> <operator>+</operator> <literal type="string">" ("</literal>
                <operator>+</operator> <name>KEY_TABLE</name> <operator>+</operator> <literal type="string">" INTEGER NOT NULL,"</literal>
                <operator>+</operator> <name>KEY_VOC</name> <operator>+</operator> <literal type="string">" INTEGER NOT NULL,"</literal>
                <operator>+</operator> <name>KEY_MEANING</name> <operator>+</operator> <literal type="string">" TEXT NOT NULL )"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>sql_d</name> <init>= <expr><literal type="string">"CREATE TABLE "</literal> <operator>+</operator> <name>TBL_MEANING_B</name> <operator>+</operator> <literal type="string">" ("</literal>
                <operator>+</operator> <name>KEY_TABLE</name> <operator>+</operator> <literal type="string">" INTEGER NOT NULL,"</literal>
                <operator>+</operator> <name>KEY_VOC</name> <operator>+</operator> <literal type="string">" INTEGER NOT NULL,"</literal>
                <operator>+</operator> <name>KEY_MEANING</name> <operator>+</operator> <literal type="string">" TEXT NOT NULL )"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>sql_e</name> <init>= <expr><literal type="string">"CREATE INDEX primA ON "</literal> <operator>+</operator> <name>TBL_MEANING_A</name>
                <operator>+</operator> <literal type="string">"( "</literal> <operator>+</operator> <name>KEY_TABLE</name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>KEY_VOC</name> <operator>+</operator> <literal type="string">" )"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>sql_f</name> <init>= <expr><literal type="string">"CREATE INDEX primB ON "</literal> <operator>+</operator> <name>TBL_MEANING_B</name>
                <operator>+</operator> <literal type="string">"( "</literal> <operator>+</operator> <name>KEY_TABLE</name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>KEY_VOC</name> <operator>+</operator> <literal type="string">" )"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>sql_g</name> <init>= <expr><literal type="string">"CREATE TABLE "</literal> <operator>+</operator> <name>TBL_SESSION</name> <operator>+</operator> <literal type="string">" ("</literal>
                <operator>+</operator> <name>KEY_TABLE</name> <operator>+</operator> <literal type="string">" INTEGER NOT NULL,"</literal>
                <operator>+</operator> <name>KEY_VOC</name> <operator>+</operator> <literal type="string">" INTEGER NOT NULL,"</literal>
                <operator>+</operator> <name>KEY_POINTS</name> <operator>+</operator> <literal type="string">" INTEGER NOT NULL,"</literal>
                <operator>+</operator> <literal type="string">"PRIMARY KEY ("</literal> <operator>+</operator> <name>KEY_TABLE</name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>KEY_VOC</name> <operator>+</operator> <literal type="string">"))"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>sql_h</name> <init>= <expr><literal type="string">"CREATE TABLE "</literal> <operator>+</operator> <name>TBL_SESSION_META</name> <operator>+</operator> <literal type="string">" ("</literal>
                <operator>+</operator> <name>KEY_MKEY</name> <operator>+</operator> <literal type="string">" TEXT NOT NULL,"</literal>
                <operator>+</operator> <name>KEY_MVALUE</name> <operator>+</operator> <literal type="string">" TEXT NOT NULL,"</literal>
                <operator>+</operator> <literal type="string">"PRIMARY KEY ("</literal> <operator>+</operator> <name>KEY_MKEY</name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>KEY_MVALUE</name> <operator>+</operator> <literal type="string">"))"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>sql_i</name> <init>= <expr><literal type="string">"CREATE TABLE "</literal> <operator>+</operator> <name>TBL_SESSION_TABLES</name> <operator>+</operator> <literal type="string">" ("</literal>
                <operator>+</operator> <name>KEY_TABLE</name> <operator>+</operator> <literal type="string">" INTEGER PRIMARY KEY )"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>sql_j</name> <init>= <expr><literal type="string">"CREATE TABLE "</literal> <operator>+</operator> <name>TBL_SESSION_VOC</name> <operator>+</operator> <literal type="string">" ("</literal>
                <operator>+</operator> <name>KEY_TABLE</name> <operator>+</operator> <literal type="string">" INTEGER NOT NULL,"</literal>
                <operator>+</operator> <name>KEY_VOC</name> <operator>+</operator> <literal type="string">" INTEGER NOT NULL,"</literal>
                <operator>+</operator> <literal type="string">"PRIMARY KEY ("</literal> <operator>+</operator> <name>KEY_TABLE</name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>KEY_VOC</name> <operator>+</operator> <literal type="string">"))"</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><annotation>@<name>Deprecated</name></annotation>
        <specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>TBL_VOCABLE_V1</name> <init>= <expr><literal type="string">"`vocables`"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><annotation>@<name>Deprecated</name></annotation>
        <specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>TBL_TABLES_V1</name> <init>= <expr><literal type="string">"`voc_tables`"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><annotation>@<name>Deprecated</name></annotation>
        <specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>KEY_WORD_A</name> <init>= <expr><literal type="string">"`word_a`"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><annotation>@<name>Deprecated</name></annotation>
        <specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>KEY_WORD_B</name> <init>= <expr><literal type="string">"`word_b`"</literal></expr></init></decl>;</decl_stmt>

        <constructor><name>internalDB</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>databaseFile</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><operator>new</operator> <call><name>DatabaseContext</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>databaseFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>DATABASE_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <constructor><specifier>public</specifier> <name>internalDB</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <constructor><specifier>public</specifier> <name>internalDB</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>dev</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><ternary><condition><expr><name>dev</name></expr> ?</condition><then> <expr><name>DB_NAME_DEV</name></expr> </then><else>: <expr><name>DB_NAME_PRODUCTION</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>DATABASE_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block></constructor>

        <comment type="block" format="javadoc">/**
         * Check for illegal ID entries below the threshold
         * @param key key to compare
         * @param table table to look into
         */</comment>
        <function><specifier>private</specifier> <type><name>void</name></type> <name>checkIllegalIDs</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>SQLiteDatabase</name></type> <name>db</name></decl></parameter>,<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>table</name></decl></parameter>)</parameter_list> <block>{
            <try>try <init>(<decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>rawQuery</name></name><argument_list>(<argument><expr><literal type="string">"SELECT COUNT(*) "</literal>
                    <operator>+</operator> <literal type="string">"FROM "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" WHERE "</literal> <operator>+</operator> <name>key</name> <operator>+</operator> <literal type="string">" &lt; 0"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>
            )</init> <block>{
                <if>if <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>int</name></type> <name>amount</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if<condition>(<expr><name>amount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
                        <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Illegal entries of "</literal><operator>+</operator><name>key</name><operator>+</operator><literal type="string">" in "</literal><operator>+</operator><name>table</name><operator>+</operator><literal type="string">": "</literal><operator>+</operator><name>amount</name></expr></argument>)</argument_list></call></expr>;</throw></block></then>
                    <else>else
                        <block type="pseudo"><expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>v</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"check passed for "</literal><operator>+</operator><name>key</name><operator>+</operator><literal type="string">" "</literal><operator>+</operator><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
                }</block></then></if>
            }</block></try> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                <throw>throw <expr><name>e</name></expr>;</throw>
            }</block></catch>
        }</block></function>

        <function><specifier>public</specifier> <type><name>void</name></type> <name>checkForIllegalIds</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>SQLiteDatabase</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"checking for illegal IDs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>checkIllegalIDs</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><name>KEY_VOC</name></expr></argument>,<argument><expr><name>TBL_VOCABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>checkIllegalIDs</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><name>KEY_TABLE</name></expr></argument>,<argument><expr><name>TBL_VOCABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>checkIllegalIDs</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><name>KEY_TABLE</name></expr></argument>,<argument><expr><name>TBL_TABLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>checkIllegalIDs</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><name>KEY_VOC</name></expr></argument>,<argument><expr><name>TBL_MEANING_A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>checkIllegalIDs</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><name>KEY_TABLE</name></expr></argument>,<argument><expr><name>TBL_MEANING_A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>checkIllegalIDs</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><name>KEY_VOC</name></expr></argument>,<argument><expr><name>TBL_MEANING_B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>checkIllegalIDs</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><name>KEY_TABLE</name></expr></argument>,<argument><expr><name>TBL_MEANING_B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"check passed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>SQLiteDatabase</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"creating db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>tables</name> <init>= <expr><block>{<expr><name>sql_a</name></expr>,<expr><name>sql_b</name></expr>,<expr><name>sql_c</name></expr>,<expr><name>sql_d</name></expr>,<expr><name>sql_e</name></expr>,<expr><name>sql_f</name></expr>,<expr><name>sql_g</name></expr>,<expr><name>sql_h</name></expr>,<expr><name>sql_i</name></expr>,<expr><name>sql_j</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>beginTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <try>try <block>{
                <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tables</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
                    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>compileStatement</name></name><argument_list>(<argument><expr><name><name>tables</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>execute</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></for>
                <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>setTransactionSuccessful</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>wtf</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Database creation error"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"At Table "</literal><operator>+</operator><name><name>tables</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <throw>throw <expr><name>e</name></expr>;</throw>
            }</block></catch> <finally>finally <block>{
                <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>endTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>
        }</block></function>

        <function><annotation>@<name>SuppressWarnings</name><argument_list>( <argument><expr><literal type="string">"deprecation"</literal></expr></argument> )</argument_list></annotation>
        <annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onUpgrade</name><parameter_list>(<parameter><decl><type><name>SQLiteDatabase</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oldVersion</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newVersion</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"db upgrade triggered old:"</literal><operator>+</operator><name>oldVersion</name><operator>+</operator><literal type="string">" new:"</literal><operator>+</operator><name>newVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>newTables</name> <init>= <expr><block>{<expr><name>sql_a</name></expr>,<expr><name>sql_b</name></expr>,<expr><name>sql_c</name></expr>,<expr><name>sql_d</name></expr>,<expr><name>sql_e</name></expr>,<expr><name>sql_f</name></expr>,<expr><name>sql_j</name></expr>}</block></expr></init></decl>;</decl_stmt>
                <for>for<control>(<init><decl><type><name>String</name></type> <name>sql</name> <range>: <expr><name>newTables</name></expr></range></decl></init>)</control>
                    <block type="pseudo"><expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

                <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>time</name> <init>= <expr><call><name><name>Long</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <block>{
                    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE "</literal><operator>+</operator><name>TBL_VOCABLE_V1</name><operator>+</operator><literal type="string">" ADD COLUMN "</literal><operator>+</operator><name>KEY_ADDITION</name><operator>+</operator><literal type="string">" TEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE "</literal><operator>+</operator><name>TBL_VOCABLE_V1</name><operator>+</operator><literal type="string">" ADD COLUMN "</literal><operator>+</operator><name>KEY_CORRECT</name><operator>+</operator><literal type="string">" INTEGER NOT NULL DEFAULT 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE "</literal><operator>+</operator><name>TBL_VOCABLE_V1</name><operator>+</operator><literal type="string">" ADD COLUMN "</literal><operator>+</operator><name>KEY_WRONG</name><operator>+</operator><literal type="string">" INTEGER NOT NULL DEFAULT 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE "</literal><operator>+</operator><name>TBL_VOCABLE_V1</name><operator>+</operator><literal type="string">" ADD COLUMN "</literal><operator>+</operator><name>KEY_CREATED</name><operator>+</operator><literal type="string">" INTEGER NOT NULL DEFAULT "</literal><operator>+</operator><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>args</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s,%s,%s,%s,%s,%s,%s,%s"</literal></expr></argument>,<argument><expr><name>KEY_TABLE</name></expr></argument>, <argument><expr><name>KEY_VOC</name></expr></argument>,
                            <argument><expr><name>KEY_TIP</name></expr></argument>, <argument><expr><name>KEY_ADDITION</name></expr></argument>, <argument><expr><name>KEY_LAST_USED</name></expr></argument>, <argument><expr><name>KEY_CREATED</name></expr></argument>, <argument><expr><name>KEY_CORRECT</name></expr></argument>,
                            <argument><expr><name>KEY_WRONG</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>sqlCpy</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"INSERT INTO %s (%s) SELECT"</literal>
                                    <operator>+</operator> <literal type="string">" %s FROM %s"</literal></expr></argument>,
                            <argument><expr><name>TBL_VOCABLE</name></expr></argument>,<argument><expr><name>args</name></expr></argument>,<argument><expr><name>args</name></expr></argument>, <argument><expr><name>TBL_VOCABLE_V1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><name>sqlCpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>colMA</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s,%s,%s"</literal></expr></argument>,<argument><expr><name>KEY_TABLE</name></expr></argument>,<argument><expr><name>KEY_VOC</name></expr></argument>,<argument><expr><name>KEY_MEANING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>selMA</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s,%s,%s"</literal></expr></argument>,<argument><expr><name>KEY_TABLE</name></expr></argument>,<argument><expr><name>KEY_VOC</name></expr></argument>,<argument><expr><name>KEY_WORD_A</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>sqlMeaningA</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"INSERT INTO %s (%s) SELECT"</literal>
                                    <operator>+</operator> <literal type="string">" %s FROM %s"</literal></expr></argument>,<argument><expr><name>TBL_MEANING_A</name></expr></argument>,<argument><expr><name>colMA</name></expr></argument>,<argument><expr><name>selMA</name></expr></argument>,<argument><expr><name>TBL_VOCABLE_V1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><name>sqlMeaningA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>sqlMeaningB</name> <init>= <expr><call><name><name>sqlMeaningA</name><operator>.</operator><name>replaceAll</name></name><argument_list>(<argument><expr><name>KEY_WORD_A</name></expr></argument>,<argument><expr><name>KEY_WORD_B</name></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>replaceAll</name><argument_list>(<argument><expr><name>TBL_MEANING_A</name></expr></argument>,<argument><expr><name>TBL_MEANING_B</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><name>sqlMeaningB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"DROP TABLE "</literal> <operator>+</operator> <name>TBL_VOCABLE_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block>

                <block>{
                    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE "</literal> <operator>+</operator> <name>TBL_TABLES_V1</name> <operator>+</operator> <literal type="string">" ADD COLUMN "</literal> <operator>+</operator> <name>KEY_CREATED</name> <operator>+</operator> <literal type="string">" INTEGER NOT NULL DEFAULT "</literal> <operator>+</operator> <name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>args</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s,%s,%s,%s,%s"</literal></expr></argument>,<argument><expr><name>KEY_NAME_TBL</name></expr></argument>,<argument><expr><name>KEY_TABLE</name></expr></argument>,
                            <argument><expr><name>KEY_NAME_A</name></expr></argument>,<argument><expr><name>KEY_NAME_B</name></expr></argument>,<argument><expr><name>KEY_CREATED</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>sqlCpy</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"INSERT INTO %s (%s) SELECT"</literal>
                            <operator>+</operator> <literal type="string">" %s FROM %s"</literal></expr></argument>,<argument><expr><name>TBL_TABLES</name></expr></argument>,<argument><expr><name>args</name></expr></argument>,<argument><expr><name>args</name></expr></argument>,<argument><expr><name>TBL_TABLES_V1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><name>sqlCpy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"DROP TABLE "</literal><operator>+</operator><name>TBL_TABLES_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block>

                <block>{
                    <expr_stmt><expr><call><name>checkForIllegalIds</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>v</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"upgrade end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>


    }</block></class>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/fragment/ExportFragment.java" hash="785eb10da725540950e6e29ab526e285a8cbdd18"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>fragment</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>design</name><operator>.</operator><name>widget</name><operator>.</operator><name>FloatingActionButton</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>ActionBar</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>AlertDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>method</name><operator>.</operator><name>LinkMovementMethod</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Menu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>AdapterView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ArrayAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>CheckBox</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>EditText</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>LinearLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ListView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ProgressBar</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Spinner</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TableLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name><operator>.</operator><name>CSVPrinter</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedWriter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileWriter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>activity</name><operator>.</operator><name>FileActivity</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>activity</name><operator>.</operator><name>ListActivity</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>activity</name><operator>.</operator><name>lib</name><operator>.</operator><name>TableListAdapter</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>CSVCustomFormat</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Comparator</name><operator>.</operator><name>GenTableComparator</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Comparator</name><operator>.</operator><name>GenericComparator</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Database</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>MultiMeaningHandler</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>GenericSpinnerEntry</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>VEntry</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>VList</name></name>;</import>

<import>import static <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>activity</name><operator>.</operator><name>ExImportActivity</name><operator>.</operator><name>populateFormatSpinnerAdapter</name></name>;</import>
<import>import static <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>activity</name><operator>.</operator><name>MainActivity</name><operator>.</operator><name>PREFS_NAME</name></name>;</import>
<import>import static <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>CSVHeaders</name><operator>.</operator><name>CSV_METADATA_COMMENT</name></name>;</import>
<import>import static <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>CSVHeaders</name><operator>.</operator><name>CSV_METADATA_START</name></name>;</import>
<import>import static <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Database</name><operator>.</operator><name>ID_RESERVED_SKIP</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Export fragment
 */</comment>
<class><specifier>public</specifier> class <name>ExportFragment</name> <super><extends>extends <name>BaseFragment</name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>P_KEY_B_EXP_TBL_META</name> <init>= <expr><literal type="string">"export_tbl_meta"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>P_KEY_B_EXP_TBL_MULTI</name> <init>= <expr><literal type="string">"export_tbl_multi"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>P_KEY_I_EXP_FORMAT</name> <init>= <expr><literal type="string">"export_format"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>REQUEST_FILE_RESULT_CODE</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>REQUEST_TABLES_RESULT_CODE</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_FILE_PATH</name> <init>= <expr><literal type="string">"filePath"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_LIST_EXP</name> <init>= <expr><literal type="string">"list"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><literal type="string">"ExportFragment"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MAX_PROGRESS</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>EditText</name></type> <name>tExportFile</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>btnExport</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>File</name></type> <name>expFile</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>ListView</name></type> <name>listView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>FloatingActionButton</name></type> <name>addButton</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>VList</name></argument>&gt;</argument_list></name></type> <name>lists</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>TableListAdapter</name></type> <name>adapter</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>CheckBox</name></type> <name>chkExportTalbeInfo</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>CheckBox</name></type> <name>chkExportMultiple</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>ExportOperation</name></type> <name>exportTask</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Spinner</name></type> <name>spFormat</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>ArrayAdapter</name><argument_list type="generic">&lt;<argument><name><name>GenericSpinnerEntry</name><argument_list type="generic">&lt;<argument><name>CSVCustomFormat</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>spAdapterFormat</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type> <name>tMsg</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>GenericComparator</name></type> <name>compTables</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type> <name>view</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>formatWarnDialog</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt> <comment type="line">// prevent dialog double trigger, due to spFormat logic</comment>

    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>showedCustomFormatFragment</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Nullable</name></annotation>
    <annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>View</name></type> <name>onCreateView</name><parameter_list>(<parameter><decl><type><name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>ViewGroup</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>view</name> <operator>=</operator> <call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>fragment_export</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>formatWarnDialog</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setHasOptionsMenu</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setTitle</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Export_Title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>tExportFile</name> <operator>=</operator> <operator>(</operator><name>EditText</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tExportFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>btnExport</name> <operator>=</operator> <operator>(</operator><name>Button</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>bExportStart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>listView</name> <operator>=</operator> <operator>(</operator><name>ListView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>lExportListView</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>addButton</name> <operator>=</operator> <operator>(</operator><name>FloatingActionButton</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>bExportAddTables</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>chkExportMultiple</name> <operator>=</operator> <operator>(</operator><name>CheckBox</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>chkExportMulti</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>chkExportTalbeInfo</name> <operator>=</operator> <operator>(</operator><name>CheckBox</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>chkExportMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>spFormat</name> <operator>=</operator> <operator>(</operator><name>Spinner</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>spExpFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tMsg</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tExportMsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>GenericComparator</name><operator>.</operator><name>ValueRetriever</name><index>[]</index></name></type> <name>retrievers</name> <init>= <expr><operator>new</operator> <name><name>GenericComparator</name><operator>.</operator><name>ValueRetriever</name><index>[]</index></name><block>{
                <expr><name><name>GenTableComparator</name><operator>.</operator><name>retName</name></name></expr>, <expr><name><name>GenTableComparator</name><operator>.</operator><name>retA</name></name></expr>, <expr><name><name>GenTableComparator</name><operator>.</operator><name>retB</name></name></expr>
        }</block></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>compTables</name> <operator>=</operator> <operator>new</operator> <call><name>GenTableComparator</name><argument_list>(<argument><expr><name>retrievers</name></expr></argument>, <argument><expr><name>ID_RESERVED_SKIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>initView</name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>view</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDestroyView</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"destroying view"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDestroyView</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>view</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreateOptionsMenu</name><parameter_list>(<parameter><decl><type><name>Menu</name></type> <name>menu</name></decl></parameter>, <parameter><decl><type><name>MenuInflater</name></type> <name>inflater</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"inflating the menu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>menu</name><operator>.</operator><name>exp_import</name></name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreateOptionsMenu</name></name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>inflater</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onPrepareOptionsMenu</name><parameter_list>(<parameter><decl><type><name>Menu</name></type> <name>menu</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onPrepareOptionsMenu</name></name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ActionBar</name></type> <name>ab</name> <init>= <expr><call><name>getFragmentActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSupportActionBar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>ab</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>ab</name><operator>.</operator><name>setDisplayHomeAsUpEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"actionbar doesn't exist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onOptionsItemSelected</name><parameter_list>(<parameter><decl><type><name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
        <switch>switch <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <case>case <expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>home</name></name></expr>:</case>
                <expr_stmt><expr><call><name>getFragmentActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tCustomFormat</name></name></expr>:</case>
                <expr_stmt><expr><name>showedCustomFormatFragment</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>FormatFragment</name></type> <name>formatFragment</name> <init>= <expr><operator>new</operator> <call><name>FormatFragment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>getFragmentActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>addFragment</name><argument_list>(<argument><expr><name>this</name></expr></argument>,<argument><expr><name>formatFragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></switch>
        <return>return <expr><call><name><name>super</name><operator>.</operator><name>onOptionsItemSelected</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Init list view
     * @param savedInstanceState
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>initView</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>tMsg</name><operator>.</operator><name>setMovementMethod</name></name><argument_list>(<argument><expr><call><name><name>LinkMovementMethod</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tExportFile</name><operator>.</operator><name>setKeyListener</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>btnExport</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>savedInstanceState</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>lists</name> <operator>=</operator> <call><name><name>savedInstanceState</name><operator>.</operator><name>getParcelableArrayList</name></name><argument_list>(<argument><expr><name>KEY_LIST_EXP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>path</name> <init>= <expr><call><name><name>savedInstanceState</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>KEY_FILE_PATH</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>path</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>path</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>expFile</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><name>expFile</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt></block></else></if>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>lists</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name><name>addButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>runSelectTables</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>chkExportMultiple</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>checkInputOk</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Button</name></type> <name>btnOk</name> <init>= <expr><operator>(</operator><name>Button</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>bExportStart</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>btnOk</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>onOk</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Button</name></type> <name>btnFileDialog</name> <init>= <expr><operator>(</operator><name>Button</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>bExportSelFile</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>btnFileDialog</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>selectFile</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>adapter</name> <operator>=</operator> <operator>new</operator> <call><name>TableListAdapter</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>table_list_view</name></name></expr></argument>, <argument><expr><name>lists</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>listView</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>listView</name><operator>.</operator><name>setLongClickable</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>listView</name><operator>.</operator><name>setOnItemClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>parent</name></decl></parameter>, <parameter><decl><name>view</name></decl></parameter>, <parameter><decl><name>position</name></decl></parameter>, <parameter><decl><name>id</name></decl></parameter>)</parameter_list> -&gt; <block type="pseudo"><expr><call><name>runSelectTables</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>spAdapterFormat</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayAdapter</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>simple_spinner_item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>settings</name> <init>= <expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSharedPreferences</name><argument_list>(<argument><expr><name>PREFS_NAME</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>populateFormatSpinnerAdapter</name><argument_list>(<argument><expr><name>spAdapterFormat</name></expr></argument>, <argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>spFormat</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>spAdapterFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>chkExportTalbeInfo</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><call><name><name>settings</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name>P_KEY_B_EXP_TBL_META</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>chkExportMultiple</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><call><name><name>settings</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name>P_KEY_B_EXP_TBL_MULTI</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>spFormat</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><call><name><name>settings</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>P_KEY_I_EXP_FORMAT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>spFormat</name><operator>.</operator><name>setOnItemSelectedListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>AdapterView</name><operator>.</operator><name>OnItemSelectedListener</name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onItemSelected</name><parameter_list>(<parameter><decl><type><name><name>AdapterView</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>adapterView</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"selected something"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>checkInputOk</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onNothingSelected</name><parameter_list>(<parameter><decl><type><name><name>AdapterView</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>adapterView</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"nothing selected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onStop</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>settings</name> <init>= <expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSharedPreferences</name><argument_list>(<argument><expr><name>PREFS_NAME</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>SharedPreferences</name><operator>.</operator><name>Editor</name></name></type> <name>editor</name> <init>= <expr><call><name><name>settings</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name>P_KEY_B_EXP_TBL_MULTI</name></expr></argument>, <argument><expr><call><name><name>chkExportMultiple</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name>P_KEY_B_EXP_TBL_META</name></expr></argument>, <argument><expr><call><name><name>chkExportTalbeInfo</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>putInt</name></name><argument_list>(<argument><expr><name>P_KEY_I_EXP_FORMAT</name></expr></argument>, <argument><expr><call><name><name>spFormat</name><operator>.</operator><name>getSelectedItemPosition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>apply</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Called on file select click
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>selectFile</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Intent</name></type> <name>myIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>FileActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>myIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>FileActivity</name><operator>.</operator><name>PARAM_WRITE_FLAG</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>myIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>FileActivity</name><operator>.</operator><name>PARAM_MESSAGE</name></name></expr></argument>, <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Export_File_select_Info</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>myIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>FileActivity</name><operator>.</operator><name>PARAM_DEFAULT_FILENAME</name></name></expr></argument>, <argument><expr><literal type="string">"list.csv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>startActivityForResult</name><argument_list>(<argument><expr><name>myIntent</name></expr></argument>, <argument><expr><name>REQUEST_FILE_RESULT_CODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Calls select lists activity
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>runSelectTables</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Intent</name></type> <name>myIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>ListActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>myIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>ListActivity</name><operator>.</operator><name>PARAM_SELECTED</name></name></expr></argument>, <argument><expr><name>lists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>myIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>ListActivity</name><operator>.</operator><name>PARAM_MULTI_SELECT</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>startActivityForResult</name><argument_list>(<argument><expr><name>myIntent</name></expr></argument>, <argument><expr><name>REQUEST_TABLES_RESULT_CODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Called upon ok press
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>onOk</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name></type> <name>alert</name> <init>= <expr><operator>new</operator> <call><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>alert</name><operator>.</operator><name>setCancelable</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>alert</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Export_Exporting_Title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>ProgressBar</name></type> <name>pg</name> <init>= <expr><operator>new</operator> <call><name>ProgressBar</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>attr</name><operator>.</operator><name>progressBarStyleHorizontal</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>pg</name><operator>.</operator><name>setIndeterminate</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>LinearLayout</name></type> <name>rl</name> <init>= <expr><operator>new</operator> <call><name>TableLayout</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rl</name><operator>.</operator><name>addView</name></name><argument_list>(<argument><expr><name>pg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>alert</name><operator>.</operator><name>setView</name></name><argument_list>(<argument><expr><name>rl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/*alert.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int whichButton) {
                //TODO: add cancel option
            }
        });*/</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>AlertDialog</name></type> <name>dialog</name> <init>= <expr><call><name><name>alert</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CSVCustomFormat</name></type> <name>format</name> <init>= <expr><call><name>getCFormat</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ExportStorage</name></type> <name>es</name> <init>= <expr><operator>new</operator> <call><name>ExportStorage</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>lists</name></expr></argument>, <argument><expr><call><name><name>chkExportTalbeInfo</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>chkExportMultiple</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>expFile</name></expr></argument>, <argument><expr><name>dialog</name></expr></argument>, <argument><expr><name>pg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>exportTask</name> <operator>=</operator> <operator>new</operator> <call><name>ExportOperation</name><argument_list>(<argument><expr><name>es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>exportTask</name><operator>.</operator><name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Helper to return the currently selected CSVCustomFormat
     * @return selected CSVCustomFormat
     */</comment>
    <function><specifier>private</specifier> <type><name>CSVCustomFormat</name></type> <name>getCFormat</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>spAdapterFormat</name><operator>.</operator><name>getItem</name></name><argument_list>(<argument><expr><call><name><name>spFormat</name><operator>.</operator><name>getSelectedItemPosition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getObject</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onSaveInstanceState</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>outState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onSaveInstanceState</name></name><argument_list>(<argument><expr><name>outState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>outState</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>KEY_FILE_PATH</name></expr></argument>,<argument><expr><ternary><condition><expr><name>expFile</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>expFile</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>outState</name><operator>.</operator><name>putParcelableArrayList</name></name><argument_list>(<argument><expr><name>KEY_LIST_EXP</name></expr></argument>,<argument><expr><name>lists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onResume</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onResume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>showedCustomFormatFragment</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>showedCustomFormatFragment</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>settings</name> <init>= <expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSharedPreferences</name><argument_list>(<argument><expr><name>PREFS_NAME</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>populateFormatSpinnerAdapter</name><argument_list>(<argument><expr><name>spAdapterFormat</name></expr></argument>, <argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onActivityResult</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>resultCode</name></decl></parameter>, <parameter><decl><type><name>Intent</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>resultCode</name> <operator>==</operator> <name><name>Activity</name><operator>.</operator><name>RESULT_OK</name></name></expr>)</condition><then> <block>{
            <switch>switch <condition>(<expr><name>requestCode</name></expr>)</condition> <block>{
                <case>case <expr><name>REQUEST_FILE_RESULT_CODE</name></expr>:</case>
                    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"got file:"</literal> <operator>+</operator> <call><name><name>data</name><operator>.</operator><name>getStringExtra</name></name><argument_list>(<argument><expr><name><name>FileActivity</name><operator>.</operator><name>RETURN_FILE_USER_NAME</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>expFile</name> <operator>=</operator> <operator>(</operator><name>File</name><operator>)</operator> <call><name><name>data</name><operator>.</operator><name>getSerializableExtra</name></name><argument_list>(<argument><expr><name><name>FileActivity</name><operator>.</operator><name>RETURN_FILE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>tExportFile</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>data</name><operator>.</operator><name>getStringExtra</name></name><argument_list>(<argument><expr><name><name>FileActivity</name><operator>.</operator><name>RETURN_FILE_USER_NAME</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>checkInputOk</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name>REQUEST_TABLES_RESULT_CODE</name></expr>:</case>
                    <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>setAllUpdated</name></name><argument_list>(<argument><expr><call><name><name>data</name><operator>.</operator><name>getParcelableArrayListExtra</name></name><argument_list>(<argument><expr><name><name>ListActivity</name><operator>.</operator><name>RETURN_LISTS</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>compTables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>checkInputOk</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
            }</block></switch>
        }</block></then></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Validate input &amp; set export button accordingly
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>checkInputOk</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>exportFormatOk</name> <init>= <expr><call><name>getCFormat</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isMultiValueEnabled</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>btnExport</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>exportFormatOk</name> <operator>&amp;&amp;</operator> <call><name><name>lists</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>expFile</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>chkExportMultiple</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>(</operator><operator>!</operator><call><name><name>chkExportMultiple</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>lists</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><operator>!</operator><name>exportFormatOk</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>formatWarnDialog</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name></type> <name>alert</name> <init>= <expr><operator>new</operator> <call><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>alert</name><operator>.</operator><name>setCancelable</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>alert</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Export_Error_Format_Multivalue_Title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>alert</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Export_Error_Format_Multivalue_Text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>alert</name><operator>.</operator><name>setNeutralButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>GEN_Ok</name></name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>dialogInterface</name></decl></parameter>, <parameter><decl><name>i</name></decl></parameter>)</parameter_list> -&gt; <block>{
                <expr_stmt><expr><name>formatWarnDialog</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt> <comment type="line">// clear state</comment>
            }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>alert</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>formatWarnDialog</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Export async task class
     */</comment>
    <class><specifier>private</specifier> class <name>ExportOperation</name> <super><extends>extends <name><name>AsyncTask</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>Integer</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></extends></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ExportStorage</name></type> <name>es</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Database</name></type> <name>db</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>multiMeaningDelimiter</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>escapedChar</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Creates a new ExportOperation
         *
         * @param es
         */</comment>
        <constructor><name>ExportOperation</name><parameter_list>(<parameter><decl><type><name>ExportStorage</name></type> <name>es</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>es</name></name> <operator>=</operator> <name>es</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>db</name> <operator>=</operator> <operator>new</operator> <call><name>Database</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>multiMeaningDelimiter</name> <operator>=</operator> <call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>es</name><operator>.</operator><name>cFormat</name><operator>.</operator><name>getMultiValueChar</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>escapedChar</name> <operator>=</operator> <name>multiMeaningDelimiter</name> <operator>+</operator> <name>multiMeaningDelimiter</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <type><name>String</name></type> <name>doInBackground</name><parameter_list>(<parameter><decl><type><name>Integer</name><modifier>...</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Starting background task"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <try>try <init>(<decl><type><name>FileWriter</name></type> <name>fw</name> <init>= <expr><operator>new</operator> <call><name>FileWriter</name><argument_list>(<argument><expr><name><name>es</name><operator>.</operator><name>file</name></name></expr></argument>)</argument_list></call></expr></init></decl>;
                 <expr><name>BufferedWriter</name> <name>writer</name> <operator>=</operator> <operator>new</operator> <call><name>BufferedWriter</name><argument_list>(<argument><expr><name>fw</name></expr></argument>)</argument_list></call></expr>;
                 <expr><name>CSVPrinter</name> <name>printer</name> <operator>=</operator> <operator>new</operator> <call><name>CSVPrinter</name><argument_list>(<argument><expr><name>writer</name></expr></argument>, <argument><expr><call><name><name>es</name><operator>.</operator><name>cFormat</name><operator>.</operator><name>getFormat</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>
            )</init> <block>{
                <decl_stmt><decl><type><name>MultiMeaningHandler</name></type> <name>handler</name> <init>= <expr><operator>new</operator> <call><name>MultiMeaningHandler</name><argument_list>(<argument><expr><name><name>es</name><operator>.</operator><name>cFormat</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>VList</name></type> <name>tbl</name> <range>: <expr><name><name>es</name><operator>.</operator><name>lists</name></name></expr></range></decl></init>)</control> <block>{
                    <if>if <condition>(<expr><call><name><name>tbl</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>ID_RESERVED_SKIP</name></expr>)</condition><then> <block>{
                        <continue>continue;</continue>
                    }</block></then></if>
                    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"exporting tbl "</literal> <operator>+</operator> <call><name><name>tbl</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name><name>es</name><operator>.</operator><name>exportTableInfo</name></name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>printer</name><operator>.</operator><name>printRecord</name></name><argument_list>(<argument><expr><operator>(</operator><name><name>Object</name><index>[]</index></name><operator>)</operator> <name>CSV_METADATA_START</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>printer</name><operator>.</operator><name>printComment</name></name><argument_list>(<argument><expr><name>CSV_METADATA_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>printer</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><call><name><name>tbl</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>printer</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><call><name><name>tbl</name><operator>.</operator><name>getNameA</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>printer</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><call><name><name>tbl</name><operator>.</operator><name>getNameB</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>printer</name><operator>.</operator><name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>VEntry</name></argument>&gt;</argument_list></name></type> <name>vocables</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>getVocablesOfTable</name></name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <for>for <control>(<init><decl><type><name>VEntry</name></type> <name>ent</name> <range>: <expr><name>vocables</name></expr></range></decl></init>)</control> <block>{
                        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>mA</name> <init>= <expr><call><name><name>ent</name><operator>.</operator><name>getAMeanings</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>mB</name> <init>= <expr><call><name><name>ent</name><operator>.</operator><name>getBMeanings</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>printer</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><call><name><name>handler</name><operator>.</operator><name>formatMultiMeaning</name></name><argument_list>(<argument><expr><name>mA</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>printer</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><call><name><name>handler</name><operator>.</operator><name>formatMultiMeaning</name></name><argument_list>(<argument><expr><name>mB</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>printer</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><call><name><name>ent</name><operator>.</operator><name>getTip</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>printer</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><call><name><name>ent</name><operator>.</operator><name>getAddition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>printer</name><operator>.</operator><name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></for>
                    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>publishProgress</name><argument_list>(<argument><expr><operator>(</operator><call><name><name>es</name><operator>.</operator><name>lists</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>/</operator> <name>MAX_PROGRESS</name><operator>)</operator> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"closing all"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>printer</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>fw</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></try> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>wtf</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch>

            <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <type><name>void</name></type> <name>onProgressUpdate</name><parameter_list>(<parameter><decl><type><name>Integer</name><modifier>...</modifier></type> <name>values</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"updating progress"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>es</name><operator>.</operator><name>progressBar</name><operator>.</operator><name>setProgress</name></name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <type><name>void</name></type> <name>onPreExecute</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>es</name><operator>.</operator><name>progressBar</name><operator>.</operator><name>setMax</name></name><argument_list>(<argument><expr><call><name><name>lists</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <type><name>void</name></type> <name>onPostExecute</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>es</name><operator>.</operator><name>dialog</name><operator>.</operator><name>dismiss</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Export storage class
     */</comment>
    <class><specifier>private</specifier> class <name>ExportStorage</name> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>VList</name></argument>&gt;</argument_list></name></type> <name>lists</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>exportTableInfo</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>exportMultiple</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>File</name></type> <name>file</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>AlertDialog</name></type> <name>dialog</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>CSVCustomFormat</name></type> <name>cFormat</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>ProgressBar</name></type> <name>progressBar</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * New export storage
         *
         * @param cFormat          CSV cFormat to use
         * @param lists          table to export
         * @param exportTableInfo setting
         * @param exportMultiple  setting
         * @param file            file to read from
         * @param dialog          dialog for progress, closed on end
         * @param progressBar     progress bar that is updated
         */</comment>
        <constructor><name>ExportStorage</name><parameter_list>(<parameter><decl><type><name>CSVCustomFormat</name></type> <name>cFormat</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>VList</name></argument>&gt;</argument_list></name></type> <name>lists</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>exportTableInfo</name></decl></parameter>,
                      <parameter><decl><type><name>boolean</name></type> <name>exportMultiple</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>AlertDialog</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><name>ProgressBar</name></type> <name>progressBar</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cFormat</name></name> <operator>=</operator> <name>cFormat</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lists</name></name> <operator>=</operator> <name>lists</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>exportTableInfo</name></name> <operator>=</operator> <name>exportTableInfo</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>exportMultiple</name></name> <operator>=</operator> <name>exportMultiple</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>file</name></name> <operator>=</operator> <name>file</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dialog</name></name> <operator>=</operator> <name>dialog</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>progressBar</name></name> <operator>=</operator> <name>progressBar</name></expr>;</expr_stmt>
        }</block></constructor>
    }</block></class>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/fragment/ImportFragment.java" hash="1b08b014d41ad0844e37469223b7104115ec849c"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>fragment</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>constraint</name><operator>.</operator><name>ConstraintLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>widget</name><operator>.</operator><name>Space</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>AlertDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>method</name><operator>.</operator><name>LinkMovementMethod</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Menu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>AdapterView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ArrayAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>EditText</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>LinearLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ListView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ProgressBar</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Spinner</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TableLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Callable</name></name>;</import>

<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>activity</name><operator>.</operator><name>FileActivity</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>activity</name><operator>.</operator><name>ListActivity</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>activity</name><operator>.</operator><name>lib</name><operator>.</operator><name>EntryListAdapter</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>dialog</name><operator>.</operator><name>ImportLogDialog</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>dialog</name><operator>.</operator><name>VListEditorDialog</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>CSVCustomFormat</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Function</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Import</name><operator>.</operator><name>ImportFetcher</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Import</name><operator>.</operator><name>ImportFetcherBuilder</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Import</name><operator>.</operator><name>Importer</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Import</name><operator>.</operator><name>PreviewParser</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>GenericSpinnerEntry</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>VEntry</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>VList</name></name>;</import>

<import>import static <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>activity</name><operator>.</operator><name>ExImportActivity</name><operator>.</operator><name>populateFormatSpinnerAdapter</name></name>;</import>
<import>import static <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>activity</name><operator>.</operator><name>MainActivity</name><operator>.</operator><name>PREFS_NAME</name></name>;</import>
<import>import static <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>DPIHelper</name><operator>.</operator><name>DPIToPixels</name></name>;</import>

<comment type="block">/*
 * Import Activity
 */</comment>
<class><specifier>public</specifier> class <name>ImportFragment</name> <super><extends>extends <name>BaseFragment</name></extends> <implements>implements <name><name>VListEditorDialog</name><operator>.</operator><name>ListEditorDataProvider</name></name></implements></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>P_KEY_I_IMP_MULTI</name> <init>= <expr><literal type="string">"import_sp_multi"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>P_KEY_I_IMP_SINGLE</name> <init>= <expr><literal type="string">"import_sp_single"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>P_KEY_I_IMP_RAW</name> <init>= <expr><literal type="string">"import_sp_raw"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>P_KEY_I_IMP_FORMAT</name> <init>= <expr><literal type="string">"import_sp_format"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>REQUEST_FILE_RESULT_CODE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>REQUEST_LIST_SELECT_CODE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><literal type="string">"ImportFragment"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_LIST_TARGET</name> <init>= <expr><literal type="string">"targetList"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_FILE_PATH</name> <init>= <expr><literal type="string">"filePath"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_VENTRY_LIST</name> <init>= <expr><literal type="string">"vEntryList"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>File</name></type> <name>impFile</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>VEntry</name></argument>&gt;</argument_list></name></type> <name>lst</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>EntryListAdapter</name></type> <name>adapter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>VList</name></type> <name>targetList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>ArrayAdapter</name><argument_list type="generic">&lt;<argument><name><name>GenericSpinnerEntry</name><argument_list type="generic">&lt;<argument><name>CSVCustomFormat</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>spAdapterFormat</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>ArrayAdapter</name><argument_list type="generic">&lt;<argument><name><name>GenericSpinnerEntry</name><argument_list type="generic">&lt;<argument><name><name>Importer</name><operator>.</operator><name>IMPORT_LIST_MODE</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>spAdapterMultilist</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>ArrayAdapter</name><argument_list type="generic">&lt;<argument><name><name>GenericSpinnerEntry</name><argument_list type="generic">&lt;<argument><name><name>Importer</name><operator>.</operator><name>IMPORT_LIST_MODE</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>spAdapterSinglelist</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>ArrayAdapter</name><argument_list type="generic">&lt;<argument><name><name>GenericSpinnerEntry</name><argument_list type="generic">&lt;<argument><name><name>Importer</name><operator>.</operator><name>IMPORT_LIST_MODE</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>spAdapterRawlist</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Spinner</name></type> <name>spFormat</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Spinner</name></type> <name>spSingleList</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Spinner</name></type> <name>spSingelRaw</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Spinner</name></type> <name>spMultilist</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>bSelectList</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>EditText</name></type> <name>etList</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>EditText</name></type> <name>etFile</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>bImportOk</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>ConstraintLayout</name></type> <name>singleLayout</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type> <name>tInfo</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>isRawData</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>isMultilist</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>PreviewParser</name></type> <name>previewParser</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>ImportFetcher</name><operator>.</operator><name>MessageProvider</name></name></type> <name>mp</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>FormatFragment</name></type> <name>formatFragment</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>showedCustomFormatFragment</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <function><specifier>public</specifier> <type><name>View</name></type> <name>onCreateView</name><parameter_list>(<parameter><decl><type><name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>ViewGroup</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"onCreateView"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>View</name></type> <name>view</name> <init>= <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>fragment_import</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>setHasOptionsMenu</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setTitle</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Import_Title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>savedInstanceState</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>lst</name> <operator>=</operator> <call><name><name>savedInstanceState</name><operator>.</operator><name>getParcelableArrayList</name></name><argument_list>(<argument><expr><name>KEY_VENTRY_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>lst</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>adapter</name> <operator>=</operator> <operator>new</operator> <call><name>EntryListAdapter</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>lst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>spSingelRaw</name> <operator>=</operator> <operator>(</operator><name>Spinner</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>spImportSingleRaw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>spSingleList</name> <operator>=</operator> <operator>(</operator><name>Spinner</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>spImportSingleMetadata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>spMultilist</name> <operator>=</operator> <operator>(</operator><name>Spinner</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>spImportMultiple</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>singleLayout</name> <operator>=</operator> <operator>(</operator><name>ConstraintLayout</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>cImportNonMultilist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tInfo</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tImportInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>etList</name> <operator>=</operator> <operator>(</operator><name>EditText</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tImportList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bSelectList</name> <operator>=</operator> <operator>(</operator><name>Button</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>bImportSelectList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>etFile</name> <operator>=</operator> <operator>(</operator><name>EditText</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tImportPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bImportOk</name> <operator>=</operator> <operator>(</operator><name>Button</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>bImportOk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ListView</name></type> <name>list</name> <init>= <expr><operator>(</operator><name>ListView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>lstImportPreview</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>spFormat</name> <operator>=</operator> <operator>(</operator><name>Spinner</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>spImportFormat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>TextView</name></type> <name>tMsg</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tImportMsg</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>bSelectList</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>selectList</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>bImportOk</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>onImport</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Button</name></type> <name>bSelectFile</name> <init>= <expr><operator>(</operator><name>Button</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>bImportFile</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>bSelectFile</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>selectFile</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>tMsg</name><operator>.</operator><name>setMovementMethod</name></name><argument_list>(<argument><expr><call><name><name>LinkMovementMethod</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>bImportOk</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>etList</name><operator>.</operator><name>setKeyListener</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>etFile</name><operator>.</operator><name>setKeyListener</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>initSpinner</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>mp</name> <operator>=</operator> <operator>new</operator> <call><name><name>ImportFetcher</name><operator>.</operator><name>MessageProvider</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>savedInstanceState</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>path</name> <init>= <expr><call><name><name>savedInstanceState</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>KEY_FILE_PATH</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>path</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>path</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>impFile</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><name>impFile</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt></block></else></if>
            <expr_stmt><expr><name>targetList</name> <operator>=</operator> <call><name><name>savedInstanceState</name><operator>.</operator><name>getParcelable</name></name><argument_list>(<argument><expr><name>KEY_LIST_TARGET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>targetList</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name>updateTargetListUI</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></then></if>

        <return>return <expr><name>view</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreateOptionsMenu</name><parameter_list>(<parameter><decl><type><name>Menu</name></type> <name>menu</name></decl></parameter>, <parameter><decl><type><name>MenuInflater</name></type> <name>inflater</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>menu</name><operator>.</operator><name>exp_import</name></name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreateOptionsMenu</name></name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr><name>inflater</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onOptionsItemSelected</name><parameter_list>(<parameter><decl><type><name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
        <switch>switch <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <case>case <expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>home</name></name></expr>:</case>
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"onOptionsItemSelected:home"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>getFragmentActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tCustomFormat</name></name></expr>:</case>
                <expr_stmt><expr><name>showedCustomFormatFragment</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>formatFragment</name> <operator>=</operator> <operator>new</operator> <call><name>FormatFragment</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>getFragmentActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>addFragment</name><argument_list>(<argument><expr><name>this</name></expr></argument>,<argument><expr><name>formatFragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></switch>
        <return>return <expr><call><name><name>super</name><operator>.</operator><name>onOptionsItemSelected</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Setup spinners
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>initSpinner</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>spAdapterFormat</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayAdapter</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>simple_spinner_item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>spAdapterMultilist</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayAdapter</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>simple_spinner_item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>spAdapterSinglelist</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayAdapter</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>simple_spinner_item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>spAdapterRawlist</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayAdapter</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>simple_spinner_item</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>spAdapterMultilist</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>GenericSpinnerEntry</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>Importer</name><operator>.</operator><name>IMPORT_LIST_MODE</name><operator>.</operator><name>REPLACE</name></name></expr></argument>, <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Import_Multilist_REPLACE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>spAdapterMultilist</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>GenericSpinnerEntry</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>Importer</name><operator>.</operator><name>IMPORT_LIST_MODE</name><operator>.</operator><name>ADD</name></name></expr></argument>, <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Import_Multilist_ADD</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>spAdapterMultilist</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>GenericSpinnerEntry</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>Importer</name><operator>.</operator><name>IMPORT_LIST_MODE</name><operator>.</operator><name>IGNORE</name></name></expr></argument>, <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Import_Multilist_IGNORE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>spAdapterRawlist</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>GenericSpinnerEntry</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>Importer</name><operator>.</operator><name>IMPORT_LIST_MODE</name><operator>.</operator><name>CREATE</name></name></expr></argument>, <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Import_Rawlist_CREATE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>spAdapterRawlist</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>GenericSpinnerEntry</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>Importer</name><operator>.</operator><name>IMPORT_LIST_MODE</name><operator>.</operator><name>ADD</name></name></expr></argument>, <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Import_Rawlist_MERGE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>spAdapterSinglelist</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>GenericSpinnerEntry</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>Importer</name><operator>.</operator><name>IMPORT_LIST_MODE</name><operator>.</operator><name>REPLACE</name></name></expr></argument>, <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Import_Singlelist_REPLACE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>spAdapterSinglelist</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>GenericSpinnerEntry</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>Importer</name><operator>.</operator><name>IMPORT_LIST_MODE</name><operator>.</operator><name>ADD</name></name></expr></argument>, <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Import_Singlelist_ADD</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>spAdapterSinglelist</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>GenericSpinnerEntry</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>Importer</name><operator>.</operator><name>IMPORT_LIST_MODE</name><operator>.</operator><name>CREATE</name></name></expr></argument>, <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Import_Singlelist_CREATE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>settings</name> <init>= <expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSharedPreferences</name><argument_list>(<argument><expr><name>PREFS_NAME</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>populateFormatSpinnerAdapter</name><argument_list>(<argument><expr><name>spAdapterFormat</name></expr></argument>, <argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>spFormat</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>spAdapterFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>spMultilist</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>spAdapterMultilist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>spSingleList</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>spAdapterSinglelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>spSingelRaw</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>spAdapterRawlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>spFormat</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><call><name><name>settings</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>P_KEY_I_IMP_FORMAT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>spSingelRaw</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><call><name><name>settings</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>P_KEY_I_IMP_RAW</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>spSingleList</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><call><name><name>settings</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>P_KEY_I_IMP_SINGLE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>spMultilist</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><call><name><name>settings</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>P_KEY_I_IMP_MULTI</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>spFormat</name><operator>.</operator><name>setOnItemSelectedListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>AdapterView</name><operator>.</operator><name>OnItemSelectedListener</name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onItemSelected</name><parameter_list>(<parameter><decl><type><name><name>AdapterView</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>refreshParsing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onNothingSelected</name><parameter_list>(<parameter><decl><type><name><name>AdapterView</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{

            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>spSingleList</name><operator>.</operator><name>setOnItemSelectedListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>AdapterView</name><operator>.</operator><name>OnItemSelectedListener</name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onItemSelected</name><parameter_list>(<parameter><decl><type><name><name>AdapterView</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>refreshView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onNothingSelected</name><parameter_list>(<parameter><decl><type><name><name>AdapterView</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{

            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>spMultilist</name><operator>.</operator><name>setOnItemSelectedListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>AdapterView</name><operator>.</operator><name>OnItemSelectedListener</name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onItemSelected</name><parameter_list>(<parameter><decl><type><name><name>AdapterView</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>refreshView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onNothingSelected</name><parameter_list>(<parameter><decl><type><name><name>AdapterView</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{

            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>spSingelRaw</name><operator>.</operator><name>setOnItemSelectedListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>AdapterView</name><operator>.</operator><name>OnItemSelectedListener</name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onItemSelected</name><parameter_list>(<parameter><decl><type><name><name>AdapterView</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name>refreshView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onNothingSelected</name><parameter_list>(<parameter><decl><type><name><name>AdapterView</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{

            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onStop</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>settings</name> <init>= <expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSharedPreferences</name><argument_list>(<argument><expr><name>PREFS_NAME</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>SharedPreferences</name><operator>.</operator><name>Editor</name></name></type> <name>editor</name> <init>= <expr><call><name><name>settings</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>putInt</name></name><argument_list>(<argument><expr><name>P_KEY_I_IMP_MULTI</name></expr></argument>, <argument><expr><call><name><name>spMultilist</name><operator>.</operator><name>getSelectedItemPosition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>putInt</name></name><argument_list>(<argument><expr><name>P_KEY_I_IMP_SINGLE</name></expr></argument>, <argument><expr><call><name><name>spSingleList</name><operator>.</operator><name>getSelectedItemPosition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>putInt</name></name><argument_list>(<argument><expr><name>P_KEY_I_IMP_RAW</name></expr></argument>, <argument><expr><call><name><name>spSingelRaw</name><operator>.</operator><name>getSelectedItemPosition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>putInt</name></name><argument_list>(<argument><expr><name>P_KEY_I_IMP_FORMAT</name></expr></argument>, <argument><expr><call><name><name>spFormat</name><operator>.</operator><name>getSelectedItemPosition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>apply</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the selected CSVCustomFormat
     *
     * @return CSVCustomFormat to be used to parsing
     */</comment>
    <function><specifier>private</specifier> <type><name>CSVCustomFormat</name></type> <name>getFormatSelected</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>spAdapterFormat</name><operator>.</operator><name>getItem</name></name><argument_list>(<argument><expr><call><name><name>spFormat</name><operator>.</operator><name>getSelectedItemPosition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getObject</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Refresh preview parsing, change view accordingly
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>refreshParsing</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>impFile</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>impFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>CSVCustomFormat</name></type> <name>format</name> <init>= <expr><call><name>getFormatSelected</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>PreviewParser</name></type> <name>dataHandler</name> <init>= <expr><operator>new</operator> <call><name>PreviewParser</name><argument_list>(<argument><expr><name>lst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name></type> <name>alert</name> <init>= <expr><operator>new</operator> <call><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>alert</name><operator>.</operator><name>setCancelable</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>alert</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>alert</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Import_Preview_Update_Title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>ProgressBar</name></type> <name>tw</name> <init>= <expr><operator>new</operator> <call><name>ProgressBar</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Space</name></type> <name>sp</name> <init>= <expr><operator>new</operator> <call><name>Space</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>sp</name><operator>.</operator><name>setMinimumHeight</name></name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>DPIToPixels</name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// little space downside</comment>
            <decl_stmt><decl><type><name>LinearLayout</name></type> <name>rl</name> <init>= <expr><operator>new</operator> <call><name>TableLayout</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>rl</name><operator>.</operator><name>addView</name></name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>rl</name><operator>.</operator><name>addView</name></name><argument_list>(<argument><expr><name>sp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>alert</name><operator>.</operator><name>setView</name></name><argument_list>(<argument><expr><name>rl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/*alert.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
                public void onClick(DialogInterface dialog, int whichButton) {
                    //TODO: add cancel option
                }
            });*/</comment>
            <decl_stmt><decl><type><specifier>final</specifier> <name>AlertDialog</name></type> <name>dialog</name> <init>= <expr><call><name><name>alert</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Function</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>callback</name> <init>= <expr><lambda><parameter_list type="pseudo"><parameter><decl><name>param</name></decl></parameter></parameter_list> -&gt; <block>{
                <expr_stmt><expr><name>isMultilist</name> <operator>=</operator> <call><name><name>dataHandler</name><operator>.</operator><name>isMultiList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>isRawData</name> <operator>=</operator> <call><name><name>dataHandler</name><operator>.</operator><name>isRawData</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>refreshView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>notifyDataSetChanged</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>previewParser</name> <operator>=</operator> <name>dataHandler</name></expr>;</expr_stmt>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            }</block></lambda></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ImportFetcher</name></type> <name>imp</name> <init>= <expr><operator>new</operator> <call><name>ImportFetcherBuilder</name><argument_list>()</argument_list></call>
                    <operator>.</operator><call><name>setFormat</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>setSource</name><argument_list>(<argument><expr><name>impFile</name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>setHandler</name><argument_list>(<argument><expr><name>dataHandler</name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>setMaxEntries</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>setDialog</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>setLogErrors</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>setProgressBar</name><argument_list>(<argument><expr><name>tw</name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>setMessageProvider</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>setImportCallback</name><argument_list>(<argument><expr><name>callback</name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>createImportFetcher</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>lst</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Starting task"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>imp</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 0 is just to pass smth</comment>
        }</block></then></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the {@link Importer.IMPORT_LIST_MODE} of the relevant adapter
     *
     * @return
     */</comment>
    <function><specifier>private</specifier> <type><name><name>Importer</name><operator>.</operator><name>IMPORT_LIST_MODE</name></name></type> <name>getListMode</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>isMultilist</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>spAdapterMultilist</name><operator>.</operator><name>getItem</name></name><argument_list>(<argument><expr><call><name><name>spMultilist</name><operator>.</operator><name>getSelectedItemPosition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getObject</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then> <elseif>else <if>if <condition>(<expr><name>isRawData</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>spAdapterRawlist</name><operator>.</operator><name>getItem</name></name><argument_list>(<argument><expr><call><name><name>spSingelRaw</name><operator>.</operator><name>getSelectedItemPosition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getObject</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if></elseif> <else>else <block>{
            <return>return <expr><call><name><name>spAdapterSinglelist</name><operator>.</operator><name>getItem</name></name><argument_list>(<argument><expr><call><name><name>spSingleList</name><operator>.</operator><name>getSelectedItemPosition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getObject</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Called when import was clicked
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>onImport</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>CSVCustomFormat</name></type> <name>format</name> <init>= <expr><call><name>getFormatSelected</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Importer</name></type> <name>dataHandler</name> <init>= <expr><operator>new</operator> <call><name>Importer</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>previewParser</name></expr></argument>, <argument><expr><call><name>getListMode</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>targetList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name></type> <name>alert</name> <init>= <expr><operator>new</operator> <call><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>alert</name><operator>.</operator><name>setCancelable</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>alert</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Import_Importing_Title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>ProgressBar</name></type> <name>pg</name> <init>= <expr><operator>new</operator> <call><name>ProgressBar</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>attr</name><operator>.</operator><name>progressBarStyleHorizontal</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>pg</name><operator>.</operator><name>setIndeterminate</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>LinearLayout</name></type> <name>rl</name> <init>= <expr><operator>new</operator> <call><name>TableLayout</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rl</name><operator>.</operator><name>addView</name></name><argument_list>(<argument><expr><name>pg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>alert</name><operator>.</operator><name>setView</name></name><argument_list>(<argument><expr><name>rl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/*alert.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int whichButton) {
                //TODO: add cancel option
            }
        });*/</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>AlertDialog</name></type> <name>dialog</name> <init>= <expr><call><name><name>alert</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Function</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>callback</name> <init>= <expr><lambda><parameter_list type="pseudo"><parameter><decl><name>param</name></decl></parameter></parameter_list> -&gt; <block>{
            <decl_stmt><decl><type><name>ImportLogDialog</name></type> <name>dialog1</name> <init>= <expr><call><name><name>ImportLogDialog</name><operator>.</operator><name>newInstance</name></name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>dialog1</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><call><name>getFragmentManager</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>ImportLogDialog</name><operator>.</operator><name>TAG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></lambda></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"amount: "</literal> <operator>+</operator> <call><name><name>previewParser</name><operator>.</operator><name>getAmountRows</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ImportFetcher</name></type> <name>imp</name> <init>= <expr><operator>new</operator> <call><name>ImportFetcherBuilder</name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>setFormat</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>setSource</name><argument_list>(<argument><expr><name>impFile</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>setHandler</name><argument_list>(<argument><expr><name>dataHandler</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>setMaxEntries</name><argument_list>(<argument><expr><call><name><name>previewParser</name><operator>.</operator><name>getAmountRows</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>setDialog</name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>setProgressBar</name><argument_list>(<argument><expr><name>pg</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>setMessageProvider</name><argument_list>(<argument><expr><name>mp</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>setImportCallback</name><argument_list>(<argument><expr><name>callback</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>createImportFetcher</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>lst</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Starting task"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>imp</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 0 is just to pass smth</comment>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Refresh visibility of all options based on the input&lt;br&gt;
     * also calls checkInput
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>refreshView</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>singleLayout</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>isMultilist</name></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>spMultilist</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>isMultilist</name></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>spSingelRaw</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>isRawData</name></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>spSingleList</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>isRawData</name></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><operator>!</operator><name>isMultilist</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>boolean</name></type> <name>hideListSelect</name> <init>= <expr><operator>!</operator><name>isRawData</name> <operator>&amp;&amp;</operator> <call><name>getListMode</name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>Importer</name><operator>.</operator><name>IMPORT_LIST_MODE</name><operator>.</operator><name>CREATE</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>etList</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>hideListSelect</name></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bSelectList</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>hideListSelect</name></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>text</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>isRawData</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>text</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Import_Info_rawlist</name></name></expr>;</expr_stmt></block></then>
        <elseif>else <if>if <condition>(<expr><name>isMultilist</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>text</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Import_Info_multilist</name></name></expr>;</expr_stmt></block></then></if></elseif>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>text</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Import_Info_singlelist</name></name></expr>;</expr_stmt></block></else></if>
        <expr_stmt><expr><call><name><name>tInfo</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>checkInput</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Called on file select click
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>selectFile</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Intent</name></type> <name>myIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>FileActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>myIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>FileActivity</name><operator>.</operator><name>PARAM_WRITE_FLAG</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>myIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>FileActivity</name><operator>.</operator><name>PARAM_MESSAGE</name></name></expr></argument>, <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Import_File_select_Info</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>myIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>FileActivity</name><operator>.</operator><name>PARAM_DEFAULT_FILENAME</name></name></expr></argument>, <argument><expr><literal type="string">"list.csv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>startActivityForResult</name><argument_list>(<argument><expr><name>myIntent</name></expr></argument>, <argument><expr><name>REQUEST_FILE_RESULT_CODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Update ui with current targetList
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>updateTargetListUI</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>etList</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>targetList</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Called on list select click
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>selectList</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>getListMode</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Importer</name><operator>.</operator><name>IMPORT_LIST_MODE</name><operator>.</operator><name>CREATE</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>targetList</name> <operator>=</operator> <operator>new</operator> <call><name>VList</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>Callable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>callable</name> <init>= <expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
                <expr_stmt><expr><call><name>updateTargetListUI</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>checkInput</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            }</block></lambda></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>VListEditorDialog</name></type> <name>dialog</name> <init>= <expr><call><name><name>VListEditorDialog</name><operator>.</operator><name>newInstance</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setTargetFragment</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setOkAction</name></name><argument_list>(<argument><expr><name>callable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><call><name>getFragmentManager</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>VListEditorDialog</name><operator>.</operator><name>TAG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>targetList</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Intent</name></type> <name>myIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>ListActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>myIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>ListActivity</name><operator>.</operator><name>PARAM_MULTI_SELECT</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>myIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>ListActivity</name><operator>.</operator><name>PARAM_DELETE_FLAG</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>myIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>ListActivity</name><operator>.</operator><name>PARAM_SELECTED</name></name></expr></argument>, <argument><expr><name>targetList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>startActivityForResult</name><argument_list>(<argument><expr><name>myIntent</name></expr></argument>, <argument><expr><name>REQUEST_LIST_SELECT_CODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Verify user input and enable import button if appropriate
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>checkInput</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>is_ok</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>impFile</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>is_ok</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name><name>Importer</name><operator>.</operator><name>IMPORT_LIST_MODE</name></name></type> <name>mode</name> <init>= <expr><call><name>getListMode</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">//noinspection StatementWithEmptyBody</comment>
        <if>if <condition>(<expr><name>isMultilist</name></expr>)</condition><then> <block>{
            <comment type="line">//don't check the rest</comment>
        }</block></then> <elseif>else <if>if <condition>(<expr><name>isRawData</name> <operator>&amp;&amp;</operator> <name>targetList</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>is_ok</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name><name>Importer</name><operator>.</operator><name>IMPORT_LIST_MODE</name><operator>.</operator><name>CREATE</name></name></expr>)</condition><then> <block>{ <comment type="line">// single list</comment>
            <if>if <condition>(<expr><name>targetList</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>is_ok</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>targetList</name><operator>.</operator><name>isExisting</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>is_ok</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            }</block></then></if></elseif></if>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>isRawData</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>mode</name> <operator>==</operator> <name><name>Importer</name><operator>.</operator><name>IMPORT_LIST_MODE</name><operator>.</operator><name>ADD</name></name> <operator>||</operator> <name>mode</name> <operator>==</operator> <name><name>Importer</name><operator>.</operator><name>IMPORT_LIST_MODE</name><operator>.</operator><name>REPLACE</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>targetList</name><operator>.</operator><name>isExisting</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><operator>!</operator><call><name><name>targetList</name><operator>.</operator><name>isExisting</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>is_ok</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if></elseif></if>

        <expr_stmt><expr><call><name><name>bImportOk</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>is_ok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onResume</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onResume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>showedCustomFormatFragment</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>showedCustomFormatFragment</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>settings</name> <init>= <expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSharedPreferences</name><argument_list>(<argument><expr><name>PREFS_NAME</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>populateFormatSpinnerAdapter</name><argument_list>(<argument><expr><name>spAdapterFormat</name></expr></argument>, <argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>refreshParsing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onSaveInstanceState</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>outState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onSaveInstanceState</name></name><argument_list>(<argument><expr><name>outState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"onSaveInstanceState"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>outState</name><operator>.</operator><name>putParcelable</name></name><argument_list>(<argument><expr><name>KEY_LIST_TARGET</name></expr></argument>,<argument><expr><name>targetList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>outState</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>KEY_FILE_PATH</name></expr></argument>,<argument><expr><ternary><condition><expr><name>impFile</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>impFile</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>outState</name><operator>.</operator><name>putParcelableArrayList</name></name><argument_list>(<argument><expr><name>KEY_VENTRY_LIST</name></expr></argument>,<argument><expr><name>lst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onActivityResult</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>resultCode</name></decl></parameter>, <parameter><decl><type><name>Intent</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>resultCode</name> <operator>==</operator> <name><name>Activity</name><operator>.</operator><name>RESULT_OK</name></name></expr>)</condition><then> <block>{
            <switch>switch <condition>(<expr><name>requestCode</name></expr>)</condition> <block>{
                <case>case <expr><name>REQUEST_FILE_RESULT_CODE</name></expr>:</case>
                    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"got file:"</literal> <operator>+</operator> <call><name><name>data</name><operator>.</operator><name>getStringExtra</name></name><argument_list>(<argument><expr><name><name>FileActivity</name><operator>.</operator><name>RETURN_FILE_USER_NAME</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>impFile</name> <operator>=</operator> <operator>(</operator><name>File</name><operator>)</operator> <call><name><name>data</name><operator>.</operator><name>getSerializableExtra</name></name><argument_list>(<argument><expr><name><name>FileActivity</name><operator>.</operator><name>RETURN_FILE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>etFile</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>data</name><operator>.</operator><name>getStringExtra</name></name><argument_list>(<argument><expr><name><name>FileActivity</name><operator>.</operator><name>RETURN_FILE_USER_NAME</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>checkInput</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>refreshParsing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                <case>case <expr><name>REQUEST_LIST_SELECT_CODE</name></expr>:</case>
                    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"got list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>targetList</name> <operator>=</operator> <operator>(</operator><name>VList</name><operator>)</operator> <call><name><name>data</name><operator>.</operator><name>getSerializableExtra</name></name><argument_list>(<argument><expr><name><name>ListActivity</name><operator>.</operator><name>RETURN_LISTS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>etList</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>targetList</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>checkInput</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
            }</block></switch>
        }</block></then></if>
    }</block></function>

    <function><annotation>@<name>NonNull</name></annotation>
    <annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>VList</name></type> <name>getList</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>targetList</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/fragment/TrainerModeFragment.java" hash="8f5cdf1ef0561a082a826afb7e4cd43cc03da04c"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>fragment</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>CallSuper</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>

<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>TrainerSettings</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Trainer</name><operator>.</operator><name>Trainer</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Base class for trainer mode fragments&lt;br&gt;
 *     The following variables are provided: trainerActivity trainer
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>TrainerModeFragment</name> <super><extends>extends <name>BaseFragment</name></extends></super> <block>{
    <decl_stmt><decl><specifier>protected</specifier> <type><name>TrainingFragmentHolder</name></type> <name>trainerActivity</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <type><name>Trainer</name></type> <name>trainer</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <type><name>TrainerSettings</name></type> <name>settings</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <type><name>String</name></type> <name>INPUT_CORRECT</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <type><name>String</name></type> <name>INPUT_DOUBLED</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <type><name>String</name></type> <name>INPUT_INVALID</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Force call to show the specified vocable &amp; update the gui accordingly&lt;br&gt;
     *     called upon view created
     */</comment>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>showVocable</name><parameter_list>()</parameter_list>;</function_decl>

    <function><annotation>@<name>Override</name></annotation>
    <annotation>@<name>CallSuper</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>trainerActivity</name> <operator>=</operator> <operator>(</operator><name>TrainingFragmentHolder</name><operator>)</operator> <name>context</name></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>CallSuper</name></annotation>
    <annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onActivityCreated</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onActivityCreated</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>trainer</name> <operator>=</operator> <call><name><name>trainerActivity</name><operator>.</operator><name>getTrainer</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>settings</name> <operator>=</operator> <call><name><name>trainerActivity</name><operator>.</operator><name>getTrainerSettings</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>showVocable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <annotation>@<name>CallSuper</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onViewCreated</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>INPUT_CORRECT</name> <operator>=</operator> <call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Trainer_Input_Correct</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>INPUT_DOUBLED</name> <operator>=</operator> <call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Trainer_Input_Double</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>INPUT_INVALID</name> <operator>=</operator> <call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Trainer_Input_Invalid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Show specified tip, called by appbar handler
     * @param tip
     */</comment>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>showTip</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tip</name></decl></parameter>)</parameter_list>;</function_decl>

    <interface><specifier>public</specifier> interface <name>TrainingFragmentHolder</name> <block>{
        <function_decl><type><name>Trainer</name></type> <name>getTrainer</name><parameter_list>()</parameter_list>;</function_decl>
        <function_decl><type><name>TrainerSettings</name></type> <name>getTrainerSettings</name><parameter_list>()</parameter_list>;</function_decl>
        <function_decl><type><name>void</name></type> <name>showResultDialog</name><parameter_list>()</parameter_list>;</function_decl>
        <function_decl><type><name>void</name></type> <name>updateQuestion</name><parameter_list>()</parameter_list>;</function_decl>
    }</block></interface>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/fragment/TrainerClassicFragment.java" hash="2fc6374aa6c71b1b96223c087d1e8c2a2ed05f3a"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>fragment</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>CountDownTimer</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>EditText</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>R</name></name>;</import>

<import>import static <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>activity</name><operator>.</operator><name>TrainerActivity</name><operator>.</operator><name>MAX</name></name>;</import>
<import>import static <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>activity</name><operator>.</operator><name>TrainerActivity</name><operator>.</operator><name>MS_SEC</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Trainer classic mode fragment
 */</comment>
<class><specifier>public</specifier> class <name>TrainerClassicFragment</name> <super><extends>extends <name>TrainerModeFragment</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><literal type="string">"TClassicFragment"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_INPUT</name> <init>= <expr><literal type="string">"input"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type> <name>tHint</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>EditText</name></type> <name>tInput</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>bSolve</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>bShowNext</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type> <name>tColumnAnswer</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>MenuItem</name></type> <name>tTip</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>bCheckInput</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>CountDownTimer</name></type> <name>timer</name></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>View</name></type> <name>onCreateView</name><parameter_list>(<parameter><decl><type><name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>ViewGroup</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>View</name></type> <name>view</name> <init>= <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>fragment_trainer_classic</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>tHint</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tTrainerQOut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tColumnAnswer</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tTrainerInputColumn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tInput</name> <operator>=</operator> <operator>(</operator><name>EditText</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tTrainerInput</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bSolve</name> <operator>=</operator> <operator>(</operator><name>Button</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>bTrainerSolve</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bCheckInput</name> <operator>=</operator> <operator>(</operator><name>Button</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>bTrainerEnter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bShowNext</name> <operator>=</operator> <operator>(</operator><name>Button</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>bTrainerShowNext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>bCheckInput</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>checkInput</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>bSolve</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>solve</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>bShowNext</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>showNextVocable</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if<condition>(<expr><name>savedInstanceState</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>tInput</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>savedInstanceState</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>KEY_INPUT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

        <return>return <expr><name>view</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Show next vocable of trainer
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>showNextVocable</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"showNextVocable()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>timer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>timer</name><operator>.</operator><name>cancel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>timer</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <if>if<condition>(<expr><call><name><name>trainer</name><operator>.</operator><name>isFinished</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name><name>trainerActivity</name><operator>.</operator><name>showResultDialog</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then><else>else <block>{
            <expr_stmt><expr><call><name>showAdditionView</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>trainerActivity</name><operator>.</operator><name>updateQuestion</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>tInput</name><operator>.</operator><name>setError</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>tHint</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>tInput</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>tInput</name><operator>.</operator><name>requestFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bSolve</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>updateTip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>tColumnAnswer</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>trainer</name><operator>.</operator><name>getColumnNameSolution</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onSaveInstanceState</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>outState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onSaveInstanceState</name></name><argument_list>(<argument><expr><name>outState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>outState</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>KEY_INPUT</name></expr></argument>,<argument><expr><call><name><name>tInput</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Show vocable addition field view
     * @param show
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>showAdditionView</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>show</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><call><name><name>bSolve</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>show</name></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bCheckInput</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>show</name></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bShowNext</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>show</name></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Display addition view with timeout
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>displayAdditionTimed</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>showAdditionView</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>timer</name> <operator>=</operator> <operator>new</operator> <class><super><name>CountDownTimer</name></super><argument_list>(<argument><expr><name>MAX</name> <operator>*</operator> <literal type="number">1000</literal></expr></argument>, <argument><expr><name>MS_SEC</name></expr></argument>)</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onTick</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{
                <if>if<condition>(<expr><name>bShowNext</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name>isAdded</name><argument_list>()</argument_list></call></expr>)</condition><then> <comment type="line">// rotation during countdown</comment>
                    <block type="pseudo"><expr_stmt><expr><call><name><name>bShowNext</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Trainer_btn_Show_Next_Auto</name></name></expr></argument>,<argument><expr><name>l</name><operator>/</operator><name>MS_SEC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
                <else>else
                    <block type="pseudo"><expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>cancel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></else></if>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onFinish</name><parameter_list>()</parameter_list> <block>{
                <expr_stmt><expr><call><name>showNextVocable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>timer</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Verify input against solution
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>checkInput</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>trainer</name><operator>.</operator><name>checkSolution</name></name><argument_list>(<argument><expr><call><name><name>tInput</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <if>if<condition>(<expr><call><name><name>trainer</name><operator>.</operator><name>hasLastAddition</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <if>if<condition>(<expr><name><name>settings</name><operator>.</operator><name>additionAuto</name></name></expr>)</condition><then><block>{
                    <expr_stmt><expr><call><name>displayAdditionTimed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name>showAdditionView</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>bShowNext</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Trainer_btn_Show_Next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><call><name><name>tHint</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>trainer</name><operator>.</operator><name>getLastAddition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>showNextVocable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>tInput</name><operator>.</operator><name>setSelectAllOnFocus</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>tInput</name><operator>.</operator><name>setError</name></name><argument_list>(<argument><expr><name>INPUT_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>tInput</name><operator>.</operator><name>requestFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Solve current vocable
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>tInput</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>trainer</name><operator>.</operator><name>getSolution</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bSolve</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Function updates tTip enabled status
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>updateTip</name><parameter_list>()</parameter_list><block>{
        <if>if<condition>(<expr><name>tTip</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name><name>tTip</name><operator>.</operator><name>getIcon</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setAlpha</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>settings</name><operator>.</operator><name>allowTips</name></name></expr> ?</condition><then> <expr><literal type="number">255</literal></expr> </then><else>: <expr><literal type="number">155</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>tTip</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name><name>settings</name><operator>.</operator><name>allowTips</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>showVocable</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"showVocable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>showNextVocable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>showTip</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tip</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>tHint</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>tip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/fragment/TrainerQuickFragment.java" hash="d4f3db88f5118fddde1e28d8d350daa96c235456"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>fragment</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>R</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Trainer quick mode fragment
 */</comment>
<class><specifier>public</specifier> class <name>TrainerQuickFragment</name> <super><extends>extends <name>TrainerModeFragment</name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><literal type="string">"TQuickFragment"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>bRevolse</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>bCorrect</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>bWrong</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type> <name>tSolution</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type> <name>tColumnAnswer</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>guiState</name> <init>= <expr><name>guiStateInit</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>guiStateSolution</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>guiStateQuestion</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>guiStateInit</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


    <function><annotation>@<name>Nullable</name></annotation>
    <annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>View</name></type> <name>onCreateView</name><parameter_list>(<parameter><decl><type><name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>ViewGroup</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>View</name></type> <name>view</name> <init>= <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>fragment_trainer_quick</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>bRevolse</name> <operator>=</operator> <operator>(</operator><name>Button</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>bTrainerQResolve</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bCorrect</name> <operator>=</operator> <operator>(</operator><name>Button</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>bTrainerQCorrect</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bWrong</name> <operator>=</operator> <operator>(</operator><name>Button</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>bTrainerQWrong</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tSolution</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tTrainerQOut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tColumnAnswer</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tTrainerInputColumn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>bRevolse</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>builder</name> <init>= <expr><call><name><name>trainer</name><operator>.</operator><name>getSolutionUncounted</name></name><argument_list>()</argument_list></call> <operator>+</operator>
                    <literal type="string">"\n\n"</literal> <operator>+</operator>
                    <call><name><name>trainer</name><operator>.</operator><name>getCurrentAddition</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>tSolution</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>changeView</name><argument_list>(<argument><expr><name>guiStateSolution</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>bCorrect</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>showNextVocable</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>bWrong</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>showNextVocable</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>view</name></expr>;</return>

    }</block></function>

    <comment type="block" format="javadoc">/**
     * set vocable as correct/wrong and show next one
     * @param correct
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>showNextVocable</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>correct</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"showNextVocable(correct:"</literal><operator>+</operator><name>correct</name><operator>+</operator><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>trainer</name><operator>.</operator><name>updateVocable</name></name><argument_list>(<argument><expr><name>correct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><call><name><name>trainer</name><operator>.</operator><name>isFinished</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name><name>trainerActivity</name><operator>.</operator><name>showResultDialog</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then><else>else <block>{
            <expr_stmt><expr><call><name>showVocable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Change visibility according to parameter
     * @param newGuiState display mode
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>changeView</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>newGuiState</name></decl></parameter>)</parameter_list><block>{
        <if>if<condition>(<expr><name>guiState</name> <operator>==</operator> <name>newGuiState</name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>boolean</name></type> <name>showSolution</name> <init>= <expr><name>newGuiState</name> <operator>==</operator> <name>guiStateSolution</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>tSolution</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>showSolution</name></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bCorrect</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>showSolution</name></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bWrong</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>showSolution</name></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bRevolse</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>showSolution</name></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>guiState</name> <operator>=</operator> <name>newGuiState</name></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>showVocable</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"showVocable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>trainerActivity</name><operator>.</operator><name>updateQuestion</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tSolution</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tColumnAnswer</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>trainer</name><operator>.</operator><name>getColumnNameSolution</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>changeView</name><argument_list>(<argument><expr><name>guiStateQuestion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>showTip</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tip</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>tSolution</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tSolution</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>tip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/fragment/ListPickerFragment.java" hash="6471966dff56b6a2827f909341f96abf3fdc2ec9"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>fragment</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>ActionBar</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>AlertDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>SparseBooleanArray</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Menu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>AbsListView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ListView</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>activity</name><operator>.</operator><name>lib</name><operator>.</operator><name>TableListAdapter</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Comparator</name><operator>.</operator><name>GenTableComparator</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Comparator</name><operator>.</operator><name>GenericComparator</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Database</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>VList</name></name>;</import>

<import>import static <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>activity</name><operator>.</operator><name>MainActivity</name><operator>.</operator><name>PREFS_NAME</name></name>;</import>
<import>import static <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Database</name><operator>.</operator><name>ID_RESERVED_SKIP</name></name>;</import>

<comment type="block" format="javadoc">/**
 * List selector fragment&lt;br&gt;
 *     This can be used externally in other fragments&lt;br&gt;
 *     Requires a toolbar
 */</comment>
<class><specifier>public</specifier> class <name>ListPickerFragment</name> <super><extends>extends <name>BaseFragment</name></extends></super> <block>{
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><literal type="string">"ListPickerFragment"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>P_KEY_LA_SORT</name> <init>= <expr><literal type="string">"LA_sorting"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>K_MULTISELECT</name> <init>= <expr><literal type="string">"multiselect"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>K_SHOWOK</name> <init>= <expr><literal type="string">"showok"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>K_PRESELECT</name> <init>= <expr><literal type="string">"preselect"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>K_DELETE</name> <init>= <expr><literal type="string">"delete"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type> <name>view</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Database</name></type> <name>db</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>multiselect</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>showOkButton</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>ListView</name></type> <name>listView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>TableListAdapter</name></type> <name>adapter</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>delete</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>bOk</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>sort_type</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>GenTableComparator</name></type> <name>compName</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>GenTableComparator</name></type> <name>compA</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>GenTableComparator</name></type> <name>compB</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>GenTableComparator</name></type> <name>cComp</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>FinishListener</name></type> <name>listener</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>AlertDialog</name></type> <name>dialog</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Interface for list picker finish
     */</comment>
    <interface><specifier>public</specifier> interface <name>FinishListener</name> <block>{
        <comment type="block" format="javadoc">/**
         * Called when ok button is pressed
         * @param selected Selected lists&lt;br&gt;
         *        Contains one element if multiselect is disabled
         */</comment>
        <function_decl><type><name>void</name></type> <name>selectionFinished</name><parameter_list>(<parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>VList</name></argument>&gt;</argument_list></name></type> <name>selected</name></decl></parameter>)</parameter_list>;</function_decl>

        <comment type="block" format="javadoc">/**
         * Called when list picker got canceled.
         */</comment>
        <function_decl><type><name>void</name></type> <name>cancel</name><parameter_list>()</parameter_list>;</function_decl>
    }</block></interface>

    <comment type="block" format="javadoc">/**
     * Create new ListPickerFragment instance
     * @param multiSelect Multi select enabled
     * @param delete Delete mode
     * @param selected List of pre-selected VList
     * @param showOkButton True for ok-submit button
     * @return ListPickerFragment
     */</comment>
    <function><annotation>@<name>NonNull</name></annotation>
    <specifier>public</specifier> <specifier>static</specifier> <type><name>ListPickerFragment</name></type> <name>newInstance</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>multiSelect</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>delete</name></decl></parameter>,
                                                 <parameter><decl><type><specifier>final</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>VList</name></argument>&gt;</argument_list></name></type> <name>selected</name></decl></parameter>,
                                                 <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>showOkButton</name></decl></parameter>)</parameter_list><block>{
        <decl_stmt><decl><type><name>ListPickerFragment</name></type> <name>lpf</name> <init>= <expr><operator>new</operator> <call><name>ListPickerFragment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Bundle</name></type> <name>args</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name>K_DELETE</name></expr></argument>, <argument><expr><name>delete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name>K_MULTISELECT</name></expr></argument>, <argument><expr><name>multiSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name>K_SHOWOK</name></expr></argument>, <argument><expr><name>showOkButton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>putParcelableArrayList</name></name><argument_list>(<argument><expr><name>K_PRESELECT</name></expr></argument>, <argument><expr><name>selected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>lpf</name><operator>.</operator><name>setArguments</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>lpf</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>listener</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>context</name> <operator>instanceof</operator> <name>FinishListener</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>listener</name> <operator>=</operator> <operator>(</operator><name>FinishListener</name><operator>)</operator> <name>context</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><call><name><name>context</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" does not implement FinishListener"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onActivityCreated</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onActivityCreated</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"onActivityCreated "</literal><operator>+</operator><operator>(</operator><name>savedInstanceState</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>View</name></type> <name>onCreateView</name><parameter_list>(<parameter><decl><type><name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>ViewGroup</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"onCreateView "</literal><operator>+</operator><operator>(</operator><name>savedInstanceState</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>view</name> <operator>=</operator> <call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>fragment_list_selector</name></name></expr></argument>,<argument><expr><name>container</name></expr></argument>,<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>db</name> <operator>=</operator> <operator>new</operator> <call><name>Database</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Bundle</name></type> <name>bundle</name> <init>= <expr><call><name>getArguments</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>savedInstanceState</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>bundle</name> <operator>=</operator> <name>savedInstanceState</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>multiselect</name> <operator>=</operator> <call><name><name>bundle</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name>K_MULTISELECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>showOkButton</name> <operator>=</operator> <call><name><name>bundle</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name>K_SHOWOK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>delete</name> <operator>=</operator> <call><name><name>bundle</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name>K_DELETE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>VList</name></argument>&gt;</argument_list></name></type> <name>preselected</name> <init>= <expr><call><name><name>bundle</name><operator>.</operator><name>getParcelableArrayList</name></name><argument_list>(<argument><expr><name>K_PRESELECT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ActionBar</name></type> <name>ab</name> <init>= <expr><call><name>getACActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSupportActionBar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>ab</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>ab</name><operator>.</operator><name>setDisplayHomeAsUpEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name>setHasOptionsMenu</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// lambdas without lambdas</comment>
        <expr_stmt><expr><name>compName</name> <operator>=</operator> <operator>new</operator> <call><name>GenTableComparator</name><argument_list>(
                <argument><expr><operator>new</operator> <name><name>GenericComparator</name><operator>.</operator><name>ValueRetriever</name><index>[]</index></name><block>{<expr><name><name>GenTableComparator</name><operator>.</operator><name>retName</name></name></expr>,
                        <expr><name><name>GenTableComparator</name><operator>.</operator><name>retA</name></name></expr>, <expr><name><name>GenTableComparator</name><operator>.</operator><name>retB</name></name></expr>}</block></expr></argument>
        ,<argument><expr><name>ID_RESERVED_SKIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>compA</name> <operator>=</operator> <operator>new</operator> <call><name>GenTableComparator</name><argument_list>(
                <argument><expr><operator>new</operator> <name><name>GenericComparator</name><operator>.</operator><name>ValueRetriever</name><index>[]</index></name><block>{<expr><name><name>GenTableComparator</name><operator>.</operator><name>retA</name></name></expr>,
                        <expr><name><name>GenTableComparator</name><operator>.</operator><name>retB</name></name></expr>, <expr><name><name>GenTableComparator</name><operator>.</operator><name>retName</name></name></expr>}</block></expr></argument>
        ,<argument><expr><name>ID_RESERVED_SKIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>compB</name> <operator>=</operator> <operator>new</operator> <call><name>GenTableComparator</name><argument_list>(
                <argument><expr><operator>new</operator> <name><name>GenericComparator</name><operator>.</operator><name>ValueRetriever</name><index>[]</index></name><block>{<expr><name><name>GenTableComparator</name><operator>.</operator><name>retB</name></name></expr>,
                        <expr><name><name>GenTableComparator</name><operator>.</operator><name>retA</name></name></expr>, <expr><name><name>GenTableComparator</name><operator>.</operator><name>retName</name></name></expr>}</block></expr></argument>
        ,<argument><expr><name>ID_RESERVED_SKIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>bOk</name> <operator>=</operator> <operator>(</operator><name>Button</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>btnOkSelect</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bOk</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>showOkButton</name> <operator>&amp;&amp;</operator> <name>multiselect</name></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>settings</name> <init>= <expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSharedPreferences</name><argument_list>(<argument><expr><name>PREFS_NAME</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>sort_type</name> <operator>=</operator> <call><name><name>settings</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>P_KEY_LA_SORT</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>lMenu_sort_Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateComp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// setup listview</comment>
        <expr_stmt><expr><call><name>initListView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>loadTables</name><argument_list>(<argument><expr><name>preselected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateOkButton</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>view</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreateOptionsMenu</name><parameter_list>(<parameter><decl><type><name>Menu</name></type> <name>menu</name></decl></parameter>, <parameter><decl><type><name>MenuInflater</name></type> <name>inflater</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreateOptionsMenu</name></name><argument_list>(<argument><expr><name>menu</name></expr></argument>,<argument><expr><name>inflater</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>menu</name><operator>.</operator><name>list</name></name></expr></argument>,<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onOptionsItemSelected</name><parameter_list>(<parameter><decl><type><name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
        <switch>switch <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>lMenu_sort_Name</name></name></expr>:</case>
            <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>lMenu_sort_A</name></name></expr>:</case>
            <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>lMenu_sort_B</name></name></expr>:</case>
                <expr_stmt><expr><name>sort_type</name> <operator>=</operator> <call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>updateComp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>updateSorting</name></name><argument_list>(<argument><expr><name>cComp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></switch>

        <return>return <expr><call><name><name>super</name><operator>.</operator><name>onOptionsItemSelected</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Update sorting type
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>updateComp</name><parameter_list>()</parameter_list> <block>{
        <switch>switch <condition>(<expr><name>sort_type</name></expr>)</condition> <block>{
            <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>lMenu_sort_A</name></name></expr>:</case>
                <expr_stmt><expr><name>cComp</name> <operator>=</operator> <name>compA</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>lMenu_sort_B</name></name></expr>:</case>
                <expr_stmt><expr><name>cComp</name> <operator>=</operator> <name>compB</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>lMenu_sort_Name</name></name></expr>:</case>
                <expr_stmt><expr><name>cComp</name> <operator>=</operator> <name>compName</name></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><name>cComp</name> <operator>=</operator> <name>compName</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>sort_type</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>lMenu_sort_Name</name></name></expr>;</expr_stmt>
                <break>break;</break>
        }</block></switch>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onSaveInstanceState</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>outState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onSaveInstanceState</name></name><argument_list>(<argument><expr><name>outState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"onSaveInstanceState"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>VList</name></argument>&gt;</argument_list></name></type> <name>lst</name></decl>;</decl_stmt>
        <if>if<condition>(<expr><call><name><name>listView</name><operator>.</operator><name>getChoiceMode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>AbsListView</name><operator>.</operator><name>CHOICE_MODE_MULTIPLE</name></name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>lst</name> <operator>=</operator> <call><name>getSelectedItems</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>lst</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name><name>outState</name><operator>.</operator><name>putParcelableArrayList</name></name><argument_list>(<argument><expr><name>K_PRESELECT</name></expr></argument>,<argument><expr><name>lst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>outState</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name>K_SHOWOK</name></expr></argument>,<argument><expr><name>showOkButton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>outState</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name>K_MULTISELECT</name></expr></argument>, <argument><expr><name>multiselect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>outState</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name>K_DELETE</name></expr></argument>, <argument><expr><name>delete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onResume</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onResume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"onResume"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>loadTables</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Load lists from db
     *
     * @param tickedLists already selected lists, can be null
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>loadTables</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>VList</name></argument>&gt;</argument_list></name></type> <name>tickedLists</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>VList</name></argument>&gt;</argument_list></name></type> <name>lists</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>getTables</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>setAllUpdated</name></name><argument_list>(<argument><expr><name>lists</name></expr></argument>, <argument><expr><name>cComp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>tickedLists</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>adapter</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
                <decl_stmt><decl><type><name>VList</name></type> <name>tbl</name> <init>= <expr><call><name><name>adapter</name><operator>.</operator><name>getItem</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>tbl</name><operator>.</operator><name>isExisting</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>tickedLists</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>listView</name><operator>.</operator><name>setItemChecked</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
        }</block></then></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Setup list view
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>initListView</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>listView</name> <operator>=</operator> <operator>(</operator><name>ListView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>listVIewLstSel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>VList</name></argument>&gt;</argument_list></name></type> <name>lists</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>adapter</name> <operator>=</operator> <operator>new</operator> <call><name>TableListAdapter</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>table_list_view</name></name></expr></argument>, <argument><expr><name>lists</name></expr></argument>, <argument><expr><name>multiselect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>listView</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>multiselect</name></expr>)</condition><then> <block>{
            <comment type="line">// TODO: title; setTitle(R.string.ListSelector_Title_Training);</comment>
            <expr_stmt><expr><call><name><name>listView</name><operator>.</operator><name>setChoiceMode</name></name><argument_list>(<argument><expr><name><name>ListView</name><operator>.</operator><name>CHOICE_MODE_MULTIPLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>listView</name><operator>.</operator><name>setItemsCanFocus</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>listView</name><operator>.</operator><name>setOnItemClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>adapterView</name></decl></parameter>, <parameter><decl><name>view</name></decl></parameter>, <parameter><decl><name>position</name></decl></parameter>, <parameter><decl><name>id</name></decl></parameter>)</parameter_list> -&gt; <block>{
                <if>if <condition>(<expr><call><name><name>adapter</name><operator>.</operator><name>getItem</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>ID_RESERVED_SKIP</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>updateOkButton</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"visible button!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bOk</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>listener</name><operator>.</operator><name>selectionFinished</name></name><argument_list>(<argument><expr><call><name>getSelectedItems</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr><name>delete</name></expr>)</condition><then> <block>{
<comment type="line">//                setTitle(R.string.ListSelector_Title_Delete);</comment>
                <expr_stmt><expr><call><name><name>listView</name><operator>.</operator><name>setOnItemClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>parent</name></decl></parameter>, <parameter><decl><name>view</name></decl></parameter>, <parameter><decl><name>position</name></decl></parameter>, <parameter><decl><name>id</name></decl></parameter>)</parameter_list> -&gt; <block>{
                    <decl_stmt><decl><type><name>VList</name></type> <name>list</name> <init>= <expr><call><name><name>adapter</name><operator>.</operator><name>getItem</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><call><name><name>list</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>ID_RESERVED_SKIP</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>showDeleteDialog</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
<comment type="line">//                setTitle(R.string.ListSelector_Title_Edit);</comment>
                <expr_stmt><expr><call><name><name>listView</name><operator>.</operator><name>setOnItemClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>parent</name></decl></parameter>, <parameter><decl><name>view</name></decl></parameter>, <parameter><decl><name>position</name></decl></parameter>, <parameter><decl><name>id</name></decl></parameter>)</parameter_list> -&gt; <block>{
                    <decl_stmt><decl><type><name>VList</name></type> <name>list</name> <init>= <expr><call><name><name>adapter</name><operator>.</operator><name>getItem</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><call><name><name>list</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>ID_RESERVED_SKIP</name></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>VList</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>selectionFinished</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Get selected items
     * Can be used to query the selected items at any time
     * @return List of VList which are selected
     */</comment>
    <function><specifier>public</specifier> <type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>VList</name></argument>&gt;</argument_list></name></type> <name>getSelectedItems</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>VList</name></argument>&gt;</argument_list></name></type> <name>selectedLists</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"listView: "</literal><operator>+</operator><operator>(</operator><name>listView</name><operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>+</operator> <literal type="string">" mode: "</literal><operator>+</operator><call><name><name>listView</name><operator>.</operator><name>getChoiceMode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>SparseBooleanArray</name></type> <name>checkedItems</name> <init>= <expr><call><name><name>listView</name><operator>.</operator><name>getCheckedItemPositions</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>chkItemsCount</name> <init>= <expr><call><name><name>checkedItems</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>chkItemsCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
            <if>if <condition>(<expr><call><name><name>checkedItems</name><operator>.</operator><name>valueAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>VList</name></type> <name>item</name> <init>= <expr><call><name><name>adapter</name><operator>.</operator><name>getItem</name></name><argument_list>(<argument><expr><call><name><name>checkedItems</name><operator>.</operator><name>keyAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if<condition>(<expr><call><name><name>item</name><operator>.</operator><name>isExisting</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name><name>selectedLists</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
                <else>else
                    <block type="pseudo"><expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"ignoring item"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>selectedLists</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Update enabled state of OK button
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>updateOkButton</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>bOk</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><call><name><name>listView</name><operator>.</operator><name>getCheckedItemCount</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Show delete dialog for table
     *
     * @param listToDelete
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>showDeleteDialog</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>VList</name></type> <name>listToDelete</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name></type> <name>finishedDiag</name> <init>= <expr><operator>new</operator> <call><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>finishedDiag</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ListSelector_Diag_delete_Title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>finishedDiag</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name>getText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ListSelector_Diag_delete_Msg</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>listToDelete</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>listToDelete</name><operator>.</operator><name>getNameA</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>listToDelete</name><operator>.</operator><name>getNameB</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>finishedDiag</name><operator>.</operator><name>setPositiveButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ListSelector_Diag_delete_btn_Delete</name></name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>dialog</name></decl></parameter>, <parameter><decl><name>whichButton</name></decl></parameter>)</parameter_list> -&gt; <block>{
            <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>deleteTable</name></name><argument_list>(<argument><expr><name>listToDelete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>removeEntryUpdated</name></name><argument_list>(<argument><expr><name>listToDelete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>finishedDiag</name><operator>.</operator><name>setNegativeButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ListSelector_Diag_delete_btn_Cancel</name></name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>dialog</name></decl></parameter>, <parameter><decl><name>whichButton</name></decl></parameter>)</parameter_list> -&gt; <block>{
            <comment type="line">// do nothing</comment>
        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>dialog</name> <operator>=</operator> <call><name><name>finishedDiag</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDestroyView</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDestroyView</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>dialog</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>dialog</name><operator>.</operator><name>isShowing</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>dismiss</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onStop</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Save values</comment>
        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>settings</name> <init>= <expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSharedPreferences</name><argument_list>(<argument><expr><name>PREFS_NAME</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>SharedPreferences</name><operator>.</operator><name>Editor</name></name></type> <name>editor</name> <init>= <expr><call><name><name>settings</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>putInt</name></name><argument_list>(<argument><expr><name>P_KEY_LA_SORT</name></expr></argument>, <argument><expr><name>sort_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>apply</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/dialog/ImportLogDialog.java" hash="60d05f11e0246800e9da48864dd04aabc3739c61"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>dialog</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Dialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>DialogFragment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>AlertDialog</name></name>;</import>

<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>R</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Dialog showing the log after importing has finished.
 * @author Aron Heinecke
 */</comment>
<class><specifier>public</specifier> class <name>ImportLogDialog</name> <super><extends>extends <name>DialogFragment</name></extends></super> <block>{
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><literal type="string">"DialogFragment"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>LOG</name> <init>= <expr><literal type="string">"log"</literal></expr></init></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * Creates a new instance
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>ImportLogDialog</name></type> <name>newInstance</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>log</name></decl></parameter>)</parameter_list><block>{
        <decl_stmt><decl><type><name>ImportLogDialog</name></type> <name>dialog</name> <init>= <expr><operator>new</operator> <call><name>ImportLogDialog</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Bundle</name></type> <name>args</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><name>log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setArguments</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>dialog</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>Dialog</name></type> <name>onCreateDialog</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{

        <decl_stmt><decl><type><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name></type> <name>alertDialog</name> <init>= <expr><operator>new</operator> <call><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>alertDialog</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Import_Finished_Title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>alertDialog</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><call><name>getArguments</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>alertDialog</name><operator>.</operator><name>setPositiveButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>GEN_Ok</name></name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>dialog</name></decl></parameter>, <parameter><decl><name>whichButton</name></decl></parameter>)</parameter_list> -&gt; <block type="pseudo"><expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>finish</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>alertDialog</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCancel</name><parameter_list>(<parameter><decl><type><name>DialogInterface</name></type> <name>dialog</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCancel</name></name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/dialog/TrainerResultDialog.java" hash="bbce228f915fdd92b020630348211f675e89a540"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>dialog</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Dialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>DialogFragment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>AlertDialog</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Callable</name></name>;</import>

<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Trainer</name><operator>.</operator><name>Trainer</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Trainer result dialog fragment&lt;br&gt;
 *     Shows result data about the finished training
 *
 */</comment>
<class><specifier>public</specifier> class <name>TrainerResultDialog</name> <super><extends>extends <name>DialogFragment</name></extends></super> <block>{
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><literal type="string">"TrainerResultDialog"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Trainer</name></type> <name>trainer</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Callable</name></type> <name>finishAction</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Creates a new instance
     * @param trainer Trainer instance to use
     * @return VListEditorDialog
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>TrainerResultDialog</name></type> <name>newInstance</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Trainer</name></type> <name>trainer</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Callable</name></type> <name>callable</name></decl></parameter>)</parameter_list><block>{
        <decl_stmt><decl><type><name>TrainerResultDialog</name></type> <name>dialog</name> <init>= <expr><operator>new</operator> <call><name>TrainerResultDialog</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setTrainer</name></name><argument_list>(<argument><expr><name>trainer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setFinishAction</name></name><argument_list>(<argument><expr><name>callable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>dialog</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Set finish action
     * @param callable
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>setFinishAction</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Callable</name></type> <name>callable</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>finishAction</name></name> <operator>=</operator> <name>callable</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Set trainer to use for data gathering&lt;br&gt;
     *     should not be called directly
     * @param trainer
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>setTrainer</name><parameter_list>(<parameter><decl><type><name>Trainer</name></type> <name>trainer</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>trainer</name></name> <operator>=</operator> <name>trainer</name></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>Dialog</name></type> <name>onCreateDialog</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{

        <decl_stmt><decl><type><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name></type> <name>alertDialog</name> <init>= <expr><operator>new</operator> <call><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>alertDialog</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Trainer_Diag_finished_Title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>alertDialog</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Trainer_Diag_finished_MSG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>alertDialog</name><operator>.</operator><name>setPositiveButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Trainer_btn_ok</name></name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>dialog</name></decl></parameter>, <parameter><decl><name>whichButton</name></decl></parameter>)</parameter_list> -&gt; <block type="pseudo"><expr><call><name>callFinishAction</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>alertDialog</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCancel</name><parameter_list>(<parameter><decl><type><name>DialogInterface</name></type> <name>dialog</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCancel</name></name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>callFinishAction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Calls finish action
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>callFinishAction</name><parameter_list>()</parameter_list><block>{
        <if>if<condition>(<expr><name>finishAction</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
            <try>try <block>{
                <expr_stmt><expr><call><name><name>finishAction</name><operator>.</operator><name>call</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></then></if>
    }</block></function>


}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/fragment/TrainerClassicMMFragment.java" hash="5305716892834eefca82fd1887ddb337633264ab"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>fragment</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>CountDownTimer</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>design</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextInputLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>inputmethod</name><operator>.</operator><name>InputMethodManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>LinearLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ScrollView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>

<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Trainer</name><operator>.</operator><name>TrainerInput</name></name>;</import>

<import>import static <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>activity</name><operator>.</operator><name>TrainerActivity</name><operator>.</operator><name>MAX</name></name>;</import>
<import>import static <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>activity</name><operator>.</operator><name>TrainerActivity</name><operator>.</operator><name>MS_SEC</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Trainer classic mode, multi meaning fragment
 */</comment>
<class><specifier>public</specifier> class <name>TrainerClassicMMFragment</name> <super><extends>extends <name>TrainerModeFragment</name></extends> <implements>implements <name>TrainerInput</name></implements></super><block>{
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><literal type="string">"TClassicMMFragment"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_INPUT</name> <init>= <expr><literal type="string">"input"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type> <name>tHint</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>LinearLayout</name></type> <name>inputLayout</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>bSolve</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>bShowNext</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type> <name>tColumnAnswer</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>CountDownTimer</name></type> <name>timer</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>MenuItem</name></type> <name>tTip</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>ScrollView</name></type> <name>mainContainer</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>TextInputLayout</name><index>[]</index></name></type> <name>inputList</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>bCheckInput</name></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>View</name></type> <name>onCreateView</name><parameter_list>(<parameter><decl><type><name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>ViewGroup</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>View</name></type> <name>view</name> <init>= <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>fragment_trainer_classic_mm</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>tHint</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tTrainerQOut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tColumnAnswer</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tTrainerInputColumn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//tInput = (EditText) view.findViewById(R.id.tTrainerInput);</comment>
        <expr_stmt><expr><name>inputLayout</name> <operator>=</operator> <operator>(</operator><name>LinearLayout</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tInputLayout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bSolve</name> <operator>=</operator> <operator>(</operator><name>Button</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>bTrainerSolve</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mainContainer</name> <operator>=</operator> <operator>(</operator><name>ScrollView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tTrainerModeScroller</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bCheckInput</name> <operator>=</operator> <operator>(</operator><name>Button</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>bTrainerEnter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bShowNext</name> <operator>=</operator> <operator>(</operator><name>Button</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>bTrainerShowNext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//mainContainer.setDescendantFocusability(ViewGroup.FOCUS_BLOCK_DESCENDANTS);</comment>
        <expr_stmt><expr><call><name><name>bCheckInput</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block>{
            <decl_stmt><decl><type><name>InputMethodManager</name></type> <name>imm</name> <init>= <expr><operator>(</operator><name>InputMethodManager</name><operator>)</operator> <call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSystemService</name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>INPUT_METHOD_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>imm</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"hiding keyboard"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>imm</name><operator>.</operator><name>hideSoftInputFromWindow</name></name><argument_list>(<argument><expr><call><name>getView</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWindowToken</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <for>for<control>(<init><decl><type><name>TextInputLayout</name></type> <name>i</name> <range>: <expr><name>inputList</name></expr></range></decl></init>)</control>
                <block type="pseudo"><expr_stmt><expr><call><name><name>i</name><operator>.</operator><name>clearFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for>
            <expr_stmt><expr><call><name>checkInput</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>bSolve</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>solve</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>bShowNext</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>showNextVocable</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>view</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onSaveInstanceState</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>outState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onSaveInstanceState</name></name><argument_list>(<argument><expr><name>outState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>outState</name><operator>.</operator><name>putStringArrayList</name></name><argument_list>(<argument><expr><name>KEY_INPUT</name></expr></argument>,<argument><expr><call><name>getData</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onActivityCreated</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onActivityCreated</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>initInputs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onViewStateRestored</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onViewStateRestored</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// happens after onActivityCreated</comment>
        <comment type="line">// has to wait for inputs being created in the view</comment>
        <if>if<condition>(<expr><name>savedInstanceState</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>savedInput</name> <init>= <expr><call><name><name>savedInstanceState</name><operator>.</operator><name>getStringArrayList</name></name><argument_list>(<argument><expr><name>KEY_INPUT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <while>while<condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>inputList</name><operator>.</operator><name>length</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <call><name><name>savedInput</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <expr_stmt><expr><call><name>setInputValue</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><call><name><name>savedInput</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
            }</block></while>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"inputs:"</literal><operator>+</operator><name><name>inputList</name><operator>.</operator><name>length</name></name><operator>+</operator><literal type="string">" saved:"</literal><operator>+</operator><call><name><name>savedInput</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">" i:"</literal><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then><else>else<block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"no saved instance state"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Show vocable addition field view
     * @param show
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>showAdditionView</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>show</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><call><name><name>bSolve</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>show</name></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bCheckInput</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>show</name></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bShowNext</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>show</name></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Display addition view with timeout
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>displayAdditionTimed</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>showAdditionView</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>timer</name> <operator>=</operator> <operator>new</operator> <class><super><name>CountDownTimer</name></super><argument_list>(<argument><expr><name>MAX</name> <operator>*</operator> <literal type="number">1000</literal></expr></argument>, <argument><expr><name>MS_SEC</name></expr></argument>)</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onTick</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{
                <if>if<condition>(<expr><name>bShowNext</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name>isAdded</name><argument_list>()</argument_list></call></expr>)</condition><then> <comment type="line">// rotation during countdown</comment>
                    <block type="pseudo"><expr_stmt><expr><call><name><name>bShowNext</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Trainer_btn_Show_Next_Auto</name></name></expr></argument>,<argument><expr><name>l</name><operator>/</operator><name>MS_SEC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
                <else>else
                    <block type="pseudo"><expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>cancel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></else></if>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onFinish</name><parameter_list>()</parameter_list> <block>{
                <expr_stmt><expr><call><name>showNextVocable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>timer</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Input input list/group
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>initInputs</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"initInputs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>inputLayout</name><operator>.</operator><name>removeAllViews</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// delete previous views</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>max</name> <init>= <expr><call><name><name>trainer</name><operator>.</operator><name>getAmountSolutionMeanings</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>inputList</name> <operator>=</operator> <operator>new</operator> <name><name>TextInputLayout</name><index>[<expr><name>max</name></expr>]</index></name></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <decl_stmt><decl><type><name>View</name></type> <name>elem</name> <init>= <expr><call><name>generateInput</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>TextInputLayout</name></type> <name>input</name> <init>= <expr><operator>(</operator><name>TextInputLayout</name><operator>)</operator> <call><name><name>elem</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tTrainerInput_wrapper</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>inputList</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>input</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>inputLayout</name><operator>.</operator><name>addView</name></name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Generate input view with element
     * @return View with input element
     */</comment>
    <function><specifier>private</specifier> <type><name>View</name></type> <name>generateInput</name><parameter_list>()</parameter_list><block>{
        <return>return <expr><call><name><name>View</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>trainer_input_elem</name></name></expr></argument>,<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Show next vocable of trainer
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>showNextVocable</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"showNextVocable()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>timer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>timer</name><operator>.</operator><name>cancel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>timer</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <if>if<condition>(<expr><call><name><name>trainer</name><operator>.</operator><name>isFinished</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name><name>trainerActivity</name><operator>.</operator><name>showResultDialog</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then><else>else <block>{
            <expr_stmt><expr><call><name>showAdditionView</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>trainerActivity</name><operator>.</operator><name>updateQuestion</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>tHint</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>initInputs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>inputList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>getEditText</name><argument_list>()</argument_list></call><operator>.</operator><call><name>requestFocus</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bSolve</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>updateTip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>tColumnAnswer</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>trainer</name><operator>.</operator><name>getColumnNameSolution</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Verify input against solution
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>checkInput</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>trainer</name><operator>.</operator><name>checkSolutions</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <if>if<condition>(<expr><call><name><name>trainer</name><operator>.</operator><name>hasLastAddition</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name><name>settings</name><operator>.</operator><name>additionAuto</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>displayAdditionTimed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name>showAdditionView</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>bShowNext</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Trainer_btn_Show_Next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><call><name><name>tHint</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>trainer</name><operator>.</operator><name>getLastAddition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>tHint</name><operator>.</operator><name>requestFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>mainContainer</name><operator>.</operator><name>smoothScrollTo</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><call><name><name>tHint</name><operator>.</operator><name>getBottom</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>showNextVocable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then> <else>else <block>{
<comment type="line">//            tInput.setSelectAllOnFocus(true);</comment>
<comment type="line">//            tInput.requestFocus(); TODO</comment>
        }</block></else></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Solve current vocable
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>bSolve</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>trainer</name><operator>.</operator><name>getSolutions</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Function updates tTip enabled status
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>updateTip</name><parameter_list>()</parameter_list><block>{
        <if>if<condition>(<expr><name>tTip</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name><name>tTip</name><operator>.</operator><name>getIcon</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setAlpha</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>settings</name><operator>.</operator><name>allowTips</name></name></expr> ?</condition><then> <expr><literal type="number">255</literal></expr> </then><else>: <expr><literal type="number">155</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>tTip</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name><name>settings</name><operator>.</operator><name>allowTips</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>showVocable</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"showVocable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>showNextVocable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>showTip</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tip</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>tHint</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>tip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getData</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>lst</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>inputList</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>TextInputLayout</name></type> <name>input</name> <range>: <expr><name>inputList</name></expr></range></decl></init>)</control><block>{
            <expr_stmt><expr><call><name><name>lst</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>input</name><operator>.</operator><name>getEditText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getText</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>lst</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>setInputState</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>inputNo</name></decl></parameter>, <parameter><decl><type><name>INPUT_STATE</name></type> <name>newState</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>TextInputLayout</name></type> <name>input</name> <init>= <expr><name><name>inputList</name><index>[<expr><name>inputNo</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>newState</name></expr>)</condition> <block>{
            <case>case <expr><name>VALID</name></expr>:</case>
                <expr_stmt><expr><call><name><name>input</name><operator>.</operator><name>setError</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>input</name><operator>.</operator><name>getEditText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setError</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>INVALID</name></expr>:</case>
                <expr_stmt><expr><call><name><name>input</name><operator>.</operator><name>setError</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>input</name><operator>.</operator><name>getEditText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setError</name><argument_list>(<argument><expr><name>INPUT_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>DUPLICATE</name></expr>:</case>
                <expr_stmt><expr><call><name><name>input</name><operator>.</operator><name>setError</name></name><argument_list>(<argument><expr><name>INPUT_DOUBLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>input</name><operator>.</operator><name>getEditText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setError</name><argument_list>(<argument><expr><name>INPUT_DOUBLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        }</block></switch>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>setInputValue</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>inputNo</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>newValue</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>inputList</name><index>[<expr><name>inputNo</name></expr>]</index></name><operator>.</operator><call><name>getEditText</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setText</name><argument_list>(<argument><expr><name>newValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>setAmountInputs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>newAmount</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>initInputs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/fragment/TrainerSettingsFragment.java" hash="e5e3665649a44f568f2f541f5540aa5a36b74bec"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>fragment</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>CheckBox</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>EditText</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>RadioButton</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>

<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>TrainerSettings</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>VList</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Trainer</name><operator>.</operator><name>Trainer</name></name>;</import>

<import>import static <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>activity</name><operator>.</operator><name>MainActivity</name><operator>.</operator><name>PREFS_NAME</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Trainer settings fragment
 */</comment>
<class><specifier>public</specifier> class <name>TrainerSettingsFragment</name> <super><extends>extends <name>BaseFragment</name></extends></super> <block>{

    <comment type="block" format="javadoc">/**
     * Ok button handler
     */</comment>
    <interface><specifier>public</specifier> interface <name>FinishHandler</name> <block>{
        <comment type="block" format="javadoc">/**
         * Called when ok button pressed
         * @param settings
         */</comment>
        <function_decl><type><name>void</name></type> <name>handleFinish</name><parameter_list>(<parameter><decl><type><name>TrainerSettings</name></type> <name>settings</name></decl></parameter>)</parameter_list>;</function_decl>
    }</block></interface>

    <comment type="line">// shared prefs keys</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>P_KEY_TS_TIMES_VOCABLE</name> <init>= <expr><literal type="string">"vocable_repeat"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>P_KEY_TS_TRAIN_MODE</name> <init>= <expr><literal type="string">"training_mode"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>P_KEY_TS_ALLOW_HINTS</name> <init>= <expr><literal type="string">"hints_allowed"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>P_KEY_TS_CASE_SENSITIVE</name> <init>= <expr><literal type="string">"case_sensitive"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>P_KEY_TS_TRIM</name> <init>= <expr><literal type="string">"trim_input"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>P_KEY_TS_ADDITION_AUTO</name> <init>= <expr><literal type="string">"addition_auto"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><literal type="string">"TrainerSettingsFragment"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>View</name></type> <name>view</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>VList</name></argument>&gt;</argument_list></name></type> <name>lists</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CheckBox</name></type> <name>bHints</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CheckBox</name></type> <name>bCaseSensitive</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CheckBox</name></type> <name>bTrimSpaces</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CheckBox</name></type> <name>bAdditionAuto</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>EditText</name></type> <name>tTimesVocable</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>Trainer</name><operator>.</operator><name>TEST_MODE</name></name></type> <name>testMode</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>RadioButton</name><index>[]</index></name></type> <name>rButtons</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>FinishHandler</name></type> <name>handler</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Create new TrainerSettingsFragment
     * The attached context has to implement {@link FinishHandler}
     * @return
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>TrainerSettingsFragment</name></type> <name>newInstance</name><parameter_list>()</parameter_list><block>{
        <return>return <expr><operator>new</operator> <call><name>TrainerSettingsFragment</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>handler</name> <operator>=</operator> <operator>(</operator><name>FinishHandler</name><operator>)</operator> <name>context</name></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>View</name></type> <name>onCreateView</name><parameter_list>(<parameter><decl><type><name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>ViewGroup</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>view</name> <operator>=</operator> <call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>fragment_trainer_settings</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bHints</name> <operator>=</operator> <operator>(</operator><name>CheckBox</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tSettingsChkAllowTips</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bCaseSensitive</name> <operator>=</operator> <operator>(</operator><name>CheckBox</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>chkTSettingsChkCaseSens</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bTrimSpaces</name> <operator>=</operator> <operator>(</operator><name>CheckBox</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tSettingsChkTrimSpaces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bAdditionAuto</name> <operator>=</operator> <operator>(</operator><name>CheckBox</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tSettingsChkAdditionAuto</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tTimesVocable</name> <operator>=</operator> <operator>(</operator><name>EditText</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tSettingsSolveTimes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>RadioButton</name></type> <name>rbA</name> <init>= <expr><operator>(</operator><name>RadioButton</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>rTSettingsA</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RadioButton</name></type> <name>rbB</name> <init>= <expr><operator>(</operator><name>RadioButton</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>rTSettingsB</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RadioButton</name></type> <name>rbR</name> <init>= <expr><operator>(</operator><name>RadioButton</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>rTSettingsAB</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>rButtons</name> <operator>=</operator> <operator>new</operator> <name><name>RadioButton</name><index>[]</index></name><block>{<expr><name>rbA</name></expr>,<expr><name>rbB</name></expr>,<expr><name>rbR</name></expr>}</block></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Button</name></type> <name>bStart</name> <init>= <expr><operator>(</operator><name>Button</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tSettingsOkBtn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>bStart</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>timesToSolve</name></decl>;</decl_stmt>
            <try>try <block>{
                <expr_stmt><expr><name>timesToSolve</name> <operator>=</operator> <call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>tTimesVocable</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                <return>return;</return>
            }</block></catch></try>
            <decl_stmt><decl><type><name>boolean</name></type> <name>showHints</name> <init>= <expr><call><name><name>bHints</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>caseSensitive</name> <init>= <expr><call><name><name>bCaseSensitive</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>trimSpaces</name> <init>= <expr><call><name><name>bTrimSpaces</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>additionAuto</name> <init>= <expr><call><name><name>bAdditionAuto</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>TrainerSettings</name></type> <name>settings</name> <init>= <expr><operator>new</operator> <call><name>TrainerSettings</name><argument_list>(<argument><expr><name>timesToSolve</name></expr></argument>, <argument><expr><name>testMode</name></expr></argument>,
                    <argument><expr><name>showHints</name></expr></argument>, <argument><expr><name>caseSensitive</name></expr></argument>,<argument><expr><name>trimSpaces</name></expr></argument>, <argument><expr><name>additionAuto</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>handleFinish</name></name><argument_list>(<argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>view</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Radio button clicked handler
     * @param view
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>onRadioButtonClicked</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>refreshTestMode</name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Update testmode based on selected view
     * @param view
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>refreshTestMode</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list><block>{
        <switch>switch <condition>(<expr><call><name><name>view</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>rTSettingsA</name></name></expr>:</case>
                <expr_stmt><expr><name>testMode</name> <operator>=</operator> <name><name>Trainer</name><operator>.</operator><name>TEST_MODE</name><operator>.</operator><name>A</name></name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>rTSettingsB</name></name></expr>:</case>
                <expr_stmt><expr><name>testMode</name> <operator>=</operator> <name><name>Trainer</name><operator>.</operator><name>TEST_MODE</name><operator>.</operator><name>B</name></name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>rTSettingsAB</name></name></expr>:</case>
                <expr_stmt><expr><name>testMode</name> <operator>=</operator> <name><name>Trainer</name><operator>.</operator><name>TEST_MODE</name><operator>.</operator><name>RANDOM</name></name></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"invalid view passed for mode refresh"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></switch>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Returns position of the currently checked radio button in the list
     * @return
     */</comment>
    <function><specifier>private</specifier> <type><name>int</name></type> <name>getChecked</name><parameter_list>()</parameter_list><block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rButtons</name><operator>.</operator><name>length</name></name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <if>if <condition>(<expr><name><name>rButtons</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>isChecked</name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><name>i</name></expr>;</return></block></then></if>
        }</block></for>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"no button selected!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Setup view
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// Load past values</comment>
        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>settings</name> <init>= <expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSharedPreferences</name><argument_list>(<argument><expr><name>PREFS_NAME</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// use string to show the hint at first via empty string</comment>
        <expr_stmt><expr><call><name><name>tTimesVocable</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>settings</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>P_KEY_TS_TIMES_VOCABLE</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bHints</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><call><name><name>settings</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name>P_KEY_TS_ALLOW_HINTS</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bCaseSensitive</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><call><name><name>settings</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name>P_KEY_TS_CASE_SENSITIVE</name></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bTrimSpaces</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><call><name><name>settings</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name>P_KEY_TS_TRIM</name></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bAdditionAuto</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><call><name><name>settings</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name>P_KEY_TS_ADDITION_AUTO</name></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for<control>(<init><decl><type><name>RadioButton</name></type> <name>rb</name> <range>: <expr><name>rButtons</name></expr></range></decl></init>)</control>
            <block type="pseudo"><expr_stmt><expr><call><name><name>rb</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>onRadioButtonClicked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

        <decl_stmt><decl><type><name>int</name></type> <name>cRB</name> <init>= <expr><operator>(</operator><call><name><name>settings</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>P_KEY_TS_TRAIN_MODE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>RadioButton</name></type> <name>rbtn</name></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>cRB</name> <operator>&lt;</operator> <name><name>rButtons</name><operator>.</operator><name>length</name></name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>rbtn</name> <operator>=</operator> <name><name>rButtons</name><index>[<expr><name>cRB</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></then><else>else<block>{
            <expr_stmt><expr><name>rbtn</name> <operator>=</operator> <name><name>rButtons</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name><name>rbtn</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>refreshTestMode</name><argument_list>(<argument><expr><name>rbtn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// update here to init testmode</comment>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onStop</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Save values</comment>
        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>settings</name> <init>= <expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSharedPreferences</name><argument_list>(<argument><expr><name>PREFS_NAME</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>SharedPreferences</name><operator>.</operator><name>Editor</name></name></type> <name>editor</name> <init>= <expr><call><name><name>settings</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name>P_KEY_TS_ALLOW_HINTS</name></expr></argument>, <argument><expr><call><name><name>bHints</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>putInt</name></name><argument_list>(<argument><expr><name>P_KEY_TS_TRAIN_MODE</name></expr></argument>, <argument><expr><call><name>getChecked</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>P_KEY_TS_TIMES_VOCABLE</name></expr></argument>,<argument><expr><call><name><name>tTimesVocable</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name>P_KEY_TS_CASE_SENSITIVE</name></expr></argument>,<argument><expr><call><name><name>bCaseSensitive</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name>P_KEY_TS_TRIM</name></expr></argument>,<argument><expr><call><name><name>bTrimSpaces</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name>P_KEY_TS_ADDITION_AUTO</name></expr></argument>, <argument><expr><call><name><name>bAdditionAuto</name><operator>.</operator><name>isChecked</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>apply</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/activity/AboutActivity.java" hash="b498f83db3fa69413b8246a20f4a5d4898a8d608"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>activity</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>ActionBar</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>AppCompatActivity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toolbar</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Html</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>SpannableStringBuilder</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>method</name><operator>.</operator><name>LinkMovementMethod</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>style</name><operator>.</operator><name>ClickableSpan</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>style</name><operator>.</operator><name>URLSpan</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>BuildConfig</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>R</name></name>;</import>

<comment type="block" format="javadoc">/**
 * About activity
 */</comment>
<class><specifier>public</specifier> class <name>AboutActivity</name> <super><extends>extends <name>AppCompatActivity</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>MSG</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>activity_about</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setTitle</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>About_Title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Toolbar</name></type> <name>toolbar</name> <init>= <expr><operator>(</operator><name>Toolbar</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>toolbar</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>setSupportActionBar</name><argument_list>(<argument><expr><name>toolbar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ActionBar</name></type> <name>ab</name> <init>= <expr><call><name>getSupportActionBar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>ab</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>ab</name><operator>.</operator><name>setDisplayHomeAsUpEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>MSG</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>versionName</name> <init>= <expr><name><name>BuildConfig</name><operator>.</operator><name>VERSION_NAME</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>MSG</name> <operator>=</operator> <call><name>getText</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>About_Msg</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>replaceAll</name><argument_list>(<argument><expr><literal type="string">"\\n"</literal></expr></argument>, <argument><expr><literal type="string">"&lt;br&gt;"</literal></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>replaceAll</name><argument_list>(<argument><expr><literal type="string">"%v"</literal></expr></argument>, <argument><expr><name>versionName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>TextView</name></type> <name>msgTextbox</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>etAboutMsg</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>setTextViewHTML</name><argument_list>(<argument><expr><name>msgTextbox</name></expr></argument>,<argument><expr><name>MSG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Make a link clickable
     * @param strBuilder
     * @param span
     */</comment>
    <function><specifier>protected</specifier> <type><name>void</name></type> <name>makeLinkClickable</name><parameter_list>(<parameter><decl><type><name>SpannableStringBuilder</name></type> <name>strBuilder</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>URLSpan</name></type> <name>span</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><call><name><name>strBuilder</name><operator>.</operator><name>getSpanStart</name></name><argument_list>(<argument><expr><name>span</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><call><name><name>strBuilder</name><operator>.</operator><name>getSpanEnd</name></name><argument_list>(<argument><expr><name>span</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><call><name><name>strBuilder</name><operator>.</operator><name>getSpanFlags</name></name><argument_list>(<argument><expr><name>span</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ClickableSpan</name></type> <name>clickable</name> <init>= <expr><operator>new</operator> <class><super><name>ClickableSpan</name></super><argument_list>()</argument_list> <block>{
            <function><specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
                <decl_stmt><decl><type><name>Intent</name></type> <name>browserIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_VIEW</name></name></expr></argument>, <argument><expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><call><name><name>span</name><operator>.</operator><name>getURL</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>browserIntent</name><operator>.</operator><name>resolveActivity</name></name><argument_list>(<argument><expr><call><name>getPackageManager</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><name>browserIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><literal type="string">"ABOUT"</literal></expr></argument>, <argument><expr><literal type="string">"unable to open a browser!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>strBuilder</name><operator>.</operator><name>setSpan</name></name><argument_list>(<argument><expr><name>clickable</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>strBuilder</name><operator>.</operator><name>removeSpan</name></name><argument_list>(<argument><expr><name>span</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Set text view content to HTML
     * @param text
     * @param html HTML sourcecode
     */</comment>
    <function><specifier>protected</specifier> <type><name>void</name></type> <name>setTextViewHTML</name><parameter_list>(<parameter><decl><type><name>TextView</name></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>html</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>CharSequence</name></type> <name>sequence</name> <init>= <expr><call><name><name>Html</name><operator>.</operator><name>fromHtml</name></name><argument_list>(<argument><expr><name>html</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">//TODO: use API level 24 or above to correct this</comment>
        <decl_stmt><decl><type><name>SpannableStringBuilder</name></type> <name>strBuilder</name> <init>= <expr><operator>new</operator> <call><name>SpannableStringBuilder</name><argument_list>(<argument><expr><name>sequence</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>URLSpan</name><index>[]</index></name></type> <name>urls</name> <init>= <expr><call><name><name>strBuilder</name><operator>.</operator><name>getSpans</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>sequence</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>URLSpan</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>URLSpan</name></type> <name>span</name> <range>: <expr><name>urls</name></expr></range></decl></init>)</control> <block>{
            <expr_stmt><expr><call><name>makeLinkClickable</name><argument_list>(<argument><expr><name>strBuilder</name></expr></argument>, <argument><expr><name>span</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name><name>text</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>strBuilder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>text</name><operator>.</operator><name>setMovementMethod</name></name><argument_list>(<argument><expr><call><name><name>LinkMovementMethod</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Called by ok button&lt;br&gt;
     * go back to main activity
     *
     * @param view
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>exitAbout</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/dialog/VListEditorDialog.java" hash="f3be171d0da1b2e49c12f07d4be4c96a85ad9de2"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>dialog</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>AlertDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Dialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>DialogFragment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>EditText</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>LinearLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TableLayout</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Callable</name></name>;</import>

<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>VList</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Dialog for list metadata editing
 */</comment>
<class><specifier>public</specifier> class <name>VListEditorDialog</name> <super><extends>extends <name>DialogFragment</name></extends></super> <block>{
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><literal type="string">"VListEditorDialog"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>PARAM_NEW</name> <init>= <expr><literal type="string">"is_new"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>KEY_COL_A</name> <init>= <expr><literal type="string">"colA"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>KEY_COL_B</name> <init>= <expr><literal type="string">"colB"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>KEY_Name</name> <init>= <expr><literal type="string">"name"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>Callable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>okAction</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>Callable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>cancelAction</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>newList</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>VList</name></type> <name>list</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>EditText</name></type> <name>iName</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>EditText</name></type> <name>iColA</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>EditText</name></type> <name>iColB</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Creates a new instance&lt;br&gt;
     *     see {@link #getListProvider()} for VList provider requirements
     * @param isNew true if a new list is created
     * @return VListEditorDialog
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>VListEditorDialog</name></type> <name>newInstance</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>isNew</name></decl></parameter>)</parameter_list><block>{
        <decl_stmt><decl><type><name>VListEditorDialog</name></type> <name>dialog</name> <init>= <expr><operator>new</operator> <call><name>VListEditorDialog</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Bundle</name></type> <name>bundle</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name>PARAM_NEW</name></expr></argument>, <argument><expr><name>isNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>setArguments</name></name><argument_list>(<argument><expr><name>bundle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>dialog</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Set ok action to run afterwards
     * @param okAction
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>setOkAction</name><parameter_list>(<parameter><decl><type><name><name>Callable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>okAction</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>okAction</name></name> <operator>=</operator> <name>okAction</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Set cancel action to run afterwards
     * @param cancelAction
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>setCancelAction</name><parameter_list>(<parameter><decl><type><name><name>Callable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>cancelAction</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cancelAction</name></name> <operator>=</operator> <name>cancelAction</name></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"onCreate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>savedInstanceState</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>newList</name> <operator>=</operator> <call><name>getArguments</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBoolean</name><argument_list>(<argument><expr><name>PARAM_NEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if<condition>(<expr><call><name>getArguments</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>newList</name> <operator>=</operator> <call><name>getArguments</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBoolean</name><argument_list>(<argument><expr><name>PARAM_NEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onSaveInstanceState</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>outState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onSaveInstanceState</name></name><argument_list>(<argument><expr><name>outState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"saving.."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>outState</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name>PARAM_NEW</name></expr></argument>,<argument><expr><name>newList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>outState</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>KEY_COL_A</name></expr></argument>,<argument><expr><call><name><name>iColA</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>outState</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>KEY_COL_B</name></expr></argument>,<argument><expr><call><name><name>iColB</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>outState</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>KEY_Name</name></expr></argument>,<argument><expr><call><name><name>iName</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Get ListEditorDataProvider&lt;br&gt;
     *     Allows provider to be a targetFragment, parentFragment or the activity
     * @return
     */</comment>
    <function><specifier>private</specifier> <type><name>ListEditorDataProvider</name></type> <name>getListProvider</name><parameter_list>()</parameter_list> <block>{
        <if>if<condition>(<expr><call><name>getTargetFragment</name><argument_list>()</argument_list></call> <operator>instanceof</operator>  <name>ListEditorDataProvider</name></expr>)</condition><then><block>{
            <return>return <expr><operator>(</operator><name>ListEditorDataProvider</name><operator>)</operator> <call><name>getTargetFragment</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then><elseif>else <if>if<condition>(<expr><call><name>getParentFragment</name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>ListEditorDataProvider</name></expr>)</condition><then><block>{
            <return>return <expr><operator>(</operator><name>ListEditorDataProvider</name><operator>)</operator> <call><name>getParentFragment</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name>getActivity</name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>ListEditorDataProvider</name></expr>)</condition><then> <block>{
            <return>return <expr><operator>(</operator><name>ListEditorDataProvider</name><operator>)</operator> <call><name>getActivity</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if></elseif> <else>else <block>{
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"No VList provider found!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></else></if>
    }</block></function>

    <function><annotation>@<name>NonNull</name></annotation>
    <annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>Dialog</name></type> <name>onCreateDialog</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"onCreateDialog"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>getListProvider</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name></type> <name>alertDialog</name> <init>= <expr><operator>new</operator> <call><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>alertDialog</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>newList</name></expr> ?</condition><then> <expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Editor_Diag_table_Title_New</name></name></expr> </then><else>: <expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Editor_Diag_table_Title_Edit</name></name></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>iName</name> <operator>=</operator> <operator>new</operator> <call><name>EditText</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>iColA</name> <operator>=</operator> <operator>new</operator> <call><name>EditText</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>iColB</name> <operator>=</operator> <operator>new</operator> <call><name>EditText</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>iName</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>iName</name><operator>.</operator><name>setSingleLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>iName</name><operator>.</operator><name>setHint</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Editor_Hint_List_Name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>iColA</name><operator>.</operator><name>setHint</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Editor_Hint_Column_A</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>iColB</name><operator>.</operator><name>setHint</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Editor_Hint_Column_B</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>iColA</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>getNameA</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>iColA</name><operator>.</operator><name>setSingleLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>iColB</name><operator>.</operator><name>setSingleLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>iColB</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>getNameB</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>newList</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>iName</name><operator>.</operator><name>setSelectAllOnFocus</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>iColA</name><operator>.</operator><name>setSelectAllOnFocus</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>iColB</name><operator>.</operator><name>setSelectAllOnFocus</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if<condition>(<expr><name>savedInstanceState</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name><name>iName</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>savedInstanceState</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>KEY_Name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>iColA</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>savedInstanceState</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>KEY_COL_A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>iColB</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>savedInstanceState</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>KEY_COL_B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>LinearLayout</name></type> <name>rl</name> <init>= <expr><operator>new</operator> <call><name>TableLayout</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>rl</name><operator>.</operator><name>addView</name></name><argument_list>(<argument><expr><name>iName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rl</name><operator>.</operator><name>addView</name></name><argument_list>(<argument><expr><name>iColA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rl</name><operator>.</operator><name>addView</name></name><argument_list>(<argument><expr><name>iColB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>alertDialog</name><operator>.</operator><name>setView</name></name><argument_list>(<argument><expr><name>rl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>alertDialog</name><operator>.</operator><name>setPositiveButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Editor_Diag_table_btn_Ok</name></name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>dialog</name></decl></parameter>, <parameter><decl><name>whichButton</name></decl></parameter>)</parameter_list> -&gt; <block>{
            <if>if <condition>(<expr><call><name><name>iColA</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name><name>iColB</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name><name>iName</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"empty insert"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>setNameA</name></name><argument_list>(<argument><expr><call><name><name>iColA</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>setNameB</name></name><argument_list>(<argument><expr><call><name><name>iColB</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><call><name><name>iName</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>okAction</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>okAction</name><operator>.</operator><name>call</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></then></if>
        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>alertDialog</name><operator>.</operator><name>setNegativeButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Editor_Diag_table_btn_Canel</name></name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>dialog</name></decl></parameter>, <parameter><decl><name>which</name></decl></parameter>)</parameter_list> -&gt; <block type="pseudo"><expr><call><name>callCancelAction</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>alertDialog</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCancel</name><parameter_list>(<parameter><decl><type><name>DialogInterface</name></type> <name>dialog</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCancel</name></name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>callCancelAction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Calls cancel action
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>callCancelAction</name><parameter_list>()</parameter_list><block>{
        <if>if<condition>(<expr><name>cancelAction</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
            <try>try <block>{
                <expr_stmt><expr><call><name><name>cancelAction</name><operator>.</operator><name>call</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></then></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Interface for dialog caller
     */</comment>

    <interface><specifier>public</specifier> interface <name>ListEditorDataProvider</name> <block>{
        <function_decl><annotation>@<name>NonNull</name></annotation> <type><name>VList</name></type> <name>getList</name><parameter_list>()</parameter_list>;</function_decl>
    }</block></interface>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/dialog/VEntryEditorDialog.java" hash="63fd59f8480287fdb865d4d86d6df0bbafe44256"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>dialog</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Dialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>design</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextInputEditText</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>design</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextInputLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>DialogFragment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>AlertDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageButton</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>LinearLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>RelativeLayout</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Function</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>VEntry</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Dialog for VEntry editing
 */</comment>
<class><specifier>public</specifier> class <name>VEntryEditorDialog</name> <super><extends>extends <name>DialogFragment</name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>IMG_ADD</name> <init>= <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ic_add_black_24dp</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>IMG_REMOVE</name> <init>= <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ic_remove_black_24dp</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><literal type="string">"VEntryEditorDialog"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>KEY_INPUT_A</name> <init>= <expr><literal type="string">"inputA"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>KEY_INPUT_A_COUNT</name> <init>= <expr><literal type="string">"inputACount"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>KEY_INPUT_B</name> <init>= <expr><literal type="string">"inputB"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>KEY_INPUT_B_COUNT</name> <init>= <expr><literal type="string">"inputBCount"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>KEY_INPUT_HINT</name> <init>= <expr><literal type="string">"inputH"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>KEY_INPUT_ADDITION</name> <init>= <expr><literal type="string">"inputAd"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>Function</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>,<argument><name>VEntry</name></argument>&gt;</argument_list></name></type> <name>okAction</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>Function</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>,<argument><name>VEntry</name></argument>&gt;</argument_list></name></type> <name>cancelAction</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>VEntry</name></type> <name>entry</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>LinearLayout</name></type> <name>meaningsA</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>LinearLayout</name></type> <name>meaningsB</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>TextInputEditText</name></type> <name>tHint</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>TextInputEditText</name></type> <name>tAddition</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>tagCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Creates a new instance
     * @return VListEditorDialog
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>VEntryEditorDialog</name></type> <name>newInstance</name><parameter_list>()</parameter_list><block>{
        <return>return <expr><operator>new</operator> <call><name>VEntryEditorDialog</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Set ok action to run afterwards
     * @param okAction
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>setOkAction</name><parameter_list>(<parameter><decl><type><name><name>Function</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>,<argument><name>VEntry</name></argument>&gt;</argument_list></name></type> <name>okAction</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>okAction</name></name> <operator>=</operator> <name>okAction</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Set cancel action to run afterwards
     * @param cancelAction
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>setCancelAction</name><parameter_list>(<parameter><decl><type><name><name>Function</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>,<argument><name>VEntry</name></argument>&gt;</argument_list></name></type> <name>cancelAction</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cancelAction</name></name> <operator>=</operator> <name>cancelAction</name></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onSaveInstanceState</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>outState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onSaveInstanceState</name></name><argument_list>(<argument><expr><name>outState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>meaning</name> <init>= <expr><call><name>getMeanings</name><argument_list>(<argument><expr><name>meaningsA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>outState</name><operator>.</operator><name>putStringArrayList</name></name><argument_list>(<argument><expr><name>KEY_INPUT_A</name></expr></argument>,<argument><expr><name>meaning</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>outState</name><operator>.</operator><name>putInt</name></name><argument_list>(<argument><expr><name>KEY_INPUT_A_COUNT</name></expr></argument>,<argument><expr><call><name><name>meaning</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>meaning</name> <operator>=</operator> <call><name>getMeanings</name><argument_list>(<argument><expr><name>meaningsB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>outState</name><operator>.</operator><name>putStringArrayList</name></name><argument_list>(<argument><expr><name>KEY_INPUT_B</name></expr></argument>,<argument><expr><name>meaning</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>outState</name><operator>.</operator><name>putInt</name></name><argument_list>(<argument><expr><name>KEY_INPUT_B_COUNT</name></expr></argument>,<argument><expr><call><name><name>meaning</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>outState</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>KEY_INPUT_HINT</name></expr></argument>,<argument><expr><call><name><name>tHint</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>outState</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>KEY_INPUT_ADDITION</name></expr></argument>,<argument><expr><call><name><name>tAddition</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>



    <function><annotation>@<name>NonNull</name></annotation>
    <annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>Dialog</name></type> <name>onCreateDialog</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>view</name> <init>= <expr><call><name><name>View</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>dialog_entry</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Editor_Diag_edit_Title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setView</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>meaningsA</name> <operator>=</operator> <operator>(</operator><name>LinearLayout</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>meaningsA</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>meaningsB</name> <operator>=</operator> <operator>(</operator><name>LinearLayout</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>meaningsB</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tHint</name> <operator>=</operator> <operator>(</operator><name>TextInputEditText</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tHint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tAddition</name> <operator>=</operator> <operator>(</operator><name>TextInputEditText</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tAddition</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>mLstA</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>mLstB</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>tip</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>addition</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>EditorDialogDataProvider</name></type> <name>provider</name> <init>= <expr><operator>(</operator><name>EditorDialogDataProvider</name><operator>)</operator> <call><name>getActivity</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name><name>provider</name><operator>.</operator><name>getEditVEntry</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>savedInstanceState</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>mLstA</name> <operator>=</operator> <call><name><name>entry</name><operator>.</operator><name>getAMeanings</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>mLstB</name> <operator>=</operator> <call><name><name>entry</name><operator>.</operator><name>getBMeanings</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>tip</name> <operator>=</operator> <call><name><name>entry</name><operator>.</operator><name>getTip</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>addition</name> <operator>=</operator> <call><name><name>entry</name><operator>.</operator><name>getAddition</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>mLstA</name> <operator>=</operator> <call><name><name>savedInstanceState</name><operator>.</operator><name>getStringArrayList</name></name><argument_list>(<argument><expr><name>KEY_INPUT_A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>mLstB</name> <operator>=</operator> <call><name><name>savedInstanceState</name><operator>.</operator><name>getStringArrayList</name></name><argument_list>(<argument><expr><name>KEY_INPUT_B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>tip</name> <operator>=</operator> <call><name><name>savedInstanceState</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>KEY_INPUT_HINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>addition</name> <operator>=</operator> <call><name><name>savedInstanceState</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>KEY_INPUT_ADDITION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <assert>assert <expr><name>mLstA</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
        <assert>assert <expr><name>mLstB</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
        <expr_stmt><expr><call><name>generateMeanings</name><argument_list>(<argument><expr><name>mLstA</name></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNameA</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>meaningsA</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>generateMeanings</name><argument_list>(<argument><expr><name>mLstB</name></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getNameB</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>meaningsB</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tHint</name><operator>.</operator><name>setSingleLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tHint</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>tip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>tAddition</name><operator>.</operator><name>setSingleLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tAddition</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>addition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setPositiveButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Editor_Diag_edit_btn_OK</name></name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>dialog</name></decl></parameter>, <parameter><decl><name>whichButton</name></decl></parameter>)</parameter_list> -&gt; <block>{
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>mA</name> <init>= <expr><call><name>getMeanings</name><argument_list>(<argument><expr><name>meaningsA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>mB</name> <init>= <expr><call><name>getMeanings</name><argument_list>(<argument><expr><name>meaningsB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><call><name><name>mA</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name><name>mB</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"empty insert"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>setAMeanings</name></name><argument_list>(<argument><expr><name>mA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>setBMeanings</name></name><argument_list>(<argument><expr><name>mB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>setTip</name></name><argument_list>(<argument><expr><call><name><name>tHint</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>entry</name><operator>.</operator><name>setAddition</name></name><argument_list>(<argument><expr><call><name><name>tAddition</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>okAction</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>okAction</name><operator>.</operator><name>function</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></then></if>
        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setNegativeButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Editor_Diag_edit_btn_CANCEL</name></name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>dialog</name></decl></parameter>, <parameter><decl><name>which</name></decl></parameter>)</parameter_list> -&gt; <block type="pseudo"><expr><call><name>callCancelAction</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>builder</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Retrieves meanings from layout input
     * @param layout Layout to traverse
     * @return List of meanings found in layout
     */</comment>
    <function><specifier>private</specifier> <type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getMeanings</name><parameter_list>(<parameter><decl><type><name>LinearLayout</name></type> <name>layout</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>lst</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>layout</name><operator>.</operator><name>getChildCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>layout</name><operator>.</operator><name>getChildCount</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><name>View</name></type> <name>child</name> <init>= <expr><call><name><name>layout</name><operator>.</operator><name>getChildAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>TextInputEditText</name></type> <name>text</name> <init>= <expr><operator>(</operator><name>TextInputEditText</name><operator>)</operator> <call><name><name>child</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>meaning</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><call><name><name>text</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>lst</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>text</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></for>

        <return>return <expr><name>lst</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Generate view with all meanings for specified list
     * @param meanings List of meanings to process
     * @param hint Hint for input
     * @param layout Layout to add views into
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>generateMeanings</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>meanings</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>hint</name></decl></parameter>, <parameter><decl><type><name>LinearLayout</name></type> <name>layout</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>allowFocus</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>descAdd</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Editor_Meaning_Btn_Desc_Add</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>descRemove</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Editor_Meaning_Btn_Desc_Remove</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>View</name><operator>.</operator><name>OnClickListener</name></name></type> <name>addListener</name> <init>= <expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>layout</name><operator>.</operator><name>addView</name></name><argument_list>(<argument><expr><call><name>generateMeaning</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>hint</name></expr></argument>,<argument><expr><name>IMG_ADD</name></expr></argument>, <argument><expr><name>descAdd</name></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>layout</name><operator>.</operator><name>getChildCount</name></name><argument_list>()</argument_list></call> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
                    <decl_stmt><decl><type><name>View</name></type> <name>child</name> <init>= <expr><call><name><name>layout</name><operator>.</operator><name>getChildAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>ImageButton</name></type> <name>childBtn</name> <init>= <expr><operator>(</operator><name>ImageButton</name><operator>)</operator> <call><name><name>child</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>btnMeaning</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>childBtn</name><operator>.</operator><name>setImageResource</name></name><argument_list>(<argument><expr><name>IMG_REMOVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>childBtn</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DeleteAction</name><argument_list>(<argument><expr><call><name><name>child</name><operator>.</operator><name>getTag</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
            }</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>

        <if>if<condition>(<expr><call><name><name>meanings</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>meanings</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
                <expr_stmt><expr><call><name><name>layout</name><operator>.</operator><name>addView</name></name><argument_list>(<argument><expr><call><name>generateMeaning</name><argument_list>(<argument><expr><call><name><name>meanings</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>hint</name></expr></argument>, <argument><expr><name>IMG_REMOVE</name></expr></argument>, <argument><expr><name>descRemove</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>DeleteAction</name><argument_list>(<argument><expr><name>tagCounter</name></expr></argument>,<argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><call><name><name>layout</name><operator>.</operator><name>addView</name></name><argument_list>(<argument><expr><call><name>generateMeaning</name><argument_list>(<argument><expr><call><name><name>meanings</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>meanings</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>hint</name></expr></argument>, <argument><expr><name>IMG_ADD</name></expr></argument>, <argument><expr><name>descAdd</name></expr></argument>, <argument><expr><name>addListener</name></expr></argument>,<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then><else>else<block>{
            <expr_stmt><expr><call><name><name>layout</name><operator>.</operator><name>addView</name></name><argument_list>(<argument><expr><call><name>generateMeaning</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>hint</name></expr></argument>, <argument><expr><name>IMG_ADD</name></expr></argument>, <argument><expr><name>descAdd</name></expr></argument>, <argument><expr><name>addListener</name></expr></argument>,<argument><expr><name>allowFocus</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * {@link android.view.View.OnClickListener} for meaning delete action
     */</comment>
    <class><specifier>private</specifier> class <name>DeleteAction</name> <super><implements>implements <name><name>View</name><operator>.</operator><name>OnClickListener</name></name></implements></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Object</name></type> <name>tag</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ViewGroup</name></type> <name>group</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Create a new delete action
         * @param tag Tag of view to delete on click
         * @param group parent in which to delete
         */</comment>
        <constructor><name>DeleteAction</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>ViewGroup</name></type> <name>group</name></decl></parameter>)</parameter_list><block>{
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tag</name></name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>group</name></name> <operator>=</operator> <name>group</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>group</name><operator>.</operator><name>removeView</name></name><argument_list>(<argument><expr><call><name><name>group</name><operator>.</operator><name>findViewWithTag</name></name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Generate view for meaning entry
     * @param meaning
     * @param hint
     * @param image Button image resource ID
     * @param description Button description
     * @param listener button listener
     * @return View
     */</comment>
    <function><specifier>private</specifier> <type><name>View</name></type> <name>generateMeaning</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>meaning</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>hint</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>image</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>description</name></decl></parameter>, <parameter><decl><type><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></type> <name>listener</name></decl></parameter>,
                                 <parameter><decl><type><name>boolean</name></type> <name>focus</name></decl></parameter>)</parameter_list><block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>RelativeLayout</name></type> <name>container</name> <init>= <expr><operator>(</operator><name>RelativeLayout</name><operator>)</operator> <call><name><name>View</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>editor_meaning</name></name></expr></argument>,<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>container</name><operator>.</operator><name>setTag</name></name><argument_list>(<argument><expr><name>tagCounter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tagCounter</name><operator>++</operator></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>TextInputLayout</name></type> <name>layout</name> <init>= <expr><operator>(</operator><name>TextInputLayout</name><operator>)</operator> <call><name><name>container</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>wrapper_meaning</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>TextInputEditText</name></type> <name>text</name> <init>= <expr><operator>(</operator><name>TextInputEditText</name><operator>)</operator> <call><name><name>container</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>meaning</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ImageButton</name></type> <name>btn</name> <init>= <expr><operator>(</operator><name>ImageButton</name><operator>)</operator> <call><name><name>container</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>btnMeaning</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>text</name><operator>.</operator><name>setSingleLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if>if<condition>(<expr><name>focus</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>layout</name><operator>.</operator><name>requestFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>

        <expr_stmt><expr><call><name><name>layout</name><operator>.</operator><name>setHint</name></name><argument_list>(<argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>text</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>meaning</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>btn</name><operator>.</operator><name>setImageResource</name></name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>btn</name><operator>.</operator><name>setContentDescription</name></name><argument_list>(<argument><expr><name>description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>btn</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>container</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Get editor VEntry
     * @return
     */</comment>
    <function><specifier>public</specifier> <type><name>VEntry</name></type> <name>getEntry</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>entry</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCancel</name><parameter_list>(<parameter><decl><type><name>DialogInterface</name></type> <name>dialog</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCancel</name></name><argument_list>(<argument><expr><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>callCancelAction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Calls cancel action
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>callCancelAction</name><parameter_list>()</parameter_list><block>{
        <if>if<condition>(<expr><name>cancelAction</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
            <try>try <block>{
                <expr_stmt><expr><call><name><name>cancelAction</name><operator>.</operator><name>function</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></then></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Required interface for parent
     */</comment>
    <interface><specifier>public</specifier> interface <name>EditorDialogDataProvider</name> <block>{
        <function_decl><annotation>@<name>NonNull</name></annotation> <type><name>VEntry</name></type> <name>getEditVEntry</name><parameter_list>()</parameter_list>;</function_decl>
    }</block></interface>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/activity/ExImportActivity.java" hash="894f5a22a98e0f7dbce5da3bc7d567f221e7ced6"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>activity</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>Manifest</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>ActionBar</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toolbar</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Base64</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ArrayAdapter</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name><operator>.</operator><name>CSVFormat</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectOutputStream</name></name>;</import>

<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>fragment</name><operator>.</operator><name>BaseFragment</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>fragment</name><operator>.</operator><name>ExportFragment</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>fragment</name><operator>.</operator><name>ImportFragment</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>CSVCustomFormat</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>GenericSpinnerEntry</name></name>;</import>

<import>import static <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>activity</name><operator>.</operator><name>MainActivity</name><operator>.</operator><name>PREFS_NAME</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Activity for import/export
 */</comment>
<class><specifier>public</specifier> class <name>ExImportActivity</name> <super><extends>extends <name>FragmentActivity</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>P_KEY_S_CSV_FORMAT</name> <init>= <expr><literal type="string">"csv_format"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><literal type="string">"ExImportActivity"</literal></expr></init></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * This permission is required for this activity to work
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>REQUIRED_PERMISSION</name> <init>= <expr><name><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>WRITE_EXTERNAL_STORAGE</name></name></expr></init></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * Pass this as false to show export options
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PARAM_IMPORT</name> <init>= <expr><literal type="string">"show_import"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_FORMAT</name> <init>= <expr><literal type="string">"customFormat"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_FRAGMENT</name> <init>= <expr><literal type="string">"fragmentExIm"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>CSVCustomFormat</name></type> <name>CUSTOM_FORMAT</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>BaseFragment</name></type> <name>fragment</name></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"onCreate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>fragment_activity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Toolbar</name></type> <name>toolbar</name> <init>= <expr><operator>(</operator><name>Toolbar</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>toolbar</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>setSupportActionBar</name><argument_list>(<argument><expr><name>toolbar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ActionBar</name></type> <name>ab</name> <init>= <expr><call><name>getSupportActionBar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>ab</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>ab</name><operator>.</operator><name>setDisplayHomeAsUpEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>fragment</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>savedInstanceState</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then><block>{ <comment type="line">// init</comment>
            <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><call><name>getIntent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>showImport</name> <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getBooleanExtra</name></name><argument_list>(<argument><expr><name>PARAM_IMPORT</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"import mode:"</literal><operator>+</operator><name>showImport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>showImport</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>fragment</name> <operator>=</operator> <operator>new</operator> <call><name>ImportFragment</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>fragment</name> <operator>=</operator> <operator>new</operator> <call><name>ExportFragment</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name>setFragment</name><argument_list>(<argument><expr><name>fragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if> <comment type="line">// otherwise let android handle the restore</comment>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onPause</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onPause</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>preferences</name> <init>= <expr><call><name>getSharedPreferences</name><argument_list>(<argument><expr><name>PREFS_NAME</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>SharedPreferences</name><operator>.</operator><name>Editor</name></name></type> <name>editor</name> <init>= <expr><call><name><name>preferences</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>saveCustomFormat</name><argument_list>(<argument><expr><name>editor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>apply</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onOptionsItemSelected</name><parameter_list>(<parameter><decl><type><name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
        <switch>switch<condition>(<expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
            <case>case <expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>home</name></name></expr>:</case>
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"onOptionsItemSelected:home"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>onBackPressed</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></switch>
        <return>return <expr><call><name><name>super</name><operator>.</operator><name>onOptionsItemSelected</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the custom format&lt;br&gt;
     * This can be user defined
     *
     * @param settings required to load preferences
     * @return
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>CSVCustomFormat</name></type> <name>getCustomFormat</name><parameter_list>(<parameter><decl><type><name>SharedPreferences</name></type> <name>settings</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>CUSTOM_FORMAT</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>serialized</name> <init>= <expr><call><name><name>settings</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>P_KEY_S_CSV_FORMAT</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>serialized</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>CUSTOM_FORMAT</name> <operator>=</operator> <name><name>CSVCustomFormat</name><operator>.</operator><name>DEFAULT</name></name></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <try>try <block>{
                    <decl_stmt><decl><type><name>byte</name></type> <name><name>b</name><index>[]</index></name> <init>= <expr><call><name><name>Base64</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><call><name><name>serialized</name><operator>.</operator><name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>Base64</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>ByteArrayInputStream</name></type> <name>bi</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>ObjectInputStream</name></type> <name>si</name> <init>= <expr><operator>new</operator> <call><name>ObjectInputStream</name><argument_list>(<argument><expr><name>bi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>CUSTOM_FORMAT</name> <operator>=</operator> <operator>(</operator><name>CSVCustomFormat</name><operator>)</operator> <call><name><name>si</name><operator>.</operator><name>readObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>si</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>bi</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"decoded format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"unable to load custom format "</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>CUSTOM_FORMAT</name> <operator>=</operator> <name><name>CSVCustomFormat</name><operator>.</operator><name>DEFAULT</name></name></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></else></if>
        }</block></then></if>
        <return>return <expr><name>CUSTOM_FORMAT</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Update format to new one
     * @param newFormat
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>updateCustomFormat</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CSVCustomFormat</name></type> <name>newFormat</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><name>CUSTOM_FORMAT</name> <operator>=</operator> <name>newFormat</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Save custom format settings
     *
     * @param editor editor to store stuff to
     */</comment>
    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>saveCustomFormat</name><parameter_list>(<parameter><decl><type><name><name>SharedPreferences</name><operator>.</operator><name>Editor</name></name></type> <name>editor</name></decl></parameter>)</parameter_list> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>bo</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ObjectOutputStream</name></type> <name>so</name> <init>= <expr><operator>new</operator> <call><name>ObjectOutputStream</name><argument_list>(<argument><expr><name>bo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>so</name><operator>.</operator><name>writeObject</name></name><argument_list>(<argument><expr><name>CUSTOM_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>so</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>P_KEY_S_CSV_FORMAT</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><call><name><name>bo</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Base64</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>so</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bo</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"saved custom format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"unable to save format "</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onSaveInstanceState</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>outState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"onSaveInstanceState"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onSaveInstanceState</name></name><argument_list>(<argument><expr><name>outState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>outState</name><operator>.</operator><name>putParcelable</name></name><argument_list>(<argument><expr><name>KEY_FORMAT</name></expr></argument>,<argument><expr><name>CUSTOM_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Static method to populate format spinner adapter
     *
     * @param adapter Adapter to populate
     * @param context Context for string resolve
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>populateFormatSpinnerAdapter</name><parameter_list>(<parameter><decl><type><name><name>ArrayAdapter</name><argument_list type="generic">&lt;<argument><name><name>GenericSpinnerEntry</name><argument_list type="generic">&lt;<argument><name>CSVCustomFormat</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>adapter</name></decl></parameter>, <parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>SharedPreferences</name></type> <name>settings</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>GenericSpinnerEntry</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>CSVCustomFormat</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>CSV_Format_Default</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>GenericSpinnerEntry</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><operator>new</operator> <call><name>CSVCustomFormat</name><argument_list>(<argument><expr><name><name>CSVFormat</name><operator>.</operator><name>EXCEL</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>CSV_Format_EXCEL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>GenericSpinnerEntry</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><operator>new</operator> <call><name>CSVCustomFormat</name><argument_list>(<argument><expr><name><name>CSVFormat</name><operator>.</operator><name>RFC4180</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>CSV_Format_RFC4180</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>GenericSpinnerEntry</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><operator>new</operator> <call><name>CSVCustomFormat</name><argument_list>(<argument><expr><name><name>CSVFormat</name><operator>.</operator><name>TDF</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>CSV_Format_Tabs</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>GenericSpinnerEntry</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><operator>new</operator> <call><name>CSVCustomFormat</name><argument_list>(<argument><expr><name><name>CSVFormat</name><operator>.</operator><name>MYSQL</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>CSV_Format_Mysql</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>GenericSpinnerEntry</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><operator>new</operator> <call><name>CSVCustomFormat</name><argument_list>(<argument><expr><name><name>CSVFormat</name><operator>.</operator><name>INFORMIX_UNLOAD</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>CSV_Format_INFORMIX_UNLOAD</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>GenericSpinnerEntry</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><operator>new</operator> <call><name>CSVCustomFormat</name><argument_list>(<argument><expr><name><name>CSVFormat</name><operator>.</operator><name>INFORMIX_UNLOAD_CSV</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>CSV_Format_INFORMIX_UNLOAD_CSV</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>GenericSpinnerEntry</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name>getCustomFormat</name><argument_list>(<argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>CSV_Format_Custom_Format</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>notifyDataSetChanged</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/activity/FragmentActivity.java" hash="a84edcffede2850b288433be8af570efd2a23ace"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>activity</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>ActionBar</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>AppCompatActivity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>fragment</name><operator>.</operator><name>BaseFragment</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Base class for fragment activities&lt;br&gt;
 *     This includes back stack function &amp; callbacks as well as helper functions
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>FragmentActivity</name> <super><extends>extends <name>AppCompatActivity</name></extends></super><block>{

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><literal type="string">"FragmentActivity"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Fragment</name></type> <name>currentFragment</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Fragment</name></type> <name>rootFragment</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Interface to implement by fragments that want to be notifified
     */</comment>
    <interface><specifier>public</specifier> interface <name>BackButtonListener</name> <block>{
        <comment type="block" format="javadoc">/**
         * Called when back button is pressed&lt;br&gt;
         *     Used to communicate between activity &amp; fragment
         * @return true indicates that the activity can be closed
         */</comment>
        <function_decl><type><name>boolean</name></type> <name>onBackPressed</name><parameter_list>()</parameter_list>;</function_decl>
    }</block></interface>

    <decl_stmt><decl><type><name>BackButtonListener</name></type> <name>backButtonListener</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Returns the action bar&lt;br&gt;
     *     used by fragments
     * @return ActionBar or Null if none exists
     */</comment>
    <function><specifier>public</specifier> <type><name>ActionBar</name></type> <name>getSupportActionBar</name><parameter_list>()</parameter_list><block>{
        <return>return <expr><call><name><name>super</name><operator>.</operator><name>getSupportActionBar</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onBackPressed</name><parameter_list>()</parameter_list> <block>{
        <if>if<condition>(<expr><name>backButtonListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name><name>backButtonListener</name><operator>.</operator><name>onBackPressed</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onBackPressed</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then> <elseif>else <if>if<condition>(<expr><operator>!</operator><call><name>handleFragmentBack</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onBackPressed</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Pops the stack &amp; handles fragment back
     * @return false when it's impossible to go back
     */</comment>
    <function><specifier>protected</specifier> <type><name>boolean</name></type> <name>handleFragmentBack</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"handling fragment back "</literal><operator>+</operator> <call><name>getFragmentManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBackStackEntryCount</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><call><name>getFragmentManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBackStackEntryCount</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"popping stack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>currentFragment</name> <operator>=</operator> <call><name>getCurrentFragment</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><call><name>getFragmentManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>popBackStackImmediate</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>currentFragment</name> <operator>instanceof</operator> <name>BaseFragment</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>currentFragment</name><operator>.</operator><name>onResume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"unable to pop backstack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            }</block></else></if>
        }</block></then><else>else<block>{
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the current fragment
     * @return
     */</comment>
    <function><specifier>private</specifier> <type><name>Fragment</name></type> <name>getCurrentFragment</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>FragmentManager</name></type> <name>fragmentManager</name> <init>= <expr><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"fragment stack:"</literal> <operator>+</operator> <call><name><name>fragmentManager</name><operator>.</operator><name>getBackStackEntryCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Fragment</name></type> <name>fr</name> <init>= <expr><call><name><name>fragmentManager</name><operator>.</operator><name>findFragmentById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>fr</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>fr</name> <operator>=</operator> <name>rootFragment</name></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>fr</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Set fragment to show&lt;br&gt;

     *     Replaces current fragment
     * @param fragment
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>setFragment</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Fragment</name></type> <name>fragment</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><operator>(</operator><name>fragment</name> <operator>instanceof</operator> <name>BaseFragment</name><operator>)</operator><operator>+</operator><literal type="string">""</literal><operator>+</operator><name>fragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkBackButtonListener</name><argument_list>(<argument><expr><name>fragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>beginTransaction</name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>frame</name></name></expr></argument>, <argument><expr><name>fragment</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>currentFragment</name> <operator>=</operator> <name>fragment</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>rootFragment</name> <operator>=</operator> <name>fragment</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Check back button listener
     * @param fragment
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>checkBackButtonListener</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Fragment</name></type> <name>fragment</name></decl></parameter>)</parameter_list><block>{
        <if>if<condition>(<expr><name>fragment</name> <operator>instanceof</operator> <name>BackButtonListener</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>backButtonListener</name> <operator>=</operator> <operator>(</operator><name>BackButtonListener</name><operator>)</operator> <name>fragment</name></expr>;</expr_stmt>
        }</block></then><else>else<block>{
            <expr_stmt><expr><name>backButtonListener</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Adds a new fragment as top element
     * @param fragment
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>addFragment</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Fragment</name></type> <name>caller</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Fragment</name></type> <name>fragment</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><call><name>checkBackButtonListener</name><argument_list>(<argument><expr><name>fragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>beginTransaction</name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>frame</name></name></expr></argument>,<argument><expr><name>fragment</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>addToBackStack</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>remove</name><argument_list>(<argument><expr><name>caller</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>currentFragment</name> <operator>=</operator> <name>fragment</name></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/activity/ListActivity.java" hash="e98167b463d640c2e3f053309d3c00265a962bee"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>activity</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>ActionBar</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toolbar</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>fragment</name><operator>.</operator><name>ListPickerFragment</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>VList</name></name>;</import>

<comment type="block" format="javadoc">/**
 * List selector activity
 */</comment>
<class><specifier>public</specifier> class <name>ListActivity</name> <super><extends>extends <name>FragmentActivity</name></extends> <implements>implements <name><name>ListPickerFragment</name><operator>.</operator><name>FinishListener</name></name></implements></super> <block>{

    <comment type="block" format="javadoc">/**
     * Set whether multi-select is enabled or not&lt;br&gt;
     * Boolean expected
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PARAM_MULTI_SELECT</name> <init>= <expr><literal type="string">"multiselect"</literal></expr></init></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * Param key for return of selected lists&lt;br&gt;
     * This key contains a {@link VList} object or a {@link List} of {@link VList}
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>RETURN_LISTS</name> <init>= <expr><literal type="string">"selected"</literal></expr></init></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * Pass this flag as true to call this as an deletion activity
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PARAM_DELETE_FLAG</name> <init>= <expr><literal type="string">"delete"</literal></expr></init></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * Optional Param key for already selected lists, available when multiselect is set&lt;br&gt;
     * Expects a {@link List} of {@link VList}&lt;br&gt;
     *     This can be null, if nothing is selected
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PARAM_SELECTED</name> <init>= <expr><literal type="string">"selected"</literal></expr></init></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * Param, if set runs in editor mode, calling EditorActivity &amp; not returning
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PARAM_RUN_EDITOR</name> <init>= <expr><literal type="string">"editorMode"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>multiselect</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ListPickerFragment</name></type> <name>listPickerFragment</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>editorMode</name></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>fragment_activity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Toolbar</name></type> <name>toolbar</name> <init>= <expr><operator>(</operator><name>Toolbar</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>toolbar</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>setSupportActionBar</name><argument_list>(<argument><expr><name>toolbar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ActionBar</name></type> <name>ab</name> <init>= <expr><call><name>getSupportActionBar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>ab</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>ab</name><operator>.</operator><name>setDisplayHomeAsUpEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><call><name>getIntent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// handle passed params</comment>
        <expr_stmt><expr><name>multiselect</name> <operator>=</operator> <call><name><name>intent</name><operator>.</operator><name>getBooleanExtra</name></name><argument_list>(<argument><expr><name>PARAM_MULTI_SELECT</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>delete</name> <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getBooleanExtra</name></name><argument_list>(<argument><expr><name>PARAM_DELETE_FLAG</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>editorMode</name> <operator>=</operator> <call><name><name>intent</name><operator>.</operator><name>getBooleanExtra</name></name><argument_list>(<argument><expr><name>PARAM_RUN_EDITOR</name></expr></argument>,<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>editorMode</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>multiselect</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>delete</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>VList</name></argument>&gt;</argument_list></name></type> <name>preselected</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>intent</name><operator>.</operator><name>hasExtra</name></name><argument_list>(<argument><expr><name>PARAM_SELECTED</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>preselected</name> <operator>=</operator> <call><name><name>intent</name><operator>.</operator><name>getParcelableArrayListExtra</name></name><argument_list>(<argument><expr><name>PARAM_SELECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>preselected</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <if>if <condition>(<expr><name>savedInstanceState</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <comment type="line">//Restore the fragment's instance</comment>
            <expr_stmt><expr><name>listPickerFragment</name> <operator>=</operator> <operator>(</operator><name>ListPickerFragment</name><operator>)</operator> <call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFragment</name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>, <argument><expr><name><name>ListPickerFragment</name><operator>.</operator><name>TAG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>listPickerFragment</name> <operator>=</operator> <call><name><name>ListPickerFragment</name><operator>.</operator><name>newInstance</name></name><argument_list>(<argument><expr><name>multiselect</name></expr></argument>, <argument><expr><name>delete</name></expr></argument>,<argument><expr><name>preselected</name></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><call><name>setFragment</name><argument_list>(<argument><expr><name>listPickerFragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onSaveInstanceState</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>outState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onSaveInstanceState</name></name><argument_list>(<argument><expr><name>outState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//Save the fragment's instance</comment>
        <expr_stmt><expr><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>putFragment</name><argument_list>(<argument><expr><name>outState</name></expr></argument>, <argument><expr><name><name>ListPickerFragment</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><name>listPickerFragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onSupportNavigateUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>onBackPressed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onBackPressed</name><parameter_list>()</parameter_list> <block>{
        <if>if<condition>(<expr><name>editorMode</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onBackPressed</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>Intent</name></type> <name>returnIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>setResult</name><argument_list>(<argument><expr><name><name>Activity</name><operator>.</operator><name>RESULT_CANCELED</name></name></expr></argument>, <argument><expr><name>returnIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>selectionFinished</name><parameter_list>(<parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>VList</name></argument>&gt;</argument_list></name></type> <name>selected</name></decl></parameter>)</parameter_list> <block>{
        <if>if<condition>(<expr><name>editorMode</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Intent</name></type> <name>myIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>EditorActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>myIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>EditorActivity</name><operator>.</operator><name>PARAM_NEW_TABLE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>VList</name></type> <name>lst</name> <init>= <expr><call><name><name>selected</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>myIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>EditorActivity</name><operator>.</operator><name>PARAM_TABLE</name></name></expr></argument>, <argument><expr><name>lst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>startActivity</name></name><argument_list>(<argument><expr><name>myIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>Intent</name></type> <name>returnIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>multiselect</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>returnIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>RETURN_LISTS</name></expr></argument>, <argument><expr><name>selected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><call><name><name>returnIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>RETURN_LISTS</name></expr></argument>, <argument><expr><call><name><name>selected</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
            <expr_stmt><expr><call><name>setResult</name><argument_list>(<argument><expr><name><name>Activity</name><operator>.</operator><name>RESULT_OK</name></name></expr></argument>, <argument><expr><name>returnIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>cancel</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>onBackPressed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/activity/PermActivity.java" hash="3bdd56ece5ba45e2c7b3379cd6ef9c4574a0a673"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>activity</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>ActivityCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>content</name><operator>.</operator><name>ContextCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>AppCompatActivity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>R</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Activity to request permissions&lt;br&gt;
 *     Returns success when permission was granted
 */</comment>
<class><specifier>public</specifier> class <name>PermActivity</name> <super><extends>extends <name>AppCompatActivity</name></extends></super> <block>{
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MY_PERMISSIONS_REQUEST_READ_STORAGE</name> <init>= <expr><literal type="number">10000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PARAM_PERMISSION</name> <init>= <expr><literal type="string">"permissions"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PARAM_MESSAGE</name> <init>= <expr><literal type="string">"message"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><literal type="string">"PermActivity"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>permission</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>message</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>bRetry</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Check whether we have this permission or not&lt;br&gt;
     * should be called before this activity to check whether this is necessary
     *
     * @param context
     * @param perm
     * @return true when context has specified permission
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>hasPermission</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>perm</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>ContextCompat</name><operator>.</operator><name>checkSelfPermission</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>PackageManager</name><operator>.</operator><name>PERMISSION_GRANTED</name></name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Request permissions for generic context &amp; activity
     *
     * @param context
     * @param activity
     * @param perm
     */</comment>
    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>requestPerm</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Activity</name></type> <name>activity</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>perm</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><operator>!</operator><call><name>hasPermission</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// Should we show an explanation?</comment>
            <if>if <condition>(<expr><call><name><name>ActivityCompat</name><operator>.</operator><name>shouldShowRequestPermissionRationale</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>,
                    <argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"not requesting.."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <comment type="line">// No explanation needed, we can request the permission.</comment>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"requesting.."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ActivityCompat</name><operator>.</operator><name>requestPermissions</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>,
                    <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><name>perm</name></expr>}</block></expr></argument>,
                    <argument><expr><name>MY_PERMISSIONS_REQUEST_READ_STORAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>activity_perm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if<condition>(<expr><name>savedInstanceState</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><call><name>getIntent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// handle passed params</comment>
            <expr_stmt><expr><name>permission</name> <operator>=</operator> <call><name><name>intent</name><operator>.</operator><name>getStringExtra</name></name><argument_list>(<argument><expr><name>PARAM_PERMISSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>message</name> <operator>=</operator> <call><name><name>intent</name><operator>.</operator><name>getStringExtra</name></name><argument_list>(<argument><expr><name>PARAM_MESSAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>permission</name> <operator>=</operator> <call><name><name>savedInstanceState</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>PARAM_PERMISSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>message</name> <operator>=</operator> <call><name><name>savedInstanceState</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>PARAM_MESSAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <if>if <condition>(<expr><name>permission</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>message</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>wtf</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"missing parameters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>TextView</name></type> <name>tMsg</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tPermMsg</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>tMsg</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bRetry</name> <operator>=</operator> <operator>(</operator><name>Button</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>bPermReqAgain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bRetry</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>INVISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//TODO: allow resource IDs as message</comment>

        <expr_stmt><expr><call><name>requestPerm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onSaveInstanceState</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>outState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onSaveInstanceState</name></name><argument_list>(<argument><expr><name>outState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>outState</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>PARAM_MESSAGE</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>outState</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>PARAM_PERMISSION</name></expr></argument>,<argument><expr><name>permission</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Called upon retry click
     *
     * @param view
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>onRetry</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>requestPerm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Wrapper around requestPerm for unique calls
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>requestPerm</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>requestPerm</name><argument_list>(<argument><expr><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>permission</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onRequestPermissionsResult</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name><name>permissions</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>grantResults</name></decl></parameter>)</parameter_list> <block>{
        <switch>switch <condition>(<expr><name>requestCode</name></expr>)</condition> <block>{
            <case>case <expr><name>MY_PERMISSIONS_REQUEST_READ_STORAGE</name></expr>:</case> <block>{
                <comment type="line">//permission to read storage</comment>
                <if>if <condition>(<expr><name><name>grantResults</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal>
                        <operator>&amp;&amp;</operator> <name><name>grantResults</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>PackageManager</name><operator>.</operator><name>PERMISSION_GRANTED</name></name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>Intent</name></type> <name>returnIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>setResult</name><argument_list>(<argument><expr><name><name>Activity</name><operator>.</operator><name>RESULT_OK</name></name></expr></argument>, <argument><expr><name>returnIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{ <comment type="line">// allow for retry</comment>
                    <expr_stmt><expr><call><name><name>bRetry</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <return>return;</return>
            }</block>
        }</block></switch>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Called upon cancel pressed
     *
     * @param view
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>onCancel</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Intent</name></type> <name>returnIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>setResult</name><argument_list>(<argument><expr><name><name>Activity</name><operator>.</operator><name>RESULT_CANCELED</name></name></expr></argument>, <argument><expr><name>returnIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/activity/FileActivity.java" hash="c81d4ad849e97dad2d5bf9d300720e970690b381"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>activity</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Environment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>ActionBar</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>AlertDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>AppCompatActivity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toolbar</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Menu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>AbsListView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>EditText</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ListView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>

<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>activity</name><operator>.</operator><name>lib</name><operator>.</operator><name>FileListAdapter</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Comparator</name><operator>.</operator><name>GenFileEntryComparator</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Comparator</name><operator>.</operator><name>GenericComparator</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Formatter</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>BasicFileEntry</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>FileEntry</name></name>;</import>

<import>import static <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>activity</name><operator>.</operator><name>MainActivity</name><operator>.</operator><name>PREFS_NAME</name></name>;</import>

<comment type="block" format="javadoc">/**
 * File activity for file requests&lt;br&gt;
 * &lt;b&gt;requires WRITE_EXTERNAL_STORAGE&lt;/b&gt;&lt;br&gt;
 * To be called as startActivityForResult
 * @author Aron Heinecke
 */</comment>
<class><specifier>public</specifier> class <name>FileActivity</name> <super><extends>extends <name>AppCompatActivity</name></extends></super> <block>{
    <comment type="block" format="javadoc">/**
     * Param key under which the selected file is returned to the next activity&lt;br&gt;
     * File is passed as string containing the absolute path&lt;br&gt;
     * Type: File
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>RETURN_FILE</name> <init>= <expr><literal type="string">"file"</literal></expr></init></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * Param key for return of user friendly formated file path&lt;br&gt;
     * only containing the normal user-visible storage path&lt;br&gt;
     * Type: String
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>RETURN_FILE_USER_NAME</name> <init>= <expr><literal type="string">"user_file_path"</literal></expr></init></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * Param key for write flag&lt;br&gt;
     * Pass as true to get a save-as activity, otherwise read file "dialog"
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PARAM_WRITE_FLAG</name> <init>= <expr><literal type="string">"write_flag"</literal></expr></init></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * Param key for short message to display
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PARAM_MESSAGE</name> <init>= <expr><literal type="string">"message"</literal></expr></init></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * Optional param key for default file name, used upon write flag set true
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PARAM_DEFAULT_FILENAME</name> <init>= <expr><literal type="string">"default_filename"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>P_KEY_FA_LAST_DIR</name> <init>= <expr><literal type="string">"last_directory"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>P_KEY_FA_LAST_FILENAME</name> <init>= <expr><literal type="string">"last_filename"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>P_KEY_FA_SORT</name> <init>= <expr><literal type="string">"FA_sorting_name"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><literal type="string">"FileActivity"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>ListView</name></type> <name>listView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>EditText</name></type> <name>tFileName</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type> <name>tCurrentDir</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>bOk</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>BasicFileEntry</name></argument>&gt;</argument_list></name></type> <name>entries</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>FileListAdapter</name></type> <name>adapter</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Formatter</name></type> <name>fmt</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>write</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>File</name></type> <name>currentDir</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>BasicFileEntry</name></type> <name>selectedEntry</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>basicDir</name></decl>;</decl_stmt> <comment type="line">// user invisible part to remove</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>defaultFileName</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>File</name></type> <name>selectedFile</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>sorting_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BasicFileEntry</name></argument>&gt;</argument_list></name></type> <name>compName</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BasicFileEntry</name></argument>&gt;</argument_list></name></type> <name>compSize</name></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>activity_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Toolbar</name></type> <name>toolbar</name> <init>= <expr><operator>(</operator><name>Toolbar</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>toolbar</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>setSupportActionBar</name><argument_list>(<argument><expr><name>toolbar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ActionBar</name></type> <name>ab</name> <init>= <expr><call><name>getSupportActionBar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>ab</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>ab</name><operator>.</operator><name>setDisplayHomeAsUpEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><name>compName</name> <operator>=</operator> <operator>new</operator> <call><name><name>GenFileEntryComparator</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><operator>new</operator> <name><name>GenericComparator</name><operator>.</operator><name>ValueRetriever</name><index>[]</index></name> <block>{
                <expr><name><name>GenFileEntryComparator</name><operator>.</operator><name>retType</name></name></expr>,<expr><name><name>GenFileEntryComparator</name><operator>.</operator><name>retName</name></name></expr>,
                <expr><name><name>GenFileEntryComparator</name><operator>.</operator><name>retSize</name></name></expr>
        }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>compSize</name> <operator>=</operator> <operator>new</operator> <call><name><name>GenFileEntryComparator</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><operator>new</operator> <name><name>GenericComparator</name><operator>.</operator><name>ValueRetriever</name><index>[]</index></name> <block>{
                <expr><name><name>GenFileEntryComparator</name><operator>.</operator><name>retType</name></name></expr>,<expr><name><name>GenFileEntryComparator</name><operator>.</operator><name>retSize</name></name></expr>,
                <expr><name><name>GenFileEntryComparator</name><operator>.</operator><name>retName</name></name></expr>
        }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>fmt</name> <operator>=</operator> <operator>new</operator> <call><name>Formatter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>TextView</name></type> <name>msg</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tFileMsg</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>tFileName</name> <operator>=</operator> <operator>(</operator><name>EditText</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tFileName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tCurrentDir</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tCurrentDir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bOk</name> <operator>=</operator> <operator>(</operator><name>Button</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>bFileOk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><call><name>getIntent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>msg</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>intent</name><operator>.</operator><name>getStringExtra</name></name><argument_list>(<argument><expr><name>PARAM_MESSAGE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>write</name> <operator>=</operator> <call><name><name>intent</name><operator>.</operator><name>getBooleanExtra</name></name><argument_list>(<argument><expr><name>PARAM_WRITE_FLAG</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>tFileName</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>write</name></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>defaultName</name> <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getStringExtra</name></name><argument_list>(<argument><expr><name>PARAM_DEFAULT_FILENAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>defaultFileName</name> <operator>=</operator> <ternary><condition><expr><name>defaultName</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">"file.xy"</literal></expr> </then><else>: <expr><name>defaultName</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>initListView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onCreateOptionsMenu</name><parameter_list>(<parameter><decl><type><name>Menu</name></type> <name>menu</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>getMenuInflater</name><argument_list>()</argument_list></call><operator>.</operator><call><name>inflate</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>menu</name><operator>.</operator><name>file</name></name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onOptionsItemSelected</name><parameter_list>(<parameter><decl><type><name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
        <switch>switch <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>fMenu_sort_name</name></name></expr>:</case>
                <expr_stmt><expr><name>sorting_name</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>applySorting</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>fMenu_sort_size</name></name></expr>:</case>
                <expr_stmt><expr><name>sorting_name</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>applySorting</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></switch>

        <return>return <expr><call><name><name>super</name><operator>.</operator><name>onOptionsItemSelected</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Setup listview
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>initListView</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>listView</name> <operator>=</operator> <operator>(</operator><name>ListView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>listViewFiles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>listView</name><operator>.</operator><name>setChoiceMode</name></name><argument_list>(<argument><expr><name><name>AbsListView</name><operator>.</operator><name>CHOICE_MODE_SINGLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>listView</name><operator>.</operator><name>setLongClickable</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>entries</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// just a good guess</comment>
        <expr_stmt><expr><name>adapter</name> <operator>=</operator> <operator>new</operator> <call><name>FileListAdapter</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>listView</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>listView</name><operator>.</operator><name>setOnItemClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>parent</name></decl></parameter>, <parameter><decl><name>view</name></decl></parameter>, <parameter><decl><name>pos</name></decl></parameter>, <parameter><decl><name>id</name></decl></parameter>)</parameter_list> -&gt; <block>{
            <decl_stmt><decl><type><name>BasicFileEntry</name></type> <name>entry</name> <init>= <expr><call><name><name>entries</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>entry</name><operator>.</operator><name>getTypeID</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>BasicFileEntry</name><operator>.</operator><name>TYPE_FILE</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"selected: "</literal> <operator>+</operator> <call><name><name>entry</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name><name>view</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>setSelected</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>setActivated</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>selectedEntry</name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bOk</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>write</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>tFileName</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>entry</name><operator>.</operator><name>getTypeID</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>BasicFileEntry</name><operator>.</operator><name>TYPE_DIR</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>currentDir</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>FileEntry</name><operator>)</operator> <name>entry</name><operator>)</operator><operator>.</operator><call><name>getFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>changeDir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>entry</name><operator>.</operator><name>getTypeID</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>BasicFileEntry</name><operator>.</operator><name>TYPE_UP</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>goUp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif></if>
        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>settings</name> <init>= <expr><call><name>getSharedPreferences</name><argument_list>(<argument><expr><name>PREFS_NAME</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>sorting_name</name> <operator>=</operator> <call><name><name>settings</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name>P_KEY_FA_SORT</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setBasicDir</name><argument_list>(<argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>changeDir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Does sorting&lt;br&gt;
     * Notifies data change
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>applySorting</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>updateSorting</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>sorting_name</name></expr> ?</condition><then> <expr><name>compName</name></expr> </then><else>: <expr><name>compSize</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Go on directory up in navigation, if possible
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>goUp</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isRoot</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"cancel go up"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>currentDir</name> <operator>=</operator> <call><name><name>currentDir</name><operator>.</operator><name>getParentFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>changeDir</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Check whether we're at root dir and can't go further above
     * @return true on root
     */</comment>
    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isRoot</name><parameter_list>()</parameter_list><block>{
        <return>return <expr><call><name><name>currentDir</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>basicDir</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Action for Cancel button press
     *
     * @param view
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>onCancelPressed</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>cancel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onSupportNavigateUp</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>cancel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onBackPressed</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>cancel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Cancel file activity
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>cancel</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Intent</name></type> <name>returnIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>setResult</name><argument_list>(<argument><expr><name><name>Activity</name><operator>.</operator><name>RESULT_CANCELED</name></name></expr></argument>, <argument><expr><name>returnIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Action for OK button press
     *
     * @param view
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>onOkPressed</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>write</name> <operator>||</operator> <name>selectedEntry</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>selectedFile</name> <operator>=</operator> <ternary><condition><expr><name>write</name></expr> ?</condition><then> <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>currentDir</name></expr></argument>, <argument><expr><call><name><name>tFileName</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><name>FileEntry</name><operator>)</operator> <name>selectedEntry</name><operator>)</operator><operator>.</operator><call><name>getFile</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"file:"</literal> <operator>+</operator> <call><name><name>selectedFile</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>write</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name><name>selectedFile</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{ <comment type="line">// required !?</comment>
                    <expr_stmt><expr><name>selectedFile</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
                }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>selectedFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name></type> <name>alert</name> <init>= <expr><operator>new</operator> <call><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><call><name><name>alert</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>File_Diag_exists_Title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>alert</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>File_Diag_MSG_part</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><call><name><name>selectedFile</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name><name>alert</name><operator>.</operator><name>setPositiveButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>File_Diag_btn_OK</name></name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>dialog</name></decl></parameter>, <parameter><decl><name>whichButton</name></decl></parameter>)</parameter_list> -&gt; <block type="pseudo"><expr><call><name>useFile</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name><name>alert</name><operator>.</operator><name>setNegativeButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>File_Diag_btn_CANCEL</name></name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>dialog</name></decl></parameter>, <parameter><decl><name>whichButton</name></decl></parameter>)</parameter_list> -&gt; <block type="pseudo"><expr><name>selectedFile</name> <operator>=</operator> <literal type="null">null</literal></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>alert</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></elseif> <else>else <block>{
                    <expr_stmt><expr><call><name>useFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>

            <if>if <condition>(<expr><operator>!</operator><name>write</name> <operator>&amp;&amp;</operator> <name>selectedFile</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>useFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * finishes &amp; returns file if selected
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>useFile</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>selectedFile</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Intent</name></type> <name>returnIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>returnIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>RETURN_FILE</name></expr></argument>, <argument><expr><name>selectedFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>returnIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>RETURN_FILE_USER_NAME</name></expr></argument>, <argument><expr><call><name><name>tCurrentDir</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>File</name><operator>.</operator><name>separator</name></name> <operator>+</operator> <call><name><name>selectedFile</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setResult</name><argument_list>(<argument><expr><name><name>Activity</name><operator>.</operator><name>RESULT_OK</name></name></expr></argument>, <argument><expr><name>returnIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Checks current media state
     *
     * @return true when media is ready
     */</comment>
    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>checkMediaState</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>extState</name> <init>= <expr><call><name><name>Environment</name><operator>.</operator><name>getExternalStorageState</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>!</operator><call><name><name>extState</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>Environment</name><operator>.</operator><name>MEDIA_MOUNTED</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>extState</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>Environment</name><operator>.</operator><name>MEDIA_MOUNTED_READ_ONLY</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"media state: "</literal> <operator>+</operator> <name>extState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name><name>FileActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>File_Error_Mediastate</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></else></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Load default or last path / file into dialog
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>setBasicDir</name><parameter_list>(<parameter><decl><type><name>SharedPreferences</name></type> <name>settings</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>currentDir</name> <operator>=</operator> <operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>settings</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>P_KEY_FA_LAST_DIR</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><operator>!</operator><call><name><name>currentDir</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>currentDir</name><operator>.</operator><name>canWrite</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{ <comment type="line">// old value not valid anymore</comment>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"old path is invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>currentDir</name> <operator>=</operator> <call><name><name>Environment</name><operator>.</operator><name>getExternalStorageDirectory</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>basicDir</name></name> <operator>=</operator> <call><name><name>Environment</name><operator>.</operator><name>getExternalStorageDirectory</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tFileName</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>settings</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>P_KEY_FA_LAST_FILENAME</name></expr></argument>, <argument><expr><name>defaultFileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Change directory in view to the one specified in currentDir&lt;br&gt;
     * if currentDir is null, we're assuming that the overview is required
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>changeDir</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>selectedEntry</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <if>if <condition>(<expr><operator>!</operator><name>write</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>bOk</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>checkMediaState</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>currentDir</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name><name>File</name><index>[]</index></name></type> <name>files</name> <init>= <expr><call><name><name>currentDir</name><operator>.</operator><name>listFiles</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>files</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"null file list!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name><name>FileActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>File_Error_Nullpointer</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <if>if<condition>(<expr><call><name>isRoot</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{ <comment type="line">// can't do anything, no access to base dir</comment>
                        <return>return;</return>
                    }</block></then></if>
                    <expr_stmt><expr><name>currentDir</name> <operator>=</operator> <call><name><name>currentDir</name><operator>.</operator><name>getParentFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>files</name> <operator>=</operator> <call><name><name>currentDir</name><operator>.</operator><name>listFiles</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>entries</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>entries</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>BasicFileEntry</name><argument_list>(<argument><expr><literal type="string">".."</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>BasicFileEntry</name><operator>.</operator><name>TYPE_UP</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// go back entry</comment>
                <for>for <control>(<init><decl><type><name>File</name></type> <name>file</name> <range>: <expr><name>files</name></expr></range></decl></init>)</control> <block>{
                    <expr_stmt><expr><call><name><name>entries</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileEntry</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
                <expr_stmt><expr><call><name>applySorting</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

        <decl_stmt><decl><type><name>String</name></type> <name>newDirLabel</name> <init>= <expr><call><name><name>currentDir</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>replaceFirst</name><argument_list>(<argument><expr><name>basicDir</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>newDirLabel</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>newDirLabel</name> <operator>=</operator> <literal type="string">"/"</literal></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><call><name><name>tCurrentDir</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>newDirLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onStop</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Save values</comment>
        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>settings</name> <init>= <expr><call><name>getSharedPreferences</name><argument_list>(<argument><expr><name>PREFS_NAME</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>SharedPreferences</name><operator>.</operator><name>Editor</name></name></type> <name>editor</name> <init>= <expr><call><name><name>settings</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>P_KEY_FA_LAST_FILENAME</name></expr></argument>, <argument><expr><call><name><name>tFileName</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>P_KEY_FA_LAST_DIR</name></expr></argument>, <argument><expr><call><name><name>currentDir</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name>P_KEY_FA_SORT</name></expr></argument>, <argument><expr><name>sorting_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>apply</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/activity/EditorActivity.java" hash="94181d473c6e79e1a9d7045ba2f60898a5657f3a"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>activity</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>design</name><operator>.</operator><name>widget</name><operator>.</operator><name>FloatingActionButton</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>ActionBar</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>AlertDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>AppCompatActivity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toolbar</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Menu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>animation</name><operator>.</operator><name>AlphaAnimation</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>animation</name><operator>.</operator><name>Animation</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>animation</name><operator>.</operator><name>AnimationSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>animation</name><operator>.</operator><name>ScaleAnimation</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ListView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>

<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>activity</name><operator>.</operator><name>lib</name><operator>.</operator><name>EntryListAdapter</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>dialog</name><operator>.</operator><name>VEntryEditorDialog</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>dialog</name><operator>.</operator><name>VListEditorDialog</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Comparator</name><operator>.</operator><name>GenEntryComparator</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Comparator</name><operator>.</operator><name>GenericComparator</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Database</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>VEntry</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>VList</name></name>;</import>

<import>import static <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>activity</name><operator>.</operator><name>MainActivity</name><operator>.</operator><name>PREFS_NAME</name></name>;</import>
<import>import static <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Database</name><operator>.</operator><name>ID_RESERVED_SKIP</name></name>;</import>
<import>import static <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Database</name><operator>.</operator><name>MIN_ID_TRESHOLD</name></name>;</import>
<import>import static <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>VList</name><operator>.</operator><name>isIDValid</name></name>;</import>

<comment type="block" format="javadoc">/**
 * List editor activity
 */</comment>
<class><specifier>public</specifier> class <name>EditorActivity</name> <super><extends>extends <name>AppCompatActivity</name></extends> <implements>implements <name><name>VEntryEditorDialog</name><operator>.</operator><name>EditorDialogDataProvider</name></name>, <name><name>VListEditorDialog</name><operator>.</operator><name>ListEditorDataProvider</name></name></implements></super> <block>{
    <comment type="block" format="javadoc">/**
     * Param key for new list, default is false
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PARAM_NEW_TABLE</name> <init>= <expr><literal type="string">"NEW_TABLE"</literal></expr></init></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * Param key for list to load upon new_table false
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PARAM_TABLE</name> <init>= <expr><literal type="string">"list"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><literal type="string">"EditorActivity"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>P_KEY_EA_SORT</name> <init>= <expr><literal type="string">"EA_sorting"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_EDITOR_POSITION</name> <init>= <expr><literal type="string">"editorPosition"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_EDITOR_ENTRY</name> <init>= <expr><literal type="string">"editorEntry"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>VList</name></type> <name>list</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>VEntry</name></argument>&gt;</argument_list></name></type> <name>entries</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>EntryListAdapter</name></type> <name>adapter</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>ListView</name></type> <name>listView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Database</name></type> <name>db</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type> <name>undoContainer</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>VEntry</name></type> <name>lastDeleted</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>deletedPosition</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>sortSetting</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>GenEntryComparator</name></type> <name>cComp</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>GenEntryComparator</name></type> <name>compA</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>GenEntryComparator</name></type> <name>compB</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>GenEntryComparator</name></type> <name>compTip</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>MenuItem</name></type> <name>mSort_ColA</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>MenuItem</name></type> <name>mSort_ColB</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>VEntryEditorDialog</name></type> <name>editorDialog</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>VListEditorDialog</name></type> <name>listEditorDialog</name></decl>;</decl_stmt>

    <comment type="line">// current edit</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>editPosition</name> <init>= <expr><name>MIN_ID_TRESHOLD</name> <operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <comment type="line">// store position for viewport change, shared object</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><name>VEntry</name></type> <name>editorEntry</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"onCreate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>entries</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>activity_editor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>db</name> <operator>=</operator> <operator>new</operator> <call><name>Database</name><argument_list>(<argument><expr><call><name>getBaseContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ActionBar</name></type> <name>ab</name> <init>= <expr><call><name>getSupportActionBar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>ab</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>ab</name><operator>.</operator><name>setDisplayHomeAsUpEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name>clearEdit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>compA</name> <operator>=</operator> <operator>new</operator> <call><name>GenEntryComparator</name><argument_list>(<argument><expr><operator>new</operator> <name><name>GenericComparator</name><operator>.</operator><name>ValueRetriever</name><index>[]</index></name> <block>{
                <expr><name><name>GenEntryComparator</name><operator>.</operator><name>retA</name></name></expr>,<expr><name><name>GenEntryComparator</name><operator>.</operator><name>retB</name></name></expr>,
                <expr><name><name>GenEntryComparator</name><operator>.</operator><name>retTip</name></name></expr>
        }</block></expr></argument>,<argument><expr><name>ID_RESERVED_SKIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>compB</name> <operator>=</operator> <operator>new</operator> <call><name>GenEntryComparator</name><argument_list>(<argument><expr><operator>new</operator> <name><name>GenericComparator</name><operator>.</operator><name>ValueRetriever</name><index>[]</index></name> <block>{
                <expr><name><name>GenEntryComparator</name><operator>.</operator><name>retB</name></name></expr>,<expr><name><name>GenEntryComparator</name><operator>.</operator><name>retA</name></name></expr>,
                <expr><name><name>GenEntryComparator</name><operator>.</operator><name>retTip</name></name></expr>
        }</block></expr></argument>,<argument><expr><name>ID_RESERVED_SKIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>compTip</name> <operator>=</operator> <operator>new</operator> <call><name>GenEntryComparator</name><argument_list>(<argument><expr><operator>new</operator> <name><name>GenericComparator</name><operator>.</operator><name>ValueRetriever</name><index>[]</index></name> <block>{
                <expr><name><name>GenEntryComparator</name><operator>.</operator><name>retTip</name></name></expr>,<expr><name><name>GenEntryComparator</name><operator>.</operator><name>retA</name></name></expr>,
                <expr><name><name>GenEntryComparator</name><operator>.</operator><name>retB</name></name></expr>
        }</block></expr></argument>,<argument><expr><name>ID_RESERVED_SKIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><call><name>getIntent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>undoContainer</name> <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>undobar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>undoContainer</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>FloatingActionButton</name></type> <name>bNewEntry</name> <init>= <expr><operator>(</operator><name>FloatingActionButton</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>bEditorNewEntry</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>bNewEntry</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>addEntry</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// setup listview</comment>
        <expr_stmt><expr><call><name>initListView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>settings</name> <init>= <expr><call><name>getSharedPreferences</name><argument_list>(<argument><expr><name>PREFS_NAME</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>sortSetting</name> <operator>=</operator> <call><name><name>settings</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>P_KEY_EA_SORT</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>eMenu_sort_A</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateComp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// handle passed params</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>newTable</name> <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getBooleanExtra</name></name><argument_list>(<argument><expr><name>PARAM_NEW_TABLE</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>savedInstanceState</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>newTable</name> <operator>=</operator> <call><name><name>savedInstanceState</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name>PARAM_NEW_TABLE</name></expr></argument>,<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>listEditorDialog</name> <operator>=</operator> <operator>(</operator><name>VListEditorDialog</name><operator>)</operator> <call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFragment</name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>, <argument><expr><name><name>VListEditorDialog</name><operator>.</operator><name>TAG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>newTable</name></expr>)</condition><then> <block>{
            <if>if<condition>(<expr><name>savedInstanceState</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <comment type="line">// viewport changed during creation phase</comment>
                <block type="pseudo"><expr_stmt><expr><name>list</name> <operator>=</operator> <call><name><name>savedInstanceState</name><operator>.</operator><name>getParcelable</name></name><argument_list>(<argument><expr><name>PARAM_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><name>list</name> <operator>=</operator> <operator>new</operator> <call><name>VList</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Editor_Hint_Column_A</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Editor_Hint_Column_B</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Editor_Hint_List_Name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"new list mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>savedInstanceState</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name>showTableInfoDialog</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>VList</name></type> <name>tbl</name> <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getParcelableExtra</name></name><argument_list>(<argument><expr><name>PARAM_TABLE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>tbl</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>list</name></name> <operator>=</operator> <name>tbl</name></expr>;</expr_stmt>
                <comment type="line">// do not call updateColumnNames as we've to wait for onCreateOptionsMenu, calling it</comment>
                <expr_stmt><expr><call><name><name>entries</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>db</name><operator>.</operator><name>getVocablesOfTable</name></name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>updateSorting</name></name><argument_list>(<argument><expr><name>cComp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"edit list mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Edit VList Flag set without passing a list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>

        <if>if<condition>(<expr><name>listEditorDialog</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>setListEditorActions</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>

        <if>if<condition>(<expr><name>savedInstanceState</name> <operator>!=</operator> <literal type="null">null</literal></expr> )</condition><then> <block>{
            <expr_stmt><expr><name>editorDialog</name> <operator>=</operator> <operator>(</operator><name>VEntryEditorDialog</name><operator>)</operator> <call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFragment</name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>, <argument><expr><name><name>VEntryEditorDialog</name><operator>.</operator><name>TAG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>editorDialog</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <comment type="line">// DialogFragment re-adds itself</comment>
                <expr_stmt><expr><name>editPosition</name> <operator>=</operator> <call><name><name>savedInstanceState</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>KEY_EDITOR_POSITION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name>isIDValid</name><argument_list>(<argument><expr><name>editPosition</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>editorEntry</name> <operator>=</operator> <operator>(</operator><name>VEntry</name><operator>)</operator> <call><name><name>adapter</name><operator>.</operator><name>getItem</name></name><argument_list>(<argument><expr><name>editPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
                <else>else
                    <block type="pseudo"><expr_stmt><expr><name>editorEntry</name> <operator>=</operator> <call><name><name>savedInstanceState</name><operator>.</operator><name>getParcelable</name></name><argument_list>(<argument><expr><name>KEY_EDITOR_ENTRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
                <expr_stmt><expr><call><name>setEditorDialogActions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Clear current edit state
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>clearEdit</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>editPosition</name> <operator>=</operator> <name>MIN_ID_TRESHOLD</name> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> <comment type="line">// clear</comment>
        <expr_stmt><expr><name>editorEntry</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Handles list column name changes
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>updateColumnNames</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><call><name><name>mSort_ColB</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>getNameB</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mSort_ColA</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>getNameA</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>setTableData</name></name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Changes cComp to current selection
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>updateComp</name><parameter_list>()</parameter_list><block>{
        <switch>switch<condition>(<expr><name>sortSetting</name></expr>)</condition><block>{
            <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>eMenu_sort_A</name></name></expr>:</case>
                <expr_stmt><expr><name>cComp</name> <operator>=</operator> <name>compA</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>eMenu_sort_B</name></name></expr>:</case>
                <expr_stmt><expr><name>cComp</name> <operator>=</operator> <name>compB</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>eMenu_sort_Tip</name></name></expr>:</case>
                <expr_stmt><expr><name>cComp</name> <operator>=</operator> <name>compTip</name></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><name>cComp</name> <operator>=</operator> <name>compA</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>sortSetting</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>eMenu_sort_A</name></name></expr>;</expr_stmt>
                <break>break;</break>
        }</block></switch>
        <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>updateSorting</name></name><argument_list>(<argument><expr><name>cComp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onCreateOptionsMenu</name><parameter_list>(<parameter><decl><type><name>Menu</name></type> <name>menu</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>getMenuInflater</name><argument_list>()</argument_list></call><operator>.</operator><call><name>inflate</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>menu</name><operator>.</operator><name>editor</name></name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mSort_ColA</name> <operator>=</operator> <call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>eMenu_sort_A</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mSort_ColB</name> <operator>=</operator> <call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>eMenu_sort_B</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateColumnNames</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onOptionsItemSelected</name><parameter_list>(<parameter><decl><type><name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
        <switch>switch <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <case>case <expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>home</name></name></expr>:</case>
                <expr_stmt><expr><call><name>onBackPressed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tEditorListEdit</name></name></expr>:</case>
                <expr_stmt><expr><call><name>showTableInfoDialog</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>eMenu_sort_A</name></name></expr>:</case>
            <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>eMenu_sort_B</name></name></expr>:</case>
            <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>eMenu_sort_Tip</name></name></expr>:</case>
                <expr_stmt><expr><name>sortSetting</name> <operator>=</operator> <call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>updateComp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></switch>

        <return>return <expr><call><name><name>super</name><operator>.</operator><name>onOptionsItemSelected</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Save editorEntry to DB &amp; update listview
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>saveEdit</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>VEntry</name></argument>&gt;</argument_list></name></type> <name>lst</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>lst</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>editorEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><operator>!</operator><call><name><name>editorEntry</name><operator>.</operator><name>isExisting</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>addEntryUnrendered</name></name><argument_list>(<argument><expr><name>editorEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>upsertEntries</name></name><argument_list>(<argument><expr><name>lst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>notifyDataSetChanged</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Setup listview
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>initListView</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Toolbar</name></type> <name>toolbar</name> <init>= <expr><operator>(</operator><name>Toolbar</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>toolbar</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>setSupportActionBar</name><argument_list>(<argument><expr><name>toolbar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ActionBar</name></type> <name>ab</name> <init>= <expr><call><name>getSupportActionBar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>ab</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>ab</name><operator>.</operator><name>setDisplayHomeAsUpEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><name>listView</name> <operator>=</operator> <operator>(</operator><name>ListView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>listviewEditor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>listView</name><operator>.</operator><name>setLongClickable</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>entries</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>adapter</name> <operator>=</operator> <operator>new</operator> <call><name>EntryListAdapter</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>listView</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>listView</name><operator>.</operator><name>setOnItemClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>parent</name></decl></parameter>, <parameter><decl><name>view</name></decl></parameter>, <parameter><decl><name>pos</name></decl></parameter>, <parameter><decl><name>id</name></decl></parameter>)</parameter_list> -&gt; <block type="pseudo"><expr><call><name>showEntryEditDialog</name><argument_list>(<argument><expr><operator>(</operator><name>VEntry</name><operator>)</operator> <call><name><name>adapter</name><operator>.</operator><name>getItem</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>listView</name><operator>.</operator><name>setOnItemLongClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>arg0</name></decl></parameter>, <parameter><decl><name>arg1</name></decl></parameter>, <parameter><decl><name>pos</name></decl></parameter>, <parameter><decl><name>id</name></decl></parameter>)</parameter_list> -&gt; <block>{
            <expr_stmt><expr><call><name>showEntryDeleteDialog</name><argument_list>(<argument><expr><operator>(</operator><name>VEntry</name><operator>)</operator> <call><name><name>adapter</name><operator>.</operator><name>getItem</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Add new VEntry
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>addEntry</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>editorEntry</name> <operator>=</operator> <operator>new</operator> <call><name>VEntry</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>showEntryEditDialog</name><argument_list>(<argument><expr><name>editorEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Show entry delete dialog
     *
     * @param entry
     * @param position
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>showEntryDeleteDialog</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>VEntry</name></type> <name>entry</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>entry</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>ID_RESERVED_SKIP</name></expr>)</condition><then>
            <block type="pseudo"><return>return;</return></block></then></if>
        <decl_stmt><decl><type><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name></type> <name>delDiag</name> <init>= <expr><operator>new</operator> <call><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>delDiag</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Editor_Diag_delete_Title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>delDiag</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Editor_Diag_delete_MSG_part</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"\n %s %s %s"</literal></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getAString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getBString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getTip</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>delDiag</name><operator>.</operator><name>setPositiveButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Editor_Diag_delete_btn_OK</name></name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>dialog</name></decl></parameter>, <parameter><decl><name>whichButton</name></decl></parameter>)</parameter_list> -&gt; <block>{
            <expr_stmt><expr><name>lastDeleted</name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>deletedPosition</name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>showUndo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"deleted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>delDiag</name><operator>.</operator><name>setNegativeButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Editor_Diag_delete_btn_CANCEL</name></name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>dialog</name></decl></parameter>, <parameter><decl><name>whichButton</name></decl></parameter>)</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"canceled"</literal></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>delDiag</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Show entry edit dialog for new vocable
     * @param entry
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>showEntryEditDialog</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>VEntry</name></type> <name>entry</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>showEntryEditDialog</name><argument_list>(<argument><expr><name>entry</name></expr></argument>,<argument><expr><name>MIN_ID_TRESHOLD</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Show entry edit dialog
     *
     * @param entry VEntry to edit/create
     * @param position edit position in list, if existing
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>showEntryEditDialog</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>VEntry</name></type> <name>entry</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>entry</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>ID_RESERVED_SKIP</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>showTableInfoDialog</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>editPosition</name></name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>editorEntry</name></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>editorDialog</name> <operator>=</operator> <call><name><name>VEntryEditorDialog</name><operator>.</operator><name>newInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setEditorDialogActions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>editorDialog</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>VEntryEditorDialog</name><operator>.</operator><name>TAG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Setup editor dialog actions
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>setEditorDialogActions</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><call><name><name>editorDialog</name><operator>.</operator><name>setOkAction</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>e</name></decl></parameter></parameter_list> -&gt; <block>{
            <expr_stmt><expr><call><name>saveEdit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"edited"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>editorDialog</name><operator>.</operator><name>setCancelAction</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>e</name></decl></parameter></parameter_list> -&gt; <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"canceled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Setup list editor actions
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>setListEditorActions</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>listEditorDialog</name><operator>.</operator><name>setCancelAction</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
            <if>if<condition>(<expr><operator>!</operator><call><name><name>list</name><operator>.</operator><name>isExisting</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>listEditorDialog</name><operator>.</operator><name>setOkAction</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
            <if>if<condition>(<expr><call><name><name>db</name><operator>.</operator><name>upsertVList</name></name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>setTitle</name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>updateColumnNames</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="string">"Unable to save list!"</literal></expr></argument>,
                        <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Show list title editor dialog&lt;br&gt;
     *     Exit editor when newTbl is set and user cancels the dialog
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>showTableInfoDialog</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>listEditorDialog</name> <operator>=</operator> <call><name><name>VListEditorDialog</name><operator>.</operator><name>newInstance</name></name><argument_list>(<argument><expr><operator>!</operator><call><name><name>list</name><operator>.</operator><name>isExisting</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setListEditorActions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>listEditorDialog</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>VListEditorDialog</name><operator>.</operator><name>TAG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Show undo view&lt;br&gt;
     * On viewchange during the animation we're not deleting the vocable
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>showUndo</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>undoContainer</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>undoContainer</name><operator>.</operator><name>bringToFront</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ScaleAnimation</name></type> <name>scaleAnimation</name> <init>= <expr><operator>new</operator> <call><name>ScaleAnimation</name><argument_list>(<argument><expr><literal type="number">0f</literal></expr></argument>,<argument><expr><literal type="number">1f</literal></expr></argument>,<argument><expr><literal type="number">1f</literal></expr></argument>,<argument><expr><literal type="number">1f</literal></expr></argument>,
                <argument><expr><name><name>Animation</name><operator>.</operator><name>RELATIVE_TO_SELF</name></name></expr></argument>, <argument><expr><literal type="number">0f</literal></expr></argument>, <comment type="line">// Pivot point of X scaling</comment>
                <argument><expr><name><name>Animation</name><operator>.</operator><name>RELATIVE_TO_SELF</name></name></expr></argument>, <argument><expr><literal type="number">1f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>AlphaAnimation</name></type> <name>alphaAnimation</name> <init>= <expr><operator>new</operator> <call><name>AlphaAnimation</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>,<argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>AnimationSet</name></type> <name>animationSet</name> <init>= <expr><operator>new</operator> <call><name>AnimationSet</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>animationSet</name><operator>.</operator><name>addAnimation</name></name><argument_list>(<argument><expr><name>scaleAnimation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>animationSet</name><operator>.</operator><name>addAnimation</name></name><argument_list>(<argument><expr><name>alphaAnimation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>animationSet</name><operator>.</operator><name>setDuration</name></name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>animationSet</name><operator>.</operator><name>setFillEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>animationSet</name><operator>.</operator><name>setAnimationListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>Animation</name><operator>.</operator><name>AnimationListener</name></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onAnimationStart</name><parameter_list>(<parameter><decl><type><name>Animation</name></type> <name>animation</name></decl></parameter>)</parameter_list> <block>{}</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onAnimationEnd</name><parameter_list>(<parameter><decl><type><name>Animation</name></type> <name>animation</name></decl></parameter>)</parameter_list> <block>{
                <decl_stmt><decl><type><name>AnimationSet</name></type> <name>animationSetOut</name> <init>= <expr><operator>new</operator> <call><name>AnimationSet</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>AlphaAnimation</name></type> <name>alphaAnimation1</name> <init>= <expr><operator>new</operator> <call><name>AlphaAnimation</name><argument_list>(<argument><expr><literal type="number">1f</literal></expr></argument>,<argument><expr><literal type="number">0f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>ScaleAnimation</name></type> <name>scaleAnimation1</name> <init>= <expr><operator>new</operator> <call><name>ScaleAnimation</name><argument_list>(<argument><expr><literal type="number">1f</literal></expr></argument>,<argument><expr><literal type="number">0f</literal></expr></argument>,<argument><expr><literal type="number">1f</literal></expr></argument>,<argument><expr><literal type="number">1f</literal></expr></argument>,
                        <argument><expr><name><name>Animation</name><operator>.</operator><name>RELATIVE_TO_SELF</name></name></expr></argument>, <argument><expr><literal type="number">1f</literal></expr></argument>,
                        <argument><expr><name><name>Animation</name><operator>.</operator><name>RELATIVE_TO_SELF</name></name></expr></argument>, <argument><expr><literal type="number">1f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>ScaleAnimation</name></type> <name>scaleAnimation2</name> <init>= <expr><operator>new</operator> <call><name>ScaleAnimation</name><argument_list>(<argument><expr><literal type="number">1f</literal></expr></argument>,<argument><expr><literal type="number">0f</literal></expr></argument>,<argument><expr><literal type="number">1f</literal></expr></argument>,<argument><expr><literal type="number">0f</literal></expr></argument>,
                        <argument><expr><name><name>Animation</name><operator>.</operator><name>RELATIVE_TO_SELF</name></name></expr></argument>, <argument><expr><literal type="number">1f</literal></expr></argument>,
                        <argument><expr><name><name>Animation</name><operator>.</operator><name>RELATIVE_TO_SELF</name></name></expr></argument>, <argument><expr><literal type="number">1f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name>scaleAnimation2</name><operator>.</operator><name>setStartOffset</name></name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>animationSetOut</name><operator>.</operator><name>addAnimation</name></name><argument_list>(<argument><expr><name>alphaAnimation1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>animationSetOut</name><operator>.</operator><name>addAnimation</name></name><argument_list>(<argument><expr><name>scaleAnimation1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>animationSetOut</name><operator>.</operator><name>addAnimation</name></name><argument_list>(<argument><expr><name>scaleAnimation2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>animationSetOut</name><operator>.</operator><name>setDuration</name></name><argument_list>(<argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>animationSetOut</name><operator>.</operator><name>setStartOffset</name></name><argument_list>(<argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>animationSetOut</name><operator>.</operator><name>setFillEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>animationSetOut</name><operator>.</operator><name>setAnimationListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>Animation</name><operator>.</operator><name>AnimationListener</name></name></super><argument_list>()</argument_list> <block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>onAnimationStart</name><parameter_list>(<parameter><decl><type><name>Animation</name></type> <name>animation</name></decl></parameter>)</parameter_list> <block>{}</block></function>

                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>onAnimationEnd</name><parameter_list>(<parameter><decl><type><name>Animation</name></type> <name>animation</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name><name>undoContainer</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>lastDeleted</name><operator>.</operator><name>setDelete</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>VEntry</name></argument>&gt;</argument_list></name></type> <name>lst</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>lst</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lastDeleted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>upsertEntries</name></name><argument_list>(<argument><expr><name>lst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></function>

                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name>void</name></type> <name>onAnimationRepeat</name><parameter_list>(<parameter><decl><type><name>Animation</name></type> <name>animation</name></decl></parameter>)</parameter_list> <block>{}</block></function>
                }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>undoContainer</name><operator>.</operator><name>setAnimation</name></name><argument_list>(<argument><expr><name>animationSetOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onAnimationRepeat</name><parameter_list>(<parameter><decl><type><name>Animation</name></type> <name>animation</name></decl></parameter>)</parameter_list> <block>{}</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>undoContainer</name><operator>.</operator><name>clearAnimation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>undoContainer</name><operator>.</operator><name>setAnimation</name></name><argument_list>(<argument><expr><name>animationSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>undoContainer</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"undoing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>undoContainer</name><operator>.</operator><name>clearAnimation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>addEntryRendered</name></name><argument_list>(<argument><expr><name>lastDeleted</name></expr></argument>, <argument><expr><name>deletedPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>undoContainer</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>listView</name><operator>.</operator><name>setFocusable</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onSaveInstanceState</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>outState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onSaveInstanceState</name></name><argument_list>(<argument><expr><name>outState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>editorDialog</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>editorDialog</name><operator>.</operator><name>isAdded</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>putFragment</name><argument_list>(<argument><expr><name>outState</name></expr></argument>, <argument><expr><name><name>VEntryEditorDialog</name><operator>.</operator><name>TAG</name></name></expr></argument>,<argument><expr><name>editorDialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <if>if<condition>(<expr><name>listEditorDialog</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>listEditorDialog</name><operator>.</operator><name>isAdded</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>putFragment</name><argument_list>(<argument><expr><name>outState</name></expr></argument>, <argument><expr><name><name>VListEditorDialog</name><operator>.</operator><name>TAG</name></name></expr></argument>,<argument><expr><name>listEditorDialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><call><name><name>outState</name><operator>.</operator><name>putInt</name></name><argument_list>(<argument><expr><name>KEY_EDITOR_POSITION</name></expr></argument>,<argument><expr><name>editPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>editorEntry</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>editorEntry</name><operator>.</operator><name>isExisting</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <comment type="line">// unsaved new entry (empty entry as filled by editor)</comment>
            <block type="pseudo"><expr_stmt><expr><call><name><name>outState</name><operator>.</operator><name>putParcelable</name></name><argument_list>(<argument><expr><name>KEY_EDITOR_ENTRY</name></expr></argument>,<argument><expr><name>editorEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <if>if<condition>(<expr><operator>!</operator><call><name><name>list</name><operator>.</operator><name>isExisting</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{ <comment type="line">// unsaved new table, still in creation dialog</comment>
            <expr_stmt><expr><call><name><name>outState</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name>PARAM_NEW_TABLE</name></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>outState</name><operator>.</operator><name>putParcelable</name></name><argument_list>(<argument><expr><name>PARAM_TABLE</name></expr></argument>,<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onStop</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>settings</name> <init>= <expr><call><name>getSharedPreferences</name><argument_list>(<argument><expr><name>PREFS_NAME</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>SharedPreferences</name><operator>.</operator><name>Editor</name></name></type> <name>editor</name> <init>= <expr><call><name><name>settings</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>putInt</name></name><argument_list>(<argument><expr><name>P_KEY_EA_SORT</name></expr></argument>, <argument><expr><name>sortSetting</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>apply</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>NonNull</name></annotation>
    <annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>VEntry</name></type> <name>getEditVEntry</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>editorEntry</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>NonNull</name></annotation>
    <annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>VList</name></type> <name>getList</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>list</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/activity/MainActivity.java" hash="eb033823623d9faf163c400e8ba73383926b915e"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>activity</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>AlertDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>AppCompatActivity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Button</name></name>;</import>

<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Database</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Main activity
 */</comment>
<class><specifier>public</specifier> class <name>MainActivity</name> <super><extends>extends <name>AppCompatActivity</name></extends></super> <block>{
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PREFS_NAME</name> <init>= <expr><literal type="string">"voc_prefs"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>REQUEST_PERM_EXPORT</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>REQUEST_PERM_IMPORT</name> <init>= <expr><literal type="number">35</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>P_KEY_ALPHA_DIALOG</name> <init>= <expr><literal type="string">"showedAlphaDialog"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Deprecated</name></annotation>
    <specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>P_KEY_DB_CHANGE_N_N</name> <init>= <expr><literal type="string">"showedDBDialogN_N"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>showedDialog</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Button</name></type> <name>btnContinue</name></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>activity_main</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setTitle</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>app_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>settings</name> <init>= <expr><call><name>getSharedPreferences</name><argument_list>(<argument><expr><name>PREFS_NAME</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>showedDialog</name> <operator>=</operator> <call><name><name>settings</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name>P_KEY_ALPHA_DIALOG</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><operator>!</operator><name>showedDialog</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name></type> <name>finishedDiag</name> <init>= <expr><operator>new</operator> <call><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>finishedDiag</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><literal type="string">"Info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>finishedDiag</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><literal type="string">"This software is currently in beta state. This includes, but not limited to, data loss, destroying your phone, eating your children and burning your dog! You have been warned."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>finishedDiag</name><operator>.</operator><name>setPositiveButton</name></name><argument_list>(<argument><expr><literal type="string">"TLDR"</literal></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>dialog</name></decl></parameter>, <parameter><decl><name>whichButton</name></decl></parameter>)</parameter_list> -&gt; <block type="pseudo"><expr><name>showedDialog</name> <operator>=</operator> <literal type="boolean">true</literal></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>finishedDiag</name><operator>.</operator><name>setNegativeButton</name></name><argument_list>(<argument><expr><literal type="string">"Get me outta here"</literal></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>dialog</name></decl></parameter>, <parameter><decl><name>whichButton</name></decl></parameter>)</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>System</name><operator>.</operator><name>exit</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>finishedDiag</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>


        <expr_stmt><expr><name>btnContinue</name> <operator>=</operator> <operator>(</operator><name>Button</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>bLastSession</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onActivityResult</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>resultCode</name></decl></parameter>, <parameter><decl><type><name>Intent</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>resultCode</name> <operator>==</operator> <name><name>Activity</name><operator>.</operator><name>RESULT_OK</name></name></expr>)</condition><then> <block>{
            <switch>switch <condition>(<expr><name>requestCode</name></expr>)</condition> <block>{
                <case>case <expr><name>REQUEST_PERM_EXPORT</name></expr>:</case> <block>{
                    <expr_stmt><expr><call><name>startExportActivityUnchecked</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block>
                <break>break;</break>
                <case>case <expr><name>REQUEST_PERM_IMPORT</name></expr>:</case> <block>{
                    <expr_stmt><expr><call><name>startImportActivityUnchecked</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block>
                <break>break;</break>
            }</block></switch>
        }</block></then></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onStop</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>settings</name> <init>= <expr><call><name>getSharedPreferences</name><argument_list>(<argument><expr><name>PREFS_NAME</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>SharedPreferences</name><operator>.</operator><name>Editor</name></name></type> <name>editor</name> <init>= <expr><call><name><name>settings</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name>P_KEY_ALPHA_DIALOG</name></expr></argument>, <argument><expr><name>showedDialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>apply</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onResume</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onResume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>btnContinue</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>new</operator> <call><name>Thread</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>openSession</name> <init>= <expr><operator>new</operator> <call><name>Database</name><argument_list>(<argument><expr><call><name>getBaseContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>isSessionStored</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>runOnUiThread</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>btnContinue</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>openSession</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Open trainer to continue the last session
     *
     * @param view
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>continueSession</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Intent</name></type> <name>myIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>TrainerActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>myIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>TrainerActivity</name><operator>.</operator><name>PARAM_RESUME_SESSION_FLAG</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>startActivity</name></name><argument_list>(<argument><expr><name>myIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Open new table intent
     *
     * @param view
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>showNewTable</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Intent</name></type> <name>myIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>EditorActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>myIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>EditorActivity</name><operator>.</operator><name>PARAM_NEW_TABLE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>startActivity</name></name><argument_list>(<argument><expr><name>myIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Open edit table intent
     *
     * @param view
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>showEditTable</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Intent</name></type> <name>myIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>ListActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>myIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>ListActivity</name><operator>.</operator><name>PARAM_RUN_EDITOR</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>startActivity</name></name><argument_list>(<argument><expr><name>myIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Open trainer intent
     *
     * @param view
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>showTrainer</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Intent</name></type> <name>myIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>TrainerSettingsActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>startActivity</name></name><argument_list>(<argument><expr><name>myIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Open list delete
     *
     * @param view
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>showDeleteTable</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Intent</name></type> <name>myIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>ListActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>myIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>ListActivity</name><operator>.</operator><name>PARAM_DELETE_FLAG</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>startActivity</name></name><argument_list>(<argument><expr><name>myIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Open about activity
     *
     * @param view
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>showAbout</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Intent</name></type> <name>myIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>AboutActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>startActivity</name></name><argument_list>(<argument><expr><name>myIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Open export activity
     *
     * @param view
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>showExport</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>PermActivity</name><operator>.</operator><name>hasPermission</name></name><argument_list>(<argument><expr><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>ExImportActivity</name><operator>.</operator><name>REQUIRED_PERMISSION</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>startExportActivityUnchecked</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>Intent</name></type> <name>myIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>PermActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>myIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>PermActivity</name><operator>.</operator><name>PARAM_PERMISSION</name></name></expr></argument>, <argument><expr><name><name>ExImportActivity</name><operator>.</operator><name>REQUIRED_PERMISSION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>myIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>PermActivity</name><operator>.</operator><name>PARAM_MESSAGE</name></name></expr></argument>, <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Perm_CSV</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>startActivityForResult</name></name><argument_list>(<argument><expr><name>myIntent</name></expr></argument>,<argument><expr><name>REQUEST_PERM_EXPORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Open import activity
     *
     * @param view
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>showImport</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>PermActivity</name><operator>.</operator><name>hasPermission</name></name><argument_list>(<argument><expr><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>ExImportActivity</name><operator>.</operator><name>REQUIRED_PERMISSION</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>startImportActivityUnchecked</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>Intent</name></type> <name>myIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>PermActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>myIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>PermActivity</name><operator>.</operator><name>PARAM_PERMISSION</name></name></expr></argument>, <argument><expr><name><name>ExImportActivity</name><operator>.</operator><name>REQUIRED_PERMISSION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>myIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>PermActivity</name><operator>.</operator><name>PARAM_MESSAGE</name></name></expr></argument>, <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Perm_CSV</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>startActivityForResult</name></name><argument_list>(<argument><expr><name>myIntent</name></expr></argument>,<argument><expr><name>REQUEST_PERM_IMPORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Start import activity, does not check for permissions
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>startImportActivityUnchecked</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>Intent</name></type> <name>myIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>ExImportActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>myIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>ExImportActivity</name><operator>.</operator><name>PARAM_IMPORT</name></name></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>startActivity</name></name><argument_list>(<argument><expr><name>myIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Start export activity, does not check for permissions
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>startExportActivityUnchecked</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>Intent</name></type> <name>myIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>ExImportActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>myIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>ExImportActivity</name><operator>.</operator><name>PARAM_IMPORT</name></name></expr></argument>,<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>startActivity</name></name><argument_list>(<argument><expr><name>myIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/activity/lib/CheckableRelativeLayout.java" hash="3c09fdf73761ae80569ec5f23d218d3c3d1482b7"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>activity</name><operator>.</operator><name>lib</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Checkable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>RelativeLayout</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Checkable relative layout
 *
 * @see {http://adanware.blogspot.de/2012/04/android-multiple-selection-listview.html}
 */</comment>
<class><specifier>public</specifier> class <name>CheckableRelativeLayout</name> <super><extends>extends <name>RelativeLayout</name></extends> <implements>implements <name>Checkable</name></implements></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>isChecked</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Checkable</name></argument>&gt;</argument_list></name></type> <name>checkableViews</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * New checkable relative layout
     *
     * @param context
     * @param attrs
     * @param defStyle style to use
     */</comment>
    <constructor><specifier>public</specifier> <name>CheckableRelativeLayout</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defStyle</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>defStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>initialise</name><argument_list>(<argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * New checkable relative layout&lt;br&gt;
     * using context style
     *
     * @param context
     * @param attrs
     */</comment>
    <constructor><specifier>public</specifier> <name>CheckableRelativeLayout</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>initialise</name><argument_list>(<argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * @see android.widget.Checkable#isChecked()
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isChecked</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>isChecked</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @see android.widget.Checkable#setChecked(boolean)
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>setChecked</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>isChecked</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isChecked</name></name> <operator>=</operator> <name>isChecked</name></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>Checkable</name></type> <name>c</name> <range>: <expr><name>checkableViews</name></expr></range></decl></init>)</control> <block>{
            <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>setChecked</name></name><argument_list>(<argument><expr><name>isChecked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @see android.widget.Checkable#toggle()
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>toggle</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isChecked</name></name> <operator>=</operator> <operator>!</operator><name><name>this</name><operator>.</operator><name>isChecked</name></name></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>Checkable</name></type> <name>c</name> <range>: <expr><name>checkableViews</name></expr></range></decl></init>)</control> <block>{
            <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>toggle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onFinishInflate</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onFinishInflate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>childCount</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>getChildCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>childCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
            <expr_stmt><expr><call><name>findCheckableChildren</name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>getChildAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Read the custom XML attributes
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>initialise</name><parameter_list>(<parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isChecked</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>checkableViews</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Checkable</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Add to our checkable list all the children of the view that implement the
     * interface Checkable
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>findCheckableChildren</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>v</name> <operator>instanceof</operator> <name>Checkable</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>checkableViews</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><name>Checkable</name><operator>)</operator> <name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>v</name> <operator>instanceof</operator> <name>ViewGroup</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>ViewGroup</name></type> <name>vg</name> <init>= <expr><operator>(</operator><name>ViewGroup</name><operator>)</operator> <name>v</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>childCount</name> <init>= <expr><call><name><name>vg</name><operator>.</operator><name>getChildCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>childCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
                <expr_stmt><expr><call><name>findCheckableChildren</name><argument_list>(<argument><expr><call><name><name>vg</name><operator>.</operator><name>getChildAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>
    }</block></function>
}</block></class>

</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/activity/TrainerSettingsActivity.java" hash="92f08a82614a6dfe9aaf1994cd3ec49dae4adf9f"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>activity</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>StringRes</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>design</name><operator>.</operator><name>widget</name><operator>.</operator><name>TabLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentPagerAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewPager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toolbar</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>fragment</name><operator>.</operator><name>ListPickerFragment</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>fragment</name><operator>.</operator><name>TrainerSettingsFragment</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>TrainerSettings</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>VList</name></name>;</import>

<import>import static <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>activity</name><operator>.</operator><name>TrainerActivity</name><operator>.</operator><name>PARAM_TABLES</name></name>;</import>
<import>import static <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>activity</name><operator>.</operator><name>TrainerActivity</name><operator>.</operator><name>PARAM_TRAINER_SETTINGS</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Trainer settings activity
 */</comment>
<class><specifier>public</specifier> class <name>TrainerSettingsActivity</name> <super><extends>extends <name>FragmentActivity</name></extends> <implements>implements <name><name>TrainerSettingsFragment</name><operator>.</operator><name>FinishHandler</name></name>, <name><name>ListPickerFragment</name><operator>.</operator><name>FinishListener</name></name></implements></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><literal type="string">"TrainerSettings"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ViewPagerAdapter</name></type> <name>viewPagerAdapter</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>ViewPager</name></type> <name>viewPager</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>ListPickerFragment</name></type> <name>listPicker</name></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>activity_trainer_settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Toolbar</name></type> <name>toolbar</name> <init>= <expr><operator>(</operator><name>Toolbar</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>toolbar</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>setSupportActionBar</name><argument_list>(<argument><expr><name>toolbar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>getSupportActionBar</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setDisplayHomeAsUpEnabled</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>viewPager</name> <operator>=</operator> <operator>(</operator><name>ViewPager</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>pager</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>initViewPager</name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>TabLayout</name></type> <name>tabLayout</name> <init>= <expr><operator>(</operator><name>TabLayout</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tabs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>tabLayout</name><operator>.</operator><name>setupWithViewPager</name></name><argument_list>(<argument><expr><name>viewPager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Init ViewPager
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>initViewPager</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><name>viewPagerAdapter</name> <operator>=</operator> <operator>new</operator> <call><name>ViewPagerAdapter</name><argument_list>(<argument><expr><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>savedInstanceState</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>listPicker</name> <operator>=</operator> <operator>(</operator><name>ListPickerFragment</name><operator>)</operator> <call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFragment</name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>, <argument><expr><name><name>ListPickerFragment</name><operator>.</operator><name>TAG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>listPicker</name> <operator>=</operator> <call><name><name>ListPickerFragment</name><operator>.</operator><name>newInstance</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name><name>viewPagerAdapter</name><operator>.</operator><name>addFragment</name></name><argument_list>(<argument><expr><name>listPicker</name></expr></argument>,<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>TSettings_Tab_List</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>TrainerSettingsFragment</name></type> <name>settingsFragment</name> <init>= <expr><call><name><name>TrainerSettingsFragment</name><operator>.</operator><name>newInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>viewPagerAdapter</name><operator>.</operator><name>addFragment</name></name><argument_list>(<argument><expr><name>settingsFragment</name></expr></argument>,<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>TSettings_Tab_Settings</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>viewPager</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>viewPagerAdapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onSaveInstanceState</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>outState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onSaveInstanceState</name></name><argument_list>(<argument><expr><name>outState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>putFragment</name><argument_list>(<argument><expr><name>outState</name></expr></argument>, <argument><expr><name><name>ListPickerFragment</name><operator>.</operator><name>TAG</name></name></expr></argument>, <argument><expr><name>listPicker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>handleFinish</name><parameter_list>(<parameter><decl><type><name>TrainerSettings</name></type> <name>settings</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>VList</name></argument>&gt;</argument_list></name></type> <name>picked</name> <init>= <expr><call><name><name>listPicker</name><operator>.</operator><name>getSelectedItems</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><call><name><name>picked</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>TrainerActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>PARAM_TRAINER_SETTINGS</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putParcelableArrayListExtra</name></name><argument_list>(<argument><expr><name>PARAM_TABLES</name></expr></argument>, <argument><expr><name>picked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><call><name>getBaseContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>TSettings_Info_missing_lists</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>selectionFinished</name><parameter_list>(<parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>VList</name></argument>&gt;</argument_list></name></type> <name>selected</name></decl></parameter>)</parameter_list> <block>{ }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>cancel</name><parameter_list>()</parameter_list> <block>{ }</block></function>

    <class>class <name>ViewPagerAdapter</name> <super><extends>extends <name>FragmentPagerAdapter</name></extends></super> <block>{
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Fragment</name></argument>&gt;</argument_list></name></type> <name>mFragmentList</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>mFragmentTitleList</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <constructor><name>ViewPagerAdapter</name><parameter_list>(<parameter><decl><type><name>FragmentManager</name></type> <name>manager</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>manager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>Fragment</name></type> <name>getItem</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><call><name><name>mFragmentList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>int</name></type> <name>getCount</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><call><name><name>mFragmentList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="block" format="javadoc">/**
         * Add Fragment to viewpager
         * @param fragment Fragment
         * @param title Tab-Title string resource
         */</comment>
        <function><type><name>void</name></type> <name>addFragment</name><parameter_list>(<parameter><decl><type><name>Fragment</name></type> <name>fragment</name></decl></parameter>,<parameter><decl><type><annotation>@<name>StringRes</name></annotation> <name>int</name></type> <name>title</name></decl></parameter>)</parameter_list><block>{
            <expr_stmt><expr><call><name>addFragment</name><argument_list>(<argument><expr><name>fragment</name></expr></argument>,<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <comment type="block" format="javadoc">/**
         * Add Fragment to viewpager
         * @param fragment Fragment
         * @param title Title
         */</comment>
        <function><type><name>void</name></type> <name>addFragment</name><parameter_list>(<parameter><decl><type><name>Fragment</name></type> <name>fragment</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>mFragmentList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>fragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mFragmentTitleList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>CharSequence</name></type> <name>getPageTitle</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><call><name><name>mFragmentTitleList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/activity/lib/FileListAdapter.java" hash="c9fae7676429b34057ef941ad15b8d1e46899ac7"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>activity</name><operator>.</operator><name>lib</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Paint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>BaseAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>BasicFileEntry</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>VEntry</name></name>;</import>

<comment type="block" format="javadoc">/**
 * BaseAdapter for file list views
 */</comment>
<class><specifier>public</specifier> class <name>FileListAdapter</name> <super><extends>extends <name>BaseAdapter</name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><literal type="string">"FileListAdapter"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>BasicFileEntry</name></argument>&gt;</argument_list></name></type> <name>dataItems</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Activity</name></type> <name>activity</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>LayoutInflater</name></type> <name>inflater</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>VEntry</name></type> <name>header</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Creates a new entry list adapter
     *
     * @param activity
     * @param items
     */</comment>
    <constructor><specifier>public</specifier> <name>FileListAdapter</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>activity</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>BasicFileEntry</name></argument>&gt;</argument_list></name></type> <name>items</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>activity</name></name> <operator>=</operator> <name>activity</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dataItems</name></name> <operator>=</operator> <name>items</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>inflater</name> <operator>=</operator> <call><name><name>activity</name><operator>.</operator><name>getLayoutInflater</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>getCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>dataItems</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>Object</name></type> <name>getItem</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>dataItems</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>long</name></type> <name>getItemId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>View</name></type> <name>getView</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>convertView</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>ViewGroup</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>ViewHolder</name></type> <name>holder</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>BasicFileEntry</name></type> <name>item</name> <init>= <expr><call><name><name>dataItems</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>convertView</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>holder</name> <operator>=</operator> <operator>new</operator> <call><name>ViewHolder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>convertView</name> <operator>=</operator> <call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>file_list_view</name></name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>holder</name><operator>.</operator><name>colA</name></name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>convertView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entryFirstText</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>holder</name><operator>.</operator><name>colB</name></name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>convertView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entrySecondText</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>holder</name><operator>.</operator><name>originPaintFlags</name></name> <operator>=</operator> <call><name><name>holder</name><operator>.</operator><name>colA</name><operator>.</operator><name>getPaintFlags</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>convertView</name><operator>.</operator><name>setTag</name></name><argument_list>(<argument><expr><name>holder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>convertView</name><operator>.</operator><name>setTag</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entryFirstText</name></name></expr></argument>, <argument><expr><name><name>holder</name><operator>.</operator><name>colA</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>convertView</name><operator>.</operator><name>setTag</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entrySecondText</name></name></expr></argument>, <argument><expr><name><name>holder</name><operator>.</operator><name>colB</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>holder</name> <operator>=</operator> <operator>(</operator><name>ViewHolder</name><operator>)</operator> <call><name><name>convertView</name><operator>.</operator><name>getTag</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>colA</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>item</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>colB</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>item</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>item</name><operator>.</operator><name>isUnderline</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>colA</name><operator>.</operator><name>setPaintFlags</name></name><argument_list>(<argument><expr><call><name><name>holder</name><operator>.</operator><name>colA</name><operator>.</operator><name>getPaintFlags</name></name><argument_list>()</argument_list></call> <operator>|</operator> <name><name>Paint</name><operator>.</operator><name>UNDERLINE_TEXT_FLAG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>colA</name><operator>.</operator><name>setPaintFlags</name></name><argument_list>(<argument><expr><name><name>holder</name><operator>.</operator><name>originPaintFlags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <comment type="line">//TODO: fix selection rendering on scrolling</comment>

        <return>return <expr><name>convertView</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Updated sorting
     * @param comparator Comparator to use for sorting
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>updateSorting</name><parameter_list>(<parameter><decl><type><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>BasicFileEntry</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>dataItems</name></expr></argument>,<argument><expr><name>comparator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>notifyDataSetChanged</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * View Holder, storing data for re-use
     */</comment>
    <class><specifier>private</specifier> class <name>ViewHolder</name> <block>{
        <decl_stmt><decl><specifier>protected</specifier> <type><name>TextView</name></type> <name>colA</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>protected</specifier> <type><name>TextView</name></type> <name>colB</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>protected</specifier> <type><name>int</name></type> <name>originPaintFlags</name></decl>;</decl_stmt>
    }</block></class>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/activity/TrainerActivity.java" hash="62020b86385207dae7fc09205a9e17e8816ae6c7"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>activity</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>ActionBar</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toolbar</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Menu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Callable</name></name>;</import>

<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>dialog</name><operator>.</operator><name>TrainerResultDialog</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>fragment</name><operator>.</operator><name>TrainerClassicFragment</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>fragment</name><operator>.</operator><name>TrainerClassicMMFragment</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>fragment</name><operator>.</operator><name>TrainerModeFragment</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>fragment</name><operator>.</operator><name>TrainerQuickFragment</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Database</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>SessionStorageManager</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>TrainerSettings</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>VList</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Trainer</name><operator>.</operator><name>Trainer</name></name>;</import>

<import>import static <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>activity</name><operator>.</operator><name>MainActivity</name><operator>.</operator><name>PREFS_NAME</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Trainer activity
 */</comment>
<class><specifier>public</specifier> class <name>TrainerActivity</name> <super><extends>extends <name>FragmentActivity</name></extends> <implements>implements <name><name>TrainerModeFragment</name><operator>.</operator><name>TrainingFragmentHolder</name></name></implements></super> <block>{
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PARAM_RESUME_SESSION_FLAG</name> <init>= <expr><literal type="string">"resume_session"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PARAM_TRAINER_SETTINGS</name> <init>= <expr><literal type="string">"trainer_settings"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_TRAINER_MODE</name> <init>= <expr><literal type="string">"trainer_mode"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PARAM_TABLES</name> <init>= <expr><literal type="string">"lists"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><literal type="string">"TrainerActivity"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_TRAINER</name> <init>= <expr><literal type="string">"trainer"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_FRAGMENT</name> <init>= <expr><literal type="string">"fragment"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_FRAGMENT_NR</name> <init>= <expr><literal type="string">"fragment_nr"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MAX</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MS_SEC</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type> <name>tColumnQuestion</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type> <name>tExercise</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>TrainerSettings</name></type> <name>settings</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Trainer</name></type> <name>trainer</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>MenuItem</name></type> <name>tTip</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>SessionStorageManager</name></type> <name>ssm</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>TrainerModeFragment</name></type> <name>cTrainingFragment</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>trainingMode</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>TrainerModeFragment</name><index>[]</index></name></type> <name>modeStorage</name> <init>= <expr><operator>new</operator> <name><name>TrainerModeFragment</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>modeClassicID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>modeQuickID</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>modeClassicMMID</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"oncreate0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"oncreate1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>activity_trainer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setTitle</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Trainer_Title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Toolbar</name></type> <name>toolbar</name> <init>= <expr><operator>(</operator><name>Toolbar</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>toolbar</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>setSupportActionBar</name><argument_list>(<argument><expr><name>toolbar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ActionBar</name></type> <name>ab</name> <init>= <expr><call><name>getSupportActionBar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>ab</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>ab</name><operator>.</operator><name>setDisplayHomeAsUpEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><name>tExercise</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tTrainerExercise</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tColumnQuestion</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tTrainerExColumn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>settings</name> <init>= <expr><call><name>getSharedPreferences</name><argument_list>(<argument><expr><name>PREFS_NAME</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>trainingMode</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>initTrainer</name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// do not show vocable now, onPostCreate has to handle this</comment>
        <expr_stmt><expr><call><name>setTrainingMode</name><argument_list>(<argument><expr><call><name><name>settings</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>KEY_TRAINER_MODE</name></expr></argument>, <argument><expr><name>modeClassicID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Function to be called by fragments to request an update of the exercise question display
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>updateQuestion</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><call><name><name>tExercise</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>trainer</name><operator>.</operator><name>getQuestion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tColumnQuestion</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>trainer</name><operator>.</operator><name>getColumnNameExercise</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Set training mode to specified value&lt;br&gt;
     *     also sets trainingMode&lt;br&gt;
     * @param mode Mode to display
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>setTrainingMode</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"init fragments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>trainingMode</name> <operator>==</operator> <name>mode</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"GUI mode already set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
        <switch>switch<condition>(<expr><name>mode</name></expr>)</condition><block>{
            <default>default:</default>
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"unknown training mode! "</literal><operator>+</operator><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            <case>case <expr><name>modeClassicID</name></expr>:</case>
                <if>if<condition>(<expr><name><name>modeStorage</name><index>[<expr><name>modeClassicID</name></expr>]</index></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>modeStorage</name><index>[<expr><name>modeClassicID</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>TrainerClassicFragment</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>cTrainingFragment</name> <operator>=</operator> <name><name>modeStorage</name><index>[<expr><name>modeClassicID</name></expr>]</index></name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>modeQuickID</name></expr>:</case>
                <if>if<condition>(<expr><name><name>modeStorage</name><index>[<expr><name>modeQuickID</name></expr>]</index></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>modeStorage</name><index>[<expr><name>modeQuickID</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>TrainerQuickFragment</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>cTrainingFragment</name> <operator>=</operator> <name><name>modeStorage</name><index>[<expr><name>modeQuickID</name></expr>]</index></name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>modeClassicMMID</name></expr>:</case>
                <if>if<condition>(<expr><name><name>modeStorage</name><index>[<expr><name>modeClassicMMID</name></expr>]</index></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>modeStorage</name><index>[<expr><name>modeClassicMMID</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>TrainerClassicMMFragment</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>cTrainingFragment</name> <operator>=</operator> <name><name>modeStorage</name><index>[<expr><name>modeClassicMMID</name></expr>]</index></name></expr>;</expr_stmt>
                <break>break;</break>
        }</block></switch>
        <expr_stmt><expr><call><name>setFragment</name><argument_list>(<argument><expr><name>cTrainingFragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>trainingMode</name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Shows result dialog on training end
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>showResultDialog</name><parameter_list>()</parameter_list><block>{
        <if>if<condition>(<expr><call><name><name>trainer</name><operator>.</operator><name>isFinished</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>Callable</name></type> <name>callable</name> <init>= <expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
                <decl_stmt><decl><type><name>Intent</name></type> <name>myIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>TrainerActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name><name>MainActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>myIntent</name><operator>.</operator><name>addFlags</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>FLAG_ACTIVITY_CLEAR_TOP</name></name> <operator>|</operator> <name><name>Intent</name><operator>.</operator><name>FLAG_ACTIVITY_NEW_TASK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><name>myIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="null">null</literal></expr>;</return>
            }</block></lambda></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>TrainerResultDialog</name></type> <name>resultDialog</name> <init>= <expr><call><name><name>TrainerResultDialog</name><operator>.</operator><name>newInstance</name></name><argument_list>(<argument><expr><name>trainer</name></expr></argument>,<argument><expr><name>callable</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>resultDialog</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><call><name>getFragmentManager</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onPostCreate</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onPostCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"post create"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>showNextVocable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onCreateOptionsMenu</name><parameter_list>(<parameter><decl><type><name>Menu</name></type> <name>menu</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>getMenuInflater</name><argument_list>()</argument_list></call><operator>.</operator><call><name>inflate</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>menu</name><operator>.</operator><name>trainer</name></name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>tTip</name> <operator>=</operator> <call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tMenu_Tip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Initialize trainer
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>initTrainer</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>savedInstanceState</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>trainer</name> <operator>=</operator> <call><name><name>savedInstanceState</name><operator>.</operator><name>getParcelable</name></name><argument_list>(<argument><expr><name>KEY_TRAINER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>settings</name> <operator>=</operator> <call><name><name>trainer</name><operator>.</operator><name>getSettings</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>fragmentNr</name> <init>= <expr><call><name><name>savedInstanceState</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>KEY_FRAGMENT_NR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>modeStorage</name><index>[<expr><name>fragmentNr</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>TrainerModeFragment</name><operator>)</operator> <call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFragment</name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>,<argument><expr><name>KEY_FRAGMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Database</name></type> <name>db</name> <init>= <expr><operator>new</operator> <call><name>Database</name><argument_list>(<argument><expr><call><name>getBaseContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>ssm</name> <operator>=</operator> <operator>new</operator> <call><name>SessionStorageManager</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><call><name>getIntent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>boolean</name></type> <name>resume</name> <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getBooleanExtra</name></name><argument_list>(<argument><expr><name>PARAM_RESUME_SESSION_FLAG</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>VList</name></argument>&gt;</argument_list></name></type> <name>list</name></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>resume</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"resuming"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>settings</name> <operator>=</operator> <call><name><name>ssm</name><operator>.</operator><name>loadSession</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>list</name> <operator>=</operator> <call><name><name>ssm</name><operator>.</operator><name>loadSessionTbls</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"not resuming"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>list</name> <operator>=</operator> <call><name><name>intent</name><operator>.</operator><name>getParcelableArrayListExtra</name></name><argument_list>(<argument><expr><name>PARAM_TABLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>list</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>wtf</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Flag for list passed but no list received!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>settings</name> <operator>=</operator> <call><name><name>intent</name><operator>.</operator><name>getParcelableExtra</name></name><argument_list>(<argument><expr><name>PARAM_TRAINER_SETTINGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>settings</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>wtf</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"No trainer settings passed!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"saving new session.."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><operator>!</operator><call><name><name>db</name><operator>.</operator><name>deleteSession</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>wtf</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"unable to delete past session"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then> <elseif>else <if>if <condition>(<expr><operator>!</operator><call><name><name>ssm</name><operator>.</operator><name>saveSession</name></name><argument_list>(<argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>wtf</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"unable to save session meta"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><operator>!</operator><call><name><name>ssm</name><operator>.</operator><name>saveSessionTbls</name></name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>wtf</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"unable to save session lists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if></elseif> <else>else <block>{
                            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"saved session"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></else></if>
                    }</block></else></if>

                }</block></else></if>
            }</block></else></if>
            <expr_stmt><expr><name>trainer</name> <operator>=</operator> <operator>new</operator> <call><name>Trainer</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>, <argument><expr><call><name>getBaseContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>!</operator><name>resume</name></expr></argument>, <argument><expr><name>ssm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onSaveInstanceState</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>outState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onSaveInstanceState</name></name><argument_list>(<argument><expr><name>outState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>outState</name><operator>.</operator><name>putParcelable</name></name><argument_list>(<argument><expr><name>KEY_TRAINER</name></expr></argument>,<argument><expr><name>trainer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>outState</name><operator>.</operator><name>putInt</name></name><argument_list>(<argument><expr><name>KEY_FRAGMENT_NR</name></expr></argument>,<argument><expr><name>trainingMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>putFragment</name><argument_list>(<argument><expr><name>outState</name></expr></argument>,<argument><expr><name>KEY_FRAGMENT</name></expr></argument>,<argument><expr><name>cTrainingFragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onStop</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>trainer</name><operator>.</operator><name>saveVocState</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>preferences</name> <init>= <expr><call><name>getSharedPreferences</name><argument_list>(<argument><expr><name>PREFS_NAME</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>SharedPreferences</name><operator>.</operator><name>Editor</name></name></type> <name>editor</name> <init>= <expr><call><name><name>preferences</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>putInt</name></name><argument_list>(<argument><expr><name>KEY_TRAINER_MODE</name></expr></argument>,<argument><expr><name>trainingMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>apply</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onPrepareOptionsMenu</name><parameter_list>(<parameter><decl><type><name>Menu</name></type> <name>menu</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>updateTip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>super</name><operator>.</operator><name>onPrepareOptionsMenu</name></name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onOptionsItemSelected</name><parameter_list>(<parameter><decl><type><name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
        <switch>switch <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tMenu_Tip</name></name></expr>:</case>
                <expr_stmt><expr><call><name><name>cTrainingFragment</name><operator>.</operator><name>showTip</name></name><argument_list>(<argument><expr><call><name><name>trainer</name><operator>.</operator><name>getTip</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tMenu_Classic</name></name></expr>:</case>
                <expr_stmt><expr><call><name>setTrainingMode</name><argument_list>(<argument><expr><name>modeClassicID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tMenu_Quick</name></name></expr>:</case>
                <expr_stmt><expr><call><name>setTrainingMode</name><argument_list>(<argument><expr><name>modeQuickID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tMenu_ClassicMM</name></name></expr>:</case>
                <expr_stmt><expr><call><name>setTrainingMode</name><argument_list>(<argument><expr><name>modeClassicMMID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        }</block></switch>

        <return>return <expr><call><name><name>super</name><operator>.</operator><name>onOptionsItemSelected</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Show next vocable of trainer
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>showNextVocable</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>trainer</name><operator>.</operator><name>isFinished</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>showResultDialog</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>updateTip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Function updates tTip enabled status
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>updateTip</name><parameter_list>()</parameter_list><block>{
        <if>if<condition>(<expr><name>tTip</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name><name>tTip</name><operator>.</operator><name>getIcon</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setAlpha</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>settings</name><operator>.</operator><name>allowTips</name></name></expr> ?</condition><then> <expr><literal type="number">255</literal></expr> </then><else>: <expr><literal type="number">155</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>tTip</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name><name>settings</name><operator>.</operator><name>allowTips</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>Trainer</name></type> <name>getTrainer</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>trainer</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>TrainerSettings</name></type> <name>getTrainerSettings</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>settings</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/activity/lib/EntryListAdapter.java" hash="5e3dda23451e67073943dc3b282644f1bef0da0b"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>activity</name><operator>.</operator><name>lib</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Typeface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>BaseAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>VEntry</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>VList</name></name>;</import>

<import>import static <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Database</name><operator>.</operator><name>ID_RESERVED_SKIP</name></name>;</import>

<comment type="block" format="javadoc">/**
 * BaseAdapter for entry list views
 */</comment>
<class><specifier>public</specifier> class <name>EntryListAdapter</name> <super><extends>extends <name>BaseAdapter</name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ANDROID_WORKAROUND_STYLE</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><literal type="string">"EntryListAdapter"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>VEntry</name></argument>&gt;</argument_list></name></type> <name>dataItems</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>LayoutInflater</name></type> <name>inflater</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>VEntry</name></type> <name>header</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Creates a new entry list adapter
     *
     * @param items
     */</comment>
    <constructor><specifier>public</specifier> <name>EntryListAdapter</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>activity</name></decl></parameter>,<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>VEntry</name></argument>&gt;</argument_list></name></type> <name>items</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dataItems</name></name> <operator>=</operator> <name>items</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>header</name> <operator>=</operator> <operator>new</operator> <call><name>VEntry</name><argument_list>(<argument><expr><call><name><name>activity</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Editor_Hint_Column_A</name></name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>activity</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Editor_Hint_Column_B</name></name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>activity</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Editor_Hint_Tip</name></name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><name>ID_RESERVED_SKIP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// don't re-add header double on instance restore</comment>
        <if>if<condition>(<expr><call><name><name>dataItems</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><call><name><name>dataItems</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>dataItems</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><name>inflater</name> <operator>=</operator> <call><name><name>activity</name><operator>.</operator><name>getLayoutInflater</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * Set table data (Column Names)
     *
     * @param tbl
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>setTableData</name><parameter_list>(<parameter><decl><type><name>VList</name></type> <name>tbl</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>header</name><operator>.</operator><name>getAMeanings</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>set</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><call><name><name>tbl</name><operator>.</operator><name>getNameA</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>header</name><operator>.</operator><name>getBMeanings</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>set</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><call><name><name>tbl</name><operator>.</operator><name>getNameB</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>notifyDataSetChanged</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><literal type="string">"EntryListAdapter"</literal></expr></argument>, <argument><expr><literal type="string">"setTableData"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>getCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>dataItems</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>Object</name></type> <name>getItem</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>dataItems</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</return>
        <comment type="line">// -1 required as onItemClicked counts from 1 but the list starts a 0</comment>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>long</name></type> <name>getItemId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>View</name></type> <name>getView</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>convertView</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>ViewGroup</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>ViewHolder</name></type> <name>holder</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>VEntry</name></type> <name>item</name> <init>= <expr><call><name><name>dataItems</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>convertView</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>holder</name> <operator>=</operator> <operator>new</operator> <call><name>ViewHolder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


            <expr_stmt><expr><name>convertView</name> <operator>=</operator> <call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>entry_list_view</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>holder</name><operator>.</operator><name>colA</name></name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>convertView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entryFirstText</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>holder</name><operator>.</operator><name>colB</name></name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>convertView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entrySecondText</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>holder</name><operator>.</operator><name>colTipp</name></name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>convertView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entryThirdText</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><call><name><name>holder</name><operator>.</operator><name>colA</name><operator>.</operator><name>getTypeface</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><name><name>holder</name><operator>.</operator><name>originTypeface</name></name> <operator>=</operator> <name>ANDROID_WORKAROUND_STYLE</name></expr>;</expr_stmt>
            }</block></then><else>else <block>{
                <expr_stmt><expr><name><name>holder</name><operator>.</operator><name>originTypeface</name></name> <operator>=</operator> <call><name><name>holder</name><operator>.</operator><name>colA</name><operator>.</operator><name>getTypeface</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStyle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <expr_stmt><expr><call><name><name>convertView</name><operator>.</operator><name>setTag</name></name><argument_list>(<argument><expr><name>holder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>convertView</name><operator>.</operator><name>setTag</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entryFirstText</name></name></expr></argument>, <argument><expr><name><name>holder</name><operator>.</operator><name>colA</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>convertView</name><operator>.</operator><name>setTag</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entrySecondText</name></name></expr></argument>, <argument><expr><name><name>holder</name><operator>.</operator><name>colB</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>convertView</name><operator>.</operator><name>setTag</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>entryThirdText</name></name></expr></argument>, <argument><expr><name><name>holder</name><operator>.</operator><name>colTipp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>holder</name> <operator>=</operator> <operator>(</operator><name>ViewHolder</name><operator>)</operator> <call><name><name>convertView</name><operator>.</operator><name>getTag</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <decl_stmt><decl><type><name>boolean</name></type> <name>bold</name> <init>= <expr><call><name><name>item</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>ID_RESERVED_SKIP</name></expr></init></decl>;</decl_stmt>
        <comment type="line">//TODO: remove on drop of API 19 support</comment>
        <if>if<condition>(<expr><name><name>holder</name><operator>.</operator><name>originTypeface</name></name> <operator>==</operator> <name>ANDROID_WORKAROUND_STYLE</name></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>colA</name><operator>.</operator><name>setTypeface</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>bold</name></expr> ?</condition><then> <expr><name><name>Typeface</name><operator>.</operator><name>BOLD</name></name></expr> </then><else>: <expr><name><name>Typeface</name><operator>.</operator><name>NORMAL</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>colB</name><operator>.</operator><name>setTypeface</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>bold</name></expr> ?</condition><then> <expr><name><name>Typeface</name><operator>.</operator><name>BOLD</name></name></expr> </then><else>: <expr><name><name>Typeface</name><operator>.</operator><name>NORMAL</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>colTipp</name><operator>.</operator><name>setTypeface</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>bold</name></expr> ?</condition><then> <expr><name><name>Typeface</name><operator>.</operator><name>BOLD</name></name></expr> </then><else>: <expr><name><name>Typeface</name><operator>.</operator><name>NORMAL</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then><else>else <block>{
            <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>colA</name><operator>.</operator><name>setTypeface</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>bold</name></expr> ?</condition><then> <expr><name><name>Typeface</name><operator>.</operator><name>BOLD</name></name></expr> </then><else>: <expr><name><name>holder</name><operator>.</operator><name>originTypeface</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>colB</name><operator>.</operator><name>setTypeface</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>bold</name></expr> ?</condition><then> <expr><name><name>Typeface</name><operator>.</operator><name>BOLD</name></name></expr> </then><else>: <expr><name><name>holder</name><operator>.</operator><name>originTypeface</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>colTipp</name><operator>.</operator><name>setTypeface</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>bold</name></expr> ?</condition><then> <expr><name><name>Typeface</name><operator>.</operator><name>BOLD</name></name></expr> </then><else>: <expr><name><name>holder</name><operator>.</operator><name>originTypeface</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>colA</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>item</name><operator>.</operator><name>getAString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>colB</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>item</name><operator>.</operator><name>getBString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>colTipp</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>item</name><operator>.</operator><name>getTip</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>convertView</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Update sorting
     * @param comp Comparator to use for sorting
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>updateSorting</name><parameter_list>(<parameter><decl><type><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>VEntry</name></argument>&gt;</argument_list></name></type> <name>comp</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>dataItems</name></expr></argument>,<argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>notifyDataSetChanged</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Set entry as deleted
     *
     * @param entry
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>remove</name><parameter_list>(<parameter><decl><type><name>VEntry</name></type> <name>entry</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>dataItems</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyDataSetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Add a new VEntry to the view&lt;br&gt;
     * Does not update the view
     *
     * @param entry
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>addEntryUnrendered</name><parameter_list>(<parameter><decl><type><name>VEntry</name></type> <name>entry</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>dataItems</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Add an VEntry to the view at selected position.&lt;br&gt;
     * Does update the view rendering
     *
     * @param entry    new VEntry
     * @param position Position at which it should be inserted
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>addEntryRendered</name><parameter_list>(<parameter><decl><type><name>VEntry</name></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>dataItems</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>notifyDataSetChanged</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns all entries, existing and deleted
     *
     * @return
     */</comment>
    <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>VEntry</name></argument>&gt;</argument_list></name></type> <name>getAllEntries</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>VEntry</name></argument>&gt;</argument_list></name></type> <name>entries</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>dataItems</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>entries</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * View Holder, storing data for re-use
     */</comment>
    <class><specifier>private</specifier> class <name>ViewHolder</name> <block>{
        <decl_stmt><decl><specifier>protected</specifier> <type><name>TextView</name></type> <name>colA</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>protected</specifier> <type><name>TextView</name></type> <name>colB</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>protected</specifier> <type><name>TextView</name></type> <name>colTipp</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>protected</specifier> <type><name>int</name></type> <name>originTypeface</name></decl>;</decl_stmt>
    }</block></class>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/org/apache/commons/csv/Assertions.java" hash="2648a528eacfd85a14c1383df016e7448c0b5386"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name></name>;</package>

<comment type="block" format="javadoc">/**
 * Utility class for input parameter validation.
 *
 * TODO Replace usage with {@link Objects} when we switch to Java 7.
 *
 * @version $Id: Assertions.java 1742459 2016-05-05 19:43:57Z britter $
 */</comment>
<class><specifier>final</specifier> class <name>Assertions</name> <block>{

    <constructor><specifier>private</specifier> <name>Assertions</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// can not be instantiated</comment>
    }</block></constructor>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>notNull</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Object</name></type> <name>parameter</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>parameterName</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>parameter</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Parameter '"</literal> <operator>+</operator> <name>parameterName</name> <operator>+</operator> <literal type="string">"' must not be null!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/vocabletrainer/heinecke/aron/vocabletrainer/activity/lib/TableListAdapter.java" hash="85c628cb062fdf9ccea6c0cbecf17915799d565a"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>activity</name><operator>.</operator><name>lib</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Typeface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ArrayAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>VList</name></name>;</import>

<import>import static <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Database</name><operator>.</operator><name>ID_RESERVED_SKIP</name></name>;</import>

<comment type="block" format="javadoc">/**
 * ArrayAdapter for table listviews
 */</comment>
<class><specifier>public</specifier> class <name>TableListAdapter</name> <super><extends>extends <name><name>ArrayAdapter</name><argument_list type="generic">&lt;<argument><name>VList</name></argument>&gt;</argument_list></name></extends></super> <block>{

    <comment type="block" format="javadoc">/**
     * items &gt;= starting item are real items and no header etc
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>STARTING_ITEM</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>boolean</name></type> <name>displayCheckbox</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>VList</name></argument>&gt;</argument_list></name></type> <name>dataItem</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Context</name></type> <name>context</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>resLayout</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TextView</name></type> <name>colName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TextView</name></type> <name>colA</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TextView</name></type> <name>colB</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>VList</name></type> <name>header</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * New lists list adapter
     *
     * @param context context to use, should be "this" for activities, avoiding style problems
     * @param textViewResourceId row resource XML
     * @param lists
     * @param displayCheckbox set to true to show checkbox for multi select
     */</comment>
    <constructor><specifier>public</specifier> <name>TableListAdapter</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>textViewResourceId</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>VList</name></argument>&gt;</argument_list></name></type> <name>lists</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>displayCheckbox</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>textViewResourceId</name></expr></argument>, <argument><expr><name>lists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dataItem</name></name> <operator>=</operator> <name>lists</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>header</name> <operator>=</operator> <operator>new</operator> <call><name>VList</name><argument_list>(<argument><expr><name>ID_RESERVED_SKIP</name></expr></argument>,<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Editor_Hint_Column_A</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Editor_Hint_Column_B</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Editor_Hint_List_Name</name></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// don't re-add header on restore</comment>
        <if>if<condition>(<expr><call><name><name>dataItem</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><call><name><name>dataItem</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>dataItem</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>STARTING_ITEM</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>resLayout</name> <operator>=</operator> <name>textViewResourceId</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>displayCheckbox</name></name> <operator>=</operator> <name>displayCheckbox</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * Set list as new list&lt;br&gt;
     * updates the view
     *
     * @param entries
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>setAllUpdated</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>VList</name></argument>&gt;</argument_list></name></type> <name>entries</name></decl></parameter>, <parameter><decl><type><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>VList</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>dataItem</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dataItem</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dataItem</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>dataItem</name></expr></argument>,<argument><expr><name>comparator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>notifyDataSetChanged</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Updates sort order
     * @param comparator Comparator to use
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>updateSorting</name><parameter_list>(<parameter><decl><type><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>VList</name></argument>&gt;</argument_list></name></type> <name>comparator</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>dataItem</name></expr></argument>,<argument><expr><name>comparator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>notifyDataSetChanged</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Remove element from list&lt;br&gt;
     * updates the view
     *
     * @param tbl
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>removeEntryUpdated</name><parameter_list>(<parameter><decl><type><name>VList</name></type> <name>tbl</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>dataItem</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>notifyDataSetChanged</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>View</name></type> <name>getView</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>convertView</name></decl></parameter>, <parameter><decl><type><name>ViewGroup</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>LayoutInflater</name></type> <name>inflater</name> <init>= <expr><operator>(</operator><name>LayoutInflater</name><operator>)</operator> <call><name><name>context</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>LAYOUT_INFLATER_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>convertView</name> <operator>=</operator> <call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name>resLayout</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>colName</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>convertView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tableFirstText</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>colA</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>convertView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tableSecondText</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>colB</name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>convertView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tableThirdText</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><operator>!</operator><name>displayCheckbox</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>convertView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tblCheckBox</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>


        <decl_stmt><decl><type><name>VList</name></type> <name>item</name> <init>= <expr><call><name><name>dataItem</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>ID_RESERVED_SKIP</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>displayCheckbox</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>convertView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>tblCheckBox</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>INVISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

            <expr_stmt><expr><call><name><name>colName</name><operator>.</operator><name>setTypeface</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>Typeface</name><operator>.</operator><name>BOLD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>colA</name><operator>.</operator><name>setTypeface</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>Typeface</name><operator>.</operator><name>BOLD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>colB</name><operator>.</operator><name>setTypeface</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>Typeface</name><operator>.</operator><name>BOLD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>colName</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>item</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>colA</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>item</name><operator>.</operator><name>getNameA</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>colB</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>item</name><operator>.</operator><name>getNameB</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>convertView</name></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/org/apache/commons/csv/CSVRecord.java" hash="2d5989b7dacaa8158f7e04c5a6a604e429a545b8"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Serializable</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name><operator>.</operator><name>Entry</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A CSV record parsed from a CSV file.
 *
 * @version $Id: CSVRecord.java 1727809 2016-01-31 13:08:33Z sebb $
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>CSVRecord</name> <super><implements>implements <name>Serializable</name>, <name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></implements></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>EMPTY_STRING_ARRAY</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">1L</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>characterPosition</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** The accumulated comments (if any) */</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>comment</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** The column name to index mapping. */</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>mapping</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** The record number. */</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>recordNumber</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** The values of the record */</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>values</name></decl>;</decl_stmt>

    <constructor><name>CSVRecord</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>values</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>mapping</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>comment</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>long</name></type> <name>recordNumber</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name>long</name></type> <name>characterPosition</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>recordNumber</name></name> <operator>=</operator> <name>recordNumber</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>values</name></name> <operator>=</operator> <ternary><condition><expr><name>values</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>values</name></expr> </then><else>: <expr><name>EMPTY_STRING_ARRAY</name></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mapping</name></name> <operator>=</operator> <name>mapping</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>comment</name></name> <operator>=</operator> <name>comment</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>characterPosition</name></name> <operator>=</operator> <name>characterPosition</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * Returns a value by {@link Enum}.
     *
     * @param e
     *            an enum
     * @return the String at the given enum String
     */</comment>
    <function><specifier>public</specifier> <type><name>String</name></type> <name>get</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>Enum</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name>get</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a value by index.
     *
     * @param i
     *            a column index (0-based)
     * @return the String at the given index
     */</comment>
    <function><specifier>public</specifier> <type><name>String</name></type> <name>get</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a value by name.
     *
     * @param name
     *            the name of the column to be retrieved.
     * @return the column value, maybe null depending on {@link CSVFormat#getNullString()}.
     * @throws IllegalStateException
     *             if no header mapping was provided
     * @throws IllegalArgumentException
     *             if {@code name} is not mapped or if the record is inconsistent
     * @see #isConsistent()
     * @see CSVFormat#withNullString(String)
     */</comment>
    <function><specifier>public</specifier> <type><name>String</name></type> <name>get</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>mapping</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(
                <argument><expr><literal type="string">"No header mapping was specified, the record values can't be accessed by name"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Integer</name></type> <name>index</name> <init>= <expr><call><name><name>mapping</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>index</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Mapping for %s not found, expected one of %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>,
                <argument><expr><call><name><name>mapping</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <try>try <block>{
            <return>return <expr><name><name>values</name><index>[<expr><call><name><name>index</name><operator>.</operator><name>intValue</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ArrayIndexOutOfBoundsException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(
                <argument><expr><literal type="string">"Index for header '%s' is %d but CSVRecord only has %d values!"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>index</name></expr></argument>,
                <argument><expr><call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>values</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the start position of this record as a character position in the source stream. This may or may not
     * correspond to the byte position depending on the character set.
     *
     * @return the position of this record in the source stream.
     */</comment>
    <function><specifier>public</specifier> <type><name>long</name></type> <name>getCharacterPosition</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>characterPosition</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the comment for this record, if any.
     * Note that comments are attached to the following record.
     * If there is no following record (i.e. the comment is at EOF)
     * the comment will be ignored.
     *
     * @return the comment for this record, or null if no comment for this record is available.
     */</comment>
    <function><specifier>public</specifier> <type><name>String</name></type> <name>getComment</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>comment</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the number of this record in the parsed CSV file.
     *
     * &lt;p&gt;
     * &lt;strong&gt;ATTENTION:&lt;/strong&gt; If your CSV input has multi-line values, the returned number does not correspond to
     * the current line number of the parser that created this record.
     * &lt;/p&gt;
     *
     * @return the number of this record.
     * @see CSVParser#getCurrentLineNumber()
     */</comment>
    <function><specifier>public</specifier> <type><name>long</name></type> <name>getRecordNumber</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>recordNumber</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Tells whether the record size matches the header size.
     *
     * &lt;p&gt;
     * Returns true if the sizes for this record match and false if not. Some programs can export files that fail this
     * test but still produce parsable files.
     * &lt;/p&gt;
     *
     * @return true of this record is valid, false if not
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isConsistent</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mapping</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>mapping</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>values</name><operator>.</operator><name>length</name></name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Checks whether this record has a comment, false otherwise.
     * Note that comments are attached to the following record.
     * If there is no following record (i.e. the comment is at EOF)
     * the comment will be ignored.
     *
     * @return true if this record has a comment, false otherwise
     * @since 1.3
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasComment</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>comment</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Checks whether a given column is mapped, i.e. its name has been defined to the parser.
     *
     * @param name
     *            the name of the column to be retrieved.
     * @return whether a given column is mapped.
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isMapped</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><name>mapping</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>mapping</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Checks whether a given columns is mapped and has a value.
     *
     * @param name
     *            the name of the column to be retrieved.
     * @return whether a given columns is mapped and has a value
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isSet</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name>isMapped</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>mapping</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>intValue</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name><name>values</name><operator>.</operator><name>length</name></name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns an iterator over the values of this record.
     *
     * @return an iterator over the values of this record.
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>toList</name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Puts all values of this record into the given Map.
     *
     * @param map
     *            The Map to populate.
     * @return the given map.
     */</comment>
    <function><parameter_list type="generic">&lt;<parameter><name>M</name> <extends>extends <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></extends></parameter>&gt;</parameter_list> <type><name>M</name></type> <name>putIn</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>M</name></type> <name>map</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>mapping</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <return>return <expr><name>map</name></expr>;</return>
        }</block></then></if>
        <for>for <control>(<init><decl><type><specifier>final</specifier> <name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>entry</name> <range>: <expr><call><name><name>mapping</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>col</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>intValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>col</name> <operator>&lt;</operator> <name><name>values</name><operator>.</operator><name>length</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>map</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>values</name><index>[<expr><name>col</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>map</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the number of values in this record.
     *
     * @return the number of values.
     */</comment>
    <function><specifier>public</specifier> <type><name>int</name></type> <name>size</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>values</name><operator>.</operator><name>length</name></name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Converts the values to a List.
     *
     * TODO: Maybe make this public?
     *
     * @return a new List
     */</comment>
    <function><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>toList</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Copies this record into a new Map. The new map is not connect
     *
     * @return A new Map. The map is empty if the record has no headers.
     */</comment>
    <function><specifier>public</specifier> <type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>toMap</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>putIn</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>values</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a string representation of the contents of this record. The result is constructed by comment, mapping,
     * recordNumber and by passing the internal values array to {@link Arrays#toString(Object[])}.
     *
     * @return a String representation of this record.
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><literal type="string">"CSVRecord [comment="</literal> <operator>+</operator> <name>comment</name> <operator>+</operator> <literal type="string">", mapping="</literal> <operator>+</operator> <name>mapping</name> <operator>+</operator>
                <literal type="string">", recordNumber="</literal> <operator>+</operator> <name>recordNumber</name> <operator>+</operator> <literal type="string">", values="</literal> <operator>+</operator>
                <call><name><name>Arrays</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"]"</literal></expr>;</return>
    }</block></function>

    <function><type><name><name>String</name><index>[]</index></name></type> <name>values</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>values</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/org/apache/commons/csv/CSVPrinter.java" hash="4ed574e4d0a8cdf920cdcb7e1ae6991bdfc8193a"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name><operator>.</operator><name>Constants</name><operator>.</operator><name>CR</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name><operator>.</operator><name>Constants</name><operator>.</operator><name>LF</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name><operator>.</operator><name>Constants</name><operator>.</operator><name>SP</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Closeable</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Flushable</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>ResultSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>SQLException</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Prints values in a CSV format.
 *
 * @version $Id: CSVPrinter.java 1743430 2016-05-11 21:09:48Z ggregory $
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>CSVPrinter</name> <super><implements>implements <name>Flushable</name>, <name>Closeable</name></implements></super> <block>{

    <comment type="block" format="javadoc">/** The place that the values get written. */</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Appendable</name></type> <name>out</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>CSVFormat</name></type> <name>format</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** True if we just began a new record. */</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>newRecord</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Creates a printer that will print values to the given stream following the CSVFormat.
     * &lt;p&gt;
     * Currently, only a pure encapsulation format or a pure escaping format is supported. Hybrid formats (encapsulation
     * and escaping with a different character) are not supported.
     * &lt;/p&gt;
     *
     * @param out
     *            stream to which to print. Must not be null.
     * @param format
     *            the CSV format. Must not be null.
     * @throws IOException
     *             thrown if the optional header cannot be printed.
     * @throws IllegalArgumentException
     *             thrown if the parameters of the format are inconsistent or if either out or format are null.
     */</comment>
    <constructor><specifier>public</specifier> <name>CSVPrinter</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Appendable</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>CSVFormat</name></type> <name>format</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>Assertions</name><operator>.</operator><name>notNull</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assertions</name><operator>.</operator><name>notNull</name></name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>out</name></name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>
        <comment type="line">// TODO: Is it a good idea to do this here instead of on the first call to a print method?</comment>
        <comment type="line">// It seems a pain to have to track whether the header has already been printed or not.</comment>
        <if>if <condition>(<expr><call><name><name>format</name><operator>.</operator><name>getHeaderComments</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <for>for <control>(<init><decl><type><specifier>final</specifier> <name>String</name></type> <name>line</name> <range>: <expr><call><name><name>format</name><operator>.</operator><name>getHeaderComments</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
                <if>if <condition>(<expr><name>line</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>printComment</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>format</name><operator>.</operator><name>getHeader</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>format</name><operator>.</operator><name>getSkipHeaderRecord</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>printRecord</name></name><argument_list>(<argument><expr><operator>(</operator><name><name>Object</name><index>[]</index></name><operator>)</operator> <call><name><name>format</name><operator>.</operator><name>getHeader</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></constructor>

    <comment type="line">// ======================================================</comment>
    <comment type="line">// printing implementation</comment>
    <comment type="line">// ======================================================</comment>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>out</name> <operator>instanceof</operator> <name>Closeable</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>Closeable</name><operator>)</operator> <name>out</name><operator>)</operator><operator>.</operator><call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Flushes the underlying stream.
     *
     * @throws IOException
     *             If an I/O error occurs
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>flush</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>out</name> <operator>instanceof</operator> <name>Flushable</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>Flushable</name><operator>)</operator> <name>out</name><operator>)</operator><operator>.</operator><call><name>flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Gets the target Appendable.
     *
     * @return the target Appendable.
     */</comment>
    <function><specifier>public</specifier> <type><name>Appendable</name></type> <name>getOut</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name><operator>.</operator><name>out</name></name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Prints the string as the next value on the line. The value will be escaped or encapsulated as needed.
     *
     * @param value
     *            value to be output.
     * @throws IOException
     *             If an I/O error occurs
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Object</name></type> <name>value</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>format</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>newRecord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>newRecord</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Prints a comment on a new line among the delimiter separated values.
     *
     * &lt;p&gt;
     * Comments will always begin on a new line and occupy a least one full line. The character specified to start
     * comments and a space will be inserted at the beginning of each new line in the comment.
     * &lt;/p&gt;
     *
     * If comments are disabled in the current CSV format this method does nothing.
     *
     * @param comment
     *            the comment to output
     * @throws IOException
     *             If an I/O error occurs
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>printComment</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>comment</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><operator>!</operator><call><name><name>format</name><operator>.</operator><name>isCommentMarkerSet</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr><operator>!</operator><name>newRecord</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>println</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>format</name><operator>.</operator><name>getCommentMarker</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>charValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>SP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>comment</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>char</name></type> <name>c</name> <init>= <expr><call><name><name>comment</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{
            <case>case <expr><name>CR</name></expr>:</case>
                <if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <call><name><name>comment</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>comment</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>LF</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
                }</block></then></if>
                <comment type="line">//$FALL-THROUGH$ break intentionally excluded.</comment>
            <case>case <expr><name>LF</name></expr>:</case>
                <expr_stmt><expr><call><name>println</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>format</name><operator>.</operator><name>getCommentMarker</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>charValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>SP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            }</block></switch>
        }</block></for>
        <expr_stmt><expr><call><name>println</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Outputs the record separator.
     *
     * @throws IOException
     *             If an I/O error occurs
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>println</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>format</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>newRecord</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Prints the given values a single record of delimiter separated values followed by the record separator.
     *
     * &lt;p&gt;
     * The values will be quoted if needed. Quotes and newLine characters will be escaped. This method adds the record
     * separator to the output after printing the record, so there is no need to call {@link #println()}.
     * &lt;/p&gt;
     *
     * @param values
     *            values to output.
     * @throws IOException
     *             If an I/O error occurs
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>printRecord</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>values</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <for>for <control>(<init><decl><type><specifier>final</specifier> <name>Object</name></type> <name>value</name> <range>: <expr><name>values</name></expr></range></decl></init>)</control> <block>{
            <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name>println</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Prints the given values a single record of delimiter separated values followed by the record separator.
     *
     * &lt;p&gt;
     * The values will be quoted if needed. Quotes and newLine characters will be escaped. This method adds the record
     * separator to the output after printing the record, so there is no need to call {@link #println()}.
     * &lt;/p&gt;
     *
     * @param values
     *            values to output.
     * @throws IOException
     *             If an I/O error occurs
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>printRecord</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Object</name><modifier>...</modifier></type> <name>values</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>format</name><operator>.</operator><name>printRecord</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>newRecord</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Prints all the objects in the given collection handling nested collections/arrays as records.
     *
     * &lt;p&gt;
     * If the given collection only contains simple objects, this method will print a single record like
     * {@link #printRecord(Iterable)}. If the given collections contains nested collections/arrays those nested elements
     * will each be printed as records using {@link #printRecord(Object...)}.
     * &lt;/p&gt;
     *
     * &lt;p&gt;
     * Given the following data structure:
     * &lt;/p&gt;
     *
     * &lt;pre&gt;
     * &lt;code&gt;
     * List&amp;lt;String[]&amp;gt; data = ...
     * data.add(new String[]{ "A", "B", "C" });
     * data.add(new String[]{ "1", "2", "3" });
     * data.add(new String[]{ "A1", "B2", "C3" });
     * &lt;/code&gt;
     * &lt;/pre&gt;
     *
     * &lt;p&gt;
     * Calling this method will print:
     * &lt;/p&gt;
     *
     * &lt;pre&gt;
     * &lt;code&gt;
     * A, B, C
     * 1, 2, 3
     * A1, B2, C3
     * &lt;/code&gt;
     * &lt;/pre&gt;
     *
     * @param values
     *            the values to print.
     * @throws IOException
     *             If an I/O error occurs
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>printRecords</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>values</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <for>for <control>(<init><decl><type><specifier>final</specifier> <name>Object</name></type> <name>value</name> <range>: <expr><name>values</name></expr></range></decl></init>)</control> <block>{
            <if>if <condition>(<expr><name>value</name> <operator>instanceof</operator> <name><name>Object</name><index>[]</index></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>printRecord</name></name><argument_list>(<argument><expr><operator>(</operator><name><name>Object</name><index>[]</index></name><operator>)</operator> <name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <elseif>else <if>if <condition>(<expr><name>value</name> <operator>instanceof</operator> <name>Iterable</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>printRecord</name></name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></expr></condition></ternary><operator>)</operator> <name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif> <else>else <block>{
                <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>printRecord</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Prints all the objects in the given array handling nested collections/arrays as records.
     *
     * &lt;p&gt;
     * If the given array only contains simple objects, this method will print a single record like
     * {@link #printRecord(Object...)}. If the given collections contains nested collections/arrays those nested
     * elements will each be printed as records using {@link #printRecord(Object...)}.
     * &lt;/p&gt;
     *
     * &lt;p&gt;
     * Given the following data structure:
     * &lt;/p&gt;
     *
     * &lt;pre&gt;
     * &lt;code&gt;
     * String[][] data = new String[3][]
     * data[0] = String[]{ "A", "B", "C" };
     * data[1] = new String[]{ "1", "2", "3" };
     * data[2] = new String[]{ "A1", "B2", "C3" };
     * &lt;/code&gt;
     * &lt;/pre&gt;
     *
     * &lt;p&gt;
     * Calling this method will print:
     * &lt;/p&gt;
     *
     * &lt;pre&gt;
     * &lt;code&gt;
     * A, B, C
     * 1, 2, 3
     * A1, B2, C3
     * &lt;/code&gt;
     * &lt;/pre&gt;
     *
     * @param values
     *            the values to print.
     * @throws IOException
     *             If an I/O error occurs
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>printRecords</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Object</name><modifier>...</modifier></type> <name>values</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <for>for <control>(<init><decl><type><specifier>final</specifier> <name>Object</name></type> <name>value</name> <range>: <expr><name>values</name></expr></range></decl></init>)</control> <block>{
            <if>if <condition>(<expr><name>value</name> <operator>instanceof</operator> <name><name>Object</name><index>[]</index></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>printRecord</name></name><argument_list>(<argument><expr><operator>(</operator><name><name>Object</name><index>[]</index></name><operator>)</operator> <name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <elseif>else <if>if <condition>(<expr><name>value</name> <operator>instanceof</operator> <name>Iterable</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>printRecord</name></name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></expr></condition></ternary><operator>)</operator> <name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif> <else>else <block>{
                <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>printRecord</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Prints all the objects in the given JDBC result set.
     *
     * @param resultSet
     *            result set the values to print.
     * @throws IOException
     *             If an I/O error occurs
     * @throws SQLException
     *             if a database access error occurs
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>printRecords</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ResultSet</name></type> <name>resultSet</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument>, <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>columnCount</name> <init>= <expr><call><name><name>resultSet</name><operator>.</operator><name>getMetaData</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColumnCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>resultSet</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>columnCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
                <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><call><name><name>resultSet</name><operator>.</operator><name>getObject</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><call><name>println</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></while>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/org/apache/commons/csv/Constants.java" hash="00d1b503f974256b5b60d8015af5afeade06f79b"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name></name>;</package>

<comment type="block" format="javadoc">/**
 * Constants for this package.
 *
 * @version $Id: Constants.java 1742459 2016-05-05 19:43:57Z britter $
 */</comment>
<class><specifier>final</specifier> class <name>Constants</name> <block>{

    <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>char</name></type> <name>BACKSLASH</name> <init>= <expr><literal type="char">'\\'</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>char</name></type> <name>BACKSPACE</name> <init>= <expr><literal type="char">'\b'</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>char</name></type> <name>COMMA</name> <init>= <expr><literal type="char">','</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Starts a comment, the remainder of the line is the comment.
     */</comment>
    <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>char</name></type> <name>COMMENT</name> <init>= <expr><literal type="char">'#'</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>char</name></type> <name>CR</name> <init>= <expr><literal type="char">'\r'</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** RFC 4180 defines line breaks as CRLF */</comment>
    <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>CRLF</name> <init>= <expr><literal type="string">"\r\n"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>Character</name></type> <name>DOUBLE_QUOTE_CHAR</name> <init>= <expr><call><name><name>Character</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>EMPTY</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** The end of stream symbol */</comment>
    <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>END_OF_STREAM</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>char</name></type> <name>FF</name> <init>= <expr><literal type="char">'\f'</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>char</name></type> <name>LF</name> <init>= <expr><literal type="char">'\n'</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Unicode line separator.
     */</comment>
    <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>LINE_SEPARATOR</name> <init>= <expr><literal type="string">"\u2028"</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Unicode next line.
     */</comment>
    <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>NEXT_LINE</name> <init>= <expr><literal type="string">"\u0085"</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Unicode paragraph separator.
     */</comment>
    <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PARAGRAPH_SEPARATOR</name> <init>= <expr><literal type="string">"\u2029"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>char</name></type> <name>PIPE</name> <init>= <expr><literal type="char">'|'</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** ASCII record separator */</comment>
    <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>char</name></type> <name>RS</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>char</name></type> <name>SP</name> <init>= <expr><literal type="char">' '</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>char</name></type> <name>TAB</name> <init>= <expr><literal type="char">'\t'</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Undefined state for the lookahead char */</comment>
    <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>UNDEFINED</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** ASCII unit separator */</comment>
    <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>char</name></type> <name>US</name> <init>= <expr><literal type="number">31</literal></expr></init></decl>;</decl_stmt>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java" hash="b90e62d6382ab524bda8764f27a5eddc018c938d"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name><operator>.</operator><name>Constants</name><operator>.</operator><name>CR</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name><operator>.</operator><name>Constants</name><operator>.</operator><name>END_OF_STREAM</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name><operator>.</operator><name>Constants</name><operator>.</operator><name>LF</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name><operator>.</operator><name>Constants</name><operator>.</operator><name>UNDEFINED</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A special buffered reader which supports sophisticated read access.
 * &lt;p&gt;
 * In particular the reader supports a look-ahead option, which allows you to see the next char returned by
 * {@link #read()}. This reader also tracks how many characters have been read with {@link #getPosition()}.
 * &lt;/p&gt;
 *
 * @version $Id: ExtendedBufferedReader.java 1742468 2016-05-05 20:02:35Z britter $
 */</comment>
<class><specifier>final</specifier> class <name>ExtendedBufferedReader</name> <super><extends>extends <name>BufferedReader</name></extends></super> <block>{

    <comment type="block" format="javadoc">/** The last char returned */</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>lastChar</name> <init>= <expr><name>UNDEFINED</name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** The count of EOLs (CR/LF/CRLF) seen so far */</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>eolCounter</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** The position, which is number of characters read so far */</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>position</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>closed</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Created extended buffered reader using default buffer-size
     */</comment>
    <constructor><name>ExtendedBufferedReader</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Reader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>current</name> <init>= <expr><call><name><name>super</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>current</name> <operator>==</operator> <name>CR</name> <operator>||</operator> <name>current</name> <operator>==</operator> <name>LF</name> <operator>&amp;&amp;</operator> <name>lastChar</name> <operator>!=</operator> <name>CR</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>eolCounter</name><operator>++</operator></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>lastChar</name> <operator>=</operator> <name>current</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>position</name></name><operator>++</operator></expr>;</expr_stmt>
        <return>return <expr><name>lastChar</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the last character that was read as an integer (0 to 65535). This will be the last character returned by
     * any of the read methods. This will not include a character read using the {@link #lookAhead()} method. If no
     * character has been read then this will return {@link Constants#UNDEFINED}. If the end of the stream was reached
     * on the last read then this will return {@link Constants#END_OF_STREAM}.
     *
     * @return the last character that was read
     */</comment>
    <function><type><name>int</name></type> <name>getLastChar</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>lastChar</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>read</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>char</name><index>[]</index></name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>length</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>len</name> <init>= <expr><call><name><name>super</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{

            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>offset</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>offset</name> <operator>+</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>char</name></type> <name>ch</name> <init>= <expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>LF</name></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><name>CR</name> <operator>!=</operator> <operator>(</operator><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>buf</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>lastChar</name></expr></else></ternary><operator>)</operator></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>eolCounter</name><operator>++</operator></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then> <elseif>else <if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>CR</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>eolCounter</name><operator>++</operator></expr>;</expr_stmt>
                }</block></then></if></elseif></if>
            }</block></for>

            <expr_stmt><expr><name>lastChar</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>offset</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

        }</block></then> <elseif>else <if>if <condition>(<expr><name>len</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>lastChar</name> <operator>=</operator> <name>END_OF_STREAM</name></expr>;</expr_stmt>
        }</block></then></if></elseif></if>

        <expr_stmt><expr><name>position</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
        <return>return <expr><name>len</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Calls {@link BufferedReader#readLine()} which drops the line terminator(s). This method should only be called
     * when processing a comment, otherwise information can be lost.
     * &lt;p&gt;
     * Increments {@link #eolCounter}
     * &lt;p&gt;
     * Sets {@link #lastChar} to {@link Constants#END_OF_STREAM} at EOF, otherwise to LF
     *
     * @return the line that was read, or null if reached EOF.
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>String</name></type> <name>readLine</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>line</name> <init>= <expr><call><name><name>super</name><operator>.</operator><name>readLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>line</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>lastChar</name> <operator>=</operator> <name>LF</name></expr>;</expr_stmt> <comment type="line">// needed for detecting start of line</comment>
            <expr_stmt><expr><name>eolCounter</name><operator>++</operator></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>lastChar</name> <operator>=</operator> <name>END_OF_STREAM</name></expr>;</expr_stmt>
        }</block></else></if>

        <return>return <expr><name>line</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the next character in the current reader without consuming it. So the next call to {@link #read()} will
     * still return this value. Does not affect line number or last character.
     *
     * @return the next character
     *
     * @throws IOException
     *             if there is an error in reading
     */</comment>
    <function><type><name>int</name></type> <name>lookAhead</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>mark</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>c</name> <init>= <expr><call><name><name>super</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>c</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the current line number
     *
     * @return the current line number
     */</comment>
    <function><type><name>long</name></type> <name>getCurrentLineNumber</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// Check if we are at EOL or EOF or just starting</comment>
        <if>if <condition>(<expr><name>lastChar</name> <operator>==</operator> <name>CR</name> <operator>||</operator> <name>lastChar</name> <operator>==</operator> <name>LF</name> <operator>||</operator> <name>lastChar</name> <operator>==</operator> <name>UNDEFINED</name> <operator>||</operator> <name>lastChar</name> <operator>==</operator> <name>END_OF_STREAM</name></expr>)</condition><then> <block>{
            <return>return <expr><name>eolCounter</name></expr>;</return> <comment type="line">// counter is accurate</comment>
        }</block></then></if>
        <return>return <expr><name>eolCounter</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return> <comment type="line">// Allow for counter being incremented only at EOL</comment>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Gets the character position in the reader.
     *
     * @return the current position in the reader (counting characters, not bytes since this is a Reader)
     */</comment>
    <function><type><name>long</name></type> <name>getPosition</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name><operator>.</operator><name>position</name></name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isClosed</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>closed</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Closes the stream.
     *
     * @throws IOException
     *             If an I/O error occurs
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <comment type="line">// Set ivars before calling super close() in case close() throws an IOException.</comment>
        <expr_stmt><expr><name>closed</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>lastChar</name> <operator>=</operator> <name>END_OF_STREAM</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/org/apache/commons/csv/QuoteMode.java" hash="0a06ca402a07c054c13dde49f66060ed03be5d94"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name></name>;</package>

<comment type="block" format="javadoc">/**
 * Defines quote behavior when printing.
 *
 * @version $Id: QuoteMode.java 1694977 2015-08-10 07:05:58Z ggregory $
 */</comment>
<enum><specifier>public</specifier> enum <name>QuoteMode</name> <block>{

    <comment type="block" format="javadoc">/**
     * Quotes all fields.
     */</comment>
    <decl><name>ALL</name></decl>,

    <comment type="block" format="javadoc">/**
     * Quotes fields which contain special characters such as a delimiter, quotes character or any of the characters in
     * line separator.
     */</comment>
    <decl><name>MINIMAL</name></decl>,

    <comment type="block" format="javadoc">/**
     * Quotes all non-numeric fields.
     */</comment>
    <decl><name>NON_NUMERIC</name></decl>,

    <comment type="block" format="javadoc">/**
     * Never quotes fields. When the delimiter occurs in data, the printer prefixes it with the current escape
     * character. If the escape character is not set, format validation throws an exception.
     */</comment>
    <decl><name>NONE</name></decl>
}</block></enum>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/org/apache/commons/csv/CSVParser.java" hash="1a5c60f314f4d1c46e025b1094a6e599d84879f6"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Closeable</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStreamReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>StringReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>charset</name><operator>.</operator><name>Charset</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedHashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>NoSuchElementException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeMap</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name><operator>.</operator><name>Token</name><operator>.</operator><name>Type</name><operator>.</operator><name>*</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Parses CSV files according to the specified format.
 *
 * Because CSV appears in many different dialects, the parser supports many formats by allowing the
 * specification of a {@link CSVFormat}.
 *
 * The parser works record wise. It is not possible to go back, once a record has been parsed from the input stream.
 *
 * &lt;h2&gt;Creating instances&lt;/h2&gt;
 * &lt;p&gt;
 * There are several static factory methods that can be used to create instances for various types of resources:
 * &lt;/p&gt;
 * &lt;ul&gt;
 *     &lt;li&gt;{@link #parse(File, Charset, CSVFormat)}&lt;/li&gt;
 *     &lt;li&gt;{@link #parse(String, CSVFormat)}&lt;/li&gt;
 *     &lt;li&gt;{@link #parse(URL, Charset, CSVFormat)}&lt;/li&gt;
 * &lt;/ul&gt;
 * &lt;p&gt;
 * Alternatively parsers can also be created by passing a {@link Reader} directly to the sole constructor.
 *
 * For those who like fluent APIs, parsers can be created using {@link CSVFormat#parse(Reader)} as a shortcut:
 * &lt;/p&gt;
 * &lt;pre&gt;
 * for(CSVRecord record : CSVFormat.EXCEL.parse(in)) {
 *     ...
 * }
 * &lt;/pre&gt;
 *
 * &lt;h2&gt;Parsing record wise&lt;/h2&gt;
 * &lt;p&gt;
 * To parse a CSV input from a file, you write:
 * &lt;/p&gt;
 *
 * &lt;pre&gt;
 * File csvData = new File(&amp;quot;/path/to/csv&amp;quot;);
 * CSVParser parser = CSVParser.parse(csvData, CSVFormat.RFC4180);
 * for (CSVRecord csvRecord : parser) {
 *     ...
 * }
 * &lt;/pre&gt;
 *
 * &lt;p&gt;
 * This will read the parse the contents of the file using the
 * &lt;a href="http://tools.ietf.org/html/rfc4180" target="_blank"&gt;RFC 4180&lt;/a&gt; format.
 * &lt;/p&gt;
 *
 * &lt;p&gt;
 * To parse CSV input in a format like Excel, you write:
 * &lt;/p&gt;
 *
 * &lt;pre&gt;
 * CSVParser parser = CSVParser.parse(csvData, CSVFormat.EXCEL);
 * for (CSVRecord csvRecord : parser) {
 *     ...
 * }
 * &lt;/pre&gt;
 *
 * &lt;p&gt;
 * If the predefined formats don't match the format at hands, custom formats can be defined. More information about
 * customising CSVFormats is available in {@link CSVFormat CSVFormat JavaDoc}.
 * &lt;/p&gt;
 *
 * &lt;h2&gt;Parsing into memory&lt;/h2&gt;
 * &lt;p&gt;
 * If parsing record wise is not desired, the contents of the input can be read completely into memory.
 * &lt;/p&gt;
 *
 * &lt;pre&gt;
 * Reader in = new StringReader(&amp;quot;a;b\nc;d&amp;quot;);
 * CSVParser parser = new CSVParser(in, CSVFormat.EXCEL);
 * List&amp;lt;CSVRecord&amp;gt; list = parser.getRecords();
 * &lt;/pre&gt;
 *
 * &lt;p&gt;
 * There are two constraints that have to be kept in mind:
 * &lt;/p&gt;
 *
 * &lt;ol&gt;
 *     &lt;li&gt;Parsing into memory starts at the current position of the parser. If you have already parsed records from
 *     the input, those records will not end up in the in memory representation of your CSV data.&lt;/li&gt;
 *     &lt;li&gt;Parsing into memory may consume a lot of system resources depending on the input. For example if you're
 *     parsing a 150MB file of CSV data the contents will be read completely into memory.&lt;/li&gt;
 * &lt;/ol&gt;
 *
 * &lt;h2&gt;Notes&lt;/h2&gt;
 * &lt;p&gt;
 * Internal parser state is completely covered by the format and the reader-state.
 * &lt;/p&gt;
 *
 * @version $Id: CSVParser.java 1743529 2016-05-12 17:02:05Z ggregory $
 *
 * @see &lt;a href="package-summary.html"&gt;package documentation for more details&lt;/a&gt;
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>CSVParser</name> <super><implements>implements <name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>CSVRecord</name></argument>&gt;</argument_list></name>, <name>Closeable</name></implements></super> <block>{

    <comment type="block" format="javadoc">/**
     * Creates a parser for the given {@link File}.
     *
     * &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This method internally creates a FileReader using
     * {@link java.io.FileReader#FileReader(File)} which in turn relies on the default encoding of the JVM that
     * is executing the code. If this is insufficient create a URL to the file and use
     * {@link #parse(URL, Charset, CSVFormat)}&lt;/p&gt;
     *
     * @param file
     *            a CSV file. Must not be null.
     * @param charset
     *            A charset
     * @param format
     *            the CSVFormat used for CSV parsing. Must not be null.
     * @return a new parser
     * @throws IllegalArgumentException
     *             If the parameters of the format are inconsistent or if either file or format are null.
     * @throws IOException
     *             If an I/O error occurs
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>CSVParser</name></type> <name>parse</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>File</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Charset</name></type> <name>charset</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>CSVFormat</name></type> <name>format</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>Assertions</name><operator>.</operator><name>notNull</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assertions</name><operator>.</operator><name>notNull</name></name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>new</operator> <call><name>CSVParser</name><argument_list>(<argument><expr><operator>new</operator> <call><name>InputStreamReader</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a parser for the given {@link String}.
     *
     * @param string
     *            a CSV string. Must not be null.
     * @param format
     *            the CSVFormat used for CSV parsing. Must not be null.
     * @return a new parser
     * @throws IllegalArgumentException
     *             If the parameters of the format are inconsistent or if either string or format are null.
     * @throws IOException
     *             If an I/O error occurs
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>CSVParser</name></type> <name>parse</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>string</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>CSVFormat</name></type> <name>format</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>Assertions</name><operator>.</operator><name>notNull</name></name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="string">"string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assertions</name><operator>.</operator><name>notNull</name></name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><operator>new</operator> <call><name>CSVParser</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StringReader</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a parser for the given URL.
     *
     * &lt;p&gt;
     * If you do not read all records from the given {@code url}, you should call {@link #close()} on the parser, unless
     * you close the {@code url}.
     * &lt;/p&gt;
     *
     * @param url
     *            a URL. Must not be null.
     * @param charset
     *            the charset for the resource. Must not be null.
     * @param format
     *            the CSVFormat used for CSV parsing. Must not be null.
     * @return a new parser
     * @throws IllegalArgumentException
     *             If the parameters of the format are inconsistent or if either url, charset or format are null.
     * @throws IOException
     *             If an I/O error occurs
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>CSVParser</name></type> <name>parse</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>URL</name></type> <name>url</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Charset</name></type> <name>charset</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>CSVFormat</name></type> <name>format</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>Assertions</name><operator>.</operator><name>notNull</name></name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="string">"url"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assertions</name><operator>.</operator><name>notNull</name></name><argument_list>(<argument><expr><name>charset</name></expr></argument>, <argument><expr><literal type="string">"charset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assertions</name><operator>.</operator><name>notNull</name></name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><operator>new</operator> <call><name>CSVParser</name><argument_list>(<argument><expr><operator>new</operator> <call><name>InputStreamReader</name><argument_list>(<argument><expr><call><name><name>url</name><operator>.</operator><name>openStream</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="line">// the following objects are shared to reduce garbage</comment>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>CSVFormat</name></type> <name>format</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** A mapping of column names to column indices */</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>headerMap</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Lexer</name></type> <name>lexer</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** A record buffer for getRecord(). Grows as necessary and is reused. */</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>record</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * The next record number to assign.
     */</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>recordNumber</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Lexer offset when the parser does not start parsing at the beginning of the source. Usually used in combination
     * with {@link #recordNumber}.
     */</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>characterOffset</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Token</name></type> <name>reusableToken</name> <init>= <expr><operator>new</operator> <call><name>Token</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Customized CSV parser using the given {@link CSVFormat}
     *
     * &lt;p&gt;
     * If you do not read all records from the given {@code reader}, you should call {@link #close()} on the parser,
     * unless you close the {@code reader}.
     * &lt;/p&gt;
     *
     * @param reader
     *            a Reader containing CSV-formatted input. Must not be null.
     * @param format
     *            the CSVFormat used for CSV parsing. Must not be null.
     * @throws IllegalArgumentException
     *             If the parameters of the format are inconsistent or if either reader or format are null.
     * @throws IOException
     *             If there is a problem reading the header or skipping the first record
     */</comment>
    <constructor><specifier>public</specifier> <name>CSVParser</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Reader</name></type> <name>reader</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>CSVFormat</name></type> <name>format</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * Customized CSV parser using the given {@link CSVFormat}
     *
     * &lt;p&gt;
     * If you do not read all records from the given {@code reader}, you should call {@link #close()} on the parser,
     * unless you close the {@code reader}.
     * &lt;/p&gt;
     *
     * @param reader
     *            a Reader containing CSV-formatted input. Must not be null.
     * @param format
     *            the CSVFormat used for CSV parsing. Must not be null.
     * @param characterOffset
     *            Lexer offset when the parser does not start parsing at the beginning of the source.
     * @param recordNumber
     *            The next record number to assign
     * @throws IllegalArgumentException
     *             If the parameters of the format are inconsistent or if either reader or format are null.
     * @throws IOException
     *             If there is a problem reading the header or skipping the first record
     * @since 1.1
     */</comment>
    <constructor><specifier>public</specifier> <name>CSVParser</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Reader</name></type> <name>reader</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>CSVFormat</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>long</name></type> <name>characterOffset</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>long</name></type> <name>recordNumber</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>Assertions</name><operator>.</operator><name>notNull</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><literal type="string">"reader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Assertions</name><operator>.</operator><name>notNull</name></name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><literal type="string">"format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>format</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lexer</name></name> <operator>=</operator> <operator>new</operator> <call><name>Lexer</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>ExtendedBufferedReader</name><argument_list>(<argument><expr><name>reader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>headerMap</name></name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>initializeHeader</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>characterOffset</name></name> <operator>=</operator> <name>characterOffset</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>recordNumber</name></name> <operator>=</operator> <name>recordNumber</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>addRecordValue</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>lastRecord</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>input</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>reusableToken</name><operator>.</operator><name>content</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>inputClean</name> <init>= <expr><ternary><condition><expr><call><name><name>this</name><operator>.</operator><name>format</name><operator>.</operator><name>getTrim</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>input</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name>input</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>lastRecord</name> <operator>&amp;&amp;</operator> <call><name><name>inputClean</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>format</name><operator>.</operator><name>getTrailingDelimiter</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>nullString</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>format</name><operator>.</operator><name>getNullString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>record</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>inputClean</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>nullString</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><name>inputClean</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Closes resources.
     *
     * @throws IOException
     *             If an I/O error occurs
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>lexer</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>lexer</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the current line number in the input stream.
     *
     * &lt;p&gt;
     * &lt;strong&gt;ATTENTION:&lt;/strong&gt; If your CSV input has multi-line values, the returned number does not correspond to
     * the record number.
     * &lt;/p&gt;
     *
     * @return current line number
     */</comment>
    <function><specifier>public</specifier> <type><name>long</name></type> <name>getCurrentLineNumber</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>lexer</name><operator>.</operator><name>getCurrentLineNumber</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a copy of the header map that iterates in column order.
     * &lt;p&gt;
     * The map keys are column names. The map values are 0-based indices.
     * &lt;/p&gt;
     * @return a copy of the header map that iterates in column order.
     */</comment>
    <function><specifier>public</specifier> <type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>getHeaderMap</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><ternary><condition><expr><name><name>this</name><operator>.</operator><name>headerMap</name></name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><operator>new</operator> <call><name><name>LinkedHashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>headerMap</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the current record number in the input stream.
     *
     * &lt;p&gt;
     * &lt;strong&gt;ATTENTION:&lt;/strong&gt; If your CSV input has multi-line values, the returned number does not correspond to
     * the line number.
     * &lt;/p&gt;
     *
     * @return current record number
     */</comment>
    <function><specifier>public</specifier> <type><name>long</name></type> <name>getRecordNumber</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name><operator>.</operator><name>recordNumber</name></name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Parses the CSV input according to the given format and returns the content as a list of
     * {@link CSVRecord CSVRecords}.
     *
     * &lt;p&gt;
     * The returned content starts at the current parse-position in the stream.
     * &lt;/p&gt;
     *
     * @return list of {@link CSVRecord CSVRecords}, may be empty
     * @throws IOException
     *             on parse error or input read-failure
     */</comment>
    <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>CSVRecord</name></argument>&gt;</argument_list></name></type> <name>getRecords</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>CSVRecord</name></type> <name>rec</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>CSVRecord</name></argument>&gt;</argument_list></name></type> <name>records</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>CSVRecord</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><operator>(</operator><name>rec</name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>nextRecord</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{
            <expr_stmt><expr><call><name><name>records</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>rec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <return>return <expr><name>records</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Initializes the name to index mapping if the format defines a header.
     *
     * @return null if the format has no header.
     * @throws IOException if there is a problem reading the header or skipping the first record
     */</comment>
    <function><specifier>private</specifier> <type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>initializeHeader</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>hdrMap</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>formatHeader</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>format</name><operator>.</operator><name>getHeader</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>formatHeader</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>hdrMap</name> <operator>=</operator> <ternary><condition><expr><call><name><name>this</name><operator>.</operator><name>format</name><operator>.</operator><name>getIgnoreHeaderCase</name></name><argument_list>()</argument_list></call></expr> ?</condition><then>
                    <expr><operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>String</name><operator>.</operator><name>CASE_INSENSITIVE_ORDER</name></name></expr></argument>)</argument_list></call></expr> </then><else>:
                    <expr><operator>new</operator> <call><name><name>LinkedHashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

            <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>headerRecord</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>formatHeader</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <comment type="line">// read the header from the first line of the file</comment>
                <decl_stmt><decl><type><specifier>final</specifier> <name>CSVRecord</name></type> <name>nextRecord</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>nextRecord</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>nextRecord</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>headerRecord</name> <operator>=</operator> <call><name><name>nextRecord</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then> <else>else <block>{
                <if>if <condition>(<expr><call><name><name>this</name><operator>.</operator><name>format</name><operator>.</operator><name>getSkipHeaderRecord</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>nextRecord</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>headerRecord</name> <operator>=</operator> <name>formatHeader</name></expr>;</expr_stmt>
            }</block></else></if>

            <comment type="line">// build the name to index mappings</comment>
            <if>if <condition>(<expr><name>headerRecord</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>headerRecord</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>header</name> <init>= <expr><name><name>headerRecord</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>containsHeader</name> <init>= <expr><call><name><name>hdrMap</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>emptyHeader</name> <init>= <expr><name>header</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>header</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>containsHeader</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>emptyHeader</name> <operator>||</operator> <operator>!</operator><call><name><name>this</name><operator>.</operator><name>format</name><operator>.</operator><name>getAllowMissingColumnNames</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><then> <block>{
                        <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"The header contains a duplicate name: \""</literal> <operator>+</operator> <name>header</name> <operator>+</operator>
                                <literal type="string">"\" in "</literal> <operator>+</operator> <call><name><name>Arrays</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>headerRecord</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                    }</block></then></if>
                    <expr_stmt><expr><call><name><name>hdrMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr><name>hdrMap</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Gets whether this parser is closed.
     *
     * @return whether this parser is closed.
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isClosed</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>lexer</name><operator>.</operator><name>isClosed</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns an iterator on the records.
     *
     * &lt;p&gt;IOExceptions occurring during the iteration are wrapped in a
     * RuntimeException.
     * If the parser is closed a call to {@code next()} will throw a
     * NoSuchElementException.&lt;/p&gt;
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>CSVRecord</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <class><super><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>CSVRecord</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <decl_stmt><decl><specifier>private</specifier> <type><name>CSVRecord</name></type> <name>current</name></decl>;</decl_stmt>

            <function><specifier>private</specifier> <type><name>CSVRecord</name></type> <name>getNextRecord</name><parameter_list>()</parameter_list> <block>{
                <try>try <block>{
                    <return>return <expr><call><name><name>CSVParser</name><operator>.</operator><name>this</name><operator>.</operator><name>nextRecord</name></name><argument_list>()</argument_list></call></expr>;</return>
                }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                    <comment type="line">// TODO: This is not great, throw an ISE instead?</comment>
                    <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></catch></try>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>boolean</name></type> <name>hasNext</name><parameter_list>()</parameter_list> <block>{
                <if>if <condition>(<expr><call><name><name>CSVParser</name><operator>.</operator><name>this</name><operator>.</operator><name>isClosed</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                }</block></then></if>
                <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>current</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>current</name></name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>getNextRecord</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <return>return <expr><name><name>this</name><operator>.</operator><name>current</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>CSVRecord</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{
                <if>if <condition>(<expr><call><name><name>CSVParser</name><operator>.</operator><name>this</name><operator>.</operator><name>isClosed</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <throw>throw <expr><operator>new</operator> <call><name>NoSuchElementException</name><argument_list>(<argument><expr><literal type="string">"CSVParser has been closed"</literal></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
                <decl_stmt><decl><type><name>CSVRecord</name></type> <name>next</name> <init>= <expr><name><name>this</name><operator>.</operator><name>current</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>current</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>

                <if>if <condition>(<expr><name>next</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <comment type="line">// hasNext() wasn't called before</comment>
                    <expr_stmt><expr><name>next</name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>getNextRecord</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>next</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                        <throw>throw <expr><operator>new</operator> <call><name>NoSuchElementException</name><argument_list>(<argument><expr><literal type="string">"No more CSV records available"</literal></expr></argument>)</argument_list></call></expr>;</throw>
                    }</block></then></if>
                }</block></then></if>

                <return>return <expr><name>next</name></expr>;</return>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>remove</name><parameter_list>()</parameter_list> <block>{
                <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>()</argument_list></call></expr>;</throw>
            }</block></function>
        }</block></class></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Parses the next record from the current point in the stream.
     *
     * @return the record as an array of values, or {@code null} if the end of the stream has been reached
     * @throws IOException
     *             on parse error or input read-failure
     */</comment>
    <function><type><name>CSVRecord</name></type> <name>nextRecord</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>CSVRecord</name></type> <name>result</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>record</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>startCharPosition</name> <init>= <expr><call><name><name>lexer</name><operator>.</operator><name>getCharacterPosition</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>this</name><operator>.</operator><name>characterOffset</name></name></expr></init></decl>;</decl_stmt>
        <do>do <block>{
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>reusableToken</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>lexer</name><operator>.</operator><name>nextToken</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>reusableToken</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <switch>switch <condition>(<expr><name><name>this</name><operator>.</operator><name>reusableToken</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{
            <case>case <expr><name>TOKEN</name></expr>:</case>
                <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>addRecordValue</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>EORECORD</name></expr>:</case>
                <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>addRecordValue</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>EOF</name></expr>:</case>
                <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>reusableToken</name><operator>.</operator><name>isReady</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>addRecordValue</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <break>break;</break>
            <case>case <expr><name>INVALID</name></expr>:</case>
                <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"(line "</literal> <operator>+</operator> <call><name><name>this</name><operator>.</operator><name>getCurrentLineNumber</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">") invalid parse sequence"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            <case>case <expr><name>COMMENT</name></expr>:</case> <comment type="line">// Ignored currently</comment>
                <if>if <condition>(<expr><name>sb</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{ <comment type="line">// first comment for this record</comment>
                    <expr_stmt><expr><name>sb</name> <operator>=</operator> <operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>Constants</name><operator>.</operator><name>LF</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>reusableToken</name><operator>.</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>reusableToken</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TOKEN</name></expr>;</expr_stmt> <comment type="line">// Read another token</comment>
                <break>break;</break>
            <default>default:</default>
                <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Unexpected Token type: "</literal> <operator>+</operator> <name><name>this</name><operator>.</operator><name>reusableToken</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></switch>
        }</block> while <condition>(<expr><name><name>this</name><operator>.</operator><name>reusableToken</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TOKEN</name></expr>)</condition>;</do>

        <if>if <condition>(<expr><operator>!</operator><call><name><name>this</name><operator>.</operator><name>record</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>recordNumber</name></name><operator>++</operator></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>comment</name> <init>= <expr><ternary><condition><expr><name>sb</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>new</operator> <call><name>CSVRecord</name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>record</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>this</name><operator>.</operator><name>record</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>headerMap</name></name></expr></argument>, <argument><expr><name>comment</name></expr></argument>,
                    <argument><expr><name><name>this</name><operator>.</operator><name>recordNumber</name></name></expr></argument>, <argument><expr><name>startCharPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/org/apache/commons/csv/package-info.java" hash="692c7c555de99fa78dd6d801abafb10017891395"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block" format="javadoc">/**
 * Apache Commons CSV Format Support.
 *
 * &lt;p&gt;CSV are widely used as interfaces to legacy systems or manual data-imports.
 *    CSV stands for "Comma Separated Values" (or sometimes "Character Separated
 *    Values"). The CSV data format is defined in
 *    &lt;a href="http://tools.ietf.org/html/rfc4180" target="_blank"&gt;RFC 4180&lt;/a&gt;
 *    but many dialects exist.&lt;/p&gt;
 *
 * &lt;p&gt;Common to all file dialects is its basic structure: The CSV data-format
 *    is record oriented, whereas each record starts on a new textual line. A
 *    record is build of a list of values. Keep in mind that not all records
 *    must have an equal number of values:&lt;/p&gt;
 * &lt;pre&gt;
 *       csv    := records*
 *       record := values*
 * &lt;/pre&gt;
 *
 * &lt;p&gt;The following list contains the CSV aspects the Commons CSV parser supports:&lt;/p&gt;
 * &lt;dl&gt;
 *   &lt;dt&gt;Separators (for lines)&lt;/dt&gt;
 *   &lt;dd&gt;The record separators are hardcoded and cannot be changed. The must be '\r', '\n' or '\r\n'.&lt;/dd&gt;
 *
 *   &lt;dt&gt;Delimiter (for values)&lt;/dt&gt;
 *   &lt;dd&gt;The delimiter for values is freely configurable (default ',').&lt;/dd&gt;
 *
 *   &lt;dt&gt;Comments&lt;/dt&gt;
 *   &lt;dd&gt;Some CSV-dialects support a simple comment syntax. A comment is a record
 *       which must start with a designated character (the commentStarter). A record
 *       of this kind is treated as comment and gets removed from the input (default none)&lt;/dd&gt;
 *
 *   &lt;dt&gt;Encapsulator&lt;/dt&gt;
 *  &lt;dd&gt;Two encapsulator characters (default '"') are used to enclose -&amp;gt; complex values.&lt;/dd&gt;
 *
 *   &lt;dt&gt;Simple values&lt;/dt&gt;
 *   &lt;dd&gt;A simple value consist of all characters (except the delimiter) until
 *       (but not including) the next delimiter or a record-terminator. Optionally
 *       all surrounding whitespaces of a simple value can be ignored (default: true).&lt;/dd&gt;
 *
 *   &lt;dt&gt;Complex values&lt;/dt&gt;
 *   &lt;dd&gt;Complex values are encapsulated within a pair of the defined encapsulator characters.
 *       The encapsulator itself must be escaped or doubled when used inside complex values.
 *       Complex values preserve all kind of formatting (including newlines -&amp;gt; multiline-values)&lt;/dd&gt;
 *
 *  &lt;dt&gt;Empty line skipping&lt;/dt&gt;
 *   &lt;dd&gt;Optionally empty lines in CSV files can be skipped.
 *       Otherwise, empty lines will return a record with a single empty value.&lt;/dd&gt;
 * &lt;/dl&gt;
 *
 * &lt;p&gt;In addition to individually defined dialects, two predefined dialects (strict-csv, and excel-csv)
 *    can be set directly.&lt;/p&gt; &lt;!-- TODO fix --&gt;
 *
 * &lt;p&gt;Example usage:&lt;/p&gt;
 * &lt;blockquote&gt;&lt;pre&gt;
 * Reader in = new StringReader("a,b,c");
 * for (CSVRecord record : CSVFormat.DEFAULT.parse(in)) {
 *     for (String field : record) {
 *         System.out.print("\"" + field + "\", ");
 *     }
 *     System.out.println();
 * }
 * &lt;/pre&gt;&lt;/blockquote&gt;
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name></name>;</package>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/org/apache/commons/csv/Token.java" hash="91737f2fcc0f328ac6e41e0b064f2e92557354e7"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name><operator>.</operator><name>Token</name><operator>.</operator><name>Type</name><operator>.</operator><name>INVALID</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Internal token representation.
 * &lt;p/&gt;
 * It is used as contract between the lexer and the parser.
 *
 * @version $Id: Token.java 1509069 2013-08-01 02:04:27Z ggregory $
 */</comment>
<class><specifier>final</specifier> class <name>Token</name> <block>{

    <comment type="block" format="javadoc">/** length of the initial token (content-)buffer */</comment>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INITIAL_TOKEN_LENGTH</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>;</decl_stmt>

    <enum>enum <name>Type</name> <block>{
        <comment type="block" format="javadoc">/** Token has no valid content, i.e. is in its initialized state. */</comment>
        <decl><name>INVALID</name></decl>,

        <comment type="block" format="javadoc">/** Token with content, at beginning or in the middle of a line. */</comment>
        <decl><name>TOKEN</name></decl>,

        <comment type="block" format="javadoc">/** Token (which can have content) when the end of file is reached. */</comment>
        <decl><name>EOF</name></decl>,

        <comment type="block" format="javadoc">/** Token with content when the end of a line is reached. */</comment>
        <decl><name>EORECORD</name></decl>,

        <comment type="block" format="javadoc">/** Token is a comment line. */</comment>
        <decl><name>COMMENT</name></decl>
    }</block></enum>

    <comment type="block" format="javadoc">/** Token type */</comment>
    <decl_stmt><decl><type><name>Type</name></type> <name>type</name> <init>= <expr><name>INVALID</name></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** The content buffer. */</comment>
    <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>content</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><name>INITIAL_TOKEN_LENGTH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Token ready flag: indicates a valid token with content (ready for the parser). */</comment>
    <decl_stmt><decl><type><name>boolean</name></type> <name>isReady</name></decl>;</decl_stmt>

    <function><type><name>void</name></type> <name>reset</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>content</name><operator>.</operator><name>setLength</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>type</name> <operator>=</operator> <name>INVALID</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>isReady</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Eases IDE debugging.
     *
     * @return a string helpful for debugging.
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>type</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" ["</literal> <operator>+</operator> <call><name><name>content</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"]"</literal></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/androidTest/java/vocabletrainer/heinecke/aron/vocabletrainer/DBTest.java" hash="7f32154f3f2bd649c25b25005bac7fd155b205cb"><package>package <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>test</name><operator>.</operator><name>InstrumentationRegistry</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>test</name><operator>.</operator><name>runner</name><operator>.</operator><name>AndroidJUnit4</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>After</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Before</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>runner</name><operator>.</operator><name>RunWith</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>locks</name><operator>.</operator><name>Lock</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>locks</name><operator>.</operator><name>ReentrantLock</name></name>;</import>

<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Database</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>VEntry</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>VList</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Storage</name><operator>.</operator><name>TrainerSettings</name></name>;</import>
<import>import <name><name>vocabletrainer</name><operator>.</operator><name>heinecke</name><operator>.</operator><name>aron</name><operator>.</operator><name>vocabletrainer</name><operator>.</operator><name>lib</name><operator>.</operator><name>Trainer</name><operator>.</operator><name>Trainer</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name><operator>.</operator><name>*</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Database test, which will execute on an Android device.
 *
 * @see &lt;a href="http://d.android.com/tools/testing"&gt;Testing documentation&lt;/a&gt;
 */</comment>
<class><annotation>@<name>RunWith</name><argument_list>(<argument><expr><name><name>AndroidJUnit4</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> class <name>DBTest</name> <block>{

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><literal type="string">"UNIT"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Lock</name></type> <name>_mutex</name> <init>= <expr><operator>new</operator> <call><name>ReentrantLock</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>string2List</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <specifier>final</specifier> <name>String</name></type> <name>input</name></decl></parameter>)</parameter_list><block>{
        <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>lst</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>lst</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>lst</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>useAppContext</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <comment type="line">// Context of the app under test.</comment>
        <decl_stmt><decl><type><name>Context</name></type> <name>appContext</name> <init>= <expr><call><name><name>InstrumentationRegistry</name><operator>.</operator><name>getTargetContext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"vocabletrainer.heinecke.aron.vocabletrainer"</literal></expr></argument>, <argument><expr><call><name><name>appContext</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>VList</name></type> <name>getTable</name><parameter_list>()</parameter_list><block>{
        <return>return <expr><operator>new</operator> <call><name>VList</name><argument_list>(<argument><expr><literal type="string">"A"</literal></expr></argument>,<argument><expr><literal type="string">"B"</literal></expr></argument>,<argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>VEntry</name></argument>&gt;</argument_list></name></type> <name>getEntries</name><parameter_list>(<parameter><decl><type><name>VList</name></type> <name>tbl</name></decl></parameter>)</parameter_list><block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>VEntry</name></argument>&gt;</argument_list></name></type> <name>entries</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <expr_stmt><expr><call><name><name>entries</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>VEntry</name><argument_list>(<argument><expr><literal type="string">"A"</literal><operator>+</operator><name>i</name></expr></argument>,<argument><expr><literal type="string">"B"</literal><operator>+</operator><name>i</name></expr></argument>,<argument><expr><literal type="string">"C"</literal><operator>+</operator><name>i</name></expr></argument>, <argument><expr><literal type="string">"D"</literal><operator>+</operator><name>i</name></expr></argument>,<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>entries</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Before</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><call><name><name>_mutex</name><operator>.</operator><name>lock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Context</name></type> <name>appContext</name> <init>= <expr><call><name><name>InstrumentationRegistry</name><operator>.</operator><name>getTargetContext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"delete DB: "</literal><operator>+</operator><call><name><name>appContext</name><operator>.</operator><name>deleteDatabase</name></name><argument_list>(<argument><expr><name><name>Database</name><operator>.</operator><name>DB_NAME_DEV</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>After</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>end</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><call><name><name>_mutex</name><operator>.</operator><name>unlock</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>testDBInit</name><parameter_list>()</parameter_list><block>{
        <comment type="line">//Database db = new Database(InstrumentationRegistry.getTargetContext());</comment>
    }</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>testDBInsertTable</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>Database</name></type> <name>db</name> <init>= <expr><operator>new</operator> <call><name>Database</name><argument_list>(<argument><expr><call><name><name>InstrumentationRegistry</name><operator>.</operator><name>getTargetContext</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>VList</name></type> <name>tbl</name> <init>= <expr><call><name>getTable</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"UpsertTable"</literal></expr></argument>,<argument><expr><call><name><name>db</name><operator>.</operator><name>upsertVList</name></name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>VList</name></argument>&gt;</argument_list></name></type> <name>tbls</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>getTables</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"Invalid amount of entries"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><call><name><name>tbls</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"Unequal table after insert"</literal></expr></argument>,<argument><expr><call><name><name>tbl</name><operator>.</operator><name>equals</name></name><argument_list>( <argument><expr><call><name><name>tbls</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>testDBInsertEntries</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>Database</name></type> <name>db</name> <init>= <expr><operator>new</operator> <call><name>Database</name><argument_list>(<argument><expr><call><name><name>InstrumentationRegistry</name><operator>.</operator><name>getTargetContext</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>VList</name></type> <name>tbl</name> <init>= <expr><call><name>getTable</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"UpsertTable"</literal></expr></argument>,<argument><expr><call><name><name>db</name><operator>.</operator><name>upsertVList</name></name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>VEntry</name></argument>&gt;</argument_list></name></type> <name>entries</name> <init>= <expr><call><name>getEntries</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"UpsertEntries"</literal></expr></argument>,<argument><expr><call><name><name>db</name><operator>.</operator><name>upsertEntries</name></name><argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>VEntry</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>getVocablesOfTable</name></name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"invalid amount of entries"</literal></expr></argument>,<argument><expr><call><name><name>entries</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>result</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>testDBEditEntries</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>Database</name></type> <name>db</name> <init>= <expr><operator>new</operator> <call><name>Database</name><argument_list>(<argument><expr><call><name><name>InstrumentationRegistry</name><operator>.</operator><name>getTargetContext</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>VList</name></type> <name>tbl</name> <init>= <expr><call><name>getTable</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"UpsertTable"</literal></expr></argument>,<argument><expr><call><name><name>db</name><operator>.</operator><name>upsertVList</name></name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>VEntry</name></argument>&gt;</argument_list></name></type> <name>entries</name> <init>= <expr><call><name>getEntries</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"UpsertEntries"</literal></expr></argument>,<argument><expr><call><name><name>db</name><operator>.</operator><name>upsertEntries</name></name><argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>VEntry</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>getVocablesOfTable</name></name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"invalid amount of entries"</literal></expr></argument>,<argument><expr><call><name><name>entries</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>result</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setAMeanings</name><argument_list>(<argument><expr><call><name>string2List</name><argument_list>(<argument><expr><literal type="string">"New Word"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setDelete</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"UpsertEntries"</literal></expr></argument>,<argument><expr><call><name><name>db</name><operator>.</operator><name>upsertEntries</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>VEntry</name></argument>&gt;</argument_list></name></type> <name>edited</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>getVocablesOfTable</name></name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"invalid amount of entries"</literal></expr></argument>,<argument><expr><call><name><name>entries</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><call><name><name>edited</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"invalid entry data"</literal></expr></argument>, <argument><expr><call><name><name>result</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getAString</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>edited</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getAString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"invalid entry data"</literal></expr></argument>, <argument><expr><call><name><name>result</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getBString</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>edited</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getBString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"invalid entry data"</literal></expr></argument>, <argument><expr><call><name><name>result</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTip</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>edited</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTip</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>testDBDelete</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>Database</name></type> <name>db</name> <init>= <expr><operator>new</operator> <call><name>Database</name><argument_list>(<argument><expr><call><name><name>InstrumentationRegistry</name><operator>.</operator><name>getTargetContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>VList</name></type> <name>tbl</name> <init>= <expr><call><name>getTable</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"upserttable"</literal></expr></argument>,<argument><expr><call><name><name>db</name><operator>.</operator><name>upsertVList</name></name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>VEntry</name></argument>&gt;</argument_list></name></type> <name>entries</name> <init>= <expr><call><name>getEntries</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"UpsertEntries"</literal></expr></argument>, <argument><expr><call><name><name>db</name><operator>.</operator><name>upsertEntries</name></name><argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"invalid amount entries"</literal></expr></argument>, <argument><expr><call><name><name>entries</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>db</name><operator>.</operator><name>getVocablesOfTable</name></name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"invalid amount lists"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>db</name><operator>.</operator><name>getTables</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"delete table"</literal></expr></argument>,<argument><expr><call><name><name>db</name><operator>.</operator><name>deleteTable</name></name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"invalid amount entries"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>db</name><operator>.</operator><name>getVocablesOfTable</name></name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"invalid amount lists"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>db</name><operator>.</operator><name>getTables</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>testDBRandomSelect</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>Database</name></type> <name>db</name> <init>= <expr><operator>new</operator> <call><name>Database</name><argument_list>(<argument><expr><call><name><name>InstrumentationRegistry</name><operator>.</operator><name>getTargetContext</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>VList</name></type> <name>tbl</name> <init>= <expr><call><name>getTable</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"UpsertTable"</literal></expr></argument>,<argument><expr><call><name><name>db</name><operator>.</operator><name>upsertVList</name></name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>VEntry</name></argument>&gt;</argument_list></name></type> <name>entries</name> <init>= <expr><call><name>getEntries</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"UpsertEntries"</literal></expr></argument>,<argument><expr><call><name><name>db</name><operator>.</operator><name>upsertEntries</name></name><argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><call><name><name>db</name><operator>.</operator><name>getRandomTrainerEntry</name></name><argument_list>(<argument><expr><name>tbl</name></expr></argument>,<argument><expr><literal type="null">null</literal></expr></argument>,<argument><expr><operator>new</operator> <call><name>TrainerSettings</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>Trainer</name><operator>.</operator><name>TEST_MODE</name><operator>.</operator><name>RANDOM</name></name></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>,<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>testDBEntryPointsInsert</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>Database</name></type> <name>db</name> <init>= <expr><operator>new</operator> <call><name>Database</name><argument_list>(<argument><expr><call><name><name>InstrumentationRegistry</name><operator>.</operator><name>getTargetContext</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>VList</name></type> <name>tbl</name> <init>= <expr><call><name>getTable</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"UpsertTable"</literal></expr></argument>,<argument><expr><call><name><name>db</name><operator>.</operator><name>upsertVList</name></name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>VEntry</name></argument>&gt;</argument_list></name></type> <name>entries</name> <init>= <expr><call><name>getEntries</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"UpsertEntries"</literal></expr></argument>,<argument><expr><call><name><name>db</name><operator>.</operator><name>upsertEntries</name></name><argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>VEntry</name></type> <name>ent</name> <init>= <expr><call><name><name>entries</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ent</name><operator>.</operator><name>setPoints</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><call><name><name>ent</name><operator>.</operator><name>getPoints</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>db</name><operator>.</operator><name>updateEntryProgress</name></name><argument_list>(<argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"table points"</literal></expr></argument>,<argument><expr><call><name><name>ent</name><operator>.</operator><name>getPoints</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>db</name><operator>.</operator><name>getEntryPoints</name></name><argument_list>(<argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>ent</name><operator>.</operator><name>setPoints</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>db</name><operator>.</operator><name>updateEntryProgress</name></name><argument_list>(<argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"upd table points"</literal></expr></argument>,<argument><expr><call><name><name>ent</name><operator>.</operator><name>getPoints</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>db</name><operator>.</operator><name>getEntryPoints</name></name><argument_list>(<argument><expr><name>ent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Test for db random select to be
     * a) not repetitive, given a previous element as param
     * b) not selecting entries for which the points are matching the finished criteria
     */</comment>
    <function><annotation>@<name>Test</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>testDbEntryRandomSelect</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>points</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Database</name></type> <name>db</name> <init>= <expr><operator>new</operator> <call><name>Database</name><argument_list>(<argument><expr><call><name><name>InstrumentationRegistry</name><operator>.</operator><name>getTargetContext</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>VList</name></type> <name>tbl</name> <init>= <expr><call><name>getTable</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"UpsertTable"</literal></expr></argument>,<argument><expr><call><name><name>db</name><operator>.</operator><name>upsertVList</name></name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>VEntry</name></argument>&gt;</argument_list></name></type> <name>entries</name> <init>= <expr><call><name>getEntries</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>entries</name> <operator>=</operator> <call><name><name>entries</name><operator>.</operator><name>subList</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><call><name><name>entries</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><literal type="string">"UpsertEntries"</literal></expr></argument>,<argument><expr><call><name><name>db</name><operator>.</operator><name>upsertEntries</name></name><argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>TrainerSettings</name></type> <name>settings</name> <init>= <expr><operator>new</operator> <call><name>TrainerSettings</name><argument_list>(<argument><expr><name>points</name></expr></argument>, <argument><expr><name><name>Trainer</name><operator>.</operator><name>TEST_MODE</name><operator>.</operator><name>RANDOM</name></name></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>,<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>VEntry</name></type> <name>chosen</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>getRandomTrainerEntry</name></name><argument_list>(<argument><expr><name>tbl</name></expr></argument>,<argument><expr><literal type="null">null</literal></expr></argument>,<argument><expr><name>settings</name></expr></argument>,<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>chosen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>VEntry</name></type> <name>secondChosen</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>getRandomTrainerEntry</name></name><argument_list>(<argument><expr><name>tbl</name></expr></argument>,<argument><expr><name>chosen</name></expr></argument>,<argument><expr><name>settings</name></expr></argument>,<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>secondChosen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotEquals</name><argument_list>(<argument><expr><literal type="string">"selected same entry twice"</literal></expr></argument>,<argument><expr><call><name><name>chosen</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>secondChosen</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>chosen</name><operator>.</operator><name>setPoints</name></name><argument_list>(<argument><expr><name>points</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>points</name></expr></argument>,<argument><expr><call><name><name>chosen</name><operator>.</operator><name>getPoints</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>db</name><operator>.</operator><name>updateEntryProgress</name></name><argument_list>(<argument><expr><name>chosen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"table points"</literal></expr></argument>,<argument><expr><call><name><name>chosen</name><operator>.</operator><name>getPoints</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>db</name><operator>.</operator><name>getEntryPoints</name></name><argument_list>(<argument><expr><name>chosen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>VEntry</name></type> <name>thirdChosen</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>getRandomTrainerEntry</name></name><argument_list>(<argument><expr><name>tbl</name></expr></argument>,<argument><expr><literal type="null">null</literal></expr></argument>,<argument><expr><name>settings</name></expr></argument>,<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>thirdChosen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotEquals</name><argument_list>(<argument><expr><literal type="string">"selected entry with reached points"</literal></expr></argument>,<argument><expr><call><name><name>chosen</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>thirdChosen</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>thirdChosen</name><operator>.</operator><name>setPoints</name></name><argument_list>(<argument><expr><name>points</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>db</name><operator>.</operator><name>updateEntryProgress</name></name><argument_list>(<argument><expr><name>thirdChosen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>VEntry</name></type> <name>fourthChosen</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>getRandomTrainerEntry</name></name><argument_list>(<argument><expr><name>tbl</name></expr></argument>,<argument><expr><literal type="null">null</literal></expr></argument>,<argument><expr><name>settings</name></expr></argument>,<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><name>fourthChosen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/org/apache/commons/csv/Lexer.java" hash="8c095e4899e51c785e6faf20eb2d1fbe1f260682"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name><operator>.</operator><name>Constants</name><operator>.</operator><name>BACKSPACE</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name><operator>.</operator><name>Constants</name><operator>.</operator><name>CR</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name><operator>.</operator><name>Constants</name><operator>.</operator><name>END_OF_STREAM</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name><operator>.</operator><name>Constants</name><operator>.</operator><name>FF</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name><operator>.</operator><name>Constants</name><operator>.</operator><name>LF</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name><operator>.</operator><name>Constants</name><operator>.</operator><name>TAB</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name><operator>.</operator><name>Constants</name><operator>.</operator><name>UNDEFINED</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name><operator>.</operator><name>Token</name><operator>.</operator><name>Type</name><operator>.</operator><name>COMMENT</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name><operator>.</operator><name>Token</name><operator>.</operator><name>Type</name><operator>.</operator><name>EOF</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name><operator>.</operator><name>Token</name><operator>.</operator><name>Type</name><operator>.</operator><name>EORECORD</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name><operator>.</operator><name>Token</name><operator>.</operator><name>Type</name><operator>.</operator><name>INVALID</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name><operator>.</operator><name>Token</name><operator>.</operator><name>Type</name><operator>.</operator><name>TOKEN</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Closeable</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Lexical analyzer.
 *
 * @version $Id: Lexer.java 1742468 2016-05-05 20:02:35Z britter $
 */</comment>
<class><specifier>final</specifier> class <name>Lexer</name> <super><implements>implements <name>Closeable</name></implements></super> <block>{

    <comment type="block" format="javadoc">/**
     * Constant char to use for disabling comments, escapes and encapsulation. The value -2 is used because it
     * won't be confused with an EOF signal (-1), and because the Unicode value {@code FFFE} would be encoded as two
     * chars (using surrogates) and thus there should never be a collision with a real text char.
     */</comment>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>char</name></type> <name>DISABLED</name> <init>= <expr><literal type="char">'\ufffe'</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>char</name></type> <name>delimiter</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>char</name></type> <name>escape</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>char</name></type> <name>quoteChar</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>char</name></type> <name>commentStart</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>boolean</name></type> <name>ignoreSurroundingSpaces</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>boolean</name></type> <name>ignoreEmptyLines</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** The input stream */</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ExtendedBufferedReader</name></type> <name>reader</name></decl>;</decl_stmt>

    <constructor><name>Lexer</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CSVFormat</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>ExtendedBufferedReader</name></type> <name>reader</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>reader</name></name> <operator>=</operator> <name>reader</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>delimiter</name></name> <operator>=</operator> <call><name><name>format</name><operator>.</operator><name>getDelimiter</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>escape</name></name> <operator>=</operator> <call><name>mapNullToDisabled</name><argument_list>(<argument><expr><call><name><name>format</name><operator>.</operator><name>getEscapeCharacter</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>quoteChar</name></name> <operator>=</operator> <call><name>mapNullToDisabled</name><argument_list>(<argument><expr><call><name><name>format</name><operator>.</operator><name>getQuoteCharacter</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>commentStart</name></name> <operator>=</operator> <call><name>mapNullToDisabled</name><argument_list>(<argument><expr><call><name><name>format</name><operator>.</operator><name>getCommentMarker</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ignoreSurroundingSpaces</name></name> <operator>=</operator> <call><name><name>format</name><operator>.</operator><name>getIgnoreSurroundingSpaces</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ignoreEmptyLines</name></name> <operator>=</operator> <call><name><name>format</name><operator>.</operator><name>getIgnoreEmptyLines</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * Returns the next token.
     * &lt;p&gt;
     * A token corresponds to a term, a record change or an end-of-file indicator.
     * &lt;/p&gt;
     *
     * @param token
     *            an existing Token object to reuse. The caller is responsible to initialize the Token.
     * @return the next token found
     * @throws IOException
     *             on stream access error
     */</comment>
    <function><type><name>Token</name></type> <name>nextToken</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Token</name></type> <name>token</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{

        <comment type="line">// get the last read char (required for empty line detection)</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>lastChar</name> <init>= <expr><call><name><name>reader</name><operator>.</operator><name>getLastChar</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// read the next char and set eol</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name><name>reader</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="block">/*
         * Note: The following call will swallow LF if c == CR. But we don't need to know if the last char was CR or LF
         * - they are equivalent here.
         */</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>eol</name> <init>= <expr><call><name>readEndOfLine</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// empty line detection: eol AND (last char was EOL or beginning)</comment>
        <if>if <condition>(<expr><name>ignoreEmptyLines</name></expr>)</condition><then> <block>{
            <while>while <condition>(<expr><name>eol</name> <operator>&amp;&amp;</operator> <call><name>isStartOfLine</name><argument_list>(<argument><expr><name>lastChar</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
                <comment type="line">// go on char ahead ...</comment>
                <expr_stmt><expr><name>lastChar</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>eol</name> <operator>=</operator> <call><name>readEndOfLine</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// reached end of file without any content (empty line at the end)</comment>
                <if>if <condition>(<expr><call><name>isEndOfFile</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>token</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>EOF</name></expr>;</expr_stmt>
                    <comment type="line">// don't set token.isReady here because no content</comment>
                    <return>return <expr><name>token</name></expr>;</return>
                }</block></then></if>
            }</block></while>
        }</block></then></if>

        <comment type="line">// did we reach eof during the last iteration already ? EOF</comment>
        <if>if <condition>(<expr><call><name>isEndOfFile</name><argument_list>(<argument><expr><name>lastChar</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>isDelimiter</name><argument_list>(<argument><expr><name>lastChar</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isEndOfFile</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>token</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>EOF</name></expr>;</expr_stmt>
            <comment type="line">// don't set token.isReady here because no content</comment>
            <return>return <expr><name>token</name></expr>;</return>
        }</block></then></if>

        <if>if <condition>(<expr><call><name>isStartOfLine</name><argument_list>(<argument><expr><name>lastChar</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isCommentStart</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>line</name> <init>= <expr><call><name><name>reader</name><operator>.</operator><name>readLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>line</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>token</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>EOF</name></expr>;</expr_stmt>
                <comment type="line">// don't set token.isReady here because no content</comment>
                <return>return <expr><name>token</name></expr>;</return>
            }</block></then></if>
            <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>comment</name> <init>= <expr><call><name><name>line</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>token</name><operator>.</operator><name>content</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>token</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>COMMENT</name></expr>;</expr_stmt>
            <return>return <expr><name>token</name></expr>;</return>
        }</block></then></if>

        <comment type="line">// important: make sure a new char gets consumed in each iteration</comment>
        <while>while <condition>(<expr><name><name>token</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>INVALID</name></expr>)</condition> <block>{
            <comment type="line">// ignore whitespaces at beginning of a token</comment>
            <if>if <condition>(<expr><name>ignoreSurroundingSpaces</name></expr>)</condition><then> <block>{
                <while>while <condition>(<expr><call><name>isWhitespace</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>eol</name></expr>)</condition> <block>{
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>eol</name> <operator>=</operator> <call><name>readEndOfLine</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></while>
            }</block></then></if>

            <comment type="line">// ok, start of token reached: encapsulated, or token</comment>
            <if>if <condition>(<expr><call><name>isDelimiter</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">// empty token return TOKEN("")</comment>
                <expr_stmt><expr><name><name>token</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TOKEN</name></expr>;</expr_stmt>
            }</block></then> <elseif>else <if>if <condition>(<expr><name>eol</name></expr>)</condition><then> <block>{
                <comment type="line">// empty token return EORECORD("")</comment>
                <comment type="line">// noop: token.content.append("");</comment>
                <expr_stmt><expr><name><name>token</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>EORECORD</name></expr>;</expr_stmt>
            }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name>isQuoteChar</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">// consume encapsulated token</comment>
                <expr_stmt><expr><call><name>parseEncapsulatedToken</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name>isEndOfFile</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">// end of file return EOF()</comment>
                <comment type="line">// noop: token.content.append("");</comment>
                <expr_stmt><expr><name><name>token</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>EOF</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>token</name><operator>.</operator><name>isReady</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt> <comment type="line">// there is data at EOF</comment>
            }</block></then></if></elseif> <else>else <block>{
                <comment type="line">// next token must be a simple token</comment>
                <comment type="line">// add removed blanks when not ignoring whitespace chars...</comment>
                <expr_stmt><expr><call><name>parseSimpleToken</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></while>
        <return>return <expr><name>token</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Parses a simple token.
     * &lt;p/&gt;
     * Simple token are tokens which are not surrounded by encapsulators. A simple token might contain escaped
     * delimiters (as \, or \;). The token is finished when one of the following conditions become true:
     * &lt;ul&gt;
     * &lt;li&gt;end of line has been reached (EORECORD)&lt;/li&gt;
     * &lt;li&gt;end of stream has been reached (EOF)&lt;/li&gt;
     * &lt;li&gt;an unescaped delimiter has been reached (TOKEN)&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * @param token
     *            the current token
     * @param ch
     *            the current character
     * @return the filled token
     * @throws IOException
     *             on stream access error
     */</comment>
    <function><specifier>private</specifier> <type><name>Token</name></type> <name>parseSimpleToken</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Token</name></type> <name>token</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <comment type="line">// Faster to use while(true)+break than while(token.type == INVALID)</comment>
        <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{
            <if>if <condition>(<expr><call><name>readEndOfLine</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>token</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>EORECORD</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then> <elseif>else <if>if <condition>(<expr><call><name>isEndOfFile</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>token</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>EOF</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>token</name><operator>.</operator><name>isReady</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt> <comment type="line">// There is data at EOF</comment>
                <break>break;</break>
            }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name>isDelimiter</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>token</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TOKEN</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name>isEscape</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>unescaped</name> <init>= <expr><call><name>readEscape</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>unescaped</name> <operator>==</operator> <name>END_OF_STREAM</name></expr>)</condition><then> <block>{ <comment type="line">// unexpected char after escape</comment>
                    <expr_stmt><expr><call><name><name>token</name><operator>.</operator><name>content</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator> <name>ch</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator> <call><name><name>reader</name><operator>.</operator><name>getLastChar</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>token</name><operator>.</operator><name>content</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator> <name>unescaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// continue</comment>
            }</block></then></if></elseif> <else>else <block>{
                <expr_stmt><expr><call><name><name>token</name><operator>.</operator><name>content</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator> <name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// continue</comment>
            }</block></else></if>
        }</block></while>

        <if>if <condition>(<expr><name>ignoreSurroundingSpaces</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>trimTrailingSpaces</name><argument_list>(<argument><expr><name><name>token</name><operator>.</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <return>return <expr><name>token</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Parses an encapsulated token.
     * &lt;p/&gt;
     * Encapsulated tokens are surrounded by the given encapsulating-string. The encapsulator itself might be included
     * in the token using a doubling syntax (as "", '') or using escaping (as in \", \'). Whitespaces before and after
     * an encapsulated token are ignored. The token is finished when one of the following conditions become true:
     * &lt;ul&gt;
     * &lt;li&gt;an unescaped encapsulator has been reached, and is followed by optional whitespace then:&lt;/li&gt;
     * &lt;ul&gt;
     * &lt;li&gt;delimiter (TOKEN)&lt;/li&gt;
     * &lt;li&gt;end of line (EORECORD)&lt;/li&gt;
     * &lt;/ul&gt;
     * &lt;li&gt;end of stream has been reached (EOF)&lt;/li&gt; &lt;/ul&gt;
     *
     * @param token
     *            the current token
     * @return a valid token object
     * @throws IOException
     *             on invalid state: EOF before closing encapsulator or invalid character before delimiter or EOL
     */</comment>
    <function><specifier>private</specifier> <type><name>Token</name></type> <name>parseEncapsulatedToken</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Token</name></type> <name>token</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <comment type="line">// save current line number in case needed for IOE</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>startLineNumber</name> <init>= <expr><call><name>getCurrentLineNumber</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
        <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{
            <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><call><name>isEscape</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>unescaped</name> <init>= <expr><call><name>readEscape</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>unescaped</name> <operator>==</operator> <name>END_OF_STREAM</name></expr>)</condition><then> <block>{ <comment type="line">// unexpected char after escape</comment>
                    <expr_stmt><expr><call><name><name>token</name><operator>.</operator><name>content</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator> <name>c</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator> <call><name><name>reader</name><operator>.</operator><name>getLastChar</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>token</name><operator>.</operator><name>content</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator> <name>unescaped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then> <elseif>else <if>if <condition>(<expr><call><name>isQuoteChar</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name>isQuoteChar</name><argument_list>(<argument><expr><call><name><name>reader</name><operator>.</operator><name>lookAhead</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <comment type="line">// double or escaped encapsulator -&gt; add single encapsulator to token</comment>
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>token</name><operator>.</operator><name>content</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator> <name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <comment type="line">// token finish mark (encapsulator) reached: ignore whitespace till delimiter</comment>
                    <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{
                        <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><call><name>isDelimiter</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                            <expr_stmt><expr><name><name>token</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>TOKEN</name></expr>;</expr_stmt>
                            <return>return <expr><name>token</name></expr>;</return>
                        }</block></then> <elseif>else <if>if <condition>(<expr><call><name>isEndOfFile</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                            <expr_stmt><expr><name><name>token</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>EOF</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>token</name><operator>.</operator><name>isReady</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt> <comment type="line">// There is data at EOF</comment>
                            <return>return <expr><name>token</name></expr>;</return>
                        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name>readEndOfLine</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                            <expr_stmt><expr><name><name>token</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>EORECORD</name></expr>;</expr_stmt>
                            <return>return <expr><name>token</name></expr>;</return>
                        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><operator>!</operator><call><name>isWhitespace</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                            <comment type="line">// error invalid char between token and next delimiter</comment>
                            <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"(line "</literal> <operator>+</operator> <call><name>getCurrentLineNumber</name><argument_list>()</argument_list></call> <operator>+</operator>
                                    <literal type="string">") invalid char between encapsulated token and delimiter"</literal></expr></argument>)</argument_list></call></expr>;</throw>
                        }</block></then></if></elseif></if>
                    }</block></while>
                }</block></else></if>
            }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name>isEndOfFile</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">// error condition (end of file before end of token)</comment>
                <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"(startline "</literal> <operator>+</operator> <name>startLineNumber</name> <operator>+</operator>
                        <literal type="string">") EOF reached before encapsulated token finished"</literal></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></then></if></elseif> <else>else <block>{
                <comment type="line">// consume character</comment>
                <expr_stmt><expr><call><name><name>token</name><operator>.</operator><name>content</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator> <name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></while>
    }</block></function>

    <function><specifier>private</specifier> <type><name>char</name></type> <name>mapNullToDisabled</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Character</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><ternary><condition><expr><name>c</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>DISABLED</name></expr> </then><else>: <expr><call><name><name>c</name><operator>.</operator><name>charValue</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the current line number
     *
     * @return the current line number
     */</comment>
    <function><type><name>long</name></type> <name>getCurrentLineNumber</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>reader</name><operator>.</operator><name>getCurrentLineNumber</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the current character position
     *
     * @return the current character position
     */</comment>
    <function><type><name>long</name></type> <name>getCharacterPosition</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>reader</name><operator>.</operator><name>getPosition</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="line">// TODO escape handling needs more work</comment>
    <comment type="block" format="javadoc">/**
     * Handle an escape sequence.
     * The current character must be the escape character.
     * On return, the next character is available by calling {@link ExtendedBufferedReader#getLastChar()}
     * on the input stream.
     *
     * @return the unescaped character (as an int) or {@link Constants#END_OF_STREAM} if char following the escape is
     *      invalid.
     * @throws IOException if there is a problem reading the stream or the end of stream is detected:
     *      the escape character is not allowed at end of strem
     */</comment>
    <function><type><name>int</name></type> <name>readEscape</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <comment type="line">// the escape char has just been read (normally a backslash)</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>ch</name> <init>= <expr><call><name><name>reader</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{
        <case>case <expr><literal type="char">'r'</literal></expr>:</case>
            <return>return <expr><name>CR</name></expr>;</return>
        <case>case <expr><literal type="char">'n'</literal></expr>:</case>
            <return>return <expr><name>LF</name></expr>;</return>
        <case>case <expr><literal type="char">'t'</literal></expr>:</case>
            <return>return <expr><name>TAB</name></expr>;</return>
        <case>case <expr><literal type="char">'b'</literal></expr>:</case>
            <return>return <expr><name>BACKSPACE</name></expr>;</return>
        <case>case <expr><literal type="char">'f'</literal></expr>:</case>
            <return>return <expr><name>FF</name></expr>;</return>
        <case>case <expr><name>CR</name></expr>:</case>
        <case>case <expr><name>LF</name></expr>:</case>
        <case>case <expr><name>FF</name></expr>:</case> <comment type="line">// TODO is this correct?</comment>
        <case>case <expr><name>TAB</name></expr>:</case> <comment type="line">// TODO is this correct? Do tabs need to be escaped?</comment>
        <case>case <expr><name>BACKSPACE</name></expr>:</case> <comment type="line">// TODO is this correct?</comment>
            <return>return <expr><name>ch</name></expr>;</return>
        <case>case <expr><name>END_OF_STREAM</name></expr>:</case>
            <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"EOF whilst processing escape sequence"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        <default>default:</default>
            <comment type="line">// Now check for meta-characters</comment>
            <if>if <condition>(<expr><call><name>isMetaChar</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>ch</name></expr>;</return>
            }</block></then></if>
            <comment type="line">// indicate unexpected char - available from in.getLastChar()</comment>
            <return>return <expr><name>END_OF_STREAM</name></expr>;</return>
        }</block></switch>
    }</block></function>

    <function><type><name>void</name></type> <name>trimTrailingSpaces</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>buffer</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name><name>buffer</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>Character</name><operator>.</operator><name>isWhitespace</name></name><argument_list>(<argument><expr><call><name><name>buffer</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>length</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{
            <expr_stmt><expr><name>length</name> <operator>=</operator> <name>length</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></while>
        <if>if <condition>(<expr><name>length</name> <operator>!=</operator> <call><name><name>buffer</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>buffer</name><operator>.</operator><name>setLength</name></name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Greedily accepts \n, \r and \r\n This checker consumes silently the second control-character...
     *
     * @return true if the given or next character is a line-terminator
     */</comment>
    <function><type><name>boolean</name></type> <name>readEndOfLine</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <comment type="line">// check if we have \r\n...</comment>
        <if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>CR</name> <operator>&amp;&amp;</operator> <call><name><name>reader</name><operator>.</operator><name>lookAhead</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>LF</name></expr>)</condition><then> <block>{
            <comment type="line">// note: does not change ch outside of this method!</comment>
            <expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>ch</name> <operator>==</operator> <name>LF</name> <operator>||</operator> <name>ch</name> <operator>==</operator> <name>CR</name></expr>;</return>
    }</block></function>

    <function><type><name>boolean</name></type> <name>isClosed</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>reader</name><operator>.</operator><name>isClosed</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return true if the given char is a whitespace character
     */</comment>
    <function><type><name>boolean</name></type> <name>isWhitespace</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><operator>!</operator><call><name>isDelimiter</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>Character</name><operator>.</operator><name>isWhitespace</name></name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator> <name>ch</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Checks if the current character represents the start of a line: a CR, LF or is at the start of the file.
     *
     * @param ch the character to check
     * @return true if the character is at the start of a line.
     */</comment>
    <function><type><name>boolean</name></type> <name>isStartOfLine</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><name>ch</name> <operator>==</operator> <name>LF</name> <operator>||</operator> <name>ch</name> <operator>==</operator> <name>CR</name> <operator>||</operator> <name>ch</name> <operator>==</operator> <name>UNDEFINED</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return true if the given character indicates end of file
     */</comment>
    <function><type><name>boolean</name></type> <name>isEndOfFile</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><name>ch</name> <operator>==</operator> <name>END_OF_STREAM</name></expr>;</return>
    }</block></function>

    <function><type><name>boolean</name></type> <name>isDelimiter</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><name>ch</name> <operator>==</operator> <name>delimiter</name></expr>;</return>
    }</block></function>

    <function><type><name>boolean</name></type> <name>isEscape</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><name>ch</name> <operator>==</operator> <name>escape</name></expr>;</return>
    }</block></function>

    <function><type><name>boolean</name></type> <name>isQuoteChar</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><name>ch</name> <operator>==</operator> <name>quoteChar</name></expr>;</return>
    }</block></function>

    <function><type><name>boolean</name></type> <name>isCommentStart</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><name>ch</name> <operator>==</operator> <name>commentStart</name></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isMetaChar</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><name>ch</name> <operator>==</operator> <name>delimiter</name> <operator>||</operator>
               <name>ch</name> <operator>==</operator> <name>escape</name> <operator>||</operator>
               <name>ch</name> <operator>==</operator> <name>quoteChar</name> <operator>||</operator>
               <name>ch</name> <operator>==</operator> <name>commentStart</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Closes resources.
     *
     * @throws IOException
     *             If an I/O error occurs
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>reader</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="VocableTrainer-Android/app/src/main/java/org/apache/commons/csv/CSVFormat.java" hash="07ccac50ce3a2cf513aefccf0fe2a993c4f80525"><comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name></name>;</package>

<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name><operator>.</operator><name>Constants</name><operator>.</operator><name>BACKSLASH</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name><operator>.</operator><name>Constants</name><operator>.</operator><name>COMMA</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name><operator>.</operator><name>Constants</name><operator>.</operator><name>COMMENT</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name><operator>.</operator><name>Constants</name><operator>.</operator><name>CR</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name><operator>.</operator><name>Constants</name><operator>.</operator><name>CRLF</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name><operator>.</operator><name>Constants</name><operator>.</operator><name>DOUBLE_QUOTE_CHAR</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name><operator>.</operator><name>Constants</name><operator>.</operator><name>LF</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name><operator>.</operator><name>Constants</name><operator>.</operator><name>PIPE</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name><operator>.</operator><name>Constants</name><operator>.</operator><name>SP</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>commons</name><operator>.</operator><name>csv</name><operator>.</operator><name>Constants</name><operator>.</operator><name>TAB</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Serializable</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>StringWriter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>ResultSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>ResultSetMetaData</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>SQLException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Specifies the format of a CSV file and parses input.
 *
 * &lt;h2&gt;Using predefined formats&lt;/h2&gt;
 *
 * &lt;p&gt;
 * You can use one of the predefined formats:
 * &lt;/p&gt;
 *
 * &lt;ul&gt;
 * &lt;li&gt;{@link #DEFAULT}&lt;/li&gt;
 * &lt;li&gt;{@link #EXCEL}&lt;/li&gt;
 * &lt;li&gt;{@link #MYSQL}&lt;/li&gt;
 * &lt;li&gt;{@link #RFC4180}&lt;/li&gt;
 * &lt;li&gt;{@link #TDF}&lt;/li&gt;
 * &lt;/ul&gt;
 *
 * &lt;p&gt;
 * For example:
 * &lt;/p&gt;
 *
 * &lt;pre&gt;
 * CSVParser parser = CSVFormat.EXCEL.parse(reader);
 * &lt;/pre&gt;
 *
 * &lt;p&gt;
 * The {@link CSVParser} provides static methods to parse other input types, for example:
 * &lt;/p&gt;
 *
 * &lt;pre&gt;
 * CSVParser parser = CSVParser.parse(file, StandardCharsets.US_ASCII, CSVFormat.EXCEL);
 * &lt;/pre&gt;
 *
 * &lt;h2&gt;Defining formats&lt;/h2&gt;
 *
 * &lt;p&gt;
 * You can extend a format by calling the {@code with} methods. For example:
 * &lt;/p&gt;
 *
 * &lt;pre&gt;
 * CSVFormat.EXCEL.withNullString(&amp;quot;N/A&amp;quot;).withIgnoreSurroundingSpaces(true);
 * &lt;/pre&gt;
 *
 * &lt;h2&gt;Defining column names&lt;/h2&gt;
 *
 * &lt;p&gt;
 * To define the column names you want to use to access records, write:
 * &lt;/p&gt;
 *
 * &lt;pre&gt;
 * CSVFormat.EXCEL.withHeader(&amp;quot;Col1&amp;quot;, &amp;quot;Col2&amp;quot;, &amp;quot;Col3&amp;quot;);
 * &lt;/pre&gt;
 *
 * &lt;p&gt;
 * Calling {@link #withHeader(String...)} let's you use the given names to address values in a {@link CSVRecord}, and
 * assumes that your CSV source does not contain a first record that also defines column names.
 *
 * If it does, then you are overriding this metadata with your names and you should skip the first record by calling
 * {@link #withSkipHeaderRecord(boolean)} with {@code true}.
 * &lt;/p&gt;
 *
 * &lt;h2&gt;Parsing&lt;/h2&gt;
 *
 * &lt;p&gt;
 * You can use a format directly to parse a reader. For example, to parse an Excel file with columns header, write:
 * &lt;/p&gt;
 *
 * &lt;pre&gt;
 * Reader in = ...;
 * CSVFormat.EXCEL.withHeader(&amp;quot;Col1&amp;quot;, &amp;quot;Col2&amp;quot;, &amp;quot;Col3&amp;quot;).parse(in);
 * &lt;/pre&gt;
 *
 * &lt;p&gt;
 * For other input types, like resources, files, and URLs, use the static methods on {@link CSVParser}.
 * &lt;/p&gt;
 *
 * &lt;h2&gt;Referencing columns safely&lt;/h2&gt;
 *
 * &lt;p&gt;
 * If your source contains a header record, you can simplify your code and safely reference columns, by using
 * {@link #withHeader(String...)} with no arguments:
 * &lt;/p&gt;
 *
 * &lt;pre&gt;
 * CSVFormat.EXCEL.withHeader();
 * &lt;/pre&gt;
 *
 * &lt;p&gt;
 * This causes the parser to read the first record and use its values as column names.
 *
 * Then, call one of the {@link CSVRecord} get method that takes a String column name argument:
 * &lt;/p&gt;
 *
 * &lt;pre&gt;
 * String value = record.get(&amp;quot;Col1&amp;quot;);
 * &lt;/pre&gt;
 *
 * &lt;p&gt;
 * This makes your code impervious to changes in column order in the CSV file.
 * &lt;/p&gt;
 *
 * &lt;h2&gt;Notes&lt;/h2&gt;
 *
 * &lt;p&gt;
 * This class is immutable.
 * &lt;/p&gt;
 *
 * @version $Id: CSVFormat.java 1745258 2016-05-23 20:24:33Z ggregory $
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name>CSVFormat</name> <super><implements>implements <name>Serializable</name></implements></super> <block>{

    <comment type="block" format="javadoc">/**
     * Predefines formats.
     *
     * @since 1.2
     */</comment>
    <enum><specifier>public</specifier> enum <name>Predefined</name> <block>{

        <comment type="block" format="javadoc">/**
         * @see CSVFormat#DEFAULT
         */</comment>
        <constructor><name>Default</name><parameter_list>(<parameter><decl><type><name><name>CSVFormat</name><operator>.</operator><name>DEFAULT</name></name></type></decl></parameter>)</parameter_list><operator>,</operator>

        <comment type="block" format="javadoc">/**
         * @see CSVFormat#EXCEL
         */</comment>
        Excel(CSVFormat.EXCEL</constructor>)</block>,

        <comment type="block" format="javadoc">/**
         * @see CSVFormat#INFORMIX_UNLOAD
         * @since 1.3
         */</comment>
        <constructor><name>InformixUnload</name><parameter_list>(<parameter><decl><type><name><name>CSVFormat</name><operator>.</operator><name>INFORMIX_UNLOAD</name></name></type></decl></parameter>)</parameter_list><operator>,</operator>

        <comment type="block" format="javadoc">/**
         * @see CSVFormat#INFORMIX_UNLOAD_CSV
         * @since 1.3
         */</comment>
        InformixUnloadCsv(CSVFormat.INFORMIX_UNLOAD_CSV</constructor></enum>)</block><operator>,</operator>

        <comment type="block" format="javadoc">/**
         * @see CSVFormat#MYSQL
         */</comment>
        <expr_stmt><expr><call><name>MySQL</name><argument_list>(<argument><expr><name><name>CSVFormat</name><operator>.</operator><name>MYSQL</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>

        <comment type="block" format="javadoc">/**
         * @see CSVFormat#RFC4180
         */</comment>
        <expr><call><name>RFC4180</name><argument_list>(<argument><expr><name><name>CSVFormat</name><operator>.</operator><name>RFC4180</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator>

        <comment type="block" format="javadoc">/**
         * @see CSVFormat#TDF
         */</comment>
        <expr><call><name>TDF</name><argument_list>(<argument><expr><name><name>CSVFormat</name><operator>.</operator><name>TDF</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></class>

        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>CSVFormat</name></type> <name>format</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>Predefined</name><argument_list>(<argument><expr><name>final</name> <name>CSVFormat</name> <name>format</name></expr></argument>)</argument_list></call> <block>{
            <expr><name><name>this</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>format</name></expr>;
        }</block>

        <comment type="block" format="javadoc">/**
         * Gets the format.
         *
         * @return the format.
         */</comment>
        <specifier>public</specifier> <name>CSVFormat</name> <call><name>getFormat</name><argument_list>()</argument_list></call> <block>{
            <return>return <expr><name>format</name></expr>;</return>
        }</block></expr></expr_stmt>
    }

    <comment type="block" format="javadoc">/**
     * Standard comma separated format, as for {@link #RFC4180} but allowing empty lines.
     *
     * &lt;p&gt;
     * Settings are:
     * &lt;/p&gt;
     * &lt;ul&gt;
     * &lt;li&gt;withDelimiter(',')&lt;/li&gt;
     * &lt;li&gt;withQuote('"')&lt;/li&gt;
     * &lt;li&gt;withRecordSeparator("\r\n")&lt;/li&gt;
     * &lt;li&gt;withIgnoreEmptyLines(true)&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * @see Predefined#Default
     */</comment>
    public <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>CSVFormat</name></type> <name>DEFAULT</name> <init>= <expr><operator>new</operator> <call><name>CSVFormat</name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>, <argument><expr><name>DOUBLE_QUOTE_CHAR</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>CRLF</name></expr></argument>,
            <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Excel file format (using a comma as the value delimiter). Note that the actual value delimiter used by Excel is
     * locale dependent, it might be necessary to customize this format to accommodate to your regional settings.
     *
     * &lt;p&gt;
     * For example for parsing or generating a CSV file on a French system the following format will be used:
     * &lt;/p&gt;
     *
     * &lt;pre&gt;
     * CSVFormat fmt = CSVFormat.EXCEL.withDelimiter(';');
     * &lt;/pre&gt;
     *
     * &lt;p&gt;
     * Settings are:
     * &lt;/p&gt;
     * &lt;ul&gt;
     * &lt;li&gt;{@link #withDelimiter(char) withDelimiter(',')}&lt;/li&gt;
     * &lt;li&gt;{@link #withQuote(char) withQuote('"')}&lt;/li&gt;
     * &lt;li&gt;{@link #withRecordSeparator(String) withRecordSeparator("\r\n")}&lt;/li&gt;
     * &lt;li&gt;{@link #withIgnoreEmptyLines(boolean) withIgnoreEmptyLines(false)}&lt;/li&gt;
     * &lt;li&gt;{@link #withAllowMissingColumnNames(boolean) withAllowMissingColumnNames(true)}&lt;/li&gt;
     * &lt;/ul&gt;
     * &lt;p&gt;
     * Note: this is currently like {@link #RFC4180} plus {@link #withAllowMissingColumnNames(boolean)
     * withAllowMissingColumnNames(true)}.
     * &lt;/p&gt;
     *
     * @see Predefined#Excel
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>CSVFormat</name></type> <name>EXCEL</name> <init>= <expr><call><name><name>DEFAULT</name><operator>.</operator><name>withIgnoreEmptyLines</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>withAllowMissingColumnNames</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Default Informix CSV UNLOAD format used by the {@code UNLOAD TO file_name} operation.
     *
     * &lt;p&gt;
     * This is a comma-delimited format with a LF character as the line separator. Values are not quoted and special
     * characters are escaped with {@code '\'}. The default NULL string is {@code "\\N"}.
     * &lt;/p&gt;
     *
     * &lt;p&gt;
     * Settings are:
     * &lt;/p&gt;
     * &lt;ul&gt;
     * &lt;li&gt;withDelimiter(',')&lt;/li&gt;
     * &lt;li&gt;withQuote("\"")&lt;/li&gt;
     * &lt;li&gt;withRecordSeparator('\n')&lt;/li&gt;
     * &lt;li&gt;withEscape('\\')&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * @see Predefined#MySQL
     * @see &lt;a href=
     *      "http://www.ibm.com/support/knowledgecenter/SSBJG3_2.5.0/com.ibm.gen_busug.doc/c_fgl_InOutSql_UNLOAD.htm"&gt;
     *      http://www.ibm.com/support/knowledgecenter/SSBJG3_2.5.0/com.ibm.gen_busug.doc/c_fgl_InOutSql_UNLOAD.htm&lt;/a&gt;
     * @since 1.3
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>CSVFormat</name></type> <name>INFORMIX_UNLOAD</name> <init>= <expr><call><name><name>DEFAULT</name><operator>.</operator><name>withDelimiter</name></name><argument_list>(<argument><expr><name>PIPE</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>withEscape</name><argument_list>(<argument><expr><name>BACKSLASH</name></expr></argument>)</argument_list></call>
            <operator>.</operator><call><name>withQuote</name><argument_list>(<argument><expr><name>DOUBLE_QUOTE_CHAR</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>withRecordSeparator</name><argument_list>(<argument><expr><name>LF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Default Informix CSV UNLOAD format used by the {@code UNLOAD TO file_name} operation (escaping is disabled.)
     *
     * &lt;p&gt;
     * This is a comma-delimited format with a LF character as the line separator. Values are not quoted and special
     * characters are escaped with {@code '\'}. The default NULL string is {@code "\\N"}.
     * &lt;/p&gt;
     *
     * &lt;p&gt;
     * Settings are:
     * &lt;/p&gt;
     * &lt;ul&gt;
     * &lt;li&gt;withDelimiter(',')&lt;/li&gt;
     * &lt;li&gt;withQuote("\"")&lt;/li&gt;
     * &lt;li&gt;withRecordSeparator('\n')&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * @see Predefined#MySQL
     * @see &lt;a href=
     *      "http://www.ibm.com/support/knowledgecenter/SSBJG3_2.5.0/com.ibm.gen_busug.doc/c_fgl_InOutSql_UNLOAD.htm"&gt;
     *      http://www.ibm.com/support/knowledgecenter/SSBJG3_2.5.0/com.ibm.gen_busug.doc/c_fgl_InOutSql_UNLOAD.htm&lt;/a&gt;
     * @since 1.3
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>CSVFormat</name></type> <name>INFORMIX_UNLOAD_CSV</name> <init>= <expr><call><name><name>DEFAULT</name><operator>.</operator><name>withDelimiter</name></name><argument_list>(<argument><expr><name>COMMA</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>withQuote</name><argument_list>(<argument><expr><name>DOUBLE_QUOTE_CHAR</name></expr></argument>)</argument_list></call>
            <operator>.</operator><call><name>withRecordSeparator</name><argument_list>(<argument><expr><name>LF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Default MySQL format used by the {@code SELECT INTO OUTFILE} and {@code LOAD DATA INFILE} operations.
     *
     * &lt;p&gt;
     * This is a tab-delimited format with a LF character as the line separator. Values are not quoted and special
     * characters are escaped with {@code '\'}. The default NULL string is {@code "\\N"}.
     * &lt;/p&gt;
     *
     * &lt;p&gt;
     * Settings are:
     * &lt;/p&gt;
     * &lt;ul&gt;
     * &lt;li&gt;withDelimiter('\t')&lt;/li&gt;
     * &lt;li&gt;withQuote(null)&lt;/li&gt;
     * &lt;li&gt;withRecordSeparator('\n')&lt;/li&gt;
     * &lt;li&gt;withIgnoreEmptyLines(false)&lt;/li&gt;
     * &lt;li&gt;withEscape('\\')&lt;/li&gt;
     * &lt;li&gt;withNullString("\\N")&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * @see Predefined#MySQL
     * @see &lt;a href="http://dev.mysql.com/doc/refman/5.1/en/load-data.html"&gt; http://dev.mysql.com/doc/refman/5.1/en/load
     *      -data.html&lt;/a&gt;
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>CSVFormat</name></type> <name>MYSQL</name> <init>= <expr><call><name><name>DEFAULT</name><operator>.</operator><name>withDelimiter</name></name><argument_list>(<argument><expr><name>TAB</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>withEscape</name><argument_list>(<argument><expr><name>BACKSLASH</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>withIgnoreEmptyLines</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call>
            <operator>.</operator><call><name>withQuote</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>withRecordSeparator</name><argument_list>(<argument><expr><name>LF</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>withNullString</name><argument_list>(<argument><expr><literal type="string">"\\N"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Comma separated format as defined by &lt;a href="http://tools.ietf.org/html/rfc4180"&gt;RFC 4180&lt;/a&gt;.
     *
     * &lt;p&gt;
     * Settings are:
     * &lt;/p&gt;
     * &lt;ul&gt;
     * &lt;li&gt;withDelimiter(',')&lt;/li&gt;
     * &lt;li&gt;withQuote('"')&lt;/li&gt;
     * &lt;li&gt;withRecordSeparator("\r\n")&lt;/li&gt;
     * &lt;li&gt;withIgnoreEmptyLines(false)&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * @see Predefined#RFC4180
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>CSVFormat</name></type> <name>RFC4180</name> <init>= <expr><call><name><name>DEFAULT</name><operator>.</operator><name>withIgnoreEmptyLines</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">1L</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Tab-delimited format.
     *
     * &lt;p&gt;
     * Settings are:
     * &lt;/p&gt;
     * &lt;ul&gt;
     * &lt;li&gt;withDelimiter('\t')&lt;/li&gt;
     * &lt;li&gt;withQuote('"')&lt;/li&gt;
     * &lt;li&gt;withRecordSeparator("\r\n")&lt;/li&gt;
     * &lt;li&gt;withIgnoreSurroundingSpaces(true)&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * @see Predefined#TDF
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>CSVFormat</name></type> <name>TDF</name> <init>= <expr><call><name><name>DEFAULT</name><operator>.</operator><name>withDelimiter</name></name><argument_list>(<argument><expr><name>TAB</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>withIgnoreSurroundingSpaces</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Returns true if the given character is a line break character.
     *
     * @param c
     *            the character to check
     *
     * @return true if &lt;code&gt;c&lt;/code&gt; is a line break character
     */</comment>
    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isLineBreak</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><name>c</name> <operator>==</operator> <name>LF</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>CR</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns true if the given character is a line break character.
     *
     * @param c
     *            the character to check, may be null
     *
     * @return true if &lt;code&gt;c&lt;/code&gt; is a line break character (and not null)
     */</comment>
    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isLineBreak</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Character</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><name>c</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name>isLineBreak</name><argument_list>(<argument><expr><call><name><name>c</name><operator>.</operator><name>charValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Creates a new CSV format with the specified delimiter.
     *
     * &lt;p&gt;
     * Use this method if you want to create a CSVFormat from scratch. All fields but the delimiter will be initialized
     * with null/false.
     * &lt;/p&gt;
     *
     * @param delimiter
     *            the char used for value separation, must not be a line break character
     * @return a new CSV format.
     * @throws IllegalArgumentException
     *             if the delimiter is a line break character
     *
     * @see #DEFAULT
     * @see #RFC4180
     * @see #MYSQL
     * @see #EXCEL
     * @see #TDF
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>CSVFormat</name></type> <name>newFormat</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>char</name></type> <name>delimiter</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>CSVFormat</name><argument_list>(<argument><expr><name>delimiter</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>,
                <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Gets one of the predefined formats from {@link Predefined}.
     *
     * @param format
     *            name
     * @return one of the predefined formats
     * @since 1.2
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>CSVFormat</name></type> <name>valueOf</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>format</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>Predefined</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getFormat</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>boolean</name></type> <name>allowMissingColumnNames</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Character</name></type> <name>commentMarker</name></decl>;</decl_stmt> <comment type="line">// null if commenting is disabled</comment>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>char</name></type> <name>delimiter</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Character</name></type> <name>escapeCharacter</name></decl>;</decl_stmt> <comment type="line">// null if escaping is disabled</comment>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>header</name></decl>;</decl_stmt> <comment type="line">// array of header column names</comment>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>headerComments</name></decl>;</decl_stmt> <comment type="line">// array of header comment lines</comment>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>boolean</name></type> <name>ignoreEmptyLines</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>boolean</name></type> <name>ignoreHeaderCase</name></decl>;</decl_stmt> <comment type="line">// should ignore header names case</comment>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>boolean</name></type> <name>ignoreSurroundingSpaces</name></decl>;</decl_stmt> <comment type="line">// Should leading/trailing spaces be ignored around values?</comment>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>nullString</name></decl>;</decl_stmt> <comment type="line">// the string to be used for null values</comment>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Character</name></type> <name>quoteCharacter</name></decl>;</decl_stmt> <comment type="line">// null if quoting is disabled</comment>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>QuoteMode</name></type> <name>quoteMode</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>recordSeparator</name></decl>;</decl_stmt> <comment type="line">// for outputs</comment>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>boolean</name></type> <name>skipHeaderRecord</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>boolean</name></type> <name>trailingDelimiter</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>boolean</name></type> <name>trim</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Creates a customized CSV format.
     *
     * @param delimiter
     *            the char used for value separation, must not be a line break character
     * @param quoteChar
     *            the Character used as value encapsulation marker, may be {@code null} to disable
     * @param quoteMode
     *            the quote mode
     * @param commentStart
     *            the Character used for comment identification, may be {@code null} to disable
     * @param escape
     *            the Character used to escape special characters in values, may be {@code null} to disable
     * @param ignoreSurroundingSpaces
     *            {@code true} when whitespaces enclosing values should be ignored
     * @param ignoreEmptyLines
     *            {@code true} when the parser should skip empty lines
     * @param recordSeparator
     *            the line separator to use for output
     * @param nullString
     *            the line separator to use for output
     * @param headerComments
     *            the comments to be printed by the Printer before the actual CSV data
     * @param header
     *            the header
     * @param skipHeaderRecord
     *            TODO
     * @param allowMissingColumnNames
     *            TODO
     * @param ignoreHeaderCase
     *            TODO
     * @param trim
     *            TODO
     * @param trailingDelimiter
     *            TODO
     * @throws IllegalArgumentException
     *             if the delimiter is a line break character
     */</comment>
    <constructor><specifier>private</specifier> <name>CSVFormat</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>char</name></type> <name>delimiter</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Character</name></type> <name>quoteChar</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>QuoteMode</name></type> <name>quoteMode</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name>Character</name></type> <name>commentStart</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Character</name></type> <name>escape</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>ignoreSurroundingSpaces</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>ignoreEmptyLines</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>recordSeparator</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>nullString</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name><name>Object</name><index>[]</index></name></type> <name>headerComments</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>header</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>skipHeaderRecord</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>allowMissingColumnNames</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>ignoreHeaderCase</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>trim</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>trailingDelimiter</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>delimiter</name></name> <operator>=</operator> <name>delimiter</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>quoteCharacter</name></name> <operator>=</operator> <name>quoteChar</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>quoteMode</name></name> <operator>=</operator> <name>quoteMode</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>commentMarker</name></name> <operator>=</operator> <name>commentStart</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>escapeCharacter</name></name> <operator>=</operator> <name>escape</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ignoreSurroundingSpaces</name></name> <operator>=</operator> <name>ignoreSurroundingSpaces</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>allowMissingColumnNames</name></name> <operator>=</operator> <name>allowMissingColumnNames</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ignoreEmptyLines</name></name> <operator>=</operator> <name>ignoreEmptyLines</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>recordSeparator</name></name> <operator>=</operator> <name>recordSeparator</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>nullString</name></name> <operator>=</operator> <name>nullString</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>headerComments</name></name> <operator>=</operator> <call><name>toStringArray</name><argument_list>(<argument><expr><name>headerComments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>header</name></name> <operator>=</operator> <ternary><condition><expr><name>header</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>header</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>skipHeaderRecord</name></name> <operator>=</operator> <name>skipHeaderRecord</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ignoreHeaderCase</name></name> <operator>=</operator> <name>ignoreHeaderCase</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>trailingDelimiter</name></name> <operator>=</operator> <name>trailingDelimiter</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>trim</name></name> <operator>=</operator> <name>trim</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>validate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Object</name></type> <name>obj</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>obj</name></expr>)</condition><then> <block>{
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>obj</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>getClass</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>obj</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>CSVFormat</name></type> <name>other</name> <init>= <expr><operator>(</operator><name>CSVFormat</name><operator>)</operator> <name>obj</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>delimiter</name> <operator>!=</operator> <name><name>other</name><operator>.</operator><name>delimiter</name></name></expr>)</condition><then> <block>{
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>quoteMode</name> <operator>!=</operator> <name><name>other</name><operator>.</operator><name>quoteMode</name></name></expr>)</condition><then> <block>{
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>quoteCharacter</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>other</name><operator>.</operator><name>quoteCharacter</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            }</block></then></if>
        }</block></then> <elseif>else <if>if <condition>(<expr><operator>!</operator><call><name><name>quoteCharacter</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>quoteCharacter</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></then></if></elseif></if>
        <if>if <condition>(<expr><name>commentMarker</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>other</name><operator>.</operator><name>commentMarker</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            }</block></then></if>
        }</block></then> <elseif>else <if>if <condition>(<expr><operator>!</operator><call><name><name>commentMarker</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>commentMarker</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></then></if></elseif></if>
        <if>if <condition>(<expr><name>escapeCharacter</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>other</name><operator>.</operator><name>escapeCharacter</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            }</block></then></if>
        }</block></then> <elseif>else <if>if <condition>(<expr><operator>!</operator><call><name><name>escapeCharacter</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>escapeCharacter</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></then></if></elseif></if>
        <if>if <condition>(<expr><name>nullString</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>other</name><operator>.</operator><name>nullString</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            }</block></then></if>
        }</block></then> <elseif>else <if>if <condition>(<expr><operator>!</operator><call><name><name>nullString</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>nullString</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></then></if></elseif></if>
        <if>if <condition>(<expr><operator>!</operator><call><name><name>Arrays</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>ignoreSurroundingSpaces</name> <operator>!=</operator> <name><name>other</name><operator>.</operator><name>ignoreSurroundingSpaces</name></name></expr>)</condition><then> <block>{
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>ignoreEmptyLines</name> <operator>!=</operator> <name><name>other</name><operator>.</operator><name>ignoreEmptyLines</name></name></expr>)</condition><then> <block>{
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>skipHeaderRecord</name> <operator>!=</operator> <name><name>other</name><operator>.</operator><name>skipHeaderRecord</name></name></expr>)</condition><then> <block>{
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>recordSeparator</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>other</name><operator>.</operator><name>recordSeparator</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            }</block></then></if>
        }</block></then> <elseif>else <if>if <condition>(<expr><operator>!</operator><call><name><name>recordSeparator</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>recordSeparator</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></then></if></elseif></if>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Formats the specified values.
     *
     * @param values
     *            the values to format
     * @return the formatted values
     */</comment>
    <function><specifier>public</specifier> <type><name>String</name></type> <name>format</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Object</name><modifier>...</modifier></type> <name>values</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>StringWriter</name></type> <name>out</name> <init>= <expr><operator>new</operator> <call><name>StringWriter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><operator>new</operator> <call><name>CSVPrinter</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>printRecord</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>out</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <comment type="line">// should not happen because a StringWriter does not do IO.</comment>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Specifies whether missing column names are allowed when parsing the header line.
     *
     * @return {@code true} if missing column names are allowed when parsing the header line, {@code false} to throw an
     *         {@link IllegalArgumentException}.
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>getAllowMissingColumnNames</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>allowMissingColumnNames</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the character marking the start of a line comment.
     *
     * @return the comment start marker, may be {@code null}
     */</comment>
    <function><specifier>public</specifier> <type><name>Character</name></type> <name>getCommentMarker</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>commentMarker</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the character delimiting the values (typically ';', ',' or '\t').
     *
     * @return the delimiter character
     */</comment>
    <function><specifier>public</specifier> <type><name>char</name></type> <name>getDelimiter</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>delimiter</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the escape character.
     *
     * @return the escape character, may be {@code null}
     */</comment>
    <function><specifier>public</specifier> <type><name>Character</name></type> <name>getEscapeCharacter</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>escapeCharacter</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a copy of the header array.
     *
     * @return a copy of the header array; {@code null} if disabled, the empty array if to be read from the file
     */</comment>
    <function><specifier>public</specifier> <type><name><name>String</name><index>[]</index></name></type> <name>getHeader</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><ternary><condition><expr><name>header</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>header</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a copy of the header comment array.
     *
     * @return a copy of the header comment array; {@code null} if disabled.
     */</comment>
    <function><specifier>public</specifier> <type><name><name>String</name><index>[]</index></name></type> <name>getHeaderComments</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><ternary><condition><expr><name>headerComments</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>headerComments</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Specifies whether empty lines between records are ignored when parsing input.
     *
     * @return {@code true} if empty lines between records are ignored, {@code false} if they are turned into empty
     *         records.
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>getIgnoreEmptyLines</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>ignoreEmptyLines</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Specifies whether header names will be accessed ignoring case.
     *
     * @return {@code true} if header names cases are ignored, {@code false} if they are case sensitive.
     * @since 1.3
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>getIgnoreHeaderCase</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>ignoreHeaderCase</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Specifies whether spaces around values are ignored when parsing input.
     *
     * @return {@code true} if spaces around values are ignored, {@code false} if they are treated as part of the value.
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>getIgnoreSurroundingSpaces</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>ignoreSurroundingSpaces</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Gets the String to convert to and from {@code null}.
     * &lt;ul&gt;
     * &lt;li&gt;&lt;strong&gt;Reading:&lt;/strong&gt; Converts strings equal to the given {@code nullString} to {@code null} when reading
     * records.&lt;/li&gt;
     * &lt;li&gt;&lt;strong&gt;Writing:&lt;/strong&gt; Writes {@code null} as the given {@code nullString} when writing records.&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * @return the String to convert to and from {@code null}. No substitution occurs if {@code null}
     */</comment>
    <function><specifier>public</specifier> <type><name>String</name></type> <name>getNullString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>nullString</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the character used to encapsulate values containing special characters.
     *
     * @return the quoteChar character, may be {@code null}
     */</comment>
    <function><specifier>public</specifier> <type><name>Character</name></type> <name>getQuoteCharacter</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>quoteCharacter</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the quote policy output fields.
     *
     * @return the quote policy
     */</comment>
    <function><specifier>public</specifier> <type><name>QuoteMode</name></type> <name>getQuoteMode</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>quoteMode</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns the record separator delimiting output records.
     *
     * @return the record separator
     */</comment>
    <function><specifier>public</specifier> <type><name>String</name></type> <name>getRecordSeparator</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>recordSeparator</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns whether to skip the header record.
     *
     * @return whether to skip the header record.
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>getSkipHeaderRecord</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>skipHeaderRecord</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns whether to add a trailing delimiter.
     *
     * @return whether to add a trailing delimiter.
     * @since 1.3
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>getTrailingDelimiter</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>trailingDelimiter</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns whether to trim leading and trailing blanks.
     *
     * @return whether to trim leading and trailing blanks.
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>getTrim</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>trim</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>prime</name> <init>= <expr><literal type="number">31</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>result</name> <operator>=</operator> <name>prime</name> <operator>*</operator> <name>result</name> <operator>+</operator> <name>delimiter</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <name>prime</name> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>quoteMode</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>quoteMode</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <name>prime</name> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>quoteCharacter</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>quoteCharacter</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <name>prime</name> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>commentMarker</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>commentMarker</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <name>prime</name> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>escapeCharacter</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>escapeCharacter</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <name>prime</name> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>nullString</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>nullString</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <name>prime</name> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>ignoreSurroundingSpaces</name></expr> ?</condition><then> <expr><literal type="number">1231</literal></expr> </then><else>: <expr><literal type="number">1237</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <name>prime</name> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>ignoreHeaderCase</name></expr> ?</condition><then> <expr><literal type="number">1231</literal></expr> </then><else>: <expr><literal type="number">1237</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <name>prime</name> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>ignoreEmptyLines</name></expr> ?</condition><then> <expr><literal type="number">1231</literal></expr> </then><else>: <expr><literal type="number">1237</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <name>prime</name> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>skipHeaderRecord</name></expr> ?</condition><then> <expr><literal type="number">1231</literal></expr> </then><else>: <expr><literal type="number">1237</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <name>prime</name> <operator>*</operator> <name>result</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>recordSeparator</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>recordSeparator</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <name>prime</name> <operator>*</operator> <name>result</name> <operator>+</operator> <call><name><name>Arrays</name><operator>.</operator><name>hashCode</name></name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Specifies whether comments are supported by this format.
     *
     * Note that the comment introducer character is only recognized at the start of a line.
     *
     * @return {@code true} is comments are supported, {@code false} otherwise
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isCommentMarkerSet</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>commentMarker</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns whether escape are being processed.
     *
     * @return {@code true} if escapes are processed
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isEscapeCharacterSet</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>escapeCharacter</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns whether a nullString has been defined.
     *
     * @return {@code true} if a nullString is defined
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isNullStringSet</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>nullString</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns whether a quoteChar has been defined.
     *
     * @return {@code true} if a quoteChar is defined
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isQuoteCharacterSet</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>quoteCharacter</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Parses the specified content.
     *
     * &lt;p&gt;
     * See also the various static parse methods on {@link CSVParser}.
     * &lt;/p&gt;
     *
     * @param in
     *            the input stream
     * @return a parser over a stream of {@link CSVRecord}s.
     * @throws IOException
     *             If an I/O error occurs
     */</comment>
    <function><specifier>public</specifier> <type><name>CSVParser</name></type> <name>parse</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Reader</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <return>return <expr><operator>new</operator> <call><name>CSVParser</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Prints to the specified output.
     *
     * &lt;p&gt;
     * See also {@link CSVPrinter}.
     * &lt;/p&gt;
     *
     * @param out
     *            the output
     * @return a printer to an output
     * @throws IOException
     *             thrown if the optional header cannot be printed.
     */</comment>
    <function><specifier>public</specifier> <type><name>CSVPrinter</name></type> <name>print</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Appendable</name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <return>return <expr><operator>new</operator> <call><name>CSVPrinter</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Prints the {@code value} as the next value on the line to {@code out}. The value will be escaped or encapsulated
     * as needed. Useful when one wants to avoid creating CSVPrinters.
     *
     * @param value
     *            value to output.
     * @param out
     *            where to print the value
     * @param newRecord
     *            if this a new record
     * @throws IOException
     *             If an I/O error occurs
     * @since 1.4
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Object</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Appendable</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>newRecord</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <comment type="line">// null values are considered empty</comment>
        <comment type="line">// Only call CharSequence.toString() if you have to, helps GC-free use cases.</comment>
        <decl_stmt><decl><type><name>CharSequence</name></type> <name>charSequence</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>charSequence</name> <operator>=</operator> <ternary><condition><expr><name>nullString</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>Constants</name><operator>.</operator><name>EMPTY</name></name></expr> </then><else>: <expr><name>nullString</name></expr></else></ternary></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>charSequence</name> <operator>=</operator> <ternary><condition><expr><name>value</name> <operator>instanceof</operator> <name>CharSequence</name></expr> ?</condition><then> <expr><operator>(</operator><name>CharSequence</name><operator>)</operator> <name>value</name></expr> </then><else>: <expr><call><name><name>value</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>charSequence</name> <operator>=</operator> <ternary><condition><expr><call><name>getTrim</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name>trim</name><argument_list>(<argument><expr><name>charSequence</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>charSequence</name></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>charSequence</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>charSequence</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>newRecord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Object</name></type> <name>object</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>len</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name>Appendable</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>newRecord</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><operator>!</operator><name>newRecord</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>getDelimiter</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>object</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if <condition>(<expr><call><name>isQuoteCharacterSet</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <comment type="line">// the original object is needed so can check for Number</comment>
            <expr_stmt><expr><call><name>printAndQuote</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>newRecord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name>isEscapeCharacterSet</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>printAndEscape</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <else>else <block>{
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <comment type="block">/*
     * Note: must only be called if escaping is enabled, otherwise will generate NPE
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>printAndEscape</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Appendable</name></type> <name>out</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><name>offset</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><name>offset</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>end</name> <init>= <expr><name>offset</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>char</name></type> <name>delim</name> <init>= <expr><call><name>getDelimiter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>char</name></type> <name>escape</name> <init>= <expr><call><name>getEscapeCharacter</name><argument_list>()</argument_list></call><operator>.</operator><call><name>charValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name><name>value</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>CR</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>LF</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>delim</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>escape</name></expr>)</condition><then> <block>{
                <comment type="line">// write out segment up until this char</comment>
                <if>if <condition>(<expr><name>pos</name> <operator>&gt;</operator> <name>start</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>LF</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt>
                }</block></then> <elseif>else <if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>CR</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'r'</literal></expr>;</expr_stmt>
                }</block></then></if></elseif></if>

                <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>escape</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>start</name> <operator>=</operator> <name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="line">// start on the current char after this one</comment>
            }</block></then></if>

            <expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
        }</block></while>

        <comment type="line">// write last segment</comment>
        <if>if <condition>(<expr><name>pos</name> <operator>&gt;</operator> <name>start</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="block">/*
     * Note: must only be called if quoting is enabled, otherwise will generate NPE
     */</comment>
    <comment type="line">// the original object is needed so can check for Number</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>printAndQuote</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Object</name></type> <name>object</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>len</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name>Appendable</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>newRecord</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>quote</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><name>offset</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><name>offset</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>end</name> <init>= <expr><name>offset</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>char</name></type> <name>delimChar</name> <init>= <expr><call><name>getDelimiter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>char</name></type> <name>quoteChar</name> <init>= <expr><call><name>getQuoteCharacter</name><argument_list>()</argument_list></call><operator>.</operator><call><name>charValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>QuoteMode</name></type> <name>quoteModePolicy</name> <init>= <expr><call><name>getQuoteMode</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>quoteModePolicy</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>quoteModePolicy</name> <operator>=</operator> <name><name>QuoteMode</name><operator>.</operator><name>MINIMAL</name></name></expr>;</expr_stmt>
        }</block></then></if>
        <switch>switch <condition>(<expr><name>quoteModePolicy</name></expr>)</condition> <block>{
        <case>case <expr><name>ALL</name></expr>:</case>
            <expr_stmt><expr><name>quote</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>NON_NUMERIC</name></expr>:</case>
            <expr_stmt><expr><name>quote</name> <operator>=</operator> <operator>!</operator><operator>(</operator><name>object</name> <operator>instanceof</operator> <name>Number</name><operator>)</operator></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>NONE</name></expr>:</case>
            <comment type="line">// Use the existing escaping code</comment>
            <expr_stmt><expr><call><name>printAndEscape</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        <case>case <expr><name>MINIMAL</name></expr>:</case>
            <if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <comment type="line">// always quote an empty token that is the first</comment>
                <comment type="line">// on the line, as it may be the only thing on the</comment>
                <comment type="line">// line. If it were not quoted in that case,</comment>
                <comment type="line">// an empty line has no tokens.</comment>
                <if>if <condition>(<expr><name>newRecord</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>quote</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then> <else>else <block>{
                <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name><name>value</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// TODO where did this rule come from?</comment>
                <if>if <condition>(<expr><name>newRecord</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name> <argument_list type="generic">&lt; <argument><literal type="char">'0'</literal> <operator>||</operator> <name>c</name></argument> &gt;</argument_list></name> <literal type="char">'9'</literal> <operator>&amp;&amp;</operator> <name><name>c</name> <argument_list type="generic">&lt; <argument><literal type="char">'A'</literal> <operator>||</operator> <name>c</name></argument> &gt;</argument_list></name> <literal type="char">'Z'</literal> <operator>&amp;&amp;</operator> <name><name>c</name> <argument_list type="generic">&lt; <argument><literal type="char">'a'</literal> <operator>||</operator> <name>c</name></argument> &gt;</argument_list></name> <literal type="char">'z'</literal><operator>)</operator></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>quote</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                }</block></then> <elseif>else <if>if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <name>COMMENT</name></expr>)</condition><then> <block>{
                    <comment type="line">// Some other chars at the start of a value caused the parser to fail, so for now</comment>
                    <comment type="line">// encapsulate if we start in anything less than '#'. We are being conservative</comment>
                    <comment type="line">// by including the default comment char too.</comment>
                    <expr_stmt><expr><name>quote</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                }</block></then></if></elseif> <else>else <block>{
                    <while>while <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{
                        <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>value</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>LF</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>CR</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>quoteChar</name> <operator>||</operator> <name>c</name> <operator>==</operator> <name>delimChar</name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>quote</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                            <break>break;</break>
                        }</block></then></if>
                        <expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
                    }</block></while>

                    <if>if <condition>(<expr><operator>!</operator><name>quote</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>pos</name> <operator>=</operator> <name>end</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>value</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="line">// Some other chars at the end caused the parser to fail, so for now</comment>
                        <comment type="line">// encapsulate if we end in anything less than ' '</comment>
                        <if>if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <name>SP</name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>quote</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></then></if>
                }</block></else></if>
            }</block></else></if>

            <if>if <condition>(<expr><operator>!</operator><name>quote</name></expr>)</condition><then> <block>{
                <comment type="line">// no encapsulation needed - write out the original value</comment>
                <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            }</block></then></if>
            <break>break;</break>
        <default>default:</default>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Unexpected Quote value: "</literal> <operator>+</operator> <name>quoteModePolicy</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></switch>

        <if>if <condition>(<expr><operator>!</operator><name>quote</name></expr>)</condition><then> <block>{
            <comment type="line">// no encapsulation needed - write out the original value</comment>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>

        <comment type="line">// we hit something that needed encapsulation</comment>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>quoteChar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Pick up where we left off: pos should be positioned on the first character that caused</comment>
        <comment type="line">// the need for encapsulation.</comment>
        <while>while <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>char</name></type> <name>c</name> <init>= <expr><call><name><name>value</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>quoteChar</name></expr>)</condition><then> <block>{
                <comment type="line">// write out the chunk up until this point</comment>

                <comment type="line">// add 1 to the length to write out the encapsulator also</comment>
                <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// put the next starting position on the encapsulator so we will</comment>
                <comment type="line">// write it out again with the next string (effectively doubling it)</comment>
                <expr_stmt><expr><name>start</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
        }</block></while>

        <comment type="line">// write the last segment</comment>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>quoteChar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Outputs the record separator.
     *
     * @param out
     *            where to write
     * @throws IOException
     *             If an I/O error occurs
     * @since 1.4
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>println</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Appendable</name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name>getTrailingDelimiter</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>getDelimiter</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>recordSeparator</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>recordSeparator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Prints the given {@code values} to {@code out} as a single record of delimiter separated values followed by the
     * record separator.
     *
     * &lt;p&gt;
     * The values will be quoted if needed. Quotes and new-line characters will be escaped. This method adds the record
     * separator to the output after printing the record, so there is no need to call {@link #println(Appendable)}.
     * &lt;/p&gt;
     *
     * @param out
     *            where to write
     * @param values
     *            values to output.
     * @throws IOException
     *             If an I/O error occurs
     * @since 1.4
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>printRecord</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Appendable</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Object</name><modifier>...</modifier></type> <name>values</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>values</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"Delimiter=&lt;"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>delimiter</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>isEscapeCharacterSet</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"Escape=&lt;"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>escapeCharacter</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>isQuoteCharacterSet</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"QuoteChar=&lt;"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>quoteCharacter</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>isCommentMarkerSet</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"CommentStart=&lt;"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>commentMarker</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>isNullStringSet</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"NullString=&lt;"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>nullString</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>recordSeparator</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"RecordSeparator=&lt;"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>recordSeparator</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>getIgnoreEmptyLines</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" EmptyLines:ignored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>getIgnoreSurroundingSpaces</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" SurroundingSpaces:ignored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>getIgnoreHeaderCase</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" IgnoreHeaderCase:ignored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" SkipHeaderRecord:"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>skipHeaderRecord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>headerComments</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"HeaderComments:"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>headerComments</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>header</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"Header:"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name><name>String</name><index>[]</index></name></type> <name>toStringArray</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>Object</name><index>[]</index></name></type> <name>values</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>values</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>strings</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[<expr><name><name>values</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>values</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Object</name></type> <name>value</name> <init>= <expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>strings</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>value</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>strings</name></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>CharSequence</name></type> <name>trim</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>charSequence</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>charSequence</name> <operator>instanceof</operator> <name>String</name></expr>)</condition><then> <block>{
            <return>return <expr><operator>(</operator><operator>(</operator><name>String</name><operator>)</operator> <name>charSequence</name><operator>)</operator><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>count</name> <init>= <expr><call><name><name>charSequence</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name>count</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <call><name><name>charSequence</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>SP</name></expr>)</condition> <block>{
            <expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
        }</block></while>
        <while>while <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <call><name><name>charSequence</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>SP</name></expr>)</condition> <block>{
            <expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
        }</block></while>
        <return>return <expr><ternary><condition><expr><name>pos</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>len</name> <operator>&lt;</operator> <name>count</name></expr> ?</condition><then> <expr><call><name><name>charSequence</name><operator>.</operator><name>subSequence</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>charSequence</name></expr></else></ternary></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Verifies the consistency of the parameters and throws an IllegalArgumentException if necessary.
     *
     * @throws IllegalArgumentException
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>validate</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IllegalArgumentException</name></expr></argument></throws> <block>{
        <if>if <condition>(<expr><call><name>isLineBreak</name><argument_list>(<argument><expr><name>delimiter</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"The delimiter cannot be a line break"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><name>quoteCharacter</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>delimiter</name> <operator>==</operator> <call><name><name>quoteCharacter</name><operator>.</operator><name>charValue</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(
                    <argument><expr><literal type="string">"The quoteChar character and the delimiter cannot be the same ('"</literal> <operator>+</operator> <name>quoteCharacter</name> <operator>+</operator> <literal type="string">"')"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><name>escapeCharacter</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>delimiter</name> <operator>==</operator> <call><name><name>escapeCharacter</name><operator>.</operator><name>charValue</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(
                    <argument><expr><literal type="string">"The escape character and the delimiter cannot be the same ('"</literal> <operator>+</operator> <name>escapeCharacter</name> <operator>+</operator> <literal type="string">"')"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><name>commentMarker</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>delimiter</name> <operator>==</operator> <call><name><name>commentMarker</name><operator>.</operator><name>charValue</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(
                    <argument><expr><literal type="string">"The comment start character and the delimiter cannot be the same ('"</literal> <operator>+</operator> <name>commentMarker</name> <operator>+</operator> <literal type="string">"')"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><name>quoteCharacter</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>quoteCharacter</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>commentMarker</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(
                    <argument><expr><literal type="string">"The comment start character and the quoteChar cannot be the same ('"</literal> <operator>+</operator> <name>commentMarker</name> <operator>+</operator> <literal type="string">"')"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><name>escapeCharacter</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>escapeCharacter</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>commentMarker</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(
                    <argument><expr><literal type="string">"The comment start and the escape character cannot be the same ('"</literal> <operator>+</operator> <name>commentMarker</name> <operator>+</operator> <literal type="string">"')"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><name>escapeCharacter</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>quoteMode</name> <operator>==</operator> <name><name>QuoteMode</name><operator>.</operator><name>NONE</name></name></expr>)</condition><then> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"No quotes mode set but no escape character is set"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <comment type="line">// validate header</comment>
        <if>if <condition>(<expr><name>header</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>dupCheck</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><specifier>final</specifier> <name>String</name></type> <name>hdr</name> <range>: <expr><name>header</name></expr></range></decl></init>)</control> <block>{
                <if>if <condition>(<expr><operator>!</operator><call><name><name>dupCheck</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>hdr</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(
                            <argument><expr><literal type="string">"The header contains a duplicate entry: '"</literal> <operator>+</operator> <name>hdr</name> <operator>+</operator> <literal type="string">"' in "</literal> <operator>+</operator> <call><name><name>Arrays</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
                }</block></then></if>
            }</block></for>
        }</block></then></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a new {@code CSVFormat} with the missing column names behavior of the format set to {@code true}
     *
     * @return A new CSVFormat that is equal to this but with the specified missing column names behavior.
     * @see #withAllowMissingColumnNames(boolean)
     * @since 1.1
     */</comment>
    <function><specifier>public</specifier> <type><name>CSVFormat</name></type> <name>withAllowMissingColumnNames</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>withAllowMissingColumnNames</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a new {@code CSVFormat} with the missing column names behavior of the format set to the given value.
     *
     * @param allowMissingColumnNames
     *            the missing column names behavior, {@code true} to allow missing column names in the header line,
     *            {@code false} to cause an {@link IllegalArgumentException} to be thrown.
     * @return A new CSVFormat that is equal to this but with the specified missing column names behavior.
     */</comment>
    <function><specifier>public</specifier> <type><name>CSVFormat</name></type> <name>withAllowMissingColumnNames</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>allowMissingColumnNames</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>CSVFormat</name><argument_list>(<argument><expr><name>delimiter</name></expr></argument>, <argument><expr><name>quoteCharacter</name></expr></argument>, <argument><expr><name>quoteMode</name></expr></argument>, <argument><expr><name>commentMarker</name></expr></argument>, <argument><expr><name>escapeCharacter</name></expr></argument>,
                <argument><expr><name>ignoreSurroundingSpaces</name></expr></argument>, <argument><expr><name>ignoreEmptyLines</name></expr></argument>, <argument><expr><name>recordSeparator</name></expr></argument>, <argument><expr><name>nullString</name></expr></argument>, <argument><expr><name>headerComments</name></expr></argument>, <argument><expr><name>header</name></expr></argument>,
                <argument><expr><name>skipHeaderRecord</name></expr></argument>, <argument><expr><name>allowMissingColumnNames</name></expr></argument>, <argument><expr><name>ignoreHeaderCase</name></expr></argument>, <argument><expr><name>trim</name></expr></argument>, <argument><expr><name>trailingDelimiter</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a new {@code CSVFormat} with the comment start marker of the format set to the specified character.
     *
     * Note that the comment start character is only recognized at the start of a line.
     *
     * @param commentMarker
     *            the comment start marker
     * @return A new CSVFormat that is equal to this one but with the specified character as the comment start marker
     * @throws IllegalArgumentException
     *             thrown if the specified character is a line break
     */</comment>
    <function><specifier>public</specifier> <type><name>CSVFormat</name></type> <name>withCommentMarker</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>char</name></type> <name>commentMarker</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name>withCommentMarker</name><argument_list>(<argument><expr><call><name><name>Character</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>commentMarker</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a new {@code CSVFormat} with the comment start marker of the format set to the specified character.
     *
     * Note that the comment start character is only recognized at the start of a line.
     *
     * @param commentMarker
     *            the comment start marker, use {@code null} to disable
     * @return A new CSVFormat that is equal to this one but with the specified character as the comment start marker
     * @throws IllegalArgumentException
     *             thrown if the specified character is a line break
     */</comment>
    <function><specifier>public</specifier> <type><name>CSVFormat</name></type> <name>withCommentMarker</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Character</name></type> <name>commentMarker</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isLineBreak</name><argument_list>(<argument><expr><name>commentMarker</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"The comment start marker character cannot be a line break"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><operator>new</operator> <call><name>CSVFormat</name><argument_list>(<argument><expr><name>delimiter</name></expr></argument>, <argument><expr><name>quoteCharacter</name></expr></argument>, <argument><expr><name>quoteMode</name></expr></argument>, <argument><expr><name>commentMarker</name></expr></argument>, <argument><expr><name>escapeCharacter</name></expr></argument>,
                <argument><expr><name>ignoreSurroundingSpaces</name></expr></argument>, <argument><expr><name>ignoreEmptyLines</name></expr></argument>, <argument><expr><name>recordSeparator</name></expr></argument>, <argument><expr><name>nullString</name></expr></argument>, <argument><expr><name>headerComments</name></expr></argument>, <argument><expr><name>header</name></expr></argument>,
                <argument><expr><name>skipHeaderRecord</name></expr></argument>, <argument><expr><name>allowMissingColumnNames</name></expr></argument>, <argument><expr><name>ignoreHeaderCase</name></expr></argument>, <argument><expr><name>trim</name></expr></argument>, <argument><expr><name>trailingDelimiter</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a new {@code CSVFormat} with the delimiter of the format set to the specified character.
     *
     * @param delimiter
     *            the delimiter character
     * @return A new CSVFormat that is equal to this with the specified character as delimiter
     * @throws IllegalArgumentException
     *             thrown if the specified character is a line break
     */</comment>
    <function><specifier>public</specifier> <type><name>CSVFormat</name></type> <name>withDelimiter</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>char</name></type> <name>delimiter</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isLineBreak</name><argument_list>(<argument><expr><name>delimiter</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"The delimiter cannot be a line break"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><operator>new</operator> <call><name>CSVFormat</name><argument_list>(<argument><expr><name>delimiter</name></expr></argument>, <argument><expr><name>quoteCharacter</name></expr></argument>, <argument><expr><name>quoteMode</name></expr></argument>, <argument><expr><name>commentMarker</name></expr></argument>, <argument><expr><name>escapeCharacter</name></expr></argument>,
                <argument><expr><name>ignoreSurroundingSpaces</name></expr></argument>, <argument><expr><name>ignoreEmptyLines</name></expr></argument>, <argument><expr><name>recordSeparator</name></expr></argument>, <argument><expr><name>nullString</name></expr></argument>, <argument><expr><name>headerComments</name></expr></argument>, <argument><expr><name>header</name></expr></argument>,
                <argument><expr><name>skipHeaderRecord</name></expr></argument>, <argument><expr><name>allowMissingColumnNames</name></expr></argument>, <argument><expr><name>ignoreHeaderCase</name></expr></argument>, <argument><expr><name>trim</name></expr></argument>, <argument><expr><name>trailingDelimiter</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a new {@code CSVFormat} with the escape character of the format set to the specified character.
     *
     * @param escape
     *            the escape character
     * @return A new CSVFormat that is equal to his but with the specified character as the escape character
     * @throws IllegalArgumentException
     *             thrown if the specified character is a line break
     */</comment>
    <function><specifier>public</specifier> <type><name>CSVFormat</name></type> <name>withEscape</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>char</name></type> <name>escape</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name>withEscape</name><argument_list>(<argument><expr><call><name><name>Character</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>escape</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a new {@code CSVFormat} with the escape character of the format set to the specified character.
     *
     * @param escape
     *            the escape character, use {@code null} to disable
     * @return A new CSVFormat that is equal to this but with the specified character as the escape character
     * @throws IllegalArgumentException
     *             thrown if the specified character is a line break
     */</comment>
    <function><specifier>public</specifier> <type><name>CSVFormat</name></type> <name>withEscape</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Character</name></type> <name>escape</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isLineBreak</name><argument_list>(<argument><expr><name>escape</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"The escape character cannot be a line break"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><operator>new</operator> <call><name>CSVFormat</name><argument_list>(<argument><expr><name>delimiter</name></expr></argument>, <argument><expr><name>quoteCharacter</name></expr></argument>, <argument><expr><name>quoteMode</name></expr></argument>, <argument><expr><name>commentMarker</name></expr></argument>, <argument><expr><name>escape</name></expr></argument>, <argument><expr><name>ignoreSurroundingSpaces</name></expr></argument>,
                <argument><expr><name>ignoreEmptyLines</name></expr></argument>, <argument><expr><name>recordSeparator</name></expr></argument>, <argument><expr><name>nullString</name></expr></argument>, <argument><expr><name>headerComments</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>skipHeaderRecord</name></expr></argument>,
                <argument><expr><name>allowMissingColumnNames</name></expr></argument>, <argument><expr><name>ignoreHeaderCase</name></expr></argument>, <argument><expr><name>trim</name></expr></argument>, <argument><expr><name>trailingDelimiter</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a new {@code CSVFormat} using the first record as header.
     *
     * &lt;p&gt;
     * Calling this method is equivalent to calling:
     * &lt;/p&gt;
     *
     * &lt;pre&gt;
     * CSVFormat format = aFormat.withHeader().withSkipHeaderRecord();
     * &lt;/pre&gt;
     *
     * @return A new CSVFormat that is equal to this but using the first record as header.
     * @see #withSkipHeaderRecord(boolean)
     * @see #withHeader(String...)
     * @since 1.3
     */</comment>
    <function><specifier>public</specifier> <type><name>CSVFormat</name></type> <name>withFirstRecordAsHeader</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>withHeader</name><argument_list>()</argument_list></call><operator>.</operator><call><name>withSkipHeaderRecord</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a new {@code CSVFormat} with the header of the format defined by the enum class.
     *
     * &lt;p&gt;
     * Example:
     * &lt;/p&gt;
     * &lt;pre&gt;
     * public enum Header {
     *     Name, Email, Phone
     * }
     *
     * CSVFormat format = aformat.withHeader(Header.class);
     * &lt;/pre&gt;
     * &lt;p&gt;
     * The header is also used by the {@link CSVPrinter}.
     * &lt;/p&gt;
     *
     * @param headerEnum
     *            the enum defining the header, {@code null} if disabled, empty if parsed automatically, user specified
     *            otherwise.
     *
     * @return A new CSVFormat that is equal to this but with the specified header
     * @see #withHeader(String...)
     * @see #withSkipHeaderRecord(boolean)
     * @since 1.3
     */</comment>
    <function><specifier>public</specifier> <type><name>CSVFormat</name></type> <name>withHeader</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name><name>Enum</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></extends></argument>&gt;</argument_list></name></type> <name>headerEnum</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>header</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>headerEnum</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name><name><name>Enum</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><index>[]</index></name></type> <name>enumValues</name> <init>= <expr><call><name><name>headerEnum</name><operator>.</operator><name>getEnumConstants</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>header</name> <operator>=</operator> <operator>new</operator> <name><name>String</name><index>[<expr><name><name>enumValues</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>enumValues</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
                <expr_stmt><expr><name><name>header</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>enumValues</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>name</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>
        <return>return <expr><call><name>withHeader</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a new {@code CSVFormat} with the header of the format set from the result set metadata. The header can
     * either be parsed automatically from the input file with:
     *
     * &lt;pre&gt;
     * CSVFormat format = aformat.withHeader();
     * &lt;/pre&gt;
     *
     * or specified manually with:
     *
     * &lt;pre&gt;
     * CSVFormat format = aformat.withHeader(resultSet);
     * &lt;/pre&gt;
     * &lt;p&gt;
     * The header is also used by the {@link CSVPrinter}.
     * &lt;/p&gt;
     *
     * @param resultSet
     *            the resultSet for the header, {@code null} if disabled, empty if parsed automatically, user specified
     *            otherwise.
     *
     * @return A new CSVFormat that is equal to this but with the specified header
     * @throws SQLException
     *             SQLException if a database access error occurs or this method is called on a closed result set.
     * @since 1.1
     */</comment>
    <function><specifier>public</specifier> <type><name>CSVFormat</name></type> <name>withHeader</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ResultSet</name></type> <name>resultSet</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
        <return>return <expr><call><name>withHeader</name><argument_list>(<argument><expr><ternary><condition><expr><name>resultSet</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>resultSet</name><operator>.</operator><name>getMetaData</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a new {@code CSVFormat} with the header of the format set from the result set metadata. The header can
     * either be parsed automatically from the input file with:
     *
     * &lt;pre&gt;
     * CSVFormat format = aformat.withHeader();
     * &lt;/pre&gt;
     *
     * or specified manually with:
     *
     * &lt;pre&gt;
     * CSVFormat format = aformat.withHeader(metaData);
     * &lt;/pre&gt;
     * &lt;p&gt;
     * The header is also used by the {@link CSVPrinter}.
     * &lt;/p&gt;
     *
     * @param metaData
     *            the metaData for the header, {@code null} if disabled, empty if parsed automatically, user specified
     *            otherwise.
     *
     * @return A new CSVFormat that is equal to this but with the specified header
     * @throws SQLException
     *             SQLException if a database access error occurs or this method is called on a closed result set.
     * @since 1.1
     */</comment>
    <function><specifier>public</specifier> <type><name>CSVFormat</name></type> <name>withHeader</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>ResultSetMetaData</name></type> <name>metaData</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>SQLException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>labels</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>metaData</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>columnCount</name> <init>= <expr><call><name><name>metaData</name><operator>.</operator><name>getColumnCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>labels</name> <operator>=</operator> <operator>new</operator> <name><name>String</name><index>[<expr><name>columnCount</name></expr>]</index></name></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>columnCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
                <expr_stmt><expr><name><name>labels</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>metaData</name><operator>.</operator><name>getColumnLabel</name></name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>
        <return>return <expr><call><name>withHeader</name><argument_list>(<argument><expr><name>labels</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a new {@code CSVFormat} with the header of the format set to the given values. The header can either be
     * parsed automatically from the input file with:
     *
     * &lt;pre&gt;
     * CSVFormat format = aformat.withHeader();
     * &lt;/pre&gt;
     *
     * or specified manually with:
     *
     * &lt;pre&gt;
     * CSVFormat format = aformat.withHeader(&amp;quot;name&amp;quot;, &amp;quot;email&amp;quot;, &amp;quot;phone&amp;quot;);
     * &lt;/pre&gt;
     * &lt;p&gt;
     * The header is also used by the {@link CSVPrinter}.
     * &lt;/p&gt;
     *
     * @param header
     *            the header, {@code null} if disabled, empty if parsed automatically, user specified otherwise.
     *
     * @return A new CSVFormat that is equal to this but with the specified header
     * @see #withSkipHeaderRecord(boolean)
     */</comment>
    <function><specifier>public</specifier> <type><name>CSVFormat</name></type> <name>withHeader</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name><modifier>...</modifier></type> <name>header</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>CSVFormat</name><argument_list>(<argument><expr><name>delimiter</name></expr></argument>, <argument><expr><name>quoteCharacter</name></expr></argument>, <argument><expr><name>quoteMode</name></expr></argument>, <argument><expr><name>commentMarker</name></expr></argument>, <argument><expr><name>escapeCharacter</name></expr></argument>,
                <argument><expr><name>ignoreSurroundingSpaces</name></expr></argument>, <argument><expr><name>ignoreEmptyLines</name></expr></argument>, <argument><expr><name>recordSeparator</name></expr></argument>, <argument><expr><name>nullString</name></expr></argument>, <argument><expr><name>headerComments</name></expr></argument>, <argument><expr><name>header</name></expr></argument>,
                <argument><expr><name>skipHeaderRecord</name></expr></argument>, <argument><expr><name>allowMissingColumnNames</name></expr></argument>, <argument><expr><name>ignoreHeaderCase</name></expr></argument>, <argument><expr><name>trim</name></expr></argument>, <argument><expr><name>trailingDelimiter</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a new {@code CSVFormat} with the header comments of the format set to the given values. The comments will
     * be printed first, before the headers. This setting is ignored by the parser.
     *
     * &lt;pre&gt;
     * CSVFormat format = aformat.withHeaderComments(&amp;quot;Generated by Apache Commons CSV 1.1.&amp;quot;, new Date());
     * &lt;/pre&gt;
     *
     * @param headerComments
     *            the headerComments which will be printed by the Printer before the actual CSV data.
     *
     * @return A new CSVFormat that is equal to this but with the specified header
     * @see #withSkipHeaderRecord(boolean)
     * @since 1.1
     */</comment>
    <function><specifier>public</specifier> <type><name>CSVFormat</name></type> <name>withHeaderComments</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Object</name><modifier>...</modifier></type> <name>headerComments</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>CSVFormat</name><argument_list>(<argument><expr><name>delimiter</name></expr></argument>, <argument><expr><name>quoteCharacter</name></expr></argument>, <argument><expr><name>quoteMode</name></expr></argument>, <argument><expr><name>commentMarker</name></expr></argument>, <argument><expr><name>escapeCharacter</name></expr></argument>,
                <argument><expr><name>ignoreSurroundingSpaces</name></expr></argument>, <argument><expr><name>ignoreEmptyLines</name></expr></argument>, <argument><expr><name>recordSeparator</name></expr></argument>, <argument><expr><name>nullString</name></expr></argument>, <argument><expr><name>headerComments</name></expr></argument>, <argument><expr><name>header</name></expr></argument>,
                <argument><expr><name>skipHeaderRecord</name></expr></argument>, <argument><expr><name>allowMissingColumnNames</name></expr></argument>, <argument><expr><name>ignoreHeaderCase</name></expr></argument>, <argument><expr><name>trim</name></expr></argument>, <argument><expr><name>trailingDelimiter</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a new {@code CSVFormat} with the empty line skipping behavior of the format set to {@code true}.
     *
     * @return A new CSVFormat that is equal to this but with the specified empty line skipping behavior.
     * @since {@link #withIgnoreEmptyLines(boolean)}
     * @since 1.1
     */</comment>
    <function><specifier>public</specifier> <type><name>CSVFormat</name></type> <name>withIgnoreEmptyLines</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>withIgnoreEmptyLines</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a new {@code CSVFormat} with the empty line skipping behavior of the format set to the given value.
     *
     * @param ignoreEmptyLines
     *            the empty line skipping behavior, {@code true} to ignore the empty lines between the records,
     *            {@code false} to translate empty lines to empty records.
     * @return A new CSVFormat that is equal to this but with the specified empty line skipping behavior.
     */</comment>
    <function><specifier>public</specifier> <type><name>CSVFormat</name></type> <name>withIgnoreEmptyLines</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>ignoreEmptyLines</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>CSVFormat</name><argument_list>(<argument><expr><name>delimiter</name></expr></argument>, <argument><expr><name>quoteCharacter</name></expr></argument>, <argument><expr><name>quoteMode</name></expr></argument>, <argument><expr><name>commentMarker</name></expr></argument>, <argument><expr><name>escapeCharacter</name></expr></argument>,
                <argument><expr><name>ignoreSurroundingSpaces</name></expr></argument>, <argument><expr><name>ignoreEmptyLines</name></expr></argument>, <argument><expr><name>recordSeparator</name></expr></argument>, <argument><expr><name>nullString</name></expr></argument>, <argument><expr><name>headerComments</name></expr></argument>, <argument><expr><name>header</name></expr></argument>,
                <argument><expr><name>skipHeaderRecord</name></expr></argument>, <argument><expr><name>allowMissingColumnNames</name></expr></argument>, <argument><expr><name>ignoreHeaderCase</name></expr></argument>, <argument><expr><name>trim</name></expr></argument>, <argument><expr><name>trailingDelimiter</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a new {@code CSVFormat} with the header ignore case behavior set to {@code true}.
     *
     * @return A new CSVFormat that will ignore case header name.
     * @see #withIgnoreHeaderCase(boolean)
     * @since 1.3
     */</comment>
    <function><specifier>public</specifier> <type><name>CSVFormat</name></type> <name>withIgnoreHeaderCase</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>withIgnoreHeaderCase</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a new {@code CSVFormat} with whether header names should be accessed ignoring case.
     *
     * @param ignoreHeaderCase
     *            the case mapping behavior, {@code true} to access name/values, {@code false} to leave the mapping as
     *            is.
     * @return A new CSVFormat that will ignore case header name if specified as {@code true}
     * @since 1.3
     */</comment>
    <function><specifier>public</specifier> <type><name>CSVFormat</name></type> <name>withIgnoreHeaderCase</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>ignoreHeaderCase</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>CSVFormat</name><argument_list>(<argument><expr><name>delimiter</name></expr></argument>, <argument><expr><name>quoteCharacter</name></expr></argument>, <argument><expr><name>quoteMode</name></expr></argument>, <argument><expr><name>commentMarker</name></expr></argument>, <argument><expr><name>escapeCharacter</name></expr></argument>,
                <argument><expr><name>ignoreSurroundingSpaces</name></expr></argument>, <argument><expr><name>ignoreEmptyLines</name></expr></argument>, <argument><expr><name>recordSeparator</name></expr></argument>, <argument><expr><name>nullString</name></expr></argument>, <argument><expr><name>headerComments</name></expr></argument>, <argument><expr><name>header</name></expr></argument>,
                <argument><expr><name>skipHeaderRecord</name></expr></argument>, <argument><expr><name>allowMissingColumnNames</name></expr></argument>, <argument><expr><name>ignoreHeaderCase</name></expr></argument>, <argument><expr><name>trim</name></expr></argument>, <argument><expr><name>trailingDelimiter</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a new {@code CSVFormat} with the trimming behavior of the format set to {@code true}.
     *
     * @return A new CSVFormat that is equal to this but with the specified trimming behavior.
     * @see #withIgnoreSurroundingSpaces(boolean)
     * @since 1.1
     */</comment>
    <function><specifier>public</specifier> <type><name>CSVFormat</name></type> <name>withIgnoreSurroundingSpaces</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>withIgnoreSurroundingSpaces</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a new {@code CSVFormat} with the trimming behavior of the format set to the given value.
     *
     * @param ignoreSurroundingSpaces
     *            the trimming behavior, {@code true} to remove the surrounding spaces, {@code false} to leave the
     *            spaces as is.
     * @return A new CSVFormat that is equal to this but with the specified trimming behavior.
     */</comment>
    <function><specifier>public</specifier> <type><name>CSVFormat</name></type> <name>withIgnoreSurroundingSpaces</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>ignoreSurroundingSpaces</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>CSVFormat</name><argument_list>(<argument><expr><name>delimiter</name></expr></argument>, <argument><expr><name>quoteCharacter</name></expr></argument>, <argument><expr><name>quoteMode</name></expr></argument>, <argument><expr><name>commentMarker</name></expr></argument>, <argument><expr><name>escapeCharacter</name></expr></argument>,
                <argument><expr><name>ignoreSurroundingSpaces</name></expr></argument>, <argument><expr><name>ignoreEmptyLines</name></expr></argument>, <argument><expr><name>recordSeparator</name></expr></argument>, <argument><expr><name>nullString</name></expr></argument>, <argument><expr><name>headerComments</name></expr></argument>, <argument><expr><name>header</name></expr></argument>,
                <argument><expr><name>skipHeaderRecord</name></expr></argument>, <argument><expr><name>allowMissingColumnNames</name></expr></argument>, <argument><expr><name>ignoreHeaderCase</name></expr></argument>, <argument><expr><name>trim</name></expr></argument>, <argument><expr><name>trailingDelimiter</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a new {@code CSVFormat} with conversions to and from null for strings on input and output.
     * &lt;ul&gt;
     * &lt;li&gt;&lt;strong&gt;Reading:&lt;/strong&gt; Converts strings equal to the given {@code nullString} to {@code null} when reading
     * records.&lt;/li&gt;
     * &lt;li&gt;&lt;strong&gt;Writing:&lt;/strong&gt; Writes {@code null} as the given {@code nullString} when writing records.&lt;/li&gt;
     * &lt;/ul&gt;
     *
     * @param nullString
     *            the String to convert to and from {@code null}. No substitution occurs if {@code null}
     *
     * @return A new CSVFormat that is equal to this but with the specified null conversion string.
     */</comment>
    <function><specifier>public</specifier> <type><name>CSVFormat</name></type> <name>withNullString</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>nullString</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>CSVFormat</name><argument_list>(<argument><expr><name>delimiter</name></expr></argument>, <argument><expr><name>quoteCharacter</name></expr></argument>, <argument><expr><name>quoteMode</name></expr></argument>, <argument><expr><name>commentMarker</name></expr></argument>, <argument><expr><name>escapeCharacter</name></expr></argument>,
                <argument><expr><name>ignoreSurroundingSpaces</name></expr></argument>, <argument><expr><name>ignoreEmptyLines</name></expr></argument>, <argument><expr><name>recordSeparator</name></expr></argument>, <argument><expr><name>nullString</name></expr></argument>, <argument><expr><name>headerComments</name></expr></argument>, <argument><expr><name>header</name></expr></argument>,
                <argument><expr><name>skipHeaderRecord</name></expr></argument>, <argument><expr><name>allowMissingColumnNames</name></expr></argument>, <argument><expr><name>ignoreHeaderCase</name></expr></argument>, <argument><expr><name>trim</name></expr></argument>, <argument><expr><name>trailingDelimiter</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a new {@code CSVFormat} with the quoteChar of the format set to the specified character.
     *
     * @param quoteChar
     *            the quoteChar character
     * @return A new CSVFormat that is equal to this but with the specified character as quoteChar
     * @throws IllegalArgumentException
     *             thrown if the specified character is a line break
     */</comment>
    <function><specifier>public</specifier> <type><name>CSVFormat</name></type> <name>withQuote</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>char</name></type> <name>quoteChar</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name>withQuote</name><argument_list>(<argument><expr><call><name><name>Character</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>quoteChar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a new {@code CSVFormat} with the quoteChar of the format set to the specified character.
     *
     * @param quoteChar
     *            the quoteChar character, use {@code null} to disable
     * @return A new CSVFormat that is equal to this but with the specified character as quoteChar
     * @throws IllegalArgumentException
     *             thrown if the specified character is a line break
     */</comment>
    <function><specifier>public</specifier> <type><name>CSVFormat</name></type> <name>withQuote</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Character</name></type> <name>quoteChar</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>isLineBreak</name><argument_list>(<argument><expr><name>quoteChar</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"The quoteChar cannot be a line break"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><operator>new</operator> <call><name>CSVFormat</name><argument_list>(<argument><expr><name>delimiter</name></expr></argument>, <argument><expr><name>quoteChar</name></expr></argument>, <argument><expr><name>quoteMode</name></expr></argument>, <argument><expr><name>commentMarker</name></expr></argument>, <argument><expr><name>escapeCharacter</name></expr></argument>, <argument><expr><name>ignoreSurroundingSpaces</name></expr></argument>,
                <argument><expr><name>ignoreEmptyLines</name></expr></argument>, <argument><expr><name>recordSeparator</name></expr></argument>, <argument><expr><name>nullString</name></expr></argument>, <argument><expr><name>headerComments</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>skipHeaderRecord</name></expr></argument>,
                <argument><expr><name>allowMissingColumnNames</name></expr></argument>, <argument><expr><name>ignoreHeaderCase</name></expr></argument>, <argument><expr><name>trim</name></expr></argument>, <argument><expr><name>trailingDelimiter</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a new {@code CSVFormat} with the output quote policy of the format set to the specified value.
     *
     * @param quoteModePolicy
     *            the quote policy to use for output.
     *
     * @return A new CSVFormat that is equal to this but with the specified quote policy
     */</comment>
    <function><specifier>public</specifier> <type><name>CSVFormat</name></type> <name>withQuoteMode</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>QuoteMode</name></type> <name>quoteModePolicy</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>CSVFormat</name><argument_list>(<argument><expr><name>delimiter</name></expr></argument>, <argument><expr><name>quoteCharacter</name></expr></argument>, <argument><expr><name>quoteModePolicy</name></expr></argument>, <argument><expr><name>commentMarker</name></expr></argument>, <argument><expr><name>escapeCharacter</name></expr></argument>,
                <argument><expr><name>ignoreSurroundingSpaces</name></expr></argument>, <argument><expr><name>ignoreEmptyLines</name></expr></argument>, <argument><expr><name>recordSeparator</name></expr></argument>, <argument><expr><name>nullString</name></expr></argument>, <argument><expr><name>headerComments</name></expr></argument>, <argument><expr><name>header</name></expr></argument>,
                <argument><expr><name>skipHeaderRecord</name></expr></argument>, <argument><expr><name>allowMissingColumnNames</name></expr></argument>, <argument><expr><name>ignoreHeaderCase</name></expr></argument>, <argument><expr><name>trim</name></expr></argument>, <argument><expr><name>trailingDelimiter</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a new {@code CSVFormat} with the record separator of the format set to the specified character.
     *
     * &lt;p&gt;
     * &lt;strong&gt;Note:&lt;/strong&gt; This setting is only used during printing and does not affect parsing. Parsing currently
     * only works for inputs with '\n', '\r' and "\r\n"
     * &lt;/p&gt;
     *
     * @param recordSeparator
     *            the record separator to use for output.
     *
     * @return A new CSVFormat that is equal to this but with the the specified output record separator
     */</comment>
    <function><specifier>public</specifier> <type><name>CSVFormat</name></type> <name>withRecordSeparator</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>char</name></type> <name>recordSeparator</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name>withRecordSeparator</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>recordSeparator</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a new {@code CSVFormat} with the record separator of the format set to the specified String.
     *
     * &lt;p&gt;
     * &lt;strong&gt;Note:&lt;/strong&gt; This setting is only used during printing and does not affect parsing. Parsing currently
     * only works for inputs with '\n', '\r' and "\r\n"
     * &lt;/p&gt;
     *
     * @param recordSeparator
     *            the record separator to use for output.
     *
     * @return A new CSVFormat that is equal to this but with the the specified output record separator
     * @throws IllegalArgumentException
     *             if recordSeparator is none of CR, LF or CRLF
     */</comment>
    <function><specifier>public</specifier> <type><name>CSVFormat</name></type> <name>withRecordSeparator</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>recordSeparator</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>CSVFormat</name><argument_list>(<argument><expr><name>delimiter</name></expr></argument>, <argument><expr><name>quoteCharacter</name></expr></argument>, <argument><expr><name>quoteMode</name></expr></argument>, <argument><expr><name>commentMarker</name></expr></argument>, <argument><expr><name>escapeCharacter</name></expr></argument>,
                <argument><expr><name>ignoreSurroundingSpaces</name></expr></argument>, <argument><expr><name>ignoreEmptyLines</name></expr></argument>, <argument><expr><name>recordSeparator</name></expr></argument>, <argument><expr><name>nullString</name></expr></argument>, <argument><expr><name>headerComments</name></expr></argument>, <argument><expr><name>header</name></expr></argument>,
                <argument><expr><name>skipHeaderRecord</name></expr></argument>, <argument><expr><name>allowMissingColumnNames</name></expr></argument>, <argument><expr><name>ignoreHeaderCase</name></expr></argument>, <argument><expr><name>trim</name></expr></argument>, <argument><expr><name>trailingDelimiter</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a new {@code CSVFormat} with skipping the header record set to {@code true}.
     *
     * @return A new CSVFormat that is equal to this but with the the specified skipHeaderRecord setting.
     * @see #withSkipHeaderRecord(boolean)
     * @see #withHeader(String...)
     * @since 1.1
     */</comment>
    <function><specifier>public</specifier> <type><name>CSVFormat</name></type> <name>withSkipHeaderRecord</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name><operator>.</operator><name>withSkipHeaderRecord</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a new {@code CSVFormat} with whether to skip the header record.
     *
     * @param skipHeaderRecord
     *            whether to skip the header record.
     *
     * @return A new CSVFormat that is equal to this but with the the specified skipHeaderRecord setting.
     * @see #withHeader(String...)
     */</comment>
    <function><specifier>public</specifier> <type><name>CSVFormat</name></type> <name>withSkipHeaderRecord</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>skipHeaderRecord</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>CSVFormat</name><argument_list>(<argument><expr><name>delimiter</name></expr></argument>, <argument><expr><name>quoteCharacter</name></expr></argument>, <argument><expr><name>quoteMode</name></expr></argument>, <argument><expr><name>commentMarker</name></expr></argument>, <argument><expr><name>escapeCharacter</name></expr></argument>,
                <argument><expr><name>ignoreSurroundingSpaces</name></expr></argument>, <argument><expr><name>ignoreEmptyLines</name></expr></argument>, <argument><expr><name>recordSeparator</name></expr></argument>, <argument><expr><name>nullString</name></expr></argument>, <argument><expr><name>headerComments</name></expr></argument>, <argument><expr><name>header</name></expr></argument>,
                <argument><expr><name>skipHeaderRecord</name></expr></argument>, <argument><expr><name>allowMissingColumnNames</name></expr></argument>, <argument><expr><name>ignoreHeaderCase</name></expr></argument>, <argument><expr><name>trim</name></expr></argument>, <argument><expr><name>trailingDelimiter</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a new {@code CSVFormat} to add a trailing delimiter.
     *
     * @return A new CSVFormat that is equal to this but with the trailing delimiter setting.
     * @since 1.3
     */</comment>
    <function><specifier>public</specifier> <type><name>CSVFormat</name></type> <name>withTrailingDelimiter</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>withTrailingDelimiter</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a new {@code CSVFormat} with whether to add a trailing delimiter.
     *
     * @param trailingDelimiter
     *            whether to add a trailing delimiter.
     *
     * @return A new CSVFormat that is equal to this but with the specified trailing delimiter setting.
     * @since 1.3
     */</comment>
    <function><specifier>public</specifier> <type><name>CSVFormat</name></type> <name>withTrailingDelimiter</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>trailingDelimiter</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>CSVFormat</name><argument_list>(<argument><expr><name>delimiter</name></expr></argument>, <argument><expr><name>quoteCharacter</name></expr></argument>, <argument><expr><name>quoteMode</name></expr></argument>, <argument><expr><name>commentMarker</name></expr></argument>, <argument><expr><name>escapeCharacter</name></expr></argument>,
                <argument><expr><name>ignoreSurroundingSpaces</name></expr></argument>, <argument><expr><name>ignoreEmptyLines</name></expr></argument>, <argument><expr><name>recordSeparator</name></expr></argument>, <argument><expr><name>nullString</name></expr></argument>, <argument><expr><name>headerComments</name></expr></argument>, <argument><expr><name>header</name></expr></argument>,
                <argument><expr><name>skipHeaderRecord</name></expr></argument>, <argument><expr><name>allowMissingColumnNames</name></expr></argument>, <argument><expr><name>ignoreHeaderCase</name></expr></argument>, <argument><expr><name>trim</name></expr></argument>, <argument><expr><name>trailingDelimiter</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a new {@code CSVFormat} to trim leading and trailing blanks.
     *
     * @return A new CSVFormat that is equal to this but with the trim setting on.
     * @since 1.3
     */</comment>
    <function><specifier>public</specifier> <type><name>CSVFormat</name></type> <name>withTrim</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>withTrim</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a new {@code CSVFormat} with whether to trim leading and trailing blanks.
     *
     * @param trim
     *            whether to trim leading and trailing blanks.
     *
     * @return A new CSVFormat that is equal to this but with the specified trim setting.
     * @since 1.3
     */</comment>
    <function><specifier>public</specifier> <type><name>CSVFormat</name></type> <name>withTrim</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>trim</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>CSVFormat</name><argument_list>(<argument><expr><name>delimiter</name></expr></argument>, <argument><expr><name>quoteCharacter</name></expr></argument>, <argument><expr><name>quoteMode</name></expr></argument>, <argument><expr><name>commentMarker</name></expr></argument>, <argument><expr><name>escapeCharacter</name></expr></argument>,
                <argument><expr><name>ignoreSurroundingSpaces</name></expr></argument>, <argument><expr><name>ignoreEmptyLines</name></expr></argument>, <argument><expr><name>recordSeparator</name></expr></argument>, <argument><expr><name>nullString</name></expr></argument>, <argument><expr><name>headerComments</name></expr></argument>, <argument><expr><name>header</name></expr></argument>,
                <argument><expr><name>skipHeaderRecord</name></expr></argument>, <argument><expr><name>allowMissingColumnNames</name></expr></argument>, <argument><expr><name>ignoreHeaderCase</name></expr></argument>, <argument><expr><name>trim</name></expr></argument>, <argument><expr><name>trailingDelimiter</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}
</unit>

</unit>
