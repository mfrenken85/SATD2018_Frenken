UNKNOWN	sets the alarm to go off in a certain number of milliseconds. if the alarm is already set	97596
UNKNOWN	its overwritten and only the new alarm setting is used	97597
UNKNOWN	this is called when our timer runs out	97598
UNKNOWN	we still need to wait some time to trigger spring loaded mode--	97599
UNKNOWN	post a new callback	97600
UNKNOWN	the widget no long exists.	97601
UNKNOWN	unregister the widget ids which are not present on the workspace. this could happen	97602
UNKNOWN	when a widget place holder is removed from workspace before this method is called.	97603
UNKNOWN	todo do we clear these too?	97604
UNKNOWN	find disabled/removed activities and remove them from data and add them	97605
UNKNOWN	to the removed list.	97606
UNKNOWN	find enabled activities and add them to the adapter	97607
UNKNOWN	also updates existing activities with new labels/icons	97608
UNKNOWN	remove all data for this package.	97609
UNKNOWN	reset immediately	97610
UNKNOWN	we unload the widget previews when the ui is hidden so need to reload pages	97611
UNKNOWN	load the current page synchronously and the neighboring pages asynchronously	97612
UNKNOWN	clear the widget pages of all their subviews - this will trigger the widget previews	97613
UNKNOWN	to delete their bitmaps	97614
UNKNOWN	launchertransitionable overrides	97615
UNKNOWN	going from all apps -> workspace	97616
UNKNOWN	going from workspace -> all apps	97617
UNKNOWN	make sure the current page is loaded (we start loading the side pages after the	97618
UNKNOWN	transition to prevent slowing down the animation)	97619
UNKNOWN	todo revisit this	97620
UNKNOWN	make sure adjacent pages are loaded (we wait until after the transition to	97621
UNKNOWN	prevent slowing down the animation)	97622
UNKNOWN	opening apps need to announce what page we are on.	97623
UNKNOWN	notify the user when the page changes	97624
UNKNOWN	going from workspace -> all apps	97625
UNKNOWN	note we should do this at the end since we check visibility state in some of the	97626
UNKNOWN	cling initialization/dismiss code above.	97627
UNKNOWN	for each border we bound the resizing based on the minimum width and the maximum	97628
UNKNOWN	expandability.	97629
UNKNOWN	update the widgets dimensions and position according to the deltas computed above	97630
UNKNOWN	we always want the final commit to match the feedback so we make sure to use the	97631
UNKNOWN	last used direction vector when committing the resize / reorder.	97632
UNKNOWN	compute landscape size	97633
UNKNOWN	compute portrait size	97634
UNKNOWN	we need to make sure the frames touchable regions lie fully within the bounds of the	97635
UNKNOWN	draglayer. we allow the actual handles to be clipped but we shift the touch regions	97636
UNKNOWN	down accordingly to provide a proper touch target.	97637
UNKNOWN	in this case we shift the touch region down to start at the top of the draglayer	97638
UNKNOWN	in this case we shift the touch region up to end at the bottom of the draglayer	97639
UNKNOWN	do nothing	97640
UNKNOWN	do nothing	97641
UNKNOWN	do nothing	97642
UNKNOWN	do nothing	97643
UNKNOWN	find the rect to animate to (the view is center aligned)	97644
UNKNOWN	center the destination rect about the trash icon	97645
UNKNOWN	ensure we are using the right text size	97646
UNKNOWN	call the superclass ontouchevent first because sometimes it changes the state to	97647
UNKNOWN	ispressed() on an action_up	97648
UNKNOWN	so that the pressed outline is visible immediately on setstaypressed()	97649
UNKNOWN	we pre-create it on action_down (it takes a small but perceptible amount of time	97650
UNKNOWN	to create it)	97651
UNKNOWN	if weve touched down and up on an item and its still not pressed then	97652
UNKNOWN	destroy the pressed outline	97653
UNKNOWN	only show the shadow effect when persistent pressed state is set.	97654
UNKNOWN	pre-create shadow so show immediately on click.	97655
UNKNOWN	unlike touch events keypress event propagate pressed state change immediately	97656
UNKNOWN	without waiting for onclickhandler to execute. disable pressed state changes here	97657
UNKNOWN	to avoid flickering.	97658
UNKNOWN	if text is transparent dont draw any shadow	97659
UNKNOWN	we enhance the shadow by drawing the shadow twice	97660
UNKNOWN	keep track of the set of screens which need to be added to the db.	97661
UNKNOWN	read the extras	97662
UNKNOWN	send a broadcast to configure the widget	97663
UNKNOWN	we can only have folders with >= 2 items so we need to remove the	97664
UNKNOWN	folder and clean up if less than 2 items were included or some	97665
UNKNOWN	failed to add and less than 2 were actually added	97666
UNKNOWN	delete the folder	97667
UNKNOWN	if we have a single item promote it to where the folder	97668
UNKNOWN	would have been.	97669
UNKNOWN	noinspection statementwithemptybody	97670
UNKNOWN	read the extras	97671
UNKNOWN	send a broadcast to configure the widget	97672
UNKNOWN	we can only have folders with >= 2 items so we need to remove the	97673
UNKNOWN	folder and clean up if less than 2 items were included or some	97674
UNKNOWN	failed to add and less than 2 were actually added	97675
UNKNOWN	delete the folder	97676
UNKNOWN	if we have a single item promote it to where the folder	97677
UNKNOWN	would have been.	97678
UNKNOWN	noinspection statementwithemptybody	97679
UNKNOWN	get the drawable	97680
UNKNOWN	get the hover color	97681
UNKNOWN	the current drawable is set to either the remove drawable or the uninstall drawable	97682
UNKNOWN	and is initially set to the remove drawable as set in the layout xml.	97683
UNKNOWN	remove the text in the phone ui in landscape	97684
UNKNOWN	if we are dragging an application from appscustomize only show the control if we can	97685
UNKNOWN	delete the app (it was downloaded) and rename the string to uninstall in such a case.	97686
UNKNOWN	hide the delete target if it is a widget from appscustomize.	97687
UNKNOWN	restore the hover color if we are deleting	97688
UNKNOWN	only allow manifest shortcuts to initiate an un-install.	97689
UNKNOWN	uninstall the application if it is being dragged from appscustomize	97690
UNKNOWN	remove the folder from the workspace and delete the contents from launcher model	97691
UNKNOWN	remove the widget from the workspace	97692
UNKNOWN	deleting an app widget id is a void call but writes to disk before returning	97693
UNKNOWN	to the caller	97694
UNKNOWN	calculate how far along the velocity vector we should put the intermediate point on	97695
UNKNOWN	the bezier curve	97696
UNKNOWN	intermediate t/l	97697
UNKNOWN	drag view t/l	97698
UNKNOWN	delete target t/l	97699
UNKNOWN	dont highlight the icon as its animating	97700
UNKNOWN	dont highlight the target if we are flinging from allapps	97701
UNKNOWN	defer animating out the drop target if we are animating to it	97702
UNKNOWN	note because it takes time for the first frame of animation to actually be	97703
UNKNOWN	called and we expect the animation to be a continuation of the fling we have	97704
UNKNOWN	to account for the time that has elapsed since the fling finished. and since	97705
UNKNOWN	we dont have a startdelay we will always get call to update when we call	97706
UNKNOWN	start() (which we want to ignore).	97707
UNKNOWN	if we are dragging from allapps then we allow appscustomizepagedview to clean up	97708
UNKNOWN	itself otherwise complete the drop to initiate the deletion process	97709
UNKNOWN	if we are dragging from allapps then we allow appscustomizepagedview to clean up	97710
UNKNOWN	itself otherwise complete the drop to initiate the deletion process	97711
UNKNOWN	clean up any references to source/generated bitmaps	97712
UNKNOWN	load each of the widget previews in the background	97713
UNKNOWN	all the widget previews are loaded so we can just callback to inflate the page	97714
UNKNOWN	now that the data is ready we can calculate the content width the number of cells to	97715
UNKNOWN	use for each page	97716
UNKNOWN	force a measure to update recalculate the gaps	97717
UNKNOWN	this code triggers requestlayout so must be posted outside of the	97718
UNKNOWN	layout pass.	97719
UNKNOWN	this code triggers requestlayout so must be posted outside of the	97720
UNKNOWN	layout pass.	97721
UNKNOWN	get the list of widgets and shortcuts	97722
UNKNOWN	ensure that all widgets we show can be added on a workspace of this size	97723
UNKNOWN	just add shortcuts	97724
UNKNOWN	when we have exited all apps or are in transition disregard clicks	97725
UNKNOWN	let the user know that they have to long press to add a widget	97726
UNKNOWN	create a little animation to show that the widget can move	97727
UNKNOWN	pagedviewwithdraggableitems implementation	97728
UNKNOWN	disable dragging by pulling an app down for now.	97729
UNKNOWN	we want the first widget layout to be the correct size. this will be important	97730
UNKNOWN	for width size reporting to the appwidgetmanager.	97731
UNKNOWN	we want the first widget layout to be the correct size. this will be important	97732
UNKNOWN	for width size reporting to the appwidgetmanager.	97733
UNKNOWN	we are anticipating a long press and we use this time to load bind and instantiate	97734
UNKNOWN	the widget. this will need to be cleaned up if it turns out no long press occurs.	97735
UNKNOWN	just in case the cleanup process wasnt properly executed. this shouldnt happen.	97736
UNKNOWN	if the widget was not added we may need to do further cleanup.	97737
UNKNOWN	we never did any preloading so just remove pending callbacks to do so	97738
UNKNOWN	delete the widget id which was allocated	97739
UNKNOWN	we never got around to inflating the widget so remove the callback to do so.	97740
UNKNOWN	delete the widget id which was allocated	97741
UNKNOWN	the widget was inflated and added to the draglayer -- remove it.	97742
UNKNOWN	get the widget preview as the drag representation	97743
UNKNOWN	if the imageview doesnt have a drawable yet the widget preview hasnt been loaded and	97744
UNKNOWN	we abort the drag.	97745
UNKNOWN	compose the drag image	97746
UNKNOWN	this can happen in some weird cases involving multi-touch. we cant start dragging	97747
UNKNOWN	the widget if this is null so we break out.	97748
UNKNOWN	compare the size of the drag preview to the preview in the appscustomize tray	97749
UNKNOWN	the bitmap in the appscustomize tray is always the the same size so there	97750
UNKNOWN	might be extra pixels around the preview itself - this accounts for that	97751
UNKNOWN	dont clip alpha values for the drag outline if were using the default widget preview	97752
UNKNOWN	save the preview for the outline generation then dim the preview	97753
UNKNOWN	start the drag	97754
UNKNOWN	we delay entering spring-loaded mode slightly to make sure the ui	97755
UNKNOWN	thready is free of any work.	97756
UNKNOWN	we dont enter spring-loaded mode if the drag has been cancelled	97757
UNKNOWN	go into spring loaded mode (must happen before we startdrag())	97758
UNKNOWN	we dont enter spring-loaded mode if the drag has been cancelled	97759
UNKNOWN	go into spring loaded mode (must happen before we startdrag())	97760
UNKNOWN	exit spring loaded mode if we have not successfully dropped or have not handled the	97761
UNKNOWN	drop in workspace	97762
UNKNOWN	return early and wait for onflingtodeletecompleted if this was the result of a fling	97763
UNKNOWN	display an error message if the drag failed due to there not being enough space on the	97764
UNKNOWN	target layout we were dropping on.	97765
UNKNOWN	we just dismiss the drag when we fling so cleanup here	97766
UNKNOWN	clean up all the async tasks	97767
UNKNOWN	weve already preallocated the views for the data to load into so clear them as well	97768
UNKNOWN	widgets appear to be cleared every time you leave always force invalidate for them	97769
UNKNOWN	update the thread priorities given the direction lookahead	97770
UNKNOWN	apps pagedview implementation	97771
UNKNOWN	note we force a measure here to get around the fact that when we do layout calculations	97772
UNKNOWN	immediately after syncing we dont have a proper width. that said we already know the	97773
UNKNOWN	expected page width so we can actually optimize by hiding all the textview-based	97774
UNKNOWN	children that are expensive to measure and let that happen naturally later.	97775
UNKNOWN	ensure that we have the right number of items on the pages	97776
UNKNOWN	if we are snapping to another page use that index as the target page index	97777
UNKNOWN	we use the distance from the target page as an initial guess of priority but if there	97778
UNKNOWN	are no pages of higher priority than the page specified then bump up the priority of	97779
UNKNOWN	the specified page.	97780
UNKNOWN	todo-apps_customize detect number of cores and set thread priorities accordingly below	97781
UNKNOWN	prune all tasks that are no longer needed	97782
UNKNOWN	we introduce a slight delay to order the loading of side pages so that we dont thrash	97783
UNKNOWN	do cleanup inside onsyncwidgetpageitems	97784
UNKNOWN	ensure that the task is appropriately prioritized and runs in parallel	97785
UNKNOWN	do cleanup inside onsyncwidgetpageitems	97786
UNKNOWN	widgets pagedview implementation	97787
UNKNOWN	note we force a measure here to get around the fact that when we do layout calculations	97788
UNKNOWN	immediately after syncing we dont have a proper width.	97789
UNKNOWN	calculate the dimensions of each cell we are giving to each widget	97790
UNKNOWN	prepare the set of widgets to load previews for in the background	97791
UNKNOWN	prepopulate the pages with the other widget info and fill in the previews later	97792
UNKNOWN	fill in the widget information	97793
UNKNOWN	determine the widget spans and min resize spans.	97794
UNKNOWN	fill in the shortcuts information	97795
UNKNOWN	layout each widget	97796
UNKNOWN	wait until a call on onlayout to start loading because	97797
UNKNOWN	pagedviewwidget.getpreviewsize() will return 0 if it hasnt been laid out	97798
UNKNOWN	todo can we do a measure/layout immediately?	97799
UNKNOWN	load the widget previews	97800
UNKNOWN	load the widget previews	97801
UNKNOWN	loadwidgetpreviewsinbackground can be called without a task to load a set of widget	97802
UNKNOWN	previews synchronously	97803
UNKNOWN	ensure that this task starts running at the correct priority	97804
UNKNOWN	load each of the widget/shortcut previews	97805
UNKNOWN	ensure we havent been cancelled yet	97806
UNKNOWN	before work on each item ensure that this task is running at the correct	97807
UNKNOWN	priority	97808
UNKNOWN	update all thread priorities	97809
UNKNOWN	we want our pages to be z-ordered such that the further a page is to the left the higher	97810
UNKNOWN	it is in the z-order. this is important to insure touch events are handled correctly.	97811
UNKNOWN	in apps customize we have a scrolling effect which emulates pulling cards off of a stack.	97812
UNKNOWN	make sure were caching at least two pages always	97813
UNKNOWN	we reset the save index when we change pages so that it will be recalculated on next	97814
UNKNOWN	rotation	97815
UNKNOWN	allappsview implementation	97816
UNKNOWN	the next layout pass will trigger data-ready if both widgets and apps are set so	97817
UNKNOWN	request a layout to trigger the page data when ready.	97818
UNKNOWN	we add it in place in alphabetical order	97819
UNKNOWN	loop through all the apps and remove apps that have the same component	97820
UNKNOWN	we remove and re-add the updated applications list because its properties may have	97821
UNKNOWN	changed (ie. the title) and this will ensure that the items will be in their proper	97822
UNKNOWN	place in the list.	97823
UNKNOWN	if we have reset then we should not continue to restore the previous state	97824
UNKNOWN	todo dump information related to current list of applications widgets etc.	97825
UNKNOWN	todo if we are in the middle of any process (ie. for holographic outlines etc) we	97826
UNKNOWN	should stop this now.	97827
UNKNOWN	stop all background tasks	97828
UNKNOWN	allapps uses the original non-scaled icon size	97829
UNKNOWN	there are three possible configurations that the dynamic grid accounts for portrait	97830
UNKNOWN	landscape with the nav bar at the bottom and landscape with the nav bar at the side.	97831
UNKNOWN	to prevent waiting for fitsystemwindows() we make the observation that in landscape	97832
UNKNOWN	the height is the smallest height (either with the nav bar at the bottom or to the	97833
UNKNOWN	side) and otherwise the height is simply the largest possible height for a portrait	97834
UNKNOWN	device.	97835
UNKNOWN	check to see if the icons fit in the new available height. if not then we need to	97836
UNKNOWN	shrink the icon size.	97837
UNKNOWN	make the callbacks	97838
UNKNOWN	search bar	97839
UNKNOWN	calculate the actual text height	97840
UNKNOWN	folder	97841
UNKNOWN	all apps	97842
UNKNOWN	sort the profiles by their closeness to the dimensions	97843
UNKNOWN	pad the left and right of the workspace to ensure consistent spacing	97844
UNKNOWN	between all icons	97845
UNKNOWN	xxx if the icon size changes across orientations we will have to take	97846
UNKNOWN	that into account here too.	97847
UNKNOWN	pad the left and right of the workspace with search/hotseat bar sizes	97848
UNKNOWN	pad the left and right of the workspace to ensure consistent spacing	97849
UNKNOWN	between all icons	97850
UNKNOWN	pad the top and bottom of the workspace with search/hotseat bar sizes	97851
UNKNOWN	in landscape mode the page spacing is set to the default.	97852
UNKNOWN	in portrait we want the pages spaced such that there is no	97853
UNKNOWN	overhang of the previous / next page into the current page viewport.	97854
UNKNOWN	we assume symmetrical padding in portrait mode.	97855
UNKNOWN	the rect returned will be extended to below the system ui that covers the workspace	97856
UNKNOWN	layout the search bar space	97857
UNKNOWN	vertical search bar space	97858
UNKNOWN	searchbar.setpadding(	97859
UNKNOWN	0 2 edgemarginpx 0	97860
UNKNOWN	2 edgemarginpx)	97861
UNKNOWN	horizontal search bar space	97862
UNKNOWN	searchbar.setpadding(	97863
UNKNOWN	2 edgemarginpx	97864
UNKNOWN	getsearchbartopoffset()	97865
UNKNOWN	2 edgemarginpx 0)	97866
UNKNOWN	layout the workspace	97867
UNKNOWN	layout the page indicators	97868
UNKNOWN	hide the page indicators when we have vertical search/hotseat	97869
UNKNOWN	put the page indicators above the hotseat	97870
UNKNOWN	layout allapps	97871
UNKNOWN	center the all apps page indicator	97872
UNKNOWN	constrain the dimensions of all apps so that it does not span the full width	97873
UNKNOWN	only adjust the side paddings on landscape phones or tablets	97874
UNKNOWN	the icons are centered so we cant just offset by the page indicator height	97875
UNKNOWN	because the empty space will actually be pageindicatorheight + paddingtb	97876
UNKNOWN	horizontal padding for the whole paged view	97877
UNKNOWN	layout the overview mode	97878
UNKNOWN	we have enough space. lets add some margin too.	97879
UNKNOWN	set margin of all visible children except the last visible child	97880
UNKNOWN	suppress dead code warning	97881
UNKNOWN	start the pick-up animation	97882
UNKNOWN	post the animation to skip other expensive work happening on the first frame	97883
UNKNOWN	hide soft keyboard if visible	97884
UNKNOWN	reset the drawing cache background color to fully transparent	97885
UNKNOWN	for the duration of this operation	97886
UNKNOWN	restore the view	97887
UNKNOWN	cancel the current drag if we are removing an app that we are dragging	97888
UNKNOWN	added null checks to prevent npe weve seen in the wild	97889
UNKNOWN	only end the drag if we are not deferred	97890
UNKNOWN	if we skipped calling ondragend() before do it now	97891
UNKNOWN	suppress dead code warning	97892
UNKNOWN	update the velocity tracker	97893
UNKNOWN	verify the edgeswipe menu	97894
UNKNOWN	remember location of down touch	97895
UNKNOWN	mdragging = false	97896
UNKNOWN	ignore menu if dragging	97897
UNKNOWN	if from the edges and in limits	97898
UNKNOWN	drop on someone?	97899
UNKNOWN	check if we are hovering over the scroll areas	97900
UNKNOWN	update the velocity tracker	97901
UNKNOWN	remember where the motion event started	97902
UNKNOWN	ensure that weve processed a move event at the current pointer	97903
UNKNOWN	location.	97904
UNKNOWN	do a quick dot product test to ensure that we are flinging upwards	97905
UNKNOWN	clean up dragging on the target if its not the current fling delete target otherwise	97906
UNKNOWN	start dragging to it.	97907
UNKNOWN	drop onto the fling-to-delete target	97908
UNKNOWN	we must set dragcomplete to true _only_ after we enter the fling-to-delete target for	97909
UNKNOWN	drop	97910
UNKNOWN	check the scroll again so that we can requeue the scroller if necessary	97911
UNKNOWN	check the scroll again so that we can requeue the scroller if necessary	97912
UNKNOWN	draw the bitmap into the bounding rect	97913
UNKNOWN	no op	97914
UNKNOWN	for ghost mode set the color range to [ghost_mode_min_color_range 255]	97915
UNKNOWN	brightness c-new = c-old(1-amount) + amount	97916
UNKNOWN	add the amount to rgb components of the matrix as per the above formula.	97917
UNKNOWN	fifth elements in the array correspond to the constant being added to	97918
UNKNOWN	red blue green and alpha channel respectively.	97919
UNKNOWN	only used for viewpropertyanimators	97920
UNKNOWN	if the current play time exceeds the duration or the animated fraction is 1	97921
UNKNOWN	the animation will get finished even if we call setcurrentplaytime -- therefore	97922
UNKNOWN	dont adjust the animation in that case	97923
UNKNOWN	if we havent drawn our first frame reset the time to t = 0	97924
UNKNOWN	(give up after max_delay ms of waiting though - might happen for example if we	97925
UNKNOWN	are no longer in the foreground and no frames are being rendered ever)	97926
UNKNOWN	the first frame on animations doesnt always trigger an invalidate	97927
UNKNOWN	force an invalidate here to make sure the animation continues to advance	97928
UNKNOWN	for the second frame if the first frame took more than 16ms	97929
UNKNOWN	adjust the start time and pretend it took only 16ms anyway. this	97930
UNKNOWN	prevents a large jump in the animation due to an expensive first frame	97931
UNKNOWN	redraw if it is already showing. this avoids a bug where the height changes by a small	97932
UNKNOWN	amount on connecting/disconnecting a bluetooth keyboard.	97933
UNKNOWN	view not yet laid out. wait until the view is ready to be drawn so that be can	97934
UNKNOWN	get the location on screen.	97935
UNKNOWN	ill take it from here	97936
UNKNOWN	ensure that the overlay view stays on top. we cant use drawing order for this	97937
UNKNOWN	because in api level 16 touch dispatch doesnt respect drawing order.	97938
UNKNOWN	skip propagating onrequestsendaccessibilityevent all for other children	97939
UNKNOWN	when a folder is open	97940
UNKNOWN	only add the folder as a child for accessibility when it is open	97941
UNKNOWN	if weve received this weve already done the necessary handling	97942
UNKNOWN	in onintercepthoverevent. return true to consume the event.	97943
UNKNOWN	since the child hasnt necessarily been laid out we force the lp to be updated with	97944
UNKNOWN	the correct coordinates (above) and use these to determine the final location	97945
UNKNOWN	we need to account for the scale of the child itself as the above only accounts for	97946
UNKNOWN	for the scale in parents.	97947
UNKNOWN	account for the source scale of the icon (ie. from allapps to workspace in which	97948
UNKNOWN	the workspace may have smaller icon bounds).	97949
UNKNOWN	the child may be scaled (always about the center of the view) so to account for it	97950
UNKNOWN	we have to offset the position by the scaled size. once we do that we can center	97951
UNKNOWN	the drag view about the scaled child view.	97952
UNKNOWN	account for holographic blur padding on the drag view	97953
UNKNOWN	center in the x coordinate about the targets drawable	97954
UNKNOWN	calculate the duration of the animation based on the objects distance	97955
UNKNOWN	if duration < 0 this is a cue to compute the duration based on the distance	97956
UNKNOWN	fall back to cubic ease out interpolator for the animation if none is specified	97957
UNKNOWN	animate the view	97958
UNKNOWN	clean up the previous animations	97959
UNKNOWN	show the drop view if it was previously hidden	97960
UNKNOWN	set the anchor view if the page is scrolling	97961
UNKNOWN	create and start the animation	97962
UNKNOWN	ensure that the overlay view stays on top. we cant use drawing order for this	97963
UNKNOWN	because in api level 16 touch dispatch doesnt respect drawing order.	97964
UNKNOWN	ensure that the overlay view stays on top. we cant use drawing order for this	97965
UNKNOWN	because in api level 16 touch dispatch doesnt respect drawing order.	97966
UNKNOWN	between platform versions 17 and 18 behavior for onchildviewremoved / added changed.	97967
UNKNOWN	pre-18 the child was not added / removed by the time of those callbacks. we need to	97968
UNKNOWN	force update our representation of things here to avoid crashing on pre-18 devices	97969
UNKNOWN	in certain instances.	97970
UNKNOWN	i represents the current draw iteration	97971
UNKNOWN	in general we do nothing	97972
UNKNOWN	if we have a top index we return it when drawing last item (highest z-order)	97973
UNKNOWN	for indexes greater than the top index we fetch one item above to shift for the	97974
UNKNOWN	displacement of the top index	97975
UNKNOWN	draw the background gradient below children.	97976
UNKNOWN	we want to draw the page hints above the workspace but below the drag view.	97977
UNKNOWN	list do not scroll horizontally.	97978
UNKNOWN	catch the back button on the soft keyboard so that we can just close the activity	97979
UNKNOWN	there are two layers a pagedviewcelllayout and pagedviewcelllayoutchildren	97980
UNKNOWN	now that we load items in the bg asynchronously we cant just focus	97981
UNKNOWN	child siblings willy-nilly	97982
UNKNOWN	select the previous widget or the last widget on the previous page	97983
UNKNOWN	select the next widget or the first widget on the next page	97984
UNKNOWN	select the closest icon in the previous row otherwise select the tab bar	97985
UNKNOWN	select the closest icon in the previous row otherwise do nothing	97986
UNKNOWN	simulate a click on the widget	97987
UNKNOWN	select the first item on the previous page or the first item on this page	97988
UNKNOWN	if there is no previous page	97989
UNKNOWN	select the first item on the next page or the last item on this page	97990
UNKNOWN	if there is no next page	97991
UNKNOWN	select the first item on this page	97992
UNKNOWN	select the last item on this page	97993
UNKNOWN	note we have an extra parent because of the	97994
UNKNOWN	pagedviewcelllayout/pagedviewcelllayoutchildren relationship	97995
UNKNOWN	side pages do not always load synchronously so check before focusing child siblings	97996
UNKNOWN	willy-nilly	97997
UNKNOWN	select the previous icon or the last icon on the previous page	97998
UNKNOWN	select the next icon or the first icon on the next page	97999
UNKNOWN	select the closest icon in the previous row otherwise select the tab bar	98000
UNKNOWN	select the closest icon in the next row otherwise do nothing	98001
UNKNOWN	select the first icon on the previous page or the first icon on this page	98002
UNKNOWN	if there is no previous page	98003
UNKNOWN	select the first icon on the next page or the last icon on this page	98004
UNKNOWN	if there is no next page	98005
UNKNOWN	select the first icon on this page	98006
UNKNOWN	select the last icon on this page	98007
UNKNOWN	select the previous tab	98008
UNKNOWN	select the next tab or if the last tab has a focus right id select that	98009
UNKNOWN	do nothing	98010
UNKNOWN	select the content view	98011
UNKNOWN	note currently we dont special case for the phone ui in different	98012
UNKNOWN	orientations even though the hotseat is on the side in landscape mode. this	98013
UNKNOWN	is to ensure that accessibility consistency is maintained across rotations.	98014
UNKNOWN	select the previous button otherwise do nothing	98015
UNKNOWN	select the next button otherwise do nothing	98016
UNKNOWN	select the first bubble text view in the current page of the workspace	98017
UNKNOWN	do nothing	98018
UNKNOWN	first we order each the celllayout children by their xy coordinates	98019
UNKNOWN	then we find the next bubbletextview offset by delta from i	98020
UNKNOWN	select the previous icon or the last icon on the previous page if possible	98021
UNKNOWN	snap to the previous page	98022
UNKNOWN	select the next icon or the first icon on the next page if possible	98023
UNKNOWN	snap to the next page	98024
UNKNOWN	select the closest icon in the previous line otherwise select the tab bar	98025
UNKNOWN	select the closest icon in the next line otherwise select the button bar	98026
UNKNOWN	select the first icon on the previous page or the first icon on this page	98027
UNKNOWN	if there is no previous page	98028
UNKNOWN	snap to the previous page	98029
UNKNOWN	select the first icon on the next page or the last icon on this page	98030
UNKNOWN	if there is no previous page	98031
UNKNOWN	snap to the next page	98032
UNKNOWN	select the first icon on this page	98033
UNKNOWN	select the last icon on this page	98034
UNKNOWN	select the previous icon	98035
UNKNOWN	select the next icon	98036
UNKNOWN	select the closest icon in the previous line	98037
UNKNOWN	select the closest icon in the next line	98038
UNKNOWN	select the first icon on this page	98039
UNKNOWN	select the last icon on this page	98040
UNKNOWN	one time call to generate the pressed/focused state -- must be called after	98041
UNKNOWN	measure/layout	98042
UNKNOWN	one time call to generate the pressed/focused state -- must be called after	98043
UNKNOWN	measure/layout	98044
UNKNOWN	suppress dead code warning	98045
UNKNOWN	offset the preview background to center this view accordingly	98046
UNKNOWN	location is expressed in window coordinates	98047
UNKNOWN	location is expressed in window coordinates	98048
UNKNOWN	todo we currently dont support spring-loading for pendingaddshortcutinfos even	98049
UNKNOWN	though widget-style shortcuts can be added to folders. the issue is that we need	98050
UNKNOWN	to deal with configuration activities which are currently handled in	98051
UNKNOWN	workspace#ondropexternal.	98052
UNKNOWN	came from all apps -- make a copy.	98053
UNKNOWN	shortcutinfo	98054
UNKNOWN	these correspond two the drawable and view that the icon was dropped _onto_	98055
UNKNOWN	this will animate the first item from its position as an icon into its	98056
UNKNOWN	position as the first item in the preview	98057
UNKNOWN	this will animate the dragview (srcview) into the new folder	98058
UNKNOWN	this will animate the first item from its position as an icon into its	98059
UNKNOWN	position as the first item in the preview	98060
UNKNOWN	typically the animateview corresponds to the dragview however if this is being done	98061
UNKNOWN	after a configuration activity (ie. for a shortcut being dragged from allapps) we	98062
UNKNOWN	will not have a view to animate	98063
UNKNOWN	set celllayout and this to its final state to compute final animation locations	98064
UNKNOWN	finished computing final animation locations restore current state	98065
UNKNOWN	came from all apps -- make a copy	98066
UNKNOWN	cos(45) = 0.707 + ~= 0.1) = 0.8f	98067
UNKNOWN	we want to imagine our coordinates from the bottom left growing up and to the	98068
UNKNOWN	right. this is natural for the x-axis but for the y-axis we have to invert things.	98069
UNKNOWN	update our drawing parameters if necessary	98070
UNKNOWN	call the superclass ontouchevent first because sometimes it changes the state to	98071
UNKNOWN	ispressed() on an action_up	98072
UNKNOWN	location is expressed in window coordinates	98073
UNKNOWN	location is expressed in window coordinates	98074
UNKNOWN	noinspection zerolengtharrayallocation	98075
UNKNOWN	we start by removing most of the alpha channel so as to ignore shadows and	98076
UNKNOWN	other types of partial transparency when defining the shape of the object	98077
UNKNOWN	calculate the outer blur first	98078
UNKNOWN	calculate the inner blur	98079
UNKNOWN	mask out the inner blur	98080
UNKNOWN	draw the inner and outer blur	98081
UNKNOWN	draw the bright outline	98082
UNKNOWN	cleanup	98083
UNKNOWN	adjust the clip rect so that we dont include the text label	98084
UNKNOWN	draw the view into the bitmap.	98085
UNKNOWN	the translate of scrollx and scrolly is necessary when drawing textviews because	98086
UNKNOWN	they set scrollx and scrolly to large values to achieve centered text	98087
UNKNOWN	we use the same intents as lawnchair.	98088
UNKNOWN	we find out how tall the text view wants to be (it is set to wrap_content) so that	98089
UNKNOWN	we can allocate the appropriate amount of space for it.	98090
UNKNOWN	we disable action mode for now since it messes up the view on phones	98091
UNKNOWN	return if global dragging is not enabled	98092
UNKNOWN	convert to a string here to ensure that no other state associated with the text field	98093
UNKNOWN	gets saved.	98094
UNKNOWN	in order to clear the focus from the text field we set the focus on ourself. this	98095
UNKNOWN	ensures that every time the field is clicked focus is gained giving reliable behavior.	98096
UNKNOWN	when the folder gets focus we dont want to announce the list of items.	98097
UNKNOWN	we rearrange the items in case there are any empty gaps	98098
UNKNOWN	if our folder has too many items we prune them from the list. this is an issue	98099
UNKNOWN	when upgrading from the old folders implementation which could contain an unlimited	98100
UNKNOWN	number of items.	98101
UNKNOWN	in case any children didnt come across during loading clean up the folder accordingly	98102
UNKNOWN	in low power mode the animation doesnt play so set the end value here	98103
UNKNOWN	in low power mode the animation doesnt play so set the end value here	98104
UNKNOWN	mcontent.setalpha(0f) animator iconsalpha = launcheranimutils.offloat(mcontent alpha 0f 1f) iconsalpha.setduration(mmaterialexpandduration) iconsalpha.setstartdelay(mmaterialexpandstagger) iconsalpha.setinterpolator(new accelerateinterpolator(1.5f)) mfoldername.setalpha(0f) animator textalpha = launcheranimutils.offloat(mfoldername alpha 0f 1f) textalpha.setduration(mmaterialexpandduration) textalpha.setstartdelay(mmaterialexpandstagger) textalpha.setinterpolator(new accelerateinterpolator(1.5f))	98105
UNKNOWN	in low power mode the animation doesnt play so set the end value here	98106
UNKNOWN	anim.play(iconsalpha) anim.play(textalpha)	98107
UNKNOWN	make sure the folder picks up the last drag move even if the finger doesnt move.	98108
UNKNOWN	in low power mode the animation doesnt play so set the end value here	98109
UNKNOWN	final objectanimator oa = launcheranimutils.ofpropertyvaluesholder(this alpha scalex scaley)	98110
UNKNOWN	power save mode is no fun - skip alpha animation and just set it to 0	98111
UNKNOWN	otherwise the icons will stay around until the duration of the animation	98112
UNKNOWN	we need to check here to verify that the given items location isnt already occupied	98113
UNKNOWN	by another item.	98114
UNKNOWN	this shouldnt happen log it.	98115
UNKNOWN	this is used to compute the visual center of the dragview. the idea is that	98116
UNKNOWN	the visual center represents the users interpretation of where the item is and hence	98117
UNKNOWN	is the appropriate point to use when determining drop location.	98118
UNKNOWN	these represent the visual top and left of drag view if a dragrect was provided.	98119
UNKNOWN	if a dragrect was not provided then they correspond to the actual view left and	98120
UNKNOWN	top as the dragrect is in that case taken to be the entire dragview.	98121
UNKNOWN	r.dimen.dragviewoffsety.	98122
UNKNOWN	in order to find the visual center we shift by half the dragrect	98123
UNKNOWN	exiting folder stop the auto scroller.	98124
UNKNOWN	we only close the folder if this is a true drag exit ie. not because	98125
UNKNOWN	a drop has occurred above the folder.	98126
UNKNOWN	the drag failed we need to return the item to the folder	98127
UNKNOWN	reordering may have occured and we need to save the new item locations. we do this once	98128
UNKNOWN	at the end to prevent unnecessary database operations.	98129
UNKNOWN	do nothing	98130
UNKNOWN	do nothing	98131
UNKNOWN	current grid is too small expand it	98132
UNKNOWN	in case the workspace is scrolling we need to use the final scroll to compute	98133
UNKNOWN	the folders bounds.	98134
UNKNOWN	we first fetch the currently visible celllayoutchildren	98135
UNKNOWN	we reset the workspaces scroll	98136
UNKNOWN	we need to bound the folder to the currently visible celllayoutchildren	98137
UNKNOWN	center the folder if it is full (on phones only)	98138
UNKNOWN	if the folder doesnt fit within the bounds center it about the desired bounds	98139
UNKNOWN	dont cap the height of the content to allow scrolling.	98140
UNKNOWN	add the last remaining child to the workspace in place of the folder	98141
UNKNOWN	move the item from the folder to the workspace in the position of the folder	98142
UNKNOWN	remove the folder	98143
UNKNOWN	b/12446428 -- sometimes the cell layout has already gone away?	98144
UNKNOWN	we add the child after removing the folder to prevent both from existing at	98145
UNKNOWN	the same time in the celllayout. we need to add the new item with addinscreenfrombind()	98146
UNKNOWN	to ensure that hotseat items are placed correctly.	98147
UNKNOWN	move the item from the folder to the workspace in the position of the folder	98148
UNKNOWN	remove the folder	98149
UNKNOWN	b/12446428 -- sometimes the cell layout has already gone away?	98150
UNKNOWN	we add the child after removing the folder to prevent both from existing at	98151
UNKNOWN	the same time in the celllayout. we need to add the new item with addinscreenfrombind()	98152
UNKNOWN	to ensure that hotseat items are placed correctly.	98153
UNKNOWN	this method keeps track of the last item in the folder for the purposes	98154
UNKNOWN	of keyboard focus	98155
UNKNOWN	if we are coming from all apps space we defer removing the extra empty screen	98156
UNKNOWN	until the folder closes	98157
UNKNOWN	actually move the item in the database if it was an external drag. call this	98158
UNKNOWN	before creating the view so that shortcutinfo is updated appropriately.	98159
UNKNOWN	we only need to update the locations if it doesnt get handled in #ondropcompleted.	98160
UNKNOWN	temporarily reset the scale such that the animation target gets calculated correctly.	98161
UNKNOWN	temporarily suppress the listener as we did all the work already here.	98162
UNKNOWN	clear the drag info as it is no longer being dragged.	98163
UNKNOWN	this is used so the item doesnt immediately appear in the folder when added. in one case	98164
UNKNOWN	we need to create the illusion that the item isnt added back to the folder yet to	98165
UNKNOWN	to correspond to the animation of the icon back into the folder. this is	98166
UNKNOWN	if the item was dropped onto this open folder we have done the work associated	98167
UNKNOWN	with adding the item to the folder as indicated by msuppressonadd being set	98168
UNKNOWN	the current layout is full can we expand it?	98169
UNKNOWN	if this item is being dragged from this open folder we have already handled	98170
UNKNOWN	the work associated with removing the item so we dont have to do anything here.	98171
UNKNOWN	get the hover color	98172
UNKNOWN	todo investigate why this is ever happening. presently only on one known device.	98173
UNKNOWN	remove the text in the phone ui in landscape	98174
UNKNOWN	acceptdrop is called just before ondrop. we do the work here rather than	98175
UNKNOWN	in ondrop because it allows us to reject the drop (by returning false)	98176
UNKNOWN	so that the object being dragged isnt removed from the drag source.	98177
UNKNOWN	there is no post-drop animation so clean up the dragview now	98178
UNKNOWN	hide this button unless we are dragging something from allapps	98179
UNKNOWN	if an animation is started and then stopped very quickly we can still	98180
UNKNOWN	get spurious updates weve cleared the tag. guard against this.	98181
UNKNOWN	suppress dead code warning	98182
UNKNOWN	try to prevent it from continuing to run	98183
UNKNOWN	set whether or not to invert the layout horizontally if the layout is in rtl mode.	98184
UNKNOWN	when were large we are either drawn in a hover state (ie when dragging an item to	98185
UNKNOWN	a neighboring page) or with just a normal background (if backgroundalpha > 0.0f)	98186
UNKNOWN	when were small we are either drawn normally or in the accepts drops state (during	98187
UNKNOWN	a drag). however we also drag the mini hover background over one of those two	98188
UNKNOWN	backgrounds	98189
UNKNOWN	in the mini case we draw the active_glow bg over the active background	98190
UNKNOWN	the folder outer / inner ring image(s)	98191
UNKNOWN	draw outer ring if it exists	98192
UNKNOWN	draw inner ring	98193
UNKNOWN	mismatched viewid / viewtype preventing restore. skip restore on production builds.	98194
UNKNOWN	cancel long press for all children	98195
UNKNOWN	generate an id for each view this assumes we have at most 256x256 cells	98196
UNKNOWN	per workspace screen	98197
UNKNOWN	if the horizontal or vertical span is set to -1 it is taken to	98198
UNKNOWN	mean that it spans the extent of the celllayout	98199
UNKNOWN	first we clear the tag to ensure that on every touch down we start with a fresh slate	98200
UNKNOWN	even in the case where we return early. not clearing here was causing bugs whereby on	98201
UNKNOWN	long-press wed end up picking up an item from a previous drag operation.	98202
UNKNOWN	expand the background drawing bounds by the padding baked into the background drawable	98203
UNKNOWN	we cancel any existing animations	98204
UNKNOWN	exit early if were not actually moving the view	98205
UNKNOWN	if the animation was cancelled it means that another animation	98206
UNKNOWN	has interrupted this one and we dont want to lock the item into	98207
UNKNOWN	place just yet.	98208
UNKNOWN	if the animation was cancelled it means that another animation	98209
UNKNOWN	has interrupted this one and we dont want to lock the item into	98210
UNKNOWN	place just yet.	98211
UNKNOWN	pointtocellrounded takes the top left of a cell but will pad that with	98212
UNKNOWN	cellwidth/2 and cellheight/2 when finding the matching cell	98213
UNKNOWN	if the item isnt fully on this screen snap to the edges	98214
UNKNOWN	snap to right	98215
UNKNOWN	snap to left	98216
UNKNOWN	snap to bottom	98217
UNKNOWN	snap to top	98218
UNKNOWN	find the top left corner of the rect the object will occupy	98219
UNKNOWN	when drawing the drag outline it did not account for margin offsets	98220
UNKNOWN	added by the views parent.	98221
UNKNOWN	offsets due to the size difference between the view and the dragoutline.	98222
UNKNOWN	there is a size difference to account for the outer blur which may lie	98223
UNKNOWN	outside the bounds of the view.	98224
UNKNOWN	we center about the x axis	98225
UNKNOWN	center the drag region horizontally in the cell and apply a drag	98226
UNKNOWN	outline offset	98227
UNKNOWN	center the drag outline in the cell	98228
UNKNOWN	mark space take by ignoreview as available (method checks if ignoreview is null)	98229
UNKNOWN	for items with a spanx / spany > 1 the passed in point (pixelx pixely) corresponds	98230
UNKNOWN	to the center of the item but we are searching based on the top-left cell so	98231
UNKNOWN	we translate the point over to correspond to the top-left.	98232
UNKNOWN	keep track of best-scoring drop area	98233
UNKNOWN	first lets see if this thing fits anywhere	98234
UNKNOWN	we know that the item will fit at _some_ acceptable size now lets see	98235
UNKNOWN	how big we can make it. well alternate between incrementing x and y spans	98236
UNKNOWN	until we hit a limit.	98237
UNKNOWN	we cant move out horizontally	98238
UNKNOWN	we cant move out vertically	98239
UNKNOWN	we verify that the current rect is not a sub-rect of any of our previous	98240
UNKNOWN	candidates. in this case the current rect is disqualified in favour of the	98241
UNKNOWN	containing rect.	98242
UNKNOWN	re-mark space taken by ignoreview as occupied	98243
UNKNOWN	return -1 -1 if no suitable location found	98244
UNKNOWN	keep track of best-scoring drop area	98245
UNKNOWN	first lets see if this thing fits anywhere	98246
UNKNOWN	the direction score is just the dot product of the two candidate direction	98247
UNKNOWN	and that passed in.	98248
UNKNOWN	return -1 -1 if no suitable location found	98249
UNKNOWN	determine the edge of the cluster that will be leading the push and how far	98250
UNKNOWN	the cluster must be shifted.	98251
UNKNOWN	break early for invalid push distance.	98252
UNKNOWN	mark the occupied state as false for the group of views we want to move.	98253
UNKNOWN	we save the current configuration -- if we fail to find a solution we will revert	98254
UNKNOWN	to the initial state. the process of finding a solution modifies the configuration	98255
UNKNOWN	in place hence the need for revert in the failure case.	98256
UNKNOWN	the pushing algorithm is simplified by considering the views in the order in which	98257
UNKNOWN	they would be pushed by the cluster. for example if the cluster is leading with its	98258
UNKNOWN	left edge we consider sort the views by their right edge from right to left.	98259
UNKNOWN	for each view that isnt in the cluster we see if the leading edge of the	98260
UNKNOWN	cluster is contacting the edge of that view. if so we add that view to the	98261
UNKNOWN	cluster.	98262
UNKNOWN	the push solution includes the all apps button this is not viable.	98263
UNKNOWN	adding view to cluster mark it as not occupied.	98264
UNKNOWN	the cluster has been completed now we move the whole thing over in the appropriate	98265
UNKNOWN	direction.	98266
UNKNOWN	due to the nature of the algorithm the only check required to verify a valid solution	98267
UNKNOWN	is to ensure that completed shifted cluster lies completely within the cell layout.	98268
UNKNOWN	in either case we set the occupied array as marked for the location of the views	98269
UNKNOWN	we construct a rect which represents the entire group of views passed in	98270
UNKNOWN	mark the occupied state as false for the group of views we want to move.	98271
UNKNOWN	we mark more precisely which parts of the bounding rect are truly occupied allowing	98272
UNKNOWN	for interlocking.	98273
UNKNOWN	if we successfuly found a location by pushing the block of views we commit it	98274
UNKNOWN	in either case we set the occupied array as marked for the location of the views	98275
UNKNOWN	this method tries to find a reordering solution which satisfies the push mechanic by trying	98276
UNKNOWN	to push items in each of the cardinal directions in an order based on the direction vector	98277
UNKNOWN	passed.	98278
UNKNOWN	if the direction vector has two non-zero components we try pushing	98279
UNKNOWN	separately in each of the components.	98280
UNKNOWN	revert the direction	98281
UNKNOWN	now we try pushing in each component of the opposite direction	98282
UNKNOWN	revert the direction	98283
UNKNOWN	if the direction vector has a single non-zero component we push first in the	98284
UNKNOWN	direction of the vector	98285
UNKNOWN	then we try the opposite direction	98286
UNKNOWN	switch the direction back	98287
UNKNOWN	if we have failed to find a push solution with the above then we try	98288
UNKNOWN	to find a solution by pushing along the perpendicular axis.	98289
UNKNOWN	swap the components	98290
UNKNOWN	then we try the opposite direction	98291
UNKNOWN	switch the direction back	98292
UNKNOWN	swap the components back	98293
UNKNOWN	return early if get invalid cell positions	98294
UNKNOWN	mark the desired location of the view currently being dragged.	98295
UNKNOWN	first we try to find a solution which respects the push mechanic. that is	98296
UNKNOWN	we try to find a solution such that no displaced item travels through another item	98297
UNKNOWN	without also displacing that item.	98298
UNKNOWN	next we try moving the views as a block but without requiring the push mechanic.	98299
UNKNOWN	ok they couldnt move as a block lets move them individually	98300
UNKNOWN	returns a pair (x y) where xy are in {-1 0 1} corresponding to vector between the provided point and the provided cell	98301
UNKNOWN	copy the current state into the solution. this solution will be manipulated as necessary.	98302
UNKNOWN	copy the current occupied array into the temporary occupied array. this array will be	98303
UNKNOWN	manipulated as necessary to find a solution.	98304
UNKNOWN	we find the nearest cell into which we would place the dragged item assuming theres	98305
UNKNOWN	nothing in its way.	98306
UNKNOWN	first we try the exact nearest position of the item being dragged	98307
UNKNOWN	we will then want to try to move this around to other neighbouring positions	98308
UNKNOWN	we try shrinking the widget down to size in an alternating pattern shrink 1 in	98309
UNKNOWN	x then 1 in y etc.	98310
UNKNOWN	this method starts or changes the reorder preview animations	98311
UNKNOWN	we make sure to end only after a full period	98312
UNKNOWN	we make sure to end only after a full period	98313
UNKNOWN	we do a null check here because the item info can be null in the case of the	98314
UNKNOWN	allapps button in the hotseat.	98315
UNKNOWN	this seems like it should be obvious and straight-forward but when the direction vector needs to match with the notion of the dragview pushing other views we have to employ a slightly more subtle notion of the direction vector. the question is what two points is the vector between? the center of the dragview and its desired destination? not quite as this doesnt necessarily coincide with the interaction of the dragview and items occupying those cells. instead we use some heuristics to often lock the vector to up down left or right which helps make pushing feel right.	98316
UNKNOWN	no idea what to do give a random direction.	98317
UNKNOWN	for a given cell and span fetch the set of views intersecting the region.	98318
UNKNOWN	first we determine if things have moved enough to cause a different layout	98319
UNKNOWN	if were just testing for a possible location (mode_accept_drop) we dont bother	98320
UNKNOWN	committing anything or animating anything as we just want to determine if a solution	98321
UNKNOWN	exists	98322
UNKNOWN	first we determine if things have moved enough to cause a different layout	98323
UNKNOWN	when we are checking drop validity or actually dropping we dont recompute the	98324
UNKNOWN	direction vector since we want the solution to match the preview and its possible	98325
UNKNOWN	that the exact position of the item has changed to result in a new reordering outcome.	98326
UNKNOWN	we reset this vector after drop	98327
UNKNOWN	find a solution involving pushing / displacing any items in the way	98328
UNKNOWN	we attempt the approach which doesnt shuffle views at all	98329
UNKNOWN	if the reorder solution requires resizing (shrinking) the item being dropped we instead	98330
UNKNOWN	favor a solution in which the item is not resized but	98331
UNKNOWN	if were just testing for a possible location (mode_accept_drop) we dont bother	98332
UNKNOWN	committing anything or animating anything as we just want to determine if a solution	98333
UNKNOWN	exists	98334
UNKNOWN	copy current state into savedmap	98335
UNKNOWN	restore current state from savedmap	98336
UNKNOWN	mark space take by ignoreview as available (method checks if ignoreview is null)	98337
UNKNOWN	small optimization we can skip to after the column we just found	98338
UNKNOWN	an occupied cell	98339
UNKNOWN	if we failed to find anything try again but without any requirements of	98340
UNKNOWN	intersecting	98341
UNKNOWN	re-mark space taken by ignoreview as occupied	98342
UNKNOWN	this can actually be called when we arent in a drag e.g. when adding a new	98343
UNKNOWN	item to this layout via the customize drawer.	98344
UNKNOWN	guard against that case.	98345
UNKNOWN	invalidate the drag data	98346
UNKNOWN	always assume were working with the smallest span to make sure we	98347
UNKNOWN	reserve enough space in both orientations.	98348
UNKNOWN	always round up to next largest cell	98349
UNKNOWN	its not a widget so it must be 1x1	98350
UNKNOWN	we make sure to end only after a full period	98351
UNKNOWN	we make sure to end only after a full period	98352
UNKNOWN	copy current state into savedmap	98353
UNKNOWN	restore current state from savedmap	98354
UNKNOWN	lazy-create inflater	98355
UNKNOWN	use the convert-view where possible	98356
UNKNOWN	set the icon	98357
UNKNOWN	set the text	98358
UNKNOWN	lazy-create inflater	98359
UNKNOWN	use the convert-view where possible	98360
UNKNOWN	set the icon	98361
UNKNOWN	set the text	98362
UNKNOWN	make sure its stopped before we modify any values	98363
UNKNOWN	todo we dont really need to do the animation if startvalue == tovalue but	98364
UNKNOWN	somehow that doesnt seem to work possibly a quirk of the animation framework	98365
UNKNOWN	ensure we dont calculate a non-sensical duration	98366
UNKNOWN	null info means not installed but if we have a component from the intent then	98367
UNKNOWN	we should still look in the cache for restored app icons.	98368
UNKNOWN	null info means not installed but if we have a component from the intent then	98369
UNKNOWN	we should still look in the cache for restored app icons.	98370
UNKNOWN	todo rescale to the correct native dpi	98371
UNKNOWN	component is present on the system already do nothing	98372
UNKNOWN	pass	98373
UNKNOWN	we dont keep icons for other profiles in persistent cache.	98374
UNKNOWN	we dont keep icons for other profiles in persistent cache.	98375
UNKNOWN	we should never persist an item on the extra empty screen.	98376
UNKNOWN	try go guesstimate how much space the icon will take when serialized	98377
UNKNOWN	to avoid unnecessary allocations/copies during the write.	98378
UNKNOWN	helper method. assumes a draw is pending and that if the animations duration is 0	98379
UNKNOWN	it should be cancelled	98380
UNKNOWN	use this as a signal that the animation was cancelled	98381
UNKNOWN	use this as a signal that the animation was cancelled	98382
UNKNOWN	were willing to let this slide. the exception is being caused by the list of	98383
UNKNOWN	remoteviews which is being passed back. the startlistening relationship will	98384
UNKNOWN	have been established by this point and we will end up populating the	98385
UNKNOWN	widgets upon bind anyway. see issue 14255011 for more context.	98386
UNKNOWN	once we get the message that widget packages are updated we need to rebind items	98387
UNKNOWN	in appscustomize accordingly.	98388
UNKNOWN	an app target can either have no extra or have iteminfo.extra_profile.	98389
UNKNOWN	this name is only used for comparisons and notifications so fall back to activity name	98390
UNKNOWN	if not supplied	98391
UNKNOWN	queue the item up for adding if launcher has not loaded properly yet	98392
UNKNOWN	since its a custom shortcut verify that it is safe to launch.	98393
UNKNOWN	target cannot be launched or requires some special permission to launch	98394
UNKNOWN	final intent data = pendinginfo.data	98395
UNKNOWN	final boolean allowduplicate = data.getbooleanextra(launcher.extra_shortcut_duplicate true)	98396
UNKNOWN	if the intent specifies a package make sure the package exists	98397
UNKNOWN	generate a shortcut info to add into the model	98398
UNKNOWN	notify the user once if we werent able to place any duplicates	98399
UNKNOWN	add the new apps to the model and bind them	98400
UNKNOWN	if the database has ever changed then we really need to force a reload of the	98401
UNKNOWN	workspace on the next load	98402
UNKNOWN	update the icon size	98403
UNKNOWN	need a version that doesnt require an instance of launcherappstate for the wallpaper picker	98404
UNKNOWN	returns false on non-dogfood builds.	98405
UNKNOWN	store the orientation in which the widget was inflated	98406
UNKNOWN	re-inflate is required if the orientation has changed since last inflated.	98407
UNKNOWN	just in case the previous long press hasnt been cleared we make sure to start fresh	98408
UNKNOWN	on touch down.	98409
UNKNOWN	consume any touch events for ourselves after longpress is triggered	98410
UNKNOWN	watch for longpress events at this level to make sure	98411
UNKNOWN	users can always pick up this widget	98412
UNKNOWN	otherwise continue letting touch events fall through to children	98413
UNKNOWN	if the widget does not handle touch then cancel	98414
UNKNOWN	long press when we release the touch	98415
UNKNOWN	if a long press has been performed we dont want to clear the record of that since	98416
UNKNOWN	we still may be receiving a touch up which we want to intercept	98417
UNKNOWN	there is only one process accessing this preference file but the restore	98418
UNKNOWN	modifies the file outside the normal codepaths so it looks like another	98419
UNKNOWN	process. this forces a reload of the file in case this process persists.	98420
UNKNOWN	no restore for old devices.	98421
UNKNOWN	clear db before restore	98422
UNKNOWN	if no favorite was migrated clear the data and start fresh.	98423
UNKNOWN	if the restore fails we should do a fresh start.	98424
UNKNOWN	disable the migration cling	98425
UNKNOWN	copy the shortcuts from the old database	98426
UNKNOWN	set the flag to skip the folder cling	98427
UNKNOWN	disable the migration cling	98428
UNKNOWN	show the longpress cling next	98429
UNKNOWN	show the longpress cling next	98430
UNKNOWN	show the longpress cling next	98431
UNKNOWN	this is the first cling being shown. no need to animate.	98432
UNKNOWN	animate	98433
UNKNOWN	to catch cases where siblings of top-level views are made invisible just check whether	98434
UNKNOWN	the cling is directly set to gone before dismissing it.	98435
UNKNOWN	disable clings when running in a test harness	98436
UNKNOWN	disable clings for accessibility when explore by touch is enabled	98437
UNKNOWN	restricted secondary users (child mode) will potentially have very few apps	98438
UNKNOWN	seeded when they start up for the first time. clings wont work well with that	98439
UNKNOWN	noinspection unusedassignment	98440
UNKNOWN	clear the output journal time to force a full backup to	98441
UNKNOWN	will catch any changes the restore process might have made	98442
UNKNOWN	read the old id set	98443
UNKNOWN	persist things that have changed since the last backup	98444
UNKNOWN	dont backup apps in other profiles for now.	98445
UNKNOWN	these ids must have been deleted	98446
UNKNOWN	read the old id set	98447
UNKNOWN	persist things that have changed since the last backup	98448
UNKNOWN	these ids must have been deleted	98449
UNKNOWN	persist icons that havent been persisted yet	98450
UNKNOWN	try again later	98451
UNKNOWN	read the old id set	98452
UNKNOWN	dont backup apps in other profiles for now.	98453
UNKNOWN	remember that we already backed this up previously	98454
UNKNOWN	too many icons for this pass request another.	98455
UNKNOWN	these ids must have been deleted	98456
UNKNOWN	persist static widget info that hasnt been persisted yet	98457
UNKNOWN	read the old id set	98458
UNKNOWN	remember that we already backed this up previously	98459
UNKNOWN	too many widgets for this pass request another.	98460
UNKNOWN	these ids must have been deleted	98461
UNKNOWN	else {	98462
UNKNOWN	future site of widget table mutation	98463
UNKNOWN	}	98464
UNKNOWN	let launchermodel know weve been here.	98465
UNKNOWN	omg what are you doing? this is crazy inefficient!	98466
UNKNOWN	if we read a byte that is not ours we will cause trouble b/12491813	98467
UNKNOWN	however we dont know how many bytes to expect (oops).	98468
UNKNOWN	so we have to step through slowly watching for the end.	98469
UNKNOWN	stop reading and see what there is to parse	98470
UNKNOWN	check the buffer to see if we have a valid journal	98471
UNKNOWN	if we are here then we have read a valid checksum-verified journal	98472
UNKNOWN	if we dont have the whole journal yet mergefrom will throw. keep going.	98473
UNKNOWN	check if the launcher is in a state to support backup	98474
UNKNOWN	launcher data has been wiped do nothing	98475
UNKNOWN	launcher services are unavailable try again later	98476
UNKNOWN	g (m/s^2)	98477
UNKNOWN	inch/meter	98478
UNKNOWN	pixels per inch	98479
UNKNOWN	pin to mminx <= mcurrx <= mmaxx	98480
UNKNOWN	pin to mminy <= mcurry <= mmaxy	98481
UNKNOWN	continue a scroll or fling in progress	98482
UNKNOWN	pin to mminx <= mfinalx <= mmaxx	98483
UNKNOWN	pin to mminy <= mfinaly <= mmaxy	98484
UNKNOWN	1/e == exp(-1)	98485
UNKNOWN	this is the first time we get a handle to the internal valueanimator	98486
UNKNOWN	used by the viewpropertyanimator.	98487
UNKNOWN	firstframeanimatorhelper hooks itself up to the updates on the animator	98488
UNKNOWN	and then adjusts the play time to keep the first two frames jank-free	98489
UNKNOWN	256k	98490
UNKNOWN	ugh whatever	98491
UNKNOWN	will block	98492
UNKNOWN	log.v(tag update pid + pid + pss= + info.currentpss + uss= + info.currentuss)	98493
UNKNOWN	catch up in case we crashed but other processes are still running	98494
UNKNOWN	they sent us a bad intent	98495
UNKNOWN	in rare cases the receiver races with the application to set up launcherappstate	98496
UNKNOWN	if the current icon pack was deleted we reload the icons.	98497
UNKNOWN	in very limited cases we support system|signature permission apps to add to the db	98498
UNKNOWN	always notify the backup agent	98499
UNKNOWN	this is only required one time while loading the workspace during the	98500
UNKNOWN	upgrade path and should never be called from anywhere else.	98501
UNKNOWN	populate favorites table with initial favorites	98502
UNKNOWN	we dont import the old databse for tablets as the grid size has changed.	98503
UNKNOWN	are you sure? (y/n)	98504
UNKNOWN	database was just created so wipe any previous widgets	98505
UNKNOWN	try converting the old database	98506
UNKNOWN	try and upgrade from the launcher2 db	98507
UNKNOWN	if we fail then set a flag to load the default workspace	98508
UNKNOWN	right now in non-default workspace cases we want to run the final	98509
UNKNOWN	upgrade code (ie. to fix workspace screen indices -> ids etc.) so	98510
UNKNOWN	set that flag too.	98511
UNKNOWN	fresh and clean launcher db.	98512
UNKNOWN	delete items directly on the workspace whos screen id doesnt exist	98513
UNKNOWN	delete from favorites where screen not in (select _id from workspacescreens)	98514
UNKNOWN	and container = -100	98515
UNKNOWN	delete items contained in folders which no longer exist (after above statement)	98516
UNKNOWN	delete from favorites where container <> -100 and container <> -101 and container	98517
UNKNOWN	not in (select _id from favorites where itemtype = 2)	98518
UNKNOWN	we rearrange the screens from the old launcher	98519
UNKNOWN	12345 -> 34512	98520
UNKNOWN	ignore	98521
UNKNOWN	we already have a favorites database in the old provider	98522
UNKNOWN	convert widgets from this import into widgets	98523
UNKNOWN	update max item id	98524
UNKNOWN	upgrade 12 -> 3 added appwidgetid column	98525
UNKNOWN	insert new column for holding appwidgetids	98526
UNKNOWN	old version remains which means we wipe old data	98527
UNKNOWN	convert existing widgets only if table upgrade was successful	98528
UNKNOWN	wheres version 5?	98529
UNKNOWN	- donut and sholes on 2.0 shipped with version 4 of launcher1.	98530
UNKNOWN	- passion shipped on 2.1 with version 6 of launcher3	98531
UNKNOWN	- sholes shipped on 2.1r1 (aka mr. 3) with version 5 of launcher 1	98532
UNKNOWN	but version 5 on there was the updatecontactsshortcuts change	98533
UNKNOWN	which was version 6 in launcher 2 (first shipped on passion 2.1r1).	98534
UNKNOWN	the updatecontactsshortcuts change is idempotent so running it twice	98535
UNKNOWN	is okay so well do that when upgrading the devices that shipped with it.	98536
UNKNOWN	we went from 3 to 5 screens. move everything 1 to the right	98537
UNKNOWN	old version remains which means we wipe old data	98538
UNKNOWN	we added the fast track.	98539
UNKNOWN	version 7 gets rid of the special search widget.	98540
UNKNOWN	version 8 (froyo) has the icons all normalized. this should	98541
UNKNOWN	already be the case in practice but we now rely on it and dont	98542
UNKNOWN	resample the images each time.	98543
UNKNOWN	the max id is not yet set at this point (onupgrade is triggered in the ctor	98544
UNKNOWN	before it gets a change to get set so we need to read it here when we use it)	98545
UNKNOWN	add default hotseat icons	98546
UNKNOWN	we bumped the version three time during jb once to update the launch flags once to	98547
UNKNOWN	update the override for the default launch animation and once to set the mimetype	98548
UNKNOWN	to improve startup performance	98549
UNKNOWN	contact shortcuts need a different set of flags to be launched now	98550
UNKNOWN	the updatecontactsshortcuts change is idempotent so we can keep using it like	98551
UNKNOWN	back in the donut days	98552
UNKNOWN	with the new shrink-wrapped and re-orderable workspaces it makes sense	98553
UNKNOWN	to persist workspace screens and their relative order.	98554
UNKNOWN	this will never happen in the wild but when we switch to using workspace	98555
UNKNOWN	screen ids redo the import from old launcher.	98556
UNKNOWN	insert new column for holding widget provider name	98557
UNKNOWN	old version remains which means we wipe old data	98558
UNKNOWN	insert new column for holding update timestamp	98559
UNKNOWN	old version remains which means we wipe old data	98560
UNKNOWN	insert new column for holding restore status	98561
UNKNOWN	old version remains which means we wipe old data	98562
UNKNOWN	we use the db version upgrade here to identify users who may not have seen	98563
UNKNOWN	clings yet (because they werent available) but for whom the clings are now	98564
UNKNOWN	available (tablet users). because one of the possible cling flows (migration)	98565
UNKNOWN	is very destructive (wipes out workspaces) we want to prevent this from showing	98566
UNKNOWN	until clear data. we do so by marking that the clings have been shown.	98567
UNKNOWN	no-op	98568
UNKNOWN	due to a data loss bug some users may have items associated with screen ids	98569
UNKNOWN	which no longer exist. since this can cause other problems and since the user	98570
UNKNOWN	will never see these items anyway we use database upgrade as an opportunity to	98571
UNKNOWN	clean things up.	98572
UNKNOWN	add userid column	98573
UNKNOWN	else old version remains which means we wipe old data	98574
UNKNOWN	this shouldnt happen -- throw our hands up in the air and start over.	98575
UNKNOWN	default to the serial number of this user for older	98576
UNKNOWN	shortcuts.	98577
UNKNOWN	insert new column for holding user serial number	98578
UNKNOWN	old version remains which means we wipe old data	98579
UNKNOWN	select and iterate through each matching widget	98580
UNKNOWN	when starting from the launcher start in a new cleared task	98581
UNKNOWN	clear_when_task_reset cannot reset the root of a task so we	98582
UNKNOWN	clear the whole thing preemptively here since	98583
UNKNOWN	quickcontactactivity will finish itself when launching other	98584
UNKNOWN	detail activities.	98585
UNKNOWN	determine the type and also put that in the shortcut	98586
UNKNOWN	(that can speed up launch a bit)	98587
UNKNOWN	generates a new id to use for an object in your database. this method should be only	98588
UNKNOWN	called from the main ui thread. as an exception we do call it when we call the	98589
UNKNOWN	constructor from the worker thread however this doesnt extend until after the	98590
UNKNOWN	constructor is called and we only pass a reference to launcherprovider to launcherapp	98591
UNKNOWN	after that point	98592
UNKNOWN	get the result	98593
UNKNOWN	generates a new id to use for an workspace screen in your database. this method	98594
UNKNOWN	should be only called from the main ui thread. as an exception we do call it when we	98595
UNKNOWN	call the constructor from the worker thread however this doesnt extend until after the	98596
UNKNOWN	constructor is called and we only pass a reference to launcherprovider to launcherapp	98597
UNKNOWN	after that point	98598
UNKNOWN	log to disk	98599
UNKNOWN	log to disk	98600
UNKNOWN	get the result	98601
UNKNOWN	log to disk	98602
UNKNOWN	select and iterate through each matching widget	98603
UNKNOWN	allocate and update database with new appwidgetid	98604
UNKNOWN	original widgets might not have valid spans when upgrading	98605
UNKNOWN	todo check return value	98606
UNKNOWN	todo check return value	98607
UNKNOWN	todo check return value	98608
UNKNOWN	update max item id	98609
UNKNOWN	1. ensure that externally added items have a valid item id	98610
UNKNOWN	2. in the case of an app widget and if no app widget id is specified we	98611
UNKNOWN	attempt allocate and bind the widget.	98612
UNKNOWN	add screen id if not present	98613
UNKNOWN	returns true of screen id exists or if successfully added	98614
UNKNOWN	get the result	98615
UNKNOWN	noinspection statementwithemptybody	98616
UNKNOWN	todo use multiple loaders with fall-back and transaction.	98617
UNKNOWN	add the screens specified by the items above	98618
UNKNOWN	ensure that the max ids are initialized	98619
UNKNOWN	recursively load some more favorites why not?	98620
UNKNOWN	assuming its a <favorite> at this point	98621
UNKNOWN	this looks through the contained favorites (or meta-favorites) and	98622
UNKNOWN	attempts to add them as shortcuts in the fallback groups location	98623
UNKNOWN	until one is added successfully.	98624
UNKNOWN	folder contents are nested in this xml file	98625
UNKNOWN	folder contents come from an external xml resource	98626
UNKNOWN	keep track of the set of screens which need to be added to the db.	98627
UNKNOWN	we can only have folders with >= 2 items so we need to remove the	98628
UNKNOWN	folder and clean up if less than 2 items were included or some	98629
UNKNOWN	failed to add and less than 2 were actually added	98630
UNKNOWN	delete the folder	98631
UNKNOWN	if we have a single item promote it to where the folder	98632
UNKNOWN	would have been.	98633
UNKNOWN	a meta shortcut attempts to resolve an intent specified as a uri in the xml if a	98634
UNKNOWN	logical choice for what shortcut should be used for that intent exists then it is	98635
UNKNOWN	added. otherwise add nothing.	98636
UNKNOWN	verify that the result is an app and not just the resolver dialog asking which	98637
UNKNOWN	app to use.	98638
UNKNOWN	if only one of the results is a system app then choose that as the default.	98639
UNKNOWN	there is no logical choice for this meta-favorite so rather than making	98640
UNKNOWN	a bad choice just add nothing.	98641
UNKNOWN	if the list contains the above resolved activity then it cant be	98642
UNKNOWN	resolveractivity itself.	98643
UNKNOWN	if no component specified try to find a shortcut to add from the uri.	98644
UNKNOWN	read the extras	98645
UNKNOWN	todo need to check return value	98646
UNKNOWN	send a broadcast to configure the widget	98647
UNKNOWN	oh well	98648
UNKNOWN	ignore	98649
UNKNOWN	we already have a favorites database in the old provider	98650
UNKNOWN	default to the serial number of this user for older	98651
UNKNOWN	shortcuts.	98652
UNKNOWN	bogus intent?	98653
UNKNOWN	no intent? no icon	98654
UNKNOWN	component no longer exists.	98655
UNKNOWN	dedupe icons directly on the workspace	98656
UNKNOWN	canonicalize	98657
UNKNOWN	the play store sets the package parameter but launcher	98658
UNKNOWN	does not so we clear that out to keep them the same.	98659
UNKNOWN	also ignore intent flags for the purposes of deduping.	98660
UNKNOWN	in a folder preserve position	98661
UNKNOWN	for items contained directly on one of the workspace screen	98662
UNKNOWN	well determine their location (screen x y) in a second pass.	98663
UNKNOWN	folders first	98664
UNKNOWN	then shortcuts	98665
UNKNOWN	layout all the folders	98666
UNKNOWN	hotseat items and folder items have already had their	98667
UNKNOWN	location information set. nothing to be done here.	98668
UNKNOWN	leave the last row of icons blank on every screen	98669
UNKNOWN	ensure that new screens are created to hold these icons	98670
UNKNOWN	update max ids very important since we just grabbed ids from another database	98671
UNKNOWN	database was just created so wipe any previous widgets	98672
UNKNOWN	try converting the old database	98673
UNKNOWN	try and upgrade from the launcher2 db	98674
UNKNOWN	if we fail then set a flag to load the default workspace	98675
UNKNOWN	right now in non-default workspace cases we want to run the final	98676
UNKNOWN	upgrade code (ie. to fix workspace screen indices -> ids etc.) so	98677
UNKNOWN	set that flag too.	98678
UNKNOWN	fresh and clean launcher db.	98679
UNKNOWN	delete items directly on the workspace whos screen id doesnt exist	98680
UNKNOWN	delete from favorites where screen not in (select _id from workspacescreens)	98681
UNKNOWN	and container = -100	98682
UNKNOWN	delete items contained in folders which no longer exist (after above statement)	98683
UNKNOWN	delete from favorites where container <> -100 and container <> -101 and container	98684
UNKNOWN	not in (select _id from favorites where itemtype = 2)	98685
UNKNOWN	we rearrange the screens from the old launcher	98686
UNKNOWN	12345 -> 34512	98687
UNKNOWN	ignore	98688
UNKNOWN	we already have a favorites database in the old provider	98689
UNKNOWN	convert widgets from this import into widgets	98690
UNKNOWN	update max item id	98691
UNKNOWN	upgrade 12 -> 3 added appwidgetid column	98692
UNKNOWN	insert new column for holding appwidgetids	98693
UNKNOWN	old version remains which means we wipe old data	98694
UNKNOWN	convert existing widgets only if table upgrade was successful	98695
UNKNOWN	wheres version 5?	98696
UNKNOWN	- donut and sholes on 2.0 shipped with version 4 of launcher1.	98697
UNKNOWN	- passion shipped on 2.1 with version 6 of launcher3	98698
UNKNOWN	- sholes shipped on 2.1r1 (aka mr. 3) with version 5 of launcher 1	98699
UNKNOWN	but version 5 on there was the updatecontactsshortcuts change	98700
UNKNOWN	which was version 6 in launcher 2 (first shipped on passion 2.1r1).	98701
UNKNOWN	the updatecontactsshortcuts change is idempotent so running it twice	98702
UNKNOWN	is okay so well do that when upgrading the devices that shipped with it.	98703
UNKNOWN	we went from 3 to 5 screens. move everything 1 to the right	98704
UNKNOWN	old version remains which means we wipe old data	98705
UNKNOWN	we added the fast track.	98706
UNKNOWN	version 7 gets rid of the special search widget.	98707
UNKNOWN	version 8 (froyo) has the icons all normalized. this should	98708
UNKNOWN	already be the case in practice but we now rely on it and dont	98709
UNKNOWN	resample the images each time.	98710
UNKNOWN	the max id is not yet set at this point (onupgrade is triggered in the ctor	98711
UNKNOWN	before it gets a change to get set so we need to read it here when we use it)	98712
UNKNOWN	add default hotseat icons	98713
UNKNOWN	we bumped the version three time during jb once to update the launch flags once to	98714
UNKNOWN	update the override for the default launch animation and once to set the mimetype	98715
UNKNOWN	to improve startup performance	98716
UNKNOWN	contact shortcuts need a different set of flags to be launched now	98717
UNKNOWN	the updatecontactsshortcuts change is idempotent so we can keep using it like	98718
UNKNOWN	back in the donut days	98719
UNKNOWN	with the new shrink-wrapped and re-orderable workspaces it makes sense	98720
UNKNOWN	to persist workspace screens and their relative order.	98721
UNKNOWN	this will never happen in the wild but when we switch to using workspace	98722
UNKNOWN	screen ids redo the import from old launcher.	98723
UNKNOWN	insert new column for holding widget provider name	98724
UNKNOWN	old version remains which means we wipe old data	98725
UNKNOWN	insert new column for holding update timestamp	98726
UNKNOWN	old version remains which means we wipe old data	98727
UNKNOWN	insert new column for holding restore status	98728
UNKNOWN	old version remains which means we wipe old data	98729
UNKNOWN	we use the db version upgrade here to identify users who may not have seen	98730
UNKNOWN	clings yet (because they werent available) but for whom the clings are now	98731
UNKNOWN	available (tablet users). because one of the possible cling flows (migration)	98732
UNKNOWN	is very destructive (wipes out workspaces) we want to prevent this from showing	98733
UNKNOWN	until clear data. we do so by marking that the clings have been shown.	98734
UNKNOWN	no-op	98735
UNKNOWN	due to a data loss bug some users may have items associated with screen ids	98736
UNKNOWN	which no longer exist. since this can cause other problems and since the user	98737
UNKNOWN	will never see these items anyway we use database upgrade as an opportunity to	98738
UNKNOWN	clean things up.	98739
UNKNOWN	add userid column	98740
UNKNOWN	else old version remains which means we wipe old data	98741
UNKNOWN	this shouldnt happen -- throw our hands up in the air and start over.	98742
UNKNOWN	default to the serial number of this user for older	98743
UNKNOWN	shortcuts.	98744
UNKNOWN	insert new column for holding user serial number	98745
UNKNOWN	old version remains which means we wipe old data	98746
UNKNOWN	select and iterate through each matching widget	98747
UNKNOWN	when starting from the launcher start in a new cleared task	98748
UNKNOWN	clear_when_task_reset cannot reset the root of a task so we	98749
UNKNOWN	clear the whole thing preemptively here since	98750
UNKNOWN	quickcontactactivity will finish itself when launching other	98751
UNKNOWN	detail activities.	98752
UNKNOWN	determine the type and also put that in the shortcut	98753
UNKNOWN	(that can speed up launch a bit)	98754
UNKNOWN	generates a new id to use for an object in your database. this method should be only	98755
UNKNOWN	called from the main ui thread. as an exception we do call it when we call the	98756
UNKNOWN	constructor from the worker thread however this doesnt extend until after the	98757
UNKNOWN	constructor is called and we only pass a reference to launcherprovider to launcherapp	98758
UNKNOWN	after that point	98759
UNKNOWN	get the result	98760
UNKNOWN	generates a new id to use for an workspace screen in your database. this method	98761
UNKNOWN	should be only called from the main ui thread. as an exception we do call it when we	98762
UNKNOWN	call the constructor from the worker thread however this doesnt extend until after the	98763
UNKNOWN	constructor is called and we only pass a reference to launcherprovider to launcherapp	98764
UNKNOWN	after that point	98765
UNKNOWN	log to disk	98766
UNKNOWN	log to disk	98767
UNKNOWN	get the result	98768
UNKNOWN	log to disk	98769
UNKNOWN	select and iterate through each matching widget	98770
UNKNOWN	allocate and update database with new appwidgetid	98771
UNKNOWN	original widgets might not have valid spans when upgrading	98772
UNKNOWN	todo check return value	98773
UNKNOWN	todo check return value	98774
UNKNOWN	todo check return value	98775
UNKNOWN	update max item id	98776
UNKNOWN	1. ensure that externally added items have a valid item id	98777
UNKNOWN	2. in the case of an app widget and if no app widget id is specified we	98778
UNKNOWN	attempt allocate and bind the widget.	98779
UNKNOWN	add screen id if not present	98780
UNKNOWN	returns true of screen id exists or if successfully added	98781
UNKNOWN	get the result	98782
UNKNOWN	noinspection statementwithemptybody	98783
UNKNOWN	todo use multiple loaders with fall-back and transaction.	98784
UNKNOWN	add the screens specified by the items above	98785
UNKNOWN	ensure that the max ids are initialized	98786
UNKNOWN	recursively load some more favorites why not?	98787
UNKNOWN	assuming its a <favorite> at this point	98788
UNKNOWN	this looks through the contained favorites (or meta-favorites) and	98789
UNKNOWN	attempts to add them as shortcuts in the fallback groups location	98790
UNKNOWN	until one is added successfully.	98791
UNKNOWN	folder contents are nested in this xml file	98792
UNKNOWN	folder contents come from an external xml resource	98793
UNKNOWN	keep track of the set of screens which need to be added to the db.	98794
UNKNOWN	we can only have folders with >= 2 items so we need to remove the	98795
UNKNOWN	folder and clean up if less than 2 items were included or some	98796
UNKNOWN	failed to add and less than 2 were actually added	98797
UNKNOWN	delete the folder	98798
UNKNOWN	if we have a single item promote it to where the folder	98799
UNKNOWN	would have been.	98800
UNKNOWN	a meta shortcut attempts to resolve an intent specified as a uri in the xml if a	98801
UNKNOWN	logical choice for what shortcut should be used for that intent exists then it is	98802
UNKNOWN	added. otherwise add nothing.	98803
UNKNOWN	verify that the result is an app and not just the resolver dialog asking which	98804
UNKNOWN	app to use.	98805
UNKNOWN	if only one of the results is a system app then choose that as the default.	98806
UNKNOWN	there is no logical choice for this meta-favorite so rather than making	98807
UNKNOWN	a bad choice just add nothing.	98808
UNKNOWN	if the list contains the above resolved activity then it cant be	98809
UNKNOWN	resolveractivity itself.	98810
UNKNOWN	if no component specified try to find a shortcut to add from the uri.	98811
UNKNOWN	read the extras	98812
UNKNOWN	todo need to check return value	98813
UNKNOWN	send a broadcast to configure the widget	98814
UNKNOWN	oh well	98815
UNKNOWN	ignore	98816
UNKNOWN	we already have a favorites database in the old provider	98817
UNKNOWN	default to the serial number of this user for older	98818
UNKNOWN	shortcuts.	98819
UNKNOWN	bogus intent?	98820
UNKNOWN	no intent? no icon	98821
UNKNOWN	component no longer exists.	98822
UNKNOWN	dedupe icons directly on the workspace	98823
UNKNOWN	canonicalize	98824
UNKNOWN	the play store sets the package parameter but launcher	98825
UNKNOWN	does not so we clear that out to keep them the same.	98826
UNKNOWN	also ignore intent flags for the purposes of deduping.	98827
UNKNOWN	in a folder preserve position	98828
UNKNOWN	for items contained directly on one of the workspace screen	98829
UNKNOWN	well determine their location (screen x y) in a second pass.	98830
UNKNOWN	folders first	98831
UNKNOWN	then shortcuts	98832
UNKNOWN	layout all the folders	98833
UNKNOWN	hotseat items and folder items have already had their	98834
UNKNOWN	location information set. nothing to be done here.	98835
UNKNOWN	leave the last row of icons blank on every screen	98836
UNKNOWN	ensure that new screens are created to hold these icons	98837
UNKNOWN	update max ids very important since we just grabbed ids from another database	98838
UNKNOWN	remove all the previous children that are no longer in the window	98839
UNKNOWN	add all the new children that belong in the window	98840
UNKNOWN	update the markers alpha	98841
UNKNOWN	center the active marker	98842
UNKNOWN	cancel long press for all children	98843
UNKNOWN	generate an id for each view this assumes we have at most 256x256 cells	98844
UNKNOWN	per workspace screen	98845
UNKNOWN	if the horizontal or vertical span is set to -1 it is taken to	98846
UNKNOWN	mean that it spans the extent of the celllayout	98847
UNKNOWN	initial values correspond to widthspecmode == measurespec.exactly	98848
UNKNOWN	we only intercept the touch if we are tapping in empty space after the final row	98849
UNKNOWN	add a little bit of buffer if there is room for another row	98850
UNKNOWN	always assume were working with the smallest span to make sure we	98851
UNKNOWN	reserve enough space in both orientations	98852
UNKNOWN	always round up to next largest cell	98853
UNKNOWN	we dont show the next/previous pages any more so we use the full width minus the	98854
UNKNOWN	padding	98855
UNKNOWN	we know that we have to fit n cells with n-1 width gaps so we just juggle to solve for n	98856
UNKNOWN	we dont do anything fancy to determine if we squeeze another row in.	98857
UNKNOWN	the space for a page is the height - top padding (current page) - bottom padding (current	98858
UNKNOWN	page)	98859
UNKNOWN	we know that we have to fit n cells with n-1 height gaps so we juggle to solve for n	98860
UNKNOWN	we dont do anything fancy to determine if we squeeze another row in.	98861
UNKNOWN	todo we need to take widthgap into effect	98862
UNKNOWN	todo we need to take heightgap into effect	98863
UNKNOWN	cancel long press for all children	98864
UNKNOWN	determine the max width of all the rows and center accordingly	98865
UNKNOWN	update the drawing caches	98866
UNKNOWN	we only intercept the touch if we are tapping in empty space after the final row	98867
UNKNOWN	ensure we are using the right text size	98868
UNKNOWN	center horizontally	98869
UNKNOWN	we eat up the touch events here since the pagedview (which uses the same swiping	98870
UNKNOWN	touch code as workspace previously) uses onintercepttouchevent() to determine when	98871
UNKNOWN	the user is scrolling between pages. this means that if the pages themselves dont	98872
UNKNOWN	handle touch events it gets forwarded up to pagedview itself and its own	98873
UNKNOWN	ontouchevent() handling will prevent further intercept touch events from being called	98874
UNKNOWN	(its the same view in that case). this is not ideal but to prevent more changes	98875
UNKNOWN	we just always mark the touch event as handled.	98876
UNKNOWN	if we are on the worker thread post onto the main handler	98877
UNKNOWN	if we are not on the worker thread then post to the worker handler	98878
UNKNOWN	lock on the app so that we dont try and get the items while apps are being added	98879
UNKNOWN	flush the launchermodel worker thread so that if we just did another	98880
UNKNOWN	processinstallshortcut we give it time for its shortcut to get added to the	98881
UNKNOWN	database (getitemsinlocalcoordinates reads the database)	98882
UNKNOWN	try adding to the workspace screens incrementally starting at the default or center	98883
UNKNOWN	screen and alternating between +1 -1 +2 -2 etc. (using ~ ceil(i/2f)(-1)^(i-1))	98884
UNKNOWN	update the launcher db	98885
UNKNOWN	process the updated package state	98886
UNKNOWN	process the updated package badge	98887
UNKNOWN	process the newly added applications and add them to the database first	98888
UNKNOWN	process the newly added applications and add them to the database first	98889
UNKNOWN	get the list of workspace screens. we need to append to this list and	98890
UNKNOWN	can not use sbgworkspacescreens because loadworkspace() may not have been	98891
UNKNOWN	called.	98892
UNKNOWN	short-circuit this logic if the icon exists somewhere on the workspace	98893
UNKNOWN	only installshortcutreceiver sends us shortcutinfos ignore them	98894
UNKNOWN	add this icon to the db creating a new page if necessary. if there	98895
UNKNOWN	is only the empty page then we just add items to the first page.	98896
UNKNOWN	otherwise we add them to the next pages.	98897
UNKNOWN	if we cant find a valid position then just add a new screen.	98898
UNKNOWN	this takes time so we need to re-queue the add until the new	98899
UNKNOWN	page is added. create as many screens as necessary to satisfy	98900
UNKNOWN	the startsearchpageindex.	98901
UNKNOWN	save the screen id for binding in the workspace	98902
UNKNOWN	find the coordinate again	98903
UNKNOWN	add the shortcut to the db	98904
UNKNOWN	save the shortcutinfo for binding in the workspace	98905
UNKNOWN	update the workspace screens	98906
UNKNOWN	get the list of workspace screens. we need to append to this list and	98907
UNKNOWN	can not use sbgworkspacescreens because loadworkspace() may not have been	98908
UNKNOWN	called.	98909
UNKNOWN	short-circuit this logic if the icon exists somewhere on the workspace	98910
UNKNOWN	only installshortcutreceiver sends us shortcutinfos ignore them	98911
UNKNOWN	add this icon to the db creating a new page if necessary. if there	98912
UNKNOWN	is only the empty page then we just add items to the first page.	98913
UNKNOWN	otherwise we add them to the next pages.	98914
UNKNOWN	if we cant find a valid position then just add a new screen.	98915
UNKNOWN	this takes time so we need to re-queue the add until the new	98916
UNKNOWN	page is added. create as many screens as necessary to satisfy	98917
UNKNOWN	the startsearchpageindex.	98918
UNKNOWN	save the screen id for binding in the workspace	98919
UNKNOWN	find the coordinate again	98920
UNKNOWN	add the shortcut to the db	98921
UNKNOWN	save the shortcutinfo for binding in the workspace	98922
UNKNOWN	update the workspace screens	98923
UNKNOWN	clear any deferred bind runnables	98924
UNKNOWN	remove any queued bind runnables	98925
UNKNOWN	unbind all the workspace items	98926
UNKNOWN	ensure that we dont use the same workspace items data structure on the main thread	98927
UNKNOWN	by making a copy of workspace items first.	98928
UNKNOWN	from all apps	98929
UNKNOWN	from somewhere else	98930
UNKNOWN	check all the data is consistent	98931
UNKNOWN	for all intents and purposes this is the same object	98932
UNKNOWN	the modelitem needs to match up perfectly with item if our model is	98933
UNKNOWN	to be consistent with the database-- for now just require	98934
UNKNOWN	modelitem == item or the equality check above	98935
UNKNOWN	lock on mbglock after the db operation	98936
UNKNOWN	item is in a folder make sure this folder exists	98937
UNKNOWN	an items container is being set to a that of an item which is not in	98938
UNKNOWN	the list of folders.	98939
UNKNOWN	items are added/removed from the corresponding folderinfo elsewhere such	98940
UNKNOWN	as in workspace.ondrop. here we just add/remove them from the list of items	98941
UNKNOWN	that are on the desktop as appropriate	98942
UNKNOWN	if component is not null an intent with null package will produce	98943
UNKNOWN	the same result and should also be a match.	98944
UNKNOWN	skip if user has been deleted.	98945
UNKNOWN	lock on mbglock after the db operation	98946
UNKNOWN	fall through	98947
UNKNOWN	adding an item to a folder that doesnt exist.	98948
UNKNOWN	lock on mbglock after the db operation	98949
UNKNOWN	fall through	98950
UNKNOWN	adding an item to a folder that doesnt exist.	98951
UNKNOWN	lock on mbglock after the db operation	98952
UNKNOWN	we are deleting a folder which still contains items that	98953
UNKNOWN	think they are contained by that folder.	98954
UNKNOWN	lock on mbglock after the db operation	98955
UNKNOWN	we are deleting a folder which still contains items that	98956
UNKNOWN	think they are contained by that folder.	98957
UNKNOWN	log to disk	98958
UNKNOWN	remove any negative screen ids -- these arent persisted	98959
UNKNOWN	clear the table	98960
UNKNOWN	clear the table	98961
UNKNOWN	lock on mbglock after the db operation	98962
UNKNOWN	lock on mbglock after the db operation	98963
UNKNOWN	lock on mbglock after the db operation	98964
UNKNOWN	lock on mbglock after the db operation	98965
UNKNOWN	only rebind if we support removable storage. it catches the	98966
UNKNOWN	case where	98967
UNKNOWN	apps on the external sd card need to be reloaded	98968
UNKNOWN	if we are replacing then just update the packages in the list	98969
UNKNOWN	if we have changed locale we need to clear out the labels in all apps/workspace.	98970
UNKNOWN	check if configuration change was an mcc/mnc change which would affect app resources	98971
UNKNOWN	and we would need to clear out the labels in all apps/workspace. same handling as	98972
UNKNOWN	above for action_locale_changed	98973
UNKNOWN	update previousconfig	98974
UNKNOWN	do this here because if the launcher activity is running it will be restarted.	98975
UNKNOWN	if its not running startloaderfrombackground will merely tell it that it needs	98976
UNKNOWN	to reload.	98977
UNKNOWN	stop any existing loaders first so they dont set mallappsloaded or	98978
UNKNOWN	mworkspaceloaded to true later	98979
UNKNOWN	only actually run the loader if theyre not paused.	98980
UNKNOWN	if there is already a loader task running tell it to stop.	98981
UNKNOWN	returns true if islaunching() was true on the old task	98982
UNKNOWN	clear any deferred bind-runnables from the synchronized load process	98983
UNKNOWN	we must do this before any loading/binding is scheduled below.	98984
UNKNOWN	dont bother to start the thread if we know its not going to do anything	98985
UNKNOWN	if there is already one running tell it to stop.	98986
UNKNOWN	also dont downgrade islaunching if were already running	98987
UNKNOWN	post the remaining side pages to be loaded	98988
UNKNOWN	log to disk	98989
UNKNOWN	load the workspace	98990
UNKNOWN	bind the workspace	98991
UNKNOWN	wait until the either were stopped or the other threads are done.	98992
UNKNOWN	this way we dont start loading all apps until the workspace has settled	98993
UNKNOWN	down.	98994
UNKNOWN	just in case mflushingworkerthread changes but we arent woken up	98995
UNKNOWN	wait no longer than 1sec at a time	98996
UNKNOWN	ignore	98997
UNKNOWN	ensure that we have a valid page index to load synchronously	98998
UNKNOWN	ensure that we dont try and bind a specified page when the pages have not been	98999
UNKNOWN	loaded already (we should load everything asynchronously in that case)	99000
UNKNOWN	ensure that we are never running the background loading at this point since	99001
UNKNOWN	we also touch the background collections	99002
UNKNOWN	xxx throw an exception if we are already loading (since we touch the worker thread	99003
UNKNOWN	data structures we cant allow any other thread to touch that data but because	99004
UNKNOWN	this call is synchronous we can get away with not locking).	99005
UNKNOWN	the launchermodel is static in the launcherappstate and mhandler may have queued	99006
UNKNOWN	operations from the previous activity. we need to ensure that all queued operations	99007
UNKNOWN	are executed before any synchronous binding work is done.	99008
UNKNOWN	divide the set of loaded items into those that we are binding synchronously and	99009
UNKNOWN	everything else that is to be bound normally (asynchronously).	99010
UNKNOWN	xxx for now continue posting the binding of allapps as there are other issues that	99011
UNKNOWN	arise from that.	99012
UNKNOWN	optimize for end-user experience if the launcher is up and running with the	99013
UNKNOWN	all apps interface in the foreground load all apps first. otherwise load the	99014
UNKNOWN	workspace first (default).	99015
UNKNOWN	elevate priority when home launches for the first time to avoid	99016
UNKNOWN	starving at boot time. staring at a blank home is not cool.	99017
UNKNOWN	whew! hard work done. slow us down and wait until the ui thread has	99018
UNKNOWN	settled down.	99019
UNKNOWN	second step	99020
UNKNOWN	restore the default thread priority after we are done loading items	99021
UNKNOWN	update the saved icons if necessary	99022
UNKNOWN	ensure that all the applications that are in the system are	99023
UNKNOWN	represented on the home screen.	99024
UNKNOWN	clear out this reference otherwise we end up holding it until all of the	99025
UNKNOWN	callback runnables are done.	99026
UNKNOWN	if we are still the last one to be scheduled remove ourselves.	99027
UNKNOWN	cross reference all the applications in our apps list with items in the workspace	99028
UNKNOWN	we are missing an application icon so add this to the workspace	99029
UNKNOWN	this is a rare event so lets log it	99030
UNKNOWN	check & update map of whats occupied used to discard overlapping/invalid items	99031
UNKNOWN	skip further checking if it is not the hotseat or workspace container	99032
UNKNOWN	check if any workspace icons overlap with each other	99033
UNKNOWN	log to disk	99034
UNKNOWN	append the users launcher2 shortcuts	99035
UNKNOWN	make sure the default workspace is loaded	99036
UNKNOWN	this code path is for our old migration code and should no longer be exercised	99037
UNKNOWN	log to disk	99038
UNKNOWN	+1 for the hotseat (it can be larger than the workspace)	99039
UNKNOWN	load workspace in reverse order to ensure that latest items are loaded first (and	99040
UNKNOWN	before any earlier duplicates)	99041
UNKNOWN	final int uriindex = c.getcolumnindexorthrow(launchersettings.favorites.uri)	99042
UNKNOWN	final int displaymodeindex = c.getcolumnindexorthrow(	99043
UNKNOWN	launchersettings.favorites.display_mode)	99044
UNKNOWN	user has been deleted remove the item.	99045
UNKNOWN	no special handling necessary for this item	99046
UNKNOWN	we allow auto install apps to have their intent	99047
UNKNOWN	updated after an install.	99048
UNKNOWN	the app is installed but the component is no	99049
UNKNOWN	longer available.	99050
UNKNOWN	no special handling necessary for this item	99051
UNKNOWN	package is not yet available but might be	99052
UNKNOWN	installed later.	99053
UNKNOWN	restore has started once.	99054
UNKNOWN	app restore has started. update the flag	99055
UNKNOWN	do not wait for external media load anymore.	99056
UNKNOWN	log the invalid package and remove it	99057
UNKNOWN	sdcard is not ready yet. package might get available	99058
UNKNOWN	once it is ready.	99059
UNKNOWN	add the icon on the workspace anyway.	99060
UNKNOWN	for shortcuts with no component keep them as they are	99061
UNKNOWN	dont restore items for other profiles.	99062
UNKNOWN	app shortcuts that used to be automatically added to launcher	99063
UNKNOWN	didnt always have the correct intent flags set so do that	99064
UNKNOWN	here	99065
UNKNOWN	check & update map of whats occupied	99066
UNKNOWN	item is in a user folder	99067
UNKNOWN	now that weve loaded everthing re-save it with the	99068
UNKNOWN	icon in case it disappears somehow.	99069
UNKNOWN	check & update map of whats occupied	99070
UNKNOWN	no special handling required for restored folders	99071
UNKNOWN	read all launcher-specific widget details	99072
UNKNOWN	if provider was not previously ready update the	99073
UNKNOWN	status and ui flag.	99074
UNKNOWN	id would be valid only if the widget restore broadcast was received.	99075
UNKNOWN	restore has started once.	99076
UNKNOWN	app restore has started. update the flag	99077
UNKNOWN	check & update map of whats occupied	99078
UNKNOWN	break early if weve stopped loading	99079
UNKNOWN	remove dead items	99080
UNKNOWN	dont notify content observers	99081
UNKNOWN	update restored items that no longer require special handling	99082
UNKNOWN	if were importing we use the old screen order.	99083
UNKNOWN	log to disk	99084
UNKNOWN	update the max item id after we load an old db	99085
UNKNOWN	if were importing we use the old screen order.	99086
UNKNOWN	log to disk	99087
UNKNOWN	remove any empty screens	99088
UNKNOWN	if there are any empty screens remove them and update.	99089
UNKNOWN	log to disk	99090
UNKNOWN	purge any null iteminfos	99091
UNKNOWN	order the set of items by their containers first this allows use to walk through the	99092
UNKNOWN	list sequentially build up a list of containers that are in the specified screen	99093
UNKNOWN	as well as all items in those containers.	99094
UNKNOWN	xxx review this	99095
UNKNOWN	+1 hotseat	99096
UNKNOWN	+1 hotseat	99097
UNKNOWN	bind the workspace items	99098
UNKNOWN	bind the folders	99099
UNKNOWN	bind the widgets one at a time	99100
UNKNOWN	dont use these two variables in any of the callback runnables.	99101
UNKNOWN	otherwise we hold a reference to them.	99102
UNKNOWN	this launcher has exited and nobody bothered to tell us. just bail.	99103
UNKNOWN	save a copy of all the bg-thread collections	99104
UNKNOWN	there may be no workspace screens (just hotseat items and an empty page).	99105
UNKNOWN	load all the items that are on the current page first (and in the process unbind	99106
UNKNOWN	all the existing workspace items before we call startbinding() below.	99107
UNKNOWN	separate the items that are on the current screen and all the other remaining items	99108
UNKNOWN	tell the workspace that were about to start binding items	99109
UNKNOWN	load items on the current page	99110
UNKNOWN	load all the remaining pages (if we are loading synchronously we want to defer this	99111
UNKNOWN	work until after the first render)	99112
UNKNOWN	tell the workspace that were done binding items	99113
UNKNOWN	if were profiling ensure this is the last thing in the queue.	99114
UNKNOWN	if were profiling ensure this is the last thing in the queue.	99115
UNKNOWN	this launcher has exited and nobody bothered to tell us. just bail.	99116
UNKNOWN	shallow copy	99117
UNKNOWN	this launcher has exited and nobody bothered to tell us. just bail.	99118
UNKNOWN	clear the list of apps	99119
UNKNOWN	query for the set of apps	99120
UNKNOWN	fail if we dont have any apps	99121
UNKNOWN	sort the applications by name	99122
UNKNOWN	create the applicationinfos	99123
UNKNOWN	this builds the icon bitmaps.	99124
UNKNOWN	huh? shouldnt this be inside the runnable below?	99125
UNKNOWN	post callback on main thread	99126
UNKNOWN	ensure that we add all the workspace applications to the db	99127
UNKNOWN	update the launcher db to reflect the changes	99128
UNKNOWN	mark all packages in the broadcast to be removed	99129
UNKNOWN	mark disabled packages in the broadcast to be removed	99130
UNKNOWN	remove all the components associated with this package	99131
UNKNOWN	remove all the specific components	99132
UNKNOWN	remove any queued items from the install queue	99133
UNKNOWN	call the components-removed callback	99134
UNKNOWN	write all the logs to disk	99135
UNKNOWN	update the new data	99136
UNKNOWN	returns a list of resolveinfos/appwindowinfos in sorted order	99137
UNKNOWN	the resource -- this may implicitly give us back the fallback icon	99138
UNKNOWN	but dont worry about that. all were doing with usingfallbackicon is	99139
UNKNOWN	to avoid saving lots of copies of that in the database and most apps	99140
UNKNOWN	have icons anyway.	99141
UNKNOWN	the db	99142
UNKNOWN	the fallback icon	99143
UNKNOWN	from the cache.	99144
UNKNOWN	from the resource	99145
UNKNOWN	from the db	99146
UNKNOWN	fall back to the class name of the activity	99147
UNKNOWN	we need to check for action_main otherwise getcomponent() might	99148
UNKNOWN	return null for some shortcuts (for instance for shortcuts to	99149
UNKNOWN	web pages.)	99150
UNKNOWN	placeholder shortcuts get special treatment let them through too.	99151
UNKNOWN	non-app shortcuts are only supported for current user.	99152
UNKNOWN	todo if theres an explicit component and we cant install that delete it.	99153
UNKNOWN	the resource	99154
UNKNOWN	drop this. we have other places to look for icons	99155
UNKNOWN	the db	99156
UNKNOWN	the fallback icon	99157
UNKNOWN	suppress dead code warning	99158
UNKNOWN	if the intent is null we cant construct a valid shortcutinfo so we return null	99159
UNKNOWN	only support intents for current user for now. intents sent from other	99160
UNKNOWN	users wouldnt get here without intent forwarding anyway.	99161
UNKNOWN	if apps cant be on sd dont even bother.	99162
UNKNOWN	if this icon doesnt have a custom icon check to see	99163
UNKNOWN	whats stored in the db and if it doesnt match what	99164
UNKNOWN	were going to show store what we are going to show back	99165
UNKNOWN	into the db. we do this so when were loading if the	99166
UNKNOWN	package manager cant find an icon (for example because	99167
UNKNOWN	the app is on sd) then we can use that instead.	99168
UNKNOWN	this is slower than is ideal but this only happens once	99169
UNKNOWN	or when the app is updated with a new icon.	99170
UNKNOWN	see if a placeholder was created for us already	99171
UNKNOWN	no placeholder -- create a new instance	99172
UNKNOWN	todo need to figure out rules for sorting	99173
UNKNOWN	profiles this puts work second.	99174
UNKNOWN	todo need to figure out rules for sorting	99175
UNKNOWN	profiles this puts work second.	99176
UNKNOWN	load the workspace	99177
UNKNOWN	bind the workspace	99178
UNKNOWN	wait until the either were stopped or the other threads are done.	99179
UNKNOWN	this way we dont start loading all apps until the workspace has settled	99180
UNKNOWN	down.	99181
UNKNOWN	just in case mflushingworkerthread changes but we arent woken up	99182
UNKNOWN	wait no longer than 1sec at a time	99183
UNKNOWN	ignore	99184
UNKNOWN	ensure that we have a valid page index to load synchronously	99185
UNKNOWN	ensure that we dont try and bind a specified page when the pages have not been	99186
UNKNOWN	loaded already (we should load everything asynchronously in that case)	99187
UNKNOWN	ensure that we are never running the background loading at this point since	99188
UNKNOWN	we also touch the background collections	99189
UNKNOWN	xxx throw an exception if we are already loading (since we touch the worker thread	99190
UNKNOWN	data structures we cant allow any other thread to touch that data but because	99191
UNKNOWN	this call is synchronous we can get away with not locking).	99192
UNKNOWN	the launchermodel is static in the launcherappstate and mhandler may have queued	99193
UNKNOWN	operations from the previous activity. we need to ensure that all queued operations	99194
UNKNOWN	are executed before any synchronous binding work is done.	99195
UNKNOWN	divide the set of loaded items into those that we are binding synchronously and	99196
UNKNOWN	everything else that is to be bound normally (asynchronously).	99197
UNKNOWN	xxx for now continue posting the binding of allapps as there are other issues that	99198
UNKNOWN	arise from that.	99199
UNKNOWN	optimize for end-user experience if the launcher is up and running with the	99200
UNKNOWN	all apps interface in the foreground load all apps first. otherwise load the	99201
UNKNOWN	workspace first (default).	99202
UNKNOWN	elevate priority when home launches for the first time to avoid	99203
UNKNOWN	starving at boot time. staring at a blank home is not cool.	99204
UNKNOWN	whew! hard work done. slow us down and wait until the ui thread has	99205
UNKNOWN	settled down.	99206
UNKNOWN	second step	99207
UNKNOWN	restore the default thread priority after we are done loading items	99208
UNKNOWN	update the saved icons if necessary	99209
UNKNOWN	ensure that all the applications that are in the system are	99210
UNKNOWN	represented on the home screen.	99211
UNKNOWN	clear out this reference otherwise we end up holding it until all of the	99212
UNKNOWN	callback runnables are done.	99213
UNKNOWN	if we are still the last one to be scheduled remove ourselves.	99214
UNKNOWN	cross reference all the applications in our apps list with items in the workspace	99215
UNKNOWN	we are missing an application icon so add this to the workspace	99216
UNKNOWN	this is a rare event so lets log it	99217
UNKNOWN	check & update map of whats occupied used to discard overlapping/invalid items	99218
UNKNOWN	skip further checking if it is not the hotseat or workspace container	99219
UNKNOWN	check if any workspace icons overlap with each other	99220
UNKNOWN	log to disk	99221
UNKNOWN	append the users launcher2 shortcuts	99222
UNKNOWN	make sure the default workspace is loaded	99223
UNKNOWN	this code path is for our old migration code and should no longer be exercised	99224
UNKNOWN	log to disk	99225
UNKNOWN	+1 for the hotseat (it can be larger than the workspace)	99226
UNKNOWN	load workspace in reverse order to ensure that latest items are loaded first (and	99227
UNKNOWN	before any earlier duplicates)	99228
UNKNOWN	final int uriindex = c.getcolumnindexorthrow(launchersettings.favorites.uri)	99229
UNKNOWN	final int displaymodeindex = c.getcolumnindexorthrow(	99230
UNKNOWN	launchersettings.favorites.display_mode)	99231
UNKNOWN	user has been deleted remove the item.	99232
UNKNOWN	no special handling necessary for this item	99233
UNKNOWN	we allow auto install apps to have their intent	99234
UNKNOWN	updated after an install.	99235
UNKNOWN	the app is installed but the component is no	99236
UNKNOWN	longer available.	99237
UNKNOWN	no special handling necessary for this item	99238
UNKNOWN	package is not yet available but might be	99239
UNKNOWN	installed later.	99240
UNKNOWN	restore has started once.	99241
UNKNOWN	app restore has started. update the flag	99242
UNKNOWN	do not wait for external media load anymore.	99243
UNKNOWN	log the invalid package and remove it	99244
UNKNOWN	sdcard is not ready yet. package might get available	99245
UNKNOWN	once it is ready.	99246
UNKNOWN	add the icon on the workspace anyway.	99247
UNKNOWN	for shortcuts with no component keep them as they are	99248
UNKNOWN	dont restore items for other profiles.	99249
UNKNOWN	app shortcuts that used to be automatically added to launcher	99250
UNKNOWN	didnt always have the correct intent flags set so do that	99251
UNKNOWN	here	99252
UNKNOWN	check & update map of whats occupied	99253
UNKNOWN	item is in a user folder	99254
UNKNOWN	now that weve loaded everthing re-save it with the	99255
UNKNOWN	icon in case it disappears somehow.	99256
UNKNOWN	check & update map of whats occupied	99257
UNKNOWN	no special handling required for restored folders	99258
UNKNOWN	read all launcher-specific widget details	99259
UNKNOWN	if provider was not previously ready update the	99260
UNKNOWN	status and ui flag.	99261
UNKNOWN	id would be valid only if the widget restore broadcast was received.	99262
UNKNOWN	restore has started once.	99263
UNKNOWN	app restore has started. update the flag	99264
UNKNOWN	check & update map of whats occupied	99265
UNKNOWN	break early if weve stopped loading	99266
UNKNOWN	remove dead items	99267
UNKNOWN	dont notify content observers	99268
UNKNOWN	update restored items that no longer require special handling	99269
UNKNOWN	if were importing we use the old screen order.	99270
UNKNOWN	log to disk	99271
UNKNOWN	update the max item id after we load an old db	99272
UNKNOWN	if were importing we use the old screen order.	99273
UNKNOWN	log to disk	99274
UNKNOWN	remove any empty screens	99275
UNKNOWN	if there are any empty screens remove them and update.	99276
UNKNOWN	log to disk	99277
UNKNOWN	purge any null iteminfos	99278
UNKNOWN	order the set of items by their containers first this allows use to walk through the	99279
UNKNOWN	list sequentially build up a list of containers that are in the specified screen	99280
UNKNOWN	as well as all items in those containers.	99281
UNKNOWN	xxx review this	99282
UNKNOWN	+1 hotseat	99283
UNKNOWN	+1 hotseat	99284
UNKNOWN	bind the workspace items	99285
UNKNOWN	bind the folders	99286
UNKNOWN	bind the widgets one at a time	99287
UNKNOWN	dont use these two variables in any of the callback runnables.	99288
UNKNOWN	otherwise we hold a reference to them.	99289
UNKNOWN	this launcher has exited and nobody bothered to tell us. just bail.	99290
UNKNOWN	save a copy of all the bg-thread collections	99291
UNKNOWN	there may be no workspace screens (just hotseat items and an empty page).	99292
UNKNOWN	load all the items that are on the current page first (and in the process unbind	99293
UNKNOWN	all the existing workspace items before we call startbinding() below.	99294
UNKNOWN	separate the items that are on the current screen and all the other remaining items	99295
UNKNOWN	tell the workspace that were about to start binding items	99296
UNKNOWN	load items on the current page	99297
UNKNOWN	load all the remaining pages (if we are loading synchronously we want to defer this	99298
UNKNOWN	work until after the first render)	99299
UNKNOWN	tell the workspace that were done binding items	99300
UNKNOWN	if were profiling ensure this is the last thing in the queue.	99301
UNKNOWN	if were profiling ensure this is the last thing in the queue.	99302
UNKNOWN	this launcher has exited and nobody bothered to tell us. just bail.	99303
UNKNOWN	shallow copy	99304
UNKNOWN	this launcher has exited and nobody bothered to tell us. just bail.	99305
UNKNOWN	clear the list of apps	99306
UNKNOWN	query for the set of apps	99307
UNKNOWN	fail if we dont have any apps	99308
UNKNOWN	sort the applications by name	99309
UNKNOWN	create the applicationinfos	99310
UNKNOWN	this builds the icon bitmaps.	99311
UNKNOWN	huh? shouldnt this be inside the runnable below?	99312
UNKNOWN	post callback on main thread	99313
UNKNOWN	ensure that we add all the workspace applications to the db	99314
UNKNOWN	update the launcher db to reflect the changes	99315
UNKNOWN	mark all packages in the broadcast to be removed	99316
UNKNOWN	mark disabled packages in the broadcast to be removed	99317
UNKNOWN	remove all the components associated with this package	99318
UNKNOWN	remove all the specific components	99319
UNKNOWN	remove any queued items from the install queue	99320
UNKNOWN	call the components-removed callback	99321
UNKNOWN	write all the logs to disk	99322
UNKNOWN	update the new data	99323
UNKNOWN	return early if this is not initiated from a touch	99324
UNKNOWN	return early if we are still animating the pages	99325
UNKNOWN	when we have exited all apps or are in transition disregard long clicks	99326
UNKNOWN	return if global dragging is not enabled	99327
UNKNOWN	determines if we should change the touch state to start scrolling after the user moves their touch point too far.	99328
UNKNOWN	determines if we should change the touch state to start dragging after the user moves their touch point far enough.	99329
UNKNOWN	locally do absolute value. mlastmotionx is set to the y value of the down event.	99330
UNKNOWN	drag if the user moved far enough along the y axis	99331
UNKNOWN	cancel any pending long press	99332
UNKNOWN	try canceling the long press. it could also have been scheduled	99333
UNKNOWN	by a distant descendant so use the mallowlongpress flag to block	99334
UNKNOWN	everything	99335
UNKNOWN	we initialize customizable fields to be invalid	99336
UNKNOWN	get the hover color	99337
UNKNOWN	remove the text in the phone ui in landscape	99338
UNKNOWN	acceptdrop is called just before ondrop. we do the work here rather than	99339
UNKNOWN	in ondrop because it allows us to reject the drop (by returning false)	99340
UNKNOWN	so that the object being dragged isnt removed from the drag source.	99341
UNKNOWN	there is no post-drop animation so clean up the dragview now	99342
UNKNOWN	hide this button unless we are dragging something from allapps	99343
UNKNOWN	or .detectall() for all detectable problems	99344
UNKNOWN	determine the dynamic grid properties	99345
UNKNOWN	lazy-initialize the dynamic grid	99346
UNKNOWN	the launcherapplication should call this but in case of instrumentation it might not be present yet	99347
UNKNOWN	if we are getting an oncreate we can actually preempt onresume and unset mpaused here	99348
UNKNOWN	this also ensures that any synchronous binding below doesnt re-trigger another	99349
UNKNOWN	launchermodel load.	99350
UNKNOWN	if the user leaves launcher then we should just load items asynchronously when	99351
UNKNOWN	they return.	99352
UNKNOWN	we only load the page synchronously if the user rotates (or triggers a	99353
UNKNOWN	configuration change) while launcher is in the foreground	99354
UNKNOWN	for handling default keys	99355
UNKNOWN	on large interfaces we want the screen to auto-rotate based on the current orientation	99356
UNKNOWN	not bound yet wait for bindscreens to be called.	99357
UNKNOWN	create the custom content page and call the subclass to populate it.	99358
UNKNOWN	recursive but now with a locale configuration	99359
UNKNOWN	recursive but now with a locale configuration	99360
UNKNOWN	ignore	99361
UNKNOWN	ignore	99362
UNKNOWN	ignore	99363
UNKNOWN	ignore	99364
UNKNOWN	noinspection resultofmethodcallignored	99365
UNKNOWN	ignore	99366
UNKNOWN	we prevent dragging when we are loading the workspace as it is possible to pick up a view	99367
UNKNOWN	that is subsequently removed from the workspace in startbinding().	99368
UNKNOWN	view.generateviewid() is not available. the following fallback logic is a copy	99369
UNKNOWN	of its implementation.	99370
UNKNOWN	aapt-generated ids have the high byte nonzero clamp to the range under that.	99371
UNKNOWN	roll over to 1 not 0.	99372
UNKNOWN	this cast is safe given the > 2b range for int.	99373
UNKNOWN	when the screen id represents an actual screen (as opposed to a rank) we make sure	99374
UNKNOWN	that the drop page actually exists.	99375
UNKNOWN	before adding this resetaddinfo() after a shortcut was added to a workspace screen	99376
UNKNOWN	if you turned the screen off and then back while in all apps launcher would not	99377
UNKNOWN	return to the workspace. clearing maddinfo.container here fixes this issue	99378
UNKNOWN	reset the startactivity waiting flag	99379
UNKNOWN	we have special handling for widgets	99380
UNKNOWN	no need to remove the empty screen if were mid-binding as the	99381
UNKNOWN	the bind will not add the empty screen.	99382
UNKNOWN	when the screen id represents an actual screen (as opposed to a rank)	99383
UNKNOWN	we make sure that the drop page actually exists.	99384
UNKNOWN	update the widget view.	99385
UNKNOWN	leave the widget in the pending state if the user canceled the configure.	99386
UNKNOWN	the pattern used here is that a user picks a specific application	99387
UNKNOWN	which depending on the target might need to create the actual target.	99388
UNKNOWN	for example the user would pick_shortcut for music playlist and we	99389
UNKNOWN	launch over to the music app to actually create_shortcut.	99390
UNKNOWN	its possible that the add screen was removed because it was	99391
UNKNOWN	empty and a re-bind occurred	99392
UNKNOWN	the animated view may be null in the case of a rotation during widget configuration	99393
UNKNOWN	restore the previous launcher state	99394
UNKNOWN	background was set to gradient in onpause() restore to black if in all apps.	99395
UNKNOWN	we might have postponed some bind calls until onresume (see waituntilresume) --	99396
UNKNOWN	execute them here	99397
UNKNOWN	reset the pressed state of icons that were locked in the press state while activities	99398
UNKNOWN	were launching	99399
UNKNOWN	resets the previous workspace icon press state	99400
UNKNOWN	it is possible that widgets can receive updates while launcher is not in the foreground.	99401
UNKNOWN	consequently the widgets will be inflated in the orientation of the foreground activity	99402
UNKNOWN	(framework issue). on resuming we ensure that any widgets are inflated for the current	99403
UNKNOWN	orientation.	99404
UNKNOWN	process any items that were added while launcher was away.	99405
UNKNOWN	intent idlescreenintent = new intent(appinterface.cat_idle_screen_action)	99406
UNKNOWN	idlescreenintent.putextra(screen_idle true)	99407
UNKNOWN	og.d(tagbroadcasting home idle screen intent )	99408
UNKNOWN	sendbroadcast(idlescreenintent)	99409
UNKNOWN	if we are resuming and the custom content is the current page we call onshow().	99410
UNKNOWN	it is also possible that onshow will instead be called slightly after first layout	99411
UNKNOWN	if pagedview#setrestorepage was set to the custom content page in oncreate().	99412
UNKNOWN	show oobe	99413
UNKNOWN	ensure that items added to launcher are queued until launcher returns	99414
UNKNOWN	we call onhide() aggressively. the custom content callbacks should be able to	99415
UNKNOWN	debounce excess onhide calls.	99416
UNKNOWN	change to false to hide all apps on the overview pane	99417
UNKNOWN	the custom content needs to offset its content to account for the qsb	99418
UNKNOWN	flag the loader to stop early before switching	99419
UNKNOWN	we cant hide the ime if it was forced open. so dont bother	99420
UNKNOWN	something usable has been typed - start a search	99421
UNKNOWN	the typed text will be retrieved and cleared by	99422
UNKNOWN	showsearchdialog()	99423
UNKNOWN	if there are multiple keystrokes before the search dialog takes focus	99424
UNKNOWN	onsearchrequested() will be called for every keystroke	99425
UNKNOWN	but it is idempotent so its fine.	99426
UNKNOWN	eat the long press event so the keyboard doesnt come up.	99427
UNKNOWN	restore the appscustomize tab	99428
UNKNOWN	setup the drag layer	99429
UNKNOWN	setup the workspace	99430
UNKNOWN	get the search/delete bar	99431
UNKNOWN	setup appscustomize	99432
UNKNOWN	setup the drag controller (drop targets have to be added in reverse order in priority)	99433
UNKNOWN	the app is trying to add a shortcut without sufficient permissions	99434
UNKNOWN	first we check if we already know the exact location where we want to add this item.	99435
UNKNOWN	if appropriate either create a folder or add to an existing folder	99436
UNKNOWN	when dragging and dropping just find the closest free spot	99437
UNKNOWN	we want to account for the extra amount of padding that we are adding to the widget	99438
UNKNOWN	to ensure that it gets the full amount of space that it has requested	99439
UNKNOWN	calculate the grid spans needed to fit this widget	99440
UNKNOWN	try finding open space on launcher screen	99441
UNKNOWN	we have saved the position to which the widget was dragged-- this really only matters	99442
UNKNOWN	if we are placing widgets on a spring-loaded screen	99443
UNKNOWN	when dragging and dropping just find the closest free spot	99444
UNKNOWN	deleting an app widget id is a void call but writes to disk before returning	99445
UNKNOWN	to the caller	99446
UNKNOWN	build launcher-specific widget info and save to database	99447
UNKNOWN	perform actual inflation because were live	99448
UNKNOWN	the appwidgethostview has already been inflated and instantiated	99449
UNKNOWN	reset allapps to its initial state only if we are not in the middle of	99450
UNKNOWN	processing a multi-step drop	99451
UNKNOWN	listen for broadcasts related to user-presence	99452
UNKNOWN	for handling managed profiles	99453
UNKNOWN	todo(sansid) use the apis directly when compiling against l sdk.	99454
UNKNOWN	currently we use reflection to access the flags and the api to set the transparency	99455
UNKNOWN	on the system bars.	99456
UNKNOWN	the following code used to be in onresume but it turns out onresume is called when	99457
UNKNOWN	youre in all apps and click home to go to the workspace. onwindowvisibilitychanged	99458
UNKNOWN	is a more appropriate event to handle	99459
UNKNOWN	we want to let launcher draw itself at least once before we force it to build	99460
UNKNOWN	layers on all the workspace pages so that transitioning to launcher from other	99461
UNKNOWN	apps is nice and speedy.	99462
UNKNOWN	we delay the layer building a bit in order to give	99463
UNKNOWN	other message processing a time to run. in particular	99464
UNKNOWN	this avoids a delay in hiding the ime if it was	99465
UNKNOWN	currently shown because doing that may involve	99466
UNKNOWN	some communication back with the app.	99467
UNKNOWN	we delay the layer building a bit in order to give	99468
UNKNOWN	other message processing a time to run. in particular	99469
UNKNOWN	this avoids a delay in hiding the ime if it was	99470
UNKNOWN	currently shown because doing that may involve	99471
UNKNOWN	some communication back with the app.	99472
UNKNOWN	remove messages sent using postdelayed()	99473
UNKNOWN	whatever we were doing is hereby canceled.	99474
UNKNOWN	close the menu	99475
UNKNOWN	also will cancel mwaitingforresult.	99476
UNKNOWN	can be cases where mworkspace is null this prevents a npe	99477
UNKNOWN	in all these cases only animate if were already on home	99478
UNKNOWN	if we are already on home then just animate back to the workspace	99479
UNKNOWN	otherwise just wait until onresume to set the state back to workspace	99480
UNKNOWN	reset the apps customize page	99481
UNKNOWN	we close any open folder since it will not be re-opened and we need to make sure	99482
UNKNOWN	this state is reflected.	99483
UNKNOWN	save the current appscustomize tab	99484
UNKNOWN	remove all pending runnables	99485
UNKNOWN	stop callbacks from launchermodel	99486
UNKNOWN	its possible to receive ondestroy after a new launcher activity has	99487
UNKNOWN	been created. in this case dont interfere with the new launcher.	99488
UNKNOWN	disconnect any of the callbacks and drawables associated with iteminfos on the workspace	99489
UNKNOWN	to prevent leaking launcher activities on orientation change.	99490
UNKNOWN	use any text typed in the launcher as the initial query	99491
UNKNOWN	make sure that we have a bundle to put source in	99492
UNKNOWN	set source to package name of app that starts global search if not set already.	99493
UNKNOWN	close any open folders	99494
UNKNOWN	stop resizing any widgets	99495
UNKNOWN	show the overview mode	99496
UNKNOWN	use a custom animation for launching search	99497
UNKNOWN	launch over to configure widget if needed	99498
UNKNOWN	otherwise just add it	99499
UNKNOWN	exit spring loaded mode if necessary after adding the widget	99500
UNKNOWN	exit spring loaded mode if necessary after adding the widget	99501
UNKNOWN	close any folders that may be open.	99502
UNKNOWN	in this case we either need to start an activity to get permission to bind	99503
UNKNOWN	the widget or we need to start an activity to configure the widget or both.	99504
UNKNOWN	todo we need to make sure that this accounts for the options bundle.	99505
UNKNOWN	intent.putextra(appwidgetmanager.extra_appwidget_options options)	99506
UNKNOWN	update the model	99507
UNKNOWN	create the view	99508
UNKNOWN	force measure the new folder icon	99509
UNKNOWN	back button is a no-op here but give at least some feedback for the button press	99510
UNKNOWN	make sure that rogue clicks dont get through while allapps is launching or after the	99511
UNKNOWN	view has detached (its possible for this to happen if the view is removed mid touch).	99512
UNKNOWN	the install has not been queued	99513
UNKNOWN	download has started.	99514
UNKNOWN	open shortcut	99515
UNKNOWN	check for special shortcuts	99516
UNKNOWN	check for abandoned promise	99517
UNKNOWN	start activities	99518
UNKNOWN	if the folder info reports that the associated folder is open then verify that	99519
UNKNOWN	it is actually opened. there have been a few instances where this gets out of sync.	99520
UNKNOWN	close any open folder	99521
UNKNOWN	open the requested folder	99522
UNKNOWN	find the open folder	99523
UNKNOWN	.. and close it	99524
UNKNOWN	close any folder open on the current screen	99525
UNKNOWN	pull the folder onto this screen	99526
UNKNOWN	provide the same haptic feedback that the system offers for virtual keys.	99527
UNKNOWN	provide the same haptic feedback that the system offers for virtual keys.	99528
UNKNOWN	returns true if the activity was started	99529
UNKNOWN	system applications cannot be installed. for now show a toast explaining that.	99530
UNKNOWN	we may give them the option of disabling apps this way.	99531
UNKNOWN	only launch using the new animation if the shortcut has not opted out (this is a	99532
UNKNOWN	private contract between launcher and may be ignored in the future).	99533
UNKNOWN	could be launching some bookkeeping activity	99534
UNKNOWN	todo component can be null when shortcuts are supported for secondary user	99535
UNKNOWN	lazy load imageview bitmap and canvas	99536
UNKNOWN	the layout from which the folder is being opened may be scaled adjust the starting	99537
UNKNOWN	view size by this scale factor.	99538
UNKNOWN	just in case this image view is still in the drag layer from a previous animation	99539
UNKNOWN	we remove it and re-add it.	99540
UNKNOWN	push an imageview copy of the foldericon into the draglayer and hide the original	99541
UNKNOWN	we remove and re-draw the foldericon in-case it has changed	99542
UNKNOWN	remove the imageview copy of the foldericon and make the original visible.	99543
UNKNOWN	remove the imageview copy of the foldericon and make the original visible.	99544
UNKNOWN	just verify that the folder hasnt already been added to the draglayer.	99545
UNKNOWN	there was a one-off crash where the folder had a parent already.	99546
UNKNOWN	notify the accessibility manager that this folder window has appeared and occluded	99547
UNKNOWN	the workspace items	99548
UNKNOWN	notify the accessibility manager that this folder window has disappeard and no	99549
UNKNOWN	longer occludeds the workspace items	99550
UNKNOWN	user long pressed on empty space	99551
UNKNOWN	user long pressed on an item	99552
UNKNOWN	update the workspace transition step as well	99553
UNKNOWN	update the workspace transition step as well	99554
UNKNOWN	set the content type for the all apps/widgets space	99555
UNKNOWN	if for some reason our views arent initialized dont animate	99556
UNKNOWN	hide the real page background and swap in the fake one	99557
UNKNOWN	we need to hide this view as the animation start will be posted.	99558
UNKNOWN	get the y delta between the center of the page and the center of the all apps button	99559
UNKNOWN	check that mstateanimation hasnt changed while	99560
UNKNOWN	we waited for a layout/draw pass	99561
UNKNOWN	check that mstateanimation hasnt changed while	99562
UNKNOWN	we waited for a layout/draw pass	99563
UNKNOWN	if for some reason our views arent initialized dont animate	99564
UNKNOWN	we need to hide side pages of the apps / widget tray to avoid some ugly edge cases	99565
UNKNOWN	hideappscustomizehelper is called in some cases when it is already hidden	99566
UNKNOWN	dont perform all these no-op animations. in particularly this was causing	99567
UNKNOWN	the all-apps button to pop in and out.	99568
UNKNOWN	hide the real page background and swap in the fake one	99569
UNKNOWN	the vertical motion of the apps panel should be delayed by one frame	99570
UNKNOWN	from the conceal animation in order to give the right feel. we correspondingly	99571
UNKNOWN	shorten the duration so that the slide and conceal end at the same time.	99572
UNKNOWN	unhide side pages	99573
UNKNOWN	reset page transforms	99574
UNKNOWN	check that mstateanimation hasnt changed while	99575
UNKNOWN	we waited for a layout/draw pass	99576
UNKNOWN	unhide side pages	99577
UNKNOWN	reset page transforms	99578
UNKNOWN	check that mstateanimation hasnt changed while	99579
UNKNOWN	we waited for a layout/draw pass	99580
UNKNOWN	set focus to the appscustomize button	99581
UNKNOWN	change the state after weve called all the transition code	99582
UNKNOWN	resume the auto-advance of widgets	99583
UNKNOWN	send an accessibility event to announce the context change	99584
UNKNOWN	we post this in-case the all apps view isnt yet constructed.	99585
UNKNOWN	change the state after weve called all the transition code	99586
UNKNOWN	pause the auto-advance of widgets until we are out of allapps	99587
UNKNOWN	send an accessibility event to announce the context change	99588
UNKNOWN	we post this in-case the all apps view isnt yet constructed.	99589
UNKNOWN	before we show workspace hide all apps again because	99590
UNKNOWN	exitspringloadeddragmode made it visible. this is a bit hacky we should	99591
UNKNOWN	clean up our state transition functions	99592
UNKNOWN	before we show workspace hide all apps again because	99593
UNKNOWN	exitspringloadeddragmode made it visible. this is a bit hacky we should	99594
UNKNOWN	clean up our state transition functions	99595
UNKNOWN	otherwise we are not in spring loaded mode so dont do anything.	99596
UNKNOWN	todo	99597
UNKNOWN	todo	99598
UNKNOWN	default - 0 landscape - 1	99599
UNKNOWN	look for the toolbar icon specified in the activity meta-data	99600
UNKNOWN	this can happen if the activity defines an invalid drawable	99601
UNKNOWN	this can happen if the activity defines an invalid drawable	99602
UNKNOWN	if successful in getting icon return it otherwise set button to use default drawable	99603
UNKNOWN	if we were unable to find the icon via the meta-data use a generic one	99604
UNKNOWN	if successful in getting icon return it otherwise set button to use default drawable	99605
UNKNOWN	if we were unable to find the icon via the meta-data use a	99606
UNKNOWN	generic one	99607
UNKNOWN	populate event with a fake title based on the current state.	99608
UNKNOWN	noinspection statementwithemptybody	99609
UNKNOWN	if were starting binding all over again clear any bind calls wed postponed in	99610
UNKNOWN	the past (see waituntilresume) -- we dont need them since were starting binding	99611
UNKNOWN	from scratch again	99612
UNKNOWN	clear the workspace because its going to be rebound	99613
UNKNOWN	if there are no screens we need to have an empty screen	99614
UNKNOWN	create the custom content page (this call updates mdefaultscreen which calls	99615
UNKNOWN	setcurrentpage() so ensure that all pages are added before calling this).	99616
UNKNOWN	log to disk	99617
UNKNOWN	add the new screens	99618
UNKNOWN	we add the items without animation on non-visible pages and with	99619
UNKNOWN	animations on the new page (which we will try and snap to).	99620
UNKNOWN	remove the extra empty screen	99621
UNKNOWN	get the list of added shortcuts and intersect them with the set of shortcuts here	99622
UNKNOWN	todo fix collision case	99623
UNKNOWN	animate all the applications up now	99624
UNKNOWN	animate to the correct page	99625
UNKNOWN	we post the animation slightly delayed to prevent slowdowns	99626
UNKNOWN	when we are loading right after we return to launcher.	99627
UNKNOWN	note this assumes that the id remap broadcast is received before this step.	99628
UNKNOWN	if that is not the case the id remap will be ignored and user may see the	99629
UNKNOWN	click to setup view.	99630
UNKNOWN	todo consider showing a permission dialog when the widget is clicked.	99631
UNKNOWN	if the widget has a configure activity it is still needs to set it up otherwise	99632
UNKNOWN	the widget is ready to go.	99633
UNKNOWN	if we received the result of any pending adds while the loader was running (e.g. the	99634
UNKNOWN	widget configuration forced an orientation change) process them now.	99635
UNKNOWN	todo this moves the user to the page where the pending item was added. ideally	99636
UNKNOWN	the screen would be guaranteed to exist after bind and the page would be set through	99637
UNKNOWN	the workspace restore process.	99638
UNKNOWN	notify the drag controller	99639
UNKNOWN	update allapps	99640
UNKNOWN	update the widgets pane	99641
UNKNOWN	we are currently in the same basic orientation as the natural orientation	99642
UNKNOWN	we are currently in the other basic orientation to the natural orientation	99643
UNKNOWN	since the map starts at portrait we need to offset if this devices natural orientation	99644
UNKNOWN	is landscape.	99645
UNKNOWN	we delay hiding the intro view until the first run activity is showing. this	99646
UNKNOWN	avoids a blip.	99647
UNKNOWN	the two first run cling paths are mutually exclusive if the launcher is preinstalled	99648
UNKNOWN	on the device then we always show the first run cling experience (or if there is no	99649
UNKNOWN	launcher2). otherwise we prompt the user upon started for migration	99650
UNKNOWN	launcherclings.showlongpresscling(true)	99651
UNKNOWN	called from search suggestion not supported in other profiles.	99652
UNKNOWN	called from search suggestion not supported in other profiles.	99653
UNKNOWN	if (true || msharedprefs.getboolean(oobetoshow true)) { uncomment to loop the animation	99654
UNKNOWN	enable the hw layers before the animation starts (will be disabled in the onanimationend	99655
UNKNOWN	callback below)	99656
UNKNOWN	get the individual components	99657
UNKNOWN	create the various fade animations	99658
UNKNOWN	gets various transition durations.	99659
UNKNOWN	dragcontroller.draglistener implementation	99660
UNKNOWN	animate out the qsb search bar and animate in the drop target bar	99661
UNKNOWN	restore the qsb search bar and animate out the drop target bar	99662
UNKNOWN	no-op	99663
UNKNOWN	re inflate is required any time the widget restore status changes	99664
UNKNOWN	the view displays two modes one with a setup icon and another with a preload icon	99665
UNKNOWN	in the center.	99666
UNKNOWN	appwidgethostview blocks all click events on the root view. instead handle click events	99667
UNKNOWN	on the content and pass it along.	99668
UNKNOWN	recreate the setup text.	99669
UNKNOWN	the text fits in a single line. no need to draw the setup icon.	99670
UNKNOWN	update left and top to indicate the position where the text will be drawn.	99671
UNKNOWN	the text cant be drawn in a single line. draw a setup icon instead.	99672
UNKNOWN	load the preferences from an xml resource	99673
UNKNOWN	amount by which padding has to be scaled	99674
UNKNOWN	the draw region has been clipped.	99675
UNKNOWN	stop animation	99676
UNKNOWN	set the paint color only when the level changes so that the dominant color	99677
UNKNOWN	is only calculated when needed.	99678
UNKNOWN	make sure that the dominant color has enough saturation to be visible properly.	99679
UNKNOWN	set a new alarm to expire for the screen that we are hovering over now	99680
UNKNOWN	this is called when our timer runs out	99681
UNKNOWN	snap to the screen that we are hovering over now	99682
UNKNOWN	suppress dead code warning	99683
UNKNOWN	debug drawing for hit space	99684
UNKNOWN	set whether or not to invert the layout horizontally if the layout is in rtl mode.	99685
UNKNOWN	widgets have their own padding so skip	99686
UNKNOWN	otherwise center the icon	99687
UNKNOWN	cancel long press for all children	99688
UNKNOWN	update the drawing caches	99689
UNKNOWN	if (!mscroller.isfinished()) return	99690
UNKNOWN	keep generating points as long as were more than 1px away from the target	99691
UNKNOWN	todo initial wallpaper now that wallpapers are owned by another app	99692
UNKNOWN	todo make removeshortcut internally threadsafe	99693
UNKNOWN	ignore	99694
UNKNOWN	todo delayed writes	99695
UNKNOWN	not a problem	99696
UNKNOWN	more of a problem	99697
UNKNOWN	log.v(weightwatcher.processwatcher	99698
UNKNOWN	msg_update pss= + mmeminfo.currentpss)	99699
UNKNOWN	app	99700
UNKNOWN	service	99701
UNKNOWN	log.v(weightwatcher.processwatcher	99702
UNKNOWN	msg_update pss= + mmeminfo.currentpss)	99703
UNKNOWN	app	99704
UNKNOWN	service	99705
UNKNOWN	we share the statics -(	99706
UNKNOWN	we share the statics -(	99707
UNKNOWN	ensure the bitmap has a density.	99708
UNKNOWN	scale the icon proportionally to the icon dimensions	99709
UNKNOWN	no intrinsic size --> use default size	99710
UNKNOWN	suppress dead code warning	99711
UNKNOWN	draw a big box for the icon for debugging	99712
UNKNOWN	for textviews scroll has a meaning which relates to the text position	99713
UNKNOWN	which is very strange ignore the scroll.	99714
UNKNOWN	this is an out-param for getting the hsv values for an rgb	99715
UNKNOWN	first get the best hue by creating a histogram over 360 hue buckets	99716
UNKNOWN	where each pixel contributes a score weighted by saturation value and alpha.	99717
UNKNOWN	drop mostly-transparent pixels.	99718
UNKNOWN	remove the alpha channel.	99719
UNKNOWN	bucket colors by the 360 integer hues.	99720
UNKNOWN	defensively avoid array bounds violations.	99721
UNKNOWN	go back over the rgb colors that match the winning hue	99722
UNKNOWN	creating a histogram of weighted sv scores for up to 100100 [sv] buckets.	99723
UNKNOWN	the highest-scoring rgb color wins.	99724
UNKNOWN	score by cumulative saturation value.	99725
UNKNOWN	all the colors in the winning bucket are very similar. last in wins.	99726
UNKNOWN	finds a system apk which had a broadcast receiver listening to a particular action. @param action intent action used to find the apk @return a pair of apk package name and the resources.	99727
UNKNOWN	launching the application	99728
UNKNOWN	most used	99729
UNKNOWN	set the all apps	99730
UNKNOWN	scale the fling-to-delete threshold by the density	99731
UNKNOWN	hook up the page indicator	99732
UNKNOWN	unhook the page indicator	99733
UNKNOWN	convenience methods to map points from self to parent and vice versa	99734
UNKNOWN	convenience methods to get the actual width/height of the pagedview (since it is measured	99735
UNKNOWN	to be larger to account for the minimum possible scale)	99736
UNKNOWN	convenience methods to get the offset assuming that we are centering the pages in the	99737
UNKNOWN	pagedview both horizontally and vertically	99738
UNKNOWN	if the current page is invalid just reset the scroll position to zero	99739
UNKNOWN	we need to clean up the next page here to avoid computescrollhelper from	99740
UNKNOWN	updating current page on the pass.	99741
UNKNOWN	we need to clean up the next page here to avoid computescrollhelper from	99742
UNKNOWN	updating current page on the pass.	99743
UNKNOWN	when in free scroll mode we need to clamp to the free scroll page range.	99744
UNKNOWN	ensure that it is clamped by the actual set of children in all cases	99745
UNKNOWN	dont introduce any checks like mcurrentpage == currentpage here-- if we change the	99746
UNKNOWN	the default	99747
UNKNOWN	update the page indicator (when we arent reordering)	99748
UNKNOWN	a method that subclasses can override to add behavior	99749
UNKNOWN	a method that subclasses can override to add behavior	99750
UNKNOWN	in free scroll mode we clamp the scrollx	99751
UNKNOWN	update the last motion events when scrolling	99752
UNKNOWN	we moved this functionality to a helper function so smoothpagedview can reuse it	99753
UNKNOWN	dont bother scrolling if the page does not need to be moved	99754
UNKNOWN	load the associated pages if necessary	99755
UNKNOWN	we dont want to trigger a page end moving unless the page has settled	99756
UNKNOWN	and the user has stopped scrolling	99757
UNKNOWN	notify the user when the page changes	99758
UNKNOWN	we measure the dimensions of the pagedview to be larger than the pages so that when we	99759
UNKNOWN	zoom out (and scale down) the view is still contained in the parent	99760
UNKNOWN	note we multiply by 2f to account for the fact that depending on the offset of the	99761
UNKNOWN	viewport we can be at most one and a half screens offset once we scale down	99762
UNKNOWN	return early if we arent given a proper dimension	99763
UNKNOWN	allow the height to be set as wrap_content. this allows the particular case of the all apps view on xlarge displays to not take up more space then it needs. width is still not allowed to be set as wrap_content since many parts of the code expect each page to have the same width.	99764
UNKNOWN	the children are given the same width and height as the workspace	99765
UNKNOWN	unless they were set to wrap_content	99766
UNKNOWN	disallowing padding in paged view (just pass 0)	99767
UNKNOWN	update the viewport offsets	99768
UNKNOWN	prevent full screen pages from showing in the viewport	99769
UNKNOWN	when they are not the current page.	99770
UNKNOWN	update the page indicator we dont update the page indicator as we	99771
UNKNOWN	add/remove pages	99772
UNKNOWN	this ensures that when children are added they get the correct transforms / alphas	99773
UNKNOWN	in accordance with any scroll effects.	99774
UNKNOWN	update the page indicator we dont update the page indicator as we	99775
UNKNOWN	add/remove pages	99776
UNKNOWN	xxx we should find a better way to hook into this before the view	99777
UNKNOWN	gets removed form its parent	99778
UNKNOWN	xxx we should find a better way to hook into this before the view	99779
UNKNOWN	gets removed form its parent	99780
UNKNOWN	xxx we should find a better way to hook into this before the view	99781
UNKNOWN	gets removed form its parent	99782
UNKNOWN	update the page indicator we dont update the page indicator as we	99783
UNKNOWN	add/remove pages	99784
UNKNOWN	find out which screens are visible as an optimization we only call draw on them	99785
UNKNOWN	moverscrollx is equal to getscrollx() when were within the normal scroll range.	99786
UNKNOWN	otherwise it is equal to the scaled overscroll position.	99787
UNKNOWN	set mforcescreenscrolled before calling screenscrolled so that screenscrolled can	99788
UNKNOWN	set it for the next frame	99789
UNKNOWN	clip to the bounds	99790
UNKNOWN	draw all the children leaving the drag view for last	99791
UNKNOWN	draw the drag view on top (if there is one)	99792
UNKNOWN	xxx-rtl this will be fixed in a future cl	99793
UNKNOWN	xxx-rtl this will be fixed in a future cl	99794
UNKNOWN	we need to make sure to cancel our long press if	99795
UNKNOWN	a scrollable widget takes over touch events	99796
UNKNOWN	this method just determines whether we want to intercept the motion. if we return true ontouchevent will be called and we do the actual scrolling there.	99797
UNKNOWN	skip touch handling if there are no pages to swipe	99798
UNKNOWN	shortcut the most recurring case the user is in the dragging state and he is moving his finger. we want to intercept this motion.	99799
UNKNOWN	misbeingdragged == false otherwise the shortcut would have caught it. check whether the user has moved far enough from his original down touch.	99800
UNKNOWN	if mactivepointerid is invalid_pointer then we must have missed an action_down	99801
UNKNOWN	event. in that case treat the first occurence of a move event as a action_down	99802
UNKNOWN	i.e. fall through to the next case (dont break)	99803
UNKNOWN	(we sometimes miss action_down events in workspace because it ignores all events	99804
UNKNOWN	while its small- this was causing a crash before we checked for invalid_pointer)	99805
UNKNOWN	remember location of down touch	99806
UNKNOWN	if being flinged and user touches the screen initiate drag otherwise dont. mscroller.isfinished should be false when being flinged.	99807
UNKNOWN	check if this can be the beginning of a tap on the side of the pages	99808
UNKNOWN	to scroll the current page	99809
UNKNOWN	the only time we want to intercept motion events is if we are in the drag mode.	99810
UNKNOWN	determines if we should change the touch state to start scrolling after the user moves their touch point too far.	99811
UNKNOWN	disallow scrolling if we dont have a valid pointer index	99812
UNKNOWN	disallow scrolling if we started the gesture from outside the viewport	99813
UNKNOWN	scroll if the user moved far enough along the x axis	99814
UNKNOWN	mallowlongpress = false	99815
UNKNOWN	try canceling the long press. it could also have been scheduled	99816
UNKNOWN	by a distant descendant so use the mallowlongpress flag to block	99817
UNKNOWN	everything	99818
UNKNOWN	while layout transitions are occurring a childs position may stray from its baseline	99819
UNKNOWN	position. this method returns the magnitude of this stray at any given time.	99820
UNKNOWN	this curve determines how the effect of scrolling over the limits of the page dimishes	99821
UNKNOWN	as the user pulls further and further from the bounds	99822
UNKNOWN	we want to reach the max over scroll effect when the user has	99823
UNKNOWN	over scrolled half the size of the screen	99824
UNKNOWN	clamp this factor f to -1 < f < 1	99825
UNKNOWN	clamp this factor f to -1 < f < 1	99826
UNKNOWN	using the formula in overscroll assuming that f = 1.0 (which it should generally not	99827
UNKNOWN	exceed). used to find out how much extra wallpaper we need for the over scroll effect	99828
UNKNOWN	skip touch handling if there are no pages to swipe	99829
UNKNOWN	if being flinged and user touches stop the fling. isfinished will be false if being flinged.	99830
UNKNOWN	remember where the motion event started	99831
UNKNOWN	scroll to follow the motion event	99832
UNKNOWN	only scroll and update mlastmotionx if we have moved some discrete amount. we	99833
UNKNOWN	keep the remainder because we are actually testing if weve moved from the last	99834
UNKNOWN	scrolled position (which is discrete).	99835
UNKNOWN	update the last motion position	99836
UNKNOWN	update the parent down so that our zoom animations take this new movement into	99837
UNKNOWN	account	99838
UNKNOWN	find the closest page to the touch point	99839
UNKNOWN	change the drag view if we are hovering over the drop target	99840
UNKNOWN	setup the scroll to the correct page before we swap the views	99841
UNKNOWN	for each of the pages between the paged view and the drag view	99842
UNKNOWN	animate them from the previous position to the new position in	99843
UNKNOWN	the layout (as a result of the drag view moving in the layout)	99844
UNKNOWN	dragviewindex < pageunderpointindex so after we remove the	99845
UNKNOWN	drag view all subsequent views to pageunderpointindex will	99846
UNKNOWN	shift down.	99847
UNKNOWN	animate the view translation from its old position to its new	99848
UNKNOWN	position	99849
UNKNOWN	in the case that the page is moved far to one direction and then is flung	99850
UNKNOWN	in the opposite direction we use a threshold to determine whether we should	99851
UNKNOWN	just return to the starting page or if we should skip one further.	99852
UNKNOWN	we give flings precedence over large moves which is why we short-circuit our	99853
UNKNOWN	test for a large move if a fling has been registered. that is a large	99854
UNKNOWN	move to the left and fling to the right will register as a fling to the right.	99855
UNKNOWN	at this point we have not moved beyond the touch slop	99856
UNKNOWN	(otherwise mtouchstate would be touch_state_scrolling) so	99857
UNKNOWN	we can just page	99858
UNKNOWN	at this point we have not moved beyond the touch slop	99859
UNKNOWN	(otherwise mtouchstate would be touch_state_scrolling) so	99860
UNKNOWN	we can just page	99861
UNKNOWN	update the last motion position	99862
UNKNOWN	update the parent down so that our zoom animations take this new movement into	99863
UNKNOWN	account	99864
UNKNOWN	check the velocity and see if we are flinging-to-delete	99865
UNKNOWN	remove the callback to wait for the side page hover timeout	99866
UNKNOWN	end any intermediate reordering states	99867
UNKNOWN	setup the scroll to the correct page before we swap the views	99868
UNKNOWN	for each of the pages between the paged view and the drag view	99869
UNKNOWN	animate them from the previous position to the new position in	99870
UNKNOWN	the layout (as a result of the drag view moving in the layout)	99871
UNKNOWN	dragviewindex < pageunderpointindex so after we remove the	99872
UNKNOWN	drag view all subsequent views to pageunderpointindex will	99873
UNKNOWN	shift down.	99874
UNKNOWN	animate the view translation from its old position to its new	99875
UNKNOWN	position	99876
UNKNOWN	handle mouse (or ext. device) by shifting the page depending on the scroll	99877
UNKNOWN	this was our active pointer going up. choose a new	99878
UNKNOWN	active pointer and adjust accordingly.	99879
UNKNOWN	todo make this decision more intelligent.	99880
UNKNOWN	we want the duration of the page snap animation to be influenced by the distance that	99881
UNKNOWN	the screen has to travel however we dont want this duration to be effected in a	99882
UNKNOWN	purely linear fashion. instead we use this method to moderate the effect that the distance	99883
UNKNOWN	of travel has on the overall snap duration.	99884
UNKNOWN	center the values about 0.	99885
UNKNOWN	if the velocity is low enough then treat this more as an automatic page advance	99886
UNKNOWN	as opposed to an apparent physical response to flinging	99887
UNKNOWN	here we compute a distance that will be used in the computation of the overall	99888
UNKNOWN	snap duration. this is a function of the actual distance that needs to be traveled	99889
UNKNOWN	we keep this value close to half screen size in order to reduce the variance in snap	99890
UNKNOWN	duration as a function of the distance the page needs to travel.	99891
UNKNOWN	we want the pages snap velocity to approximately match the velocity at which the	99892
UNKNOWN	user flings so we scale the duration by a value near to the derivative of the scroll	99893
UNKNOWN	interpolator at zero ie. 5. we use 4 to make it a little slower.	99894
UNKNOWN	trigger a compute() to finish switching pages if necessary	99895
UNKNOWN	defer loading associated pages until the scroll settles	99896
UNKNOWN	first clear any pages that should no longer be loaded	99897
UNKNOWN	next load any new pages	99898
UNKNOWN	force all scrolling-related behavior to end	99899
UNKNOWN	update all the pages	99900
UNKNOWN	we must force a measure after weve loaded the pages to update the content width and	99901
UNKNOWN	to determine the full scroll width	99902
UNKNOWN	set a new page as the current page if necessary	99903
UNKNOWN	mark each of the pages as dirty	99904
UNKNOWN	load any pages that are necessary for the current window of views	99905
UNKNOWN	if the page is moving then snap it to the final position to ensure we dont get	99906
UNKNOWN	stuck between pages	99907
UNKNOWN	animate the drag view back to the original position	99908
UNKNOWN	set the touch state to reordering (allows snapping to pages dragging a child etc.)	99909
UNKNOWN	we must invalidate to trigger a redraw to update the layers such that the drag view	99910
UNKNOWN	is always drawn on top	99911
UNKNOWN	trigger the callback when reordering has settled	99912
UNKNOWN	check if we are within the reordering range	99913
UNKNOWN	find the drag view under the pointer	99914
UNKNOWN	for simplicity we call endreordering sometimes even if reordering was never started.	99915
UNKNOWN	in that case we dont want to do anything.	99916
UNKNOWN	if we havent flung-to-delete the current child then we just animate the drag view	99917
UNKNOWN	back into position	99918
UNKNOWN	snap to the current page	99919
UNKNOWN	animate the drag view back to the front position	99920
UNKNOWN	handled in post-delete-animation-callbacks	99921
UNKNOWN	flinging to delete - in progress	99922
UNKNOWN	do a quick dot product test to ensure that we are flinging upwards	99923
UNKNOWN	for each of the pages around the drag view animate them from the previous	99924
UNKNOWN	position to the new position in the layout (as a result of the drag view moving	99925
UNKNOWN	in the layout)	99926
UNKNOWN	note we can make an assumption here because we have side-bound pages that we	99927
UNKNOWN	will always have pages to animate in from the left	99928
UNKNOWN	setup the scroll to the correct page before we swap the views	99929
UNKNOWN	dragviewindex < pageunderpointindex so after we remove the	99930
UNKNOWN	drag view all subsequent views to pageunderpointindex will	99931
UNKNOWN	shift down.	99932
UNKNOWN	simulate the page being offscreen with the page spacing	99933
UNKNOWN	animate the view translation from its old position to its new	99934
UNKNOWN	position	99935
UNKNOWN	note hacky but we want to skip any optimizations to not draw completely	99936
UNKNOWN	hidden views	99937
UNKNOWN	for each of the pages around the drag view animate them from the previous	99938
UNKNOWN	position to the new position in the layout (as a result of the drag view moving	99939
UNKNOWN	in the layout)	99940
UNKNOWN	note we can make an assumption here because we have side-bound pages that we	99941
UNKNOWN	will always have pages to animate in from the left	99942
UNKNOWN	setup the scroll to the correct page before we swap the views	99943
UNKNOWN	dragviewindex < pageunderpointindex so after we remove the	99944
UNKNOWN	drag view all subsequent views to pageunderpointindex will	99945
UNKNOWN	shift down.	99946
UNKNOWN	simulate the page being offscreen with the page spacing	99947
UNKNOWN	animate the view translation from its old position to its new	99948
UNKNOWN	position	99949
UNKNOWN	note hacky but we want to skip any optimizations to not draw completely	99950
UNKNOWN	hidden views	99951
UNKNOWN	note because it takes time for the first frame of animation to actually be	99952
UNKNOWN	called and we expect the animation to be a continuation of the fling we have	99953
UNKNOWN	to account for the time that has elapsed since the fling finished. and since	99954
UNKNOWN	we dont have a startdelay we will always get call to update when we call	99955
UNKNOWN	start() (which we want to ignore).	99956
UNKNOWN	anonymous inner class ctor	99957
UNKNOWN	create and start the animation	99958
UNKNOWN	drag to delete	99959
UNKNOWN	create and start the complex animation	99960
UNKNOWN	accessibility	99961
UNKNOWN	dont let the view send real scroll events.	99962
UNKNOWN	refactor the limits	99963
UNKNOWN	update the information	99964
UNKNOWN	clear the current state	99965
UNKNOWN	add application to the bag	99966
UNKNOWN	update the information	99967
UNKNOWN	obtain the cached app information	99968
UNKNOWN	if does not exist create one	99969
UNKNOWN	increment count	99970
UNKNOWN	set the current time for the last execution	99971
UNKNOWN	update the informations	99972
UNKNOWN	obtain the cached app information	99973
UNKNOWN	if does not exist create one	99974
UNKNOWN	obtain the cached app information	99975
UNKNOWN	if does not exist create one	99976
UNKNOWN	set the current time for the last execution	99977
UNKNOWN	obtain the cached app information	99978
UNKNOWN	if does not exist create one	99979
UNKNOWN	obtain the cached app information	99980
UNKNOWN	update age	99981
UNKNOWN	remove data	99982
UNKNOWN	if does not exist return	99983
UNKNOWN	if its being used in the lists refactor the lists	99984
UNKNOWN	most used	99985
UNKNOWN	calculate the most used	99986
UNKNOWN	calculate the most recent	99987
UNKNOWN	called once the last instance of your widget is removed from the	99988
UNKNOWN	homescreen	99989
UNKNOWN	widget instance is removed from the homescreen	99990
UNKNOWN	obtain appropriate widget and update it.	99991
UNKNOWN	get the widgets	99992
UNKNOWN	clear the current data	99993
UNKNOWN	obtain the current data saved	99994
UNKNOWN	update the recent apps	99995
UNKNOWN	process the most used apps	99996
UNKNOWN	if no information is available log it and continue	99997
UNKNOWN	update the code	99998
UNKNOWN	if no information is available log it and continue	99999
UNKNOWN	update the code	100000
UNKNOWN	generate the mostused row	100001
UNKNOWN	get app icon and label	100002
UNKNOWN	debug string with app count	100003
UNKNOWN	generate the mostused row	100004
UNKNOWN	get application icon and label	100005
UNKNOWN	debug string with app count	100006
UNKNOWN	create the intent for this app	100007
UNKNOWN	(non-javadoc) @see android.appwidget.appwidgetprovider#onupdate(android.content.context android.appwidget.appwidgetmanager int[]) onupdate ============================================================== context the context in which this receiver is running. appwidgetmanager a appwidgetmanager object you can call updateappwidget(componentname remoteviews) on. appwidgetids the appwidgetids for which an update is needed. note that this may be all of the appwidget instances for this provider or just a subset of them.	100008
UNKNOWN	called in response to the action_appwidget_update broadcast when this	100009
UNKNOWN	appwidget provider	100010
UNKNOWN	is being asked to provide remoteviews for a set of appwidgets.	100011
UNKNOWN	override this method to implement your own appwidget functionality.	100012
UNKNOWN	update the widget data	100013
UNKNOWN	called once the last instance of your widget is removed from the	100014
UNKNOWN	homescreen	100015
UNKNOWN	widget instance is removed from the homescreen	100016
UNKNOWN	obtain appropriate widget and update it.	100017
UNKNOWN	get the widgets	100018
UNKNOWN	(non-javadoc) @see android.appwidget.appwidgetprovider#onupdate(android.content.context android.appwidget.appwidgetmanager int[]) onupdate ============================================================== context the context in which this receiver is running. appwidgetmanager a appwidgetmanager object you can call updateappwidget(componentname remoteviews) on. appwidgetids the appwidgetids for which an update is needed. note that this may be all of the appwidget instances for this provider or just a subset of them.	100019
UNKNOWN	called in response to the action_appwidget_update broadcast when this	100020
UNKNOWN	appwidget provider	100021
UNKNOWN	is being asked to provide remoteviews for a set of appwidgets.	100022
UNKNOWN	override this method to implement your own appwidget functionality.	100023
UNKNOWN	update the widget data	100024
UNKNOWN	check if the package is valid	100025
UNKNOWN	check if it exists in our existing cache	100026
UNKNOWN	not in cache we need to load it from the db	100027
UNKNOWN	its not in the db we need to generate it	100028
UNKNOWN	write to db on a thread pool this can be done lazily and improves the performance	100029
UNKNOWN	of the first time widget previews are loaded	100030
UNKNOWN	delete all the records theyll be repopulated as this is a cache	100031
UNKNOWN	should cache the string builder	100032
UNKNOWN	delete everything	100033
UNKNOWN	select query	100034
UNKNOWN	args to select query	100035
UNKNOWN	select query	100036
UNKNOWN	args to select query	100037
UNKNOWN	select query	100038
UNKNOWN	args to select query	100039
UNKNOWN	select query	100040
UNKNOWN	args to select query	100041
UNKNOWN	cols to return	100042
UNKNOWN	select query	100043
UNKNOWN	args to select query	100044
UNKNOWN	load the preview image if possible	100045
UNKNOWN	noinspection unusedassignment	100046
UNKNOWN	generate a preview image if we couldnt load one	100047
UNKNOWN	this drawable is not directly drawn so theres no need to mutate it.	100048
UNKNOWN	draw the icon in the top left corner	100049
UNKNOWN	scale to fit width only - let the widget preview be clipped in the	100050
UNKNOWN	vertical dimension	100051
UNKNOWN	if a bitmap is passed in we use it otherwise we create a bitmap of the right size	100052
UNKNOWN	draw the scaled preview into the final bitmap	100053
UNKNOWN	render the icon	100054
UNKNOWN	draw a desaturated/scaled version of the icon in the background as a watermark	100055
UNKNOWN	restore the bounds	100056
UNKNOWN	this is a gigantic hack but unfortunately the only way to resolve an fd	100057
UNKNOWN	to a file name. note that we have to loop over all possible fds because	100058
UNKNOWN	reading the directory would require allocating a new fd. the kernel is	100059
UNKNOWN	currently implemented such that no fd is larger then the current rlimit	100060
UNKNOWN	which is why its safe to loop over them in such a way.	100061
UNKNOWN	getcanonicalpath() uses readlink behind the scene which doesnt require	100062
UNKNOWN	a file descriptor.	100063
UNKNOWN	those are the files that dont point anywhere on the file system.	100064
UNKNOWN	getcanonicalpath() wrongly interprets these as relative symlinks and	100065
UNKNOWN	resolves them within /proc/<pid>/fd/.	100066
UNKNOWN	ignoring exceptions for non-existing file descriptors.	100067
UNKNOWN	catch everything. this is called from an exception handler that we shouldnt upset.	100068
UNKNOWN	delete all the records theyll be repopulated as this is a cache	100069
UNKNOWN	not a valid target	100070
UNKNOWN	no permission is needed	100071
UNKNOWN	the activity requires some permission but there is no source.	100072
UNKNOWN	source does not have sufficient permissions.	100073
UNKNOWN	we have to fix that once we go to m	100074
UNKNOWN	if (!utilities.atleast_marshmallow) {	100075
UNKNOWN	these checks are sufficient for below m devices.	100076
UNKNOWN	return true	100077
UNKNOWN	}	100078
UNKNOWN		100079
UNKNOWN	on m and above also check appopsmanager for compatibility mode permissions.	100080
UNKNOWN	if (textutils.isempty(appopsmanager.permissiontoop(target.activityinfo.permission))) {	100081
UNKNOWN	there is no app-op for this permission which could have been disabled.	100082
UNKNOWN	return true	100083
UNKNOWN	}	100084
UNKNOWN		100085
UNKNOWN	there is no direct way to check if the app-op is allowed for a particular app. since	100086
UNKNOWN	app-op is only enabled for apps running in compatibility mode simply block such apps.	100087
UNKNOWN		100088
UNKNOWN	try {	100089
UNKNOWN	return pm.getapplicationinfo(srcpackage 0).targetsdkversion >= build.version_codes.m	100090
UNKNOWN	} catch (namenotfoundexception e) { }	100091
UNKNOWN		100092
UNKNOWN	return false	100093
UNKNOWN	get the current prefs and clear to update	100094
UNKNOWN	recursive search	100095
UNKNOWN	setupthevideo()	100096
UNKNOWN	setupdefinitionssteps()	100097
UNKNOWN	setupedgeglowtutorialsteps()	100098
UNKNOWN	button	100099
UNKNOWN	increment the step counter	100100
UNKNOWN	increment the step counter	100101
UNKNOWN	decrement the step counter	100102
UNKNOWN	increment the step counter	100103
UNKNOWN	decrement the step counter	100104
UNKNOWN	mmainbackground.setbackgroundresource(r.color.oobe_background)	100105
UNKNOWN	startanimation(new edgeglowtutorialanimationhelper())	100106
UNKNOWN	settextview(moobetextgroup10)	100107
UNKNOWN	mnextbutton.setvisibility(visibilitynext) mbackbutton.setvisibility(visibilityback) mstartbutton.setvisibility(visibilitystart) mskipbutton.setvisibility(visibilityskip)	100108
UNKNOWN	log.i( send change locale request)	100109
UNKNOWN	alphaanim.addkeyframe(0 1600 null)	100110
UNKNOWN	alphaanim.addkeyframe(0 2000 null)	100111
UNKNOWN	- dynamicgrid.pxfromdp(110 mdisplaymetrics)	100112
UNKNOWN	- dynamicgrid.pxfromdp(110 mdisplaymetrics)	100113
UNKNOWN	texteditanimationoff.setfillafter(true)	100114
UNKNOWN	titleview.animate().alpha(0f).setduration(1000).setlistener(null) titleview.animate().alpha(1f).setduration(1000).setlistener(null) textview.animate().alpha(1f).setstartdelay(10000).setduration(400000).setlistener(null)	100115
UNKNOWN	editview.startanimation(texteditanimation)	100116
UNKNOWN	spriteroot.addchild(spritehandshadow)	100117
UNKNOWN	spritemenu.addchild(spriteappiconselected)	100118
UNKNOWN	animation setup	100119
UNKNOWN	animation setup	100120
UNKNOWN	alphaanim.addkeyframe(1 4250 null)	100121
UNKNOWN	xanim.addkeyframe(((screen_width/2) + dynamicgrid.pxfromdp(50fmdisplaymetrics)) 1500 null)	100122
UNKNOWN	xanim.addkeyframe(((screen_width/2) + dynamicgrid.pxfromdp(50fmdisplaymetrics)) 1500 null)	100123
UNKNOWN	scaleanim.addkeyframe(1f 2600 null) scaleanim.addkeyframe(20.0f 4000 decelerateinterpolator)	100124
UNKNOWN	+ dynamicgrid.pxfromdp(77fmdisplaymetrics)	100125
UNKNOWN	+ dynamicgrid.pxfromdp(77fmdisplaymetrics)	100126
UNKNOWN	(non-javadoc) @see java.lang.object#hashcode()	100127
UNKNOWN	(non-javadoc) @see java.lang.object#equals(java.lang.object)	100128
UNKNOWN	defines a variable to store the action type for the incoming	100129
UNKNOWN	event	100130
UNKNOWN	handles each of the expected events	100131
UNKNOWN	moving an icon to an occupied position replaces the	100132
UNKNOWN	current one	100133
UNKNOWN	toggle the red glow when removing favorites	100134
UNKNOWN	get the item data	100135
UNKNOWN	0 is the origin	100136
UNKNOWN	1 is the index	100137
UNKNOWN	obtain the applicationinfo	100138
UNKNOWN	when not removing an icon swap is performed	100139
UNKNOWN	remove the favorite	100140
UNKNOWN	only setup the icon if a valid id is obtained	100141
UNKNOWN	hide zone remove zone	100142
UNKNOWN	are we dragging mostly to the right?	100143
UNKNOWN	subtract the number of columns in order to get the correct item	100144
UNKNOWN	due to the header	100145
UNKNOWN	set the drag listener to enable favorite icon removal	100146
UNKNOWN	display a circle around the possible destinations	100147
UNKNOWN	set the item with the origin of the drag and the index of the dragged	100148
UNKNOWN	view	100149
UNKNOWN	set the listeners	100150
UNKNOWN	the last argument is set to false since this hasnt the ability	100151
UNKNOWN	to remove icons it only switches them	100152
UNKNOWN	log.d(tag adding app +	100153
UNKNOWN	applicationinfo.getapplicationtitle())	100154
UNKNOWN	set the listener	100155
UNKNOWN	pass the main view and the instance setup the drag and visibility	100156
UNKNOWN	of some views	100157
UNKNOWN	get the new icon	100158
UNKNOWN	get the new icon	100159
UNKNOWN	show the zone where favorites can be removed	100160
UNKNOWN	display a circle around the possible destinations	100161
UNKNOWN	set the drag info	100162
UNKNOWN	set the item with the origin of the drag and the index of the	100163
UNKNOWN	dragged view	100164
UNKNOWN	hide the circle around the possible destinations	100165
UNKNOWN	the red glow only makes sense when removing favorites	100166
UNKNOWN	to avoid the addition of fairphone home launcher to	100167
UNKNOWN	appswitcher	100168
UNKNOWN	checks if the animation is starting from the left or right	100169
UNKNOWN	todo catch the onmeasure and setup the correct sizes after that	100170
UNKNOWN	for now just calculate the initial size	100171
UNKNOWN	if all apps icon	100172
UNKNOWN	set the right componentname in order to launch dialer	100173
UNKNOWN	or contacts correctly	100174
UNKNOWN	when the user sets the finger on an item	100175
UNKNOWN	if all apps icon	100176
UNKNOWN	checks if the animation is starting from the left or right	100177
UNKNOWN	if all apps icon	100178
UNKNOWN	set edit menu button timer	100179
UNKNOWN	set the x coords	100180
UNKNOWN	defines local variables	100181
UNKNOWN	calculate the canvas size	100182
UNKNOWN	the drag shadow is a colordrawable. this sets its dimensions to	100183
UNKNOWN	be the same as the	100184
UNKNOWN	canvas that the system will provide. as a result the drag shadow	100185
UNKNOWN	will fill the	100186
UNKNOWN	canvas.	100187
UNKNOWN	sets the size parameters width and height values. these get back	100188
UNKNOWN	to the system	100189
UNKNOWN	through the size parameter.	100190
UNKNOWN	sets the touch points position to be in the middle of the drag	100191
UNKNOWN	shadow	100192
UNKNOWN	defines a callback that draws the drag shadow in a canvas that the	100193
UNKNOWN	system constructs	100194
UNKNOWN	from the dimensions passed in onprovideshadowmetrics().	100195
UNKNOWN	draws the colordrawable in the canvas passed in from the system.	100196
UNKNOWN	shadow.draw(canvas)	100197
UNKNOWN	add a user badge in the bottom right of the image.	100198
UNKNOWN	return default icon below.	100199
UNKNOWN	guardo la referencia del scroll para poder usar ambos	100200
UNKNOWN	registramos un datasetobserver para que cuando se produzcan cambios en el adaptador original lo podamos reflejar	100201
UNKNOWN	en el fakeadapter	100202
UNKNOWN	para evitar ciclos infinitos de ondraw / drawheaders porque si en ondraw le pongo el topmargin efectãºa	100203
UNKNOWN	repintado entonces llama a drawheaders y asã­.	100204
UNKNOWN	they sent us a bad intent	100205
UNKNOWN	else we are replacing the package so a package_added will be sent	100206
UNKNOWN	later we will update the package at this time	100207
UNKNOWN	extra_replacing is available kitkat onwards. for lower devices it is broadcasted	100208
UNKNOWN	when moving a package or mounting/un-mounting external storage. assume that	100209
UNKNOWN	it is a replacing operation.	100210
UNKNOWN	they sent us a bad intent	100211
UNKNOWN	else we are replacing the package so a package_added will be sent	100212
UNKNOWN	later we will update the package at this time	100213
UNKNOWN	extra_replacing is available kitkat onwards. for lower devices it is broadcasted	100214
UNKNOWN	when moving a package or mounting/un-mounting external storage. assume that	100215
UNKNOWN	it is a replacing operation.	100216
UNKNOWN	try again later	100217
UNKNOWN	no longer necessary to track this package	100218
UNKNOWN	try again later	100219
UNKNOWN	no op	100220
UNKNOWN	called on mworker thread.	100221
UNKNOWN	not yet ready	100222
UNKNOWN	nothing to update	100223
UNKNOWN	try again later	100224
UNKNOWN	replay all updates with a one time update for this installed package. no	100225
UNKNOWN	need to store this record for future updates as the app list will get	100226
UNKNOWN	refreshed on resume.	100227
UNKNOWN	1 is top	100228
UNKNOWN	the great android hackatlon the love the magic.	100229
UNKNOWN	the two leftmost bits in the height measure spec have	100230
UNKNOWN	a special meaning hence we cant use them to describe height.	100231
UNKNOWN	any other height should be respected as is.	100232
UNKNOWN	fire the easter egg	100233
UNKNOWN	fire the easter egg	100234
UNKNOWN	redraw the drawer	100235
UNKNOWN	redraw the drawer	100236
UNKNOWN	exit spring loaded mode if we have not successfully dropped or	100237
UNKNOWN	have not handled the	100238
UNKNOWN	drop in workspace	100239
UNKNOWN	we delay entering spring-loaded mode slightly to make sure the ui	100240
UNKNOWN	thready is free of any work.	100241
UNKNOWN	we dont enter spring-loaded mode if the drag has been	100242
UNKNOWN	cancelled	100243
UNKNOWN	go into spring loaded mode (must happen before we	100244
UNKNOWN	startdrag())	100245
UNKNOWN	we dont enter spring-loaded mode if the drag has been	100246
UNKNOWN	cancelled	100247
UNKNOWN	go into spring loaded mode (must happen before we	100248
UNKNOWN	startdrag())	100249
UNKNOWN	mforcedrawallchildrennextframe = !toworkspace	100250
UNKNOWN	return early if this is not initiated from a touch	100251
UNKNOWN	if (!v.isintouchmode()) return false	100252
UNKNOWN	when we have exited all apps or are in transition disregard long	100253
UNKNOWN	clicks	100254
UNKNOWN	if (!mlauncher.isagingappdrawervisible() ||	100255
UNKNOWN	!mlauncher.isallappsvisible() ||	100256
UNKNOWN	mlauncher.getworkspace().isswitchingstate()) return false	100257
UNKNOWN	return if global dragging is not enabled	100258
UNKNOWN	if (!mlauncher.isdraggingenabled()) return false	100259
UNKNOWN	return early and wait for onflingtodeletecompleted if this was the	100260
UNKNOWN	result of a fling	100261
UNKNOWN	display an error message if the drag failed due to there not being	100262
UNKNOWN	enough space on the	100263
UNKNOWN	target layout we were dropping on.	100264
UNKNOWN	we just dismiss the drag when we fling so cleanup here	100265
UNKNOWN	otherwise it may crash	100266
UNKNOWN	open the searchview bar	100267
UNKNOWN	otherwise it may crash	100268
UNKNOWN	estimate the size of a widget with spans hspan vspan. return max_value for each	100269
UNKNOWN	dimension if unsuccessful	100270
UNKNOWN	use the first non-custom page to estimate the child position	100271
UNKNOWN	prevent any un/installshortcutreceivers from updating the db while we are dragging	100272
UNKNOWN	re-enable any un/installshortcutreceiver and now process any queued items	100273
UNKNOWN	set the wallpaper dimensions when launcher starts up	100274
UNKNOWN	we want to show layout transitions when pages are deleted to close the gap.	100275
UNKNOWN	disable all layout transitions before removing all pages to ensure that we dont get the	100276
UNKNOWN	transition animations competing with us changing the scroll when we add pages or the	100277
UNKNOWN	custom content screen	100278
UNKNOWN	since we increment the current page when we call addcustomcontentpage via bindscreens	100279
UNKNOWN	(and other places) we need to adjust the current page back when we clear the pages	100280
UNKNOWN	remove the pages and clear the screen models	100281
UNKNOWN	re-enable the layout transitions	100282
UNKNOWN	find the index to insert this view into. if the empty screen exists then	100283
UNKNOWN	insert it before that.	100284
UNKNOWN	log to disk	100285
UNKNOWN	we want no padding on the custom content	100286
UNKNOWN	ensure that the current page and default page are maintained.	100287
UNKNOWN	update the custom content hint	100288
UNKNOWN	ensure that the current page and default page are maintained.	100289
UNKNOWN	update the custom content hint	100290
UNKNOWN	add the custom content to the full screen custom page	100291
UNKNOWN	verify that the child is removed from any existing parent.	100292
UNKNOWN	log to disk	100293
UNKNOWN	cancel any pending removal of empty screen	100294
UNKNOWN	if this is the last item on the final screen	100295
UNKNOWN	log to disk	100296
UNKNOWN	log to disk	100297
UNKNOWN	invalid and dangerous operation if workspace is loading	100298
UNKNOWN	if the final screen is empty convert it to the extra empty screen	100299
UNKNOWN	if this is the last non-custom content screen convert it to the empty screen	100300
UNKNOWN	update the model if we have changed any screens	100301
UNKNOWN	log to disk	100302
UNKNOWN	dont strip empty screens if the workspace is still loading	100303
UNKNOWN	if were not going to strip the empty screens after removing	100304
UNKNOWN	the extra empty screen do it right away.	100305
UNKNOWN	log to disk	100306
UNKNOWN	xxx do we need to update lm workspace screens below?	100307
UNKNOWN	log to disk	100308
UNKNOWN	invalid and dangerous operation if workspace is loading	100309
UNKNOWN	update the page indicator marker	100310
UNKNOWN	update the model for the new screen	100311
UNKNOWN	log to disk	100312
UNKNOWN	dont strip empty screens if the workspace is still loading.	100313
UNKNOWN	this is dangerous and can result in data loss.	100314
UNKNOWN	we enforce at least one page to add new items to. in the case that we remove the last	100315
UNKNOWN	such screen we convert the last screen to the empty screen	100316
UNKNOWN	if this is the last non-custom content screen convert it to the empty screen	100317
UNKNOWN	update the model if we have changed any screens	100318
UNKNOWN	see implementation for parameter definition.	100319
UNKNOWN	at bind time we use the rank (screenid) to compute x and y for hotseat items.	100320
UNKNOWN	see implementation for parameter definition.	100321
UNKNOWN	see implementation for parameter definition.	100322
UNKNOWN	debugging - print out the stack trace to see where we are adding from	100323
UNKNOWN	this should never happen	100324
UNKNOWN	show folder title	100325
UNKNOWN	get the canonical child id to uniquely represent this view in this screen	100326
UNKNOWN	todo this branch occurs when the workspace is adding views	100327
UNKNOWN	outside of the defined grid	100328
UNKNOWN	maybe we should be deleting these items from the launchermodel?	100329
UNKNOWN	ignore pointer scroll events if the custom content doesnt allow scrolling.	100330
UNKNOWN	remove the current widget which is inflated with the wrong orientation	100331
UNKNOWN	pass swipes to the right to the custom content page.	100332
UNKNOWN	dont allow workspace scrolling if the current custom content screen doesnt allow	100333
UNKNOWN	scrolling.	100334
UNKNOWN	above max_swipe_angle we dont want to ever start scrolling the workspace	100335
UNKNOWN	above start_damping_touch_slop_angle and below max_swipe_angle we want to	100336
UNKNOWN	increase the touch slop to make it harder to begin scrolling the workspace. this	100337
UNKNOWN	results in vertically scrolling widgets to more easily. the higher the angle the	100338
UNKNOWN	more we increase touch slop.	100339
UNKNOWN	below start_damping_touch_slop_angle we dont do anything special	100340
UNKNOWN	were snapping to a particular screen	100341
UNKNOWN	this is when user is actively dragging a particular screen they might	100342
UNKNOWN	swipe it either left or right (but we wont advance by more than one screen)	100343
UNKNOWN	if we are in springloaded mode then force an event to check if the current touch	100344
UNKNOWN	is under a new page (to scroll to)	100345
UNKNOWN	exclude the leftmost page	100346
UNKNOWN	exclude the last extra empty screen (if we have > min_parallax_page_span pages)	100347
UNKNOWN	todo do different behavior if its a live wallpaper?	100348
UNKNOWN	sometimes the left parameter of the pages is animated during a layout transition	100349
UNKNOWN	this parameter offsets it to keep the wallpaper from animating as well	100350
UNKNOWN	dont use up all the wallpaper parallax until you have at least	100351
UNKNOWN	min_parallax_page_span pages	100352
UNKNOWN	on rtl devices push the wallpaper offset to the right if we dont have enough	100353
UNKNOWN	pages (ie if numscrollingpages < min_parallax_page_span)	100354
UNKNOWN	set wallpaper offset steps (1 / (number of screens - 1))	100355
UNKNOWN	dont animate if were going from 0 screens	100356
UNKNOWN	dont announce if apps is on top of us.	100357
UNKNOWN	child.setbackgroundalphamultiplier(1 - alpha)	100358
UNKNOWN	in case accessibility state has changed we need to perform this on every	100359
UNKNOWN	attach to window	100360
UNKNOWN	update wallpaper dimensions if they were changed since last onresume	100361
UNKNOWN	(we also always set the wallpaper dimensions in the constructor)	100362
UNKNOWN	force the wallpaper offset steps to be set again because another app might have changed	100363
UNKNOWN	them	100364
UNKNOWN	call back to launchermodel to finish binding after the first draw	100365
UNKNOWN	in software mode we dont want the items to continue to be drawn into bitmaps	100366
UNKNOWN	make sure were caching at least two pages always	100367
UNKNOWN	enable layers between left and right screen inclusive except for the	100368
UNKNOWN	customscreen which may animate its content during transitions.	100369
UNKNOWN	force layers to be enabled just for the call to buildlayer	100370
UNKNOWN	we call these methods (ondragstartedwithitemspans/ondragstartedwithsize) whenever we start a drag in launcher regardless of whether the drag has ever entered the workspace these methods mark the appropriate pages as accepting drops (which alters their visual appearance).	100371
UNKNOWN	compose a drag bitmap with the view scaled to the icon size	100372
UNKNOWN	if this is a text view use its drawable instead	100373
UNKNOWN	compose the bitmap to create the icon from	100374
UNKNOWN	the outline is used to visualize where the item will land if dropped	100375
UNKNOWN	the outline is used to visualize where the item will land if dropped	100376
UNKNOWN	reordering handles its own animations disable the automatic ones.	100377
UNKNOWN	invalid and dangerous operation if workspace is loading	100378
UNKNOWN	re-enable auto layout transitions for page deletion.	100379
UNKNOWN	initialize animation arrays for the first time if necessary	100380
UNKNOWN	getresources().getinteger(r.integer.config_workspaceunshrinktime)	100381
UNKNOWN	if we are animating to/from the small state then hide the side pages and fade the	100382
UNKNOWN	current page in	100383
UNKNOWN	in low power mode the animation doesnt play so set the end value here	100384
UNKNOWN	in low power mode the animation doesnt play	100385
UNKNOWN	so set the end value here	100386
UNKNOWN	create a dummy animation so we dont need to do null checks later	100387
UNKNOWN	for animation optimations we may need to provide the launcher transition	100388
UNKNOWN	with a set of views on which to force build layers in certain scenarios.	100389
UNKNOWN	in low power mode the animation doesnt play so set the end value here	100390
UNKNOWN	in low power mode the animation doesnt play	100391
UNKNOWN	so set the end value here	100392
UNKNOWN	we want to avoid the extra layout pass by setting the views to gone unless	100393
UNKNOWN	accessibility is on in which case not setting them to gone causes a glitch.	100394
UNKNOWN	we want the views to be visible for animation so fade-in/out is visible	100395
UNKNOWN	invalidate here to ensure that the pages are rendered during the state change transition.	100396
UNKNOWN	for foldericons the text can bleed into the icon area and so we need to	100397
UNKNOWN	hide the text completely (which cant be achieved by clipping).	100398
UNKNOWN	restore text visibility of foldericon if necessary	100399
UNKNOWN	center the image	100400
UNKNOWN	make sure the drag was started by a long press as opposed to a long click.	100401
UNKNOWN	the outline is used to visualize where the item will land if dropped	100402
UNKNOWN	the drag bitmap follows the touch point around on the screen	100403
UNKNOWN	note the drag region is used to calculate drag layer offsets but the	100404
UNKNOWN	dragvisualizeoffset in addition to the dragrect (the size) to position the outline.	100405
UNKNOWN	clear the pressed state if necessary	100406
UNKNOWN	notify launcher of drag start	100407
UNKNOWN	compose a new drag bitmap that is of the icon size	100408
UNKNOWN	find the childs location on the screen	100409
UNKNOWN	note the drag region is used to calculate drag layer offsets but the	100410
UNKNOWN	dragvisualizeoffset in addition to the dragrect (the size) to position the outline.	100411
UNKNOWN	start the drag	100412
UNKNOWN	recycle temporary bitmaps	100413
UNKNOWN	if its an external drop (e.g. from all apps) check if it should be accepted	100414
UNKNOWN	dont accept the drop if were not over a screen at time of drop	100415
UNKNOWN	we want the point to be mapped to the dragtarget.	100416
UNKNOWN	dont accept the drop if theres no room for the item	100417
UNKNOWN	if the drag started here we need to remove it from the workspace	100418
UNKNOWN	if the dragview is null we cant animate	100419
UNKNOWN	if the drag started here we need to remove it from the workspace	100420
UNKNOWN	we want the point to be mapped to the dragtarget.	100421
UNKNOWN	move internally	100422
UNKNOWN	first we find the cell nearest to point at which the item is	100423
UNKNOWN	dropped without any consideration to whether there is an item there.	100424
UNKNOWN	if the item being dropped is a shortcut and the nearest drop	100425
UNKNOWN	cell also contains a shortcut then create a folder with the two shortcuts.	100426
UNKNOWN	aside from the special case where were dropping a shortcut onto a shortcut	100427
UNKNOWN	we need to find the nearest cell location that is vacant	100428
UNKNOWN	if the widget resizes on drop	100429
UNKNOWN	reparent the view	100430
UNKNOWN	update the items position after drop	100431
UNKNOWN	we post this call so that the widget has a chance to be placed	100432
UNKNOWN	in its final location	100433
UNKNOWN	if we cant find a drop location we return the item to its original position	100434
UNKNOWN	prepare it to be animated into its new position	100435
UNKNOWN	this must be called after the view has been re-parented	100436
UNKNOWN	here we store the final page that will be dropped to if the workspace in fact	100437
UNKNOWN	receives the drop	100438
UNKNOWN	if the user drops while the page is scrolling we should use that page as the	100439
UNKNOWN	destination instead of the page that is being hovered over.	100440
UNKNOWN	reset the scroll area and previous drag target	100441
UNKNOWN	we dont want to cancel the re-order alarm every time the target cell changes	100442
UNKNOWN	as this feels to slow / unresponsive.	100443
UNKNOWN	any pending reorders are canceled	100444
UNKNOWN	convert the 2d coordinate xy from the parent views coordinate space to this celllayouts coordinate space. the argument xy is modified with the return result. if cachedinversematrix is not null this method will just use that matrix instead of computing it itself we use this to avoid redundant matrix inversions in findmatchingpagefordragover	100445
UNKNOWN	convert the 2d coordinate xy from this celllayouts coordinate space to the parent views coordinate space. the argument xy is modified with the return result.	100446
UNKNOWN	this method returns the celllayout that is currently being dragged to. in order to drag to a celllayout either the touch point must be directly over the celllayout or as a second strategy we see if the dragview is overlapping any celllayout and choose the closest one return null if no celllayout is currently being dragged over	100447
UNKNOWN	we loop through all the screens (ie celllayouts) and see which ones overlap	100448
UNKNOWN	with the item being dragged and then choose the one thats closest to the touch point	100449
UNKNOWN	the custom content screen is not a valid drag over option	100450
UNKNOWN	transform the touch coordinates to the celllayouts local coordinates	100451
UNKNOWN	if the touch point is within the bounds of the cell layout we can return immediately	100452
UNKNOWN	get the center of the cell layout in screen coordinates	100453
UNKNOWN	calculate the distance between the center of the celllayout	100454
UNKNOWN	and the touch point	100455
UNKNOWN	this is used to compute the visual center of the dragview. this point is then	100456
UNKNOWN	used to visualize drop locations and determine where to drop an item. the idea is that	100457
UNKNOWN	the visual center represents the users interpretation of where the item is and hence	100458
UNKNOWN	is the appropriate point to use when determining drop location.	100459
UNKNOWN	first off the drag view has been shifted in a way that is not represented in the	100460
UNKNOWN	x and y values or the x/yoffsets. here we account for that shift.	100461
UNKNOWN	these represent the visual top and left of drag view if a dragrect was provided.	100462
UNKNOWN	if a dragrect was not provided then they correspond to the actual view left and	100463
UNKNOWN	top as the dragrect is in that case taken to be the entire dragview.	100464
UNKNOWN	r.dimen.dragviewoffsety.	100465
UNKNOWN	in order to find the visual center we shift by half the dragrect	100466
UNKNOWN	skip drag over events while we are dragging over side pages	100467
UNKNOWN	ensure that we have proper spans for the item that we are dropping	100468
UNKNOWN	identify whether we have dragged over a side page	100469
UNKNOWN	handle the drag over	100470
UNKNOWN	we want the point to be mapped to the dragtarget.	100471
UNKNOWN	otherwise if we arent adding to or creating a folder and theres no pending	100472
UNKNOWN	reorder then we schedule a reorder	100473
UNKNOWN	this shouldnt happen ever but just in case make sure we clean up the mess.	100474
UNKNOWN	we want the workspace to have the whole area of the display (it will find the correct	100475
UNKNOWN	cell layout to drop to in the existing drag/drop logic.	100476
UNKNOWN	normally removeextraemptyscreen is called in workspace#ondragend but when	100477
UNKNOWN	adding an item that may not be dropped right away (due to a config activity)	100478
UNKNOWN	we defer the removal until the activity returns.	100479
UNKNOWN	when dragging and dropping from customization tray we deal with creating	100480
UNKNOWN	widgets/shortcuts/folders in a slightly different way	100481
UNKNOWN	this is for other drag/drop cases like dragging from all apps	100482
UNKNOWN	came from all apps -- make a copy	100483
UNKNOWN	first we find the cell nearest to point at which the item is	100484
UNKNOWN	dropped without any consideration to whether there is an item there.	100485
UNKNOWN	when dragging and dropping just find the closest free spot	100486
UNKNOWN	add the item to db before adding to screen ensures that the container and other	100487
UNKNOWN	values of the info is properly updated.	100488
UNKNOWN	we wrap the animation call in the temporary set and reset of the current	100489
UNKNOWN	celllayout to its final transform -- this means we animate the drag view to	100490
UNKNOWN	the correct final location.	100491
UNKNOWN	normally removeextraemptyscreen is called in workspace#ondragend but when	100492
UNKNOWN	adding an item that may not be dropped right away (due to a config activity)	100493
UNKNOWN	we defer the removal until the activity returns.	100494
UNKNOWN	when dragging and dropping from customization tray we deal with creating	100495
UNKNOWN	widgets/shortcuts/folders in a slightly different way	100496
UNKNOWN	now we animate the dragview (ie. the widget or shortcut preview) into its final	100497
UNKNOWN	location and size on the home screen.	100498
UNKNOWN	the animation will scale the dragview about its center so we need to center about	100499
UNKNOWN	the final location.	100500
UNKNOWN	in the case where weve prebound the widget we remove it from the draglayer	100501
UNKNOWN	hardware layers on children are enabled on startup but should be disabled until	100502
UNKNOWN	needed	100503
UNKNOWN	/ maybe move this into a smaller part	100504
UNKNOWN	null check required as the allapps button doesnt have an item info	100505
UNKNOWN	null check required as the allapps button doesnt have an item info	100506
UNKNOWN	if datauri is not null / empty or if this component isnt one that would	100507
UNKNOWN	have previously showed up in the allapps list then this is a widget-type	100508
UNKNOWN	shortcut so ignore it.	100509
UNKNOWN	if datauri is not null / empty or if this component isnt one that would	100510
UNKNOWN	have previously showed up in the allapps list then this is a widget-type	100511
UNKNOWN	shortcut so ignore it.	100512
UNKNOWN	null check required as the allapps button doesnt have an item info	100513
UNKNOWN	do nothing	100514
UNKNOWN	do nothing	100515
UNKNOWN	we dont dispatch restoreinstancestate to our children using this code path.	100516
UNKNOWN	some pages will be restored immediately as their items are bound immediately and	100517
UNKNOWN	others we will need to wait until after their items are bound.	100518
UNKNOWN	we always want to exit the current layout to ensure parity of enter / exit	100519
UNKNOWN	ensure that we are not dragging over to the custom content screen	100520
UNKNOWN	workspace is responsible for drawing the edge glow on adjacent pages	100521
UNKNOWN	so we need to redraw the workspace when this may have changed.	100522
UNKNOWN	not done process all the shortcuts	100523
UNKNOWN	not done process all the shortcuts	100524
UNKNOWN	removes all items that match a given package name this is usually called when a package	100525
UNKNOWN	has been removed and we want to remove all components (widgets shortcuts apps) that	100526
UNKNOWN	belong to that package.	100527
UNKNOWN	filter out all the iteminfos that this is going to affect	100528
UNKNOWN	remove the affected components	100529
UNKNOWN	removes items that match the application info specified when applications are removed	100530
UNKNOWN	as a part of an update this is called to ensure that other widgets and application	100531
UNKNOWN	shortcuts are not removed.	100532
UNKNOWN	just create a hash table of all the specific components that this will affect	100533
UNKNOWN	remove all the things	100534
UNKNOWN	remove all the apps from their folders	100535
UNKNOWN	remove all the other children	100536
UNKNOWN	note we can not remove the view directly from celllayoutchildren as this	100537
UNKNOWN	does not re-mark the spaces as unoccupied.	100538
UNKNOWN	strip all the empty screens	100539
UNKNOWN	map over all the shortcuts on the workspace	100540
UNKNOWN	map over all the children in the folder	100541
UNKNOWN	break the appinfo list per user	100542
UNKNOWN	create a map of the apps to test against	100543
UNKNOWN	auto install icon	100544
UNKNOWN	try to find the best match activity.	100545
UNKNOWN	could not find a default activity. remove this item.	100546
UNKNOWN	process next shortcut.	100547
UNKNOWN	restore the shortcut.	100548
UNKNOWN	process all the shortcuts	100549
UNKNOWN	auto install icon	100550
UNKNOWN	try to find the best match activity.	100551
UNKNOWN	could not find a default activity. remove this item.	100552
UNKNOWN	process next shortcut.	100553
UNKNOWN	restore the shortcut.	100554
UNKNOWN	process all the shortcuts	100555
UNKNOWN	for auto install apps update the icon as well as label.	100556
UNKNOWN	only update the icon for restored apps.	100557
UNKNOWN	process all the shortcuts	100558
UNKNOWN	for auto install apps update the icon as well as label.	100559
UNKNOWN	only update the icon for restored apps.	100560
UNKNOWN	process all the shortcuts	100561
UNKNOWN	mark this info as broken.	100562
UNKNOWN	process all the shortcuts	100563
UNKNOWN	note that package states are sent only for myuser	100564
UNKNOWN	mark this info as broken.	100565
UNKNOWN	process all the shortcuts	100566
UNKNOWN	iterate non recursively as widgets cant be inside a folder.	100567
UNKNOWN	remove the provider not ready flag	100568
UNKNOWN	process all the widget	100569
UNKNOWN	re-inflate the widgets which have changed status	100570
UNKNOWN	widgetrefresh will automatically run when the packages are updated.	100571
UNKNOWN	remove the provider not ready flag	100572
UNKNOWN	process all the widget	100573
UNKNOWN	remove the current widget	100574
UNKNOWN	exclude the leftmost page	100575
UNKNOWN	exclude the last extra empty screen (if we have > min_parallax_page_span pages)	100576
UNKNOWN	todo do different behavior if its a live wallpaper?	100577
UNKNOWN	sometimes the left parameter of the pages is animated during a layout transition	100578
UNKNOWN	this parameter offsets it to keep the wallpaper from animating as well	100579
UNKNOWN	dont use up all the wallpaper parallax until you have at least	100580
UNKNOWN	min_parallax_page_span pages	100581
UNKNOWN	on rtl devices push the wallpaper offset to the right if we dont have enough	100582
UNKNOWN	pages (ie if numscrollingpages < min_parallax_page_span)	100583
UNKNOWN	set wallpaper offset steps (1 / (number of screens - 1))	100584
UNKNOWN	dont animate if were going from 0 screens	100585
UNKNOWN	we want to avoid the extra layout pass by setting the views to gone unless	100586
UNKNOWN	accessibility is on in which case not setting them to gone causes a glitch.	100587
UNKNOWN	we want the views to be visible for animation so fade-in/out is visible	100588
UNKNOWN	this shouldnt happen ever but just in case make sure we clean up the mess.	100589
UNKNOWN	remove the current widget	100590
