post a new callback	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
sets the alarm to go off in a certain number of milliseconds. if the alarm is already set	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
its overwritten and only the new alarm setting is used	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
this is called when our timer runs out	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
we still need to wait some time to trigger spring loaded mode--	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
returns the application title @return application title	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
updates the app widgets whose id has changed during the restore process.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the widget no long exists.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
unregister the widget ids which are not present on the workspace. this could happen	UNKNOWN	WITHOUT_CLASSIFICATION	0.995	0.000
when a widget place holder is removed from workspace before this method is called.	UNKNOWN	WITHOUT_CLASSIFICATION	0.988	0.000
add the supplied applicationinfo objects to the list and enqueue it into the list to broadcast when notify() is called. if the app is already in the list doesnt add it.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
todo do we clear these too?	UNKNOWN	WITHOUT_CLASSIFICATION	0.835	0.000
add the icons for the supplied apk called packagename.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
remove the apps for the given apk identified by packagename.	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
add and remove icons for this package which has been updated.	UNKNOWN	WITHOUT_CLASSIFICATION	0.974	0.000
find disabled/removed activities and remove them from data and add them	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
to the removed list.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
find enabled activities and add them to the adapter	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
also updates existing activities with new labels/icons	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
remove all data for this package.	UNKNOWN	WITHOUT_CLASSIFICATION	0.986	0.000
returns whether <em>apps</em> contains <em>component</em>.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
query the launcher apps service for whether the supplied package has main/launcher activities in the supplied package.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
returns whether <em>apps</em> contains <em>component</em>.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
find an applicationinfo object for the given packagename and classname.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
clears all the key listeners for the individual icons.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
todo revisit this	UNKNOWN	DESIGN	0.992	0.000
convenience methods to select specific tabs. we want to set the content type immediately in these cases but we note that we still call setcurrenttabbytag() so that the tab view reflects the new content (but doesnt do the animation and logic associated with changing tabs manually).	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
setup the tab host and create all necessary tabs.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
returns the content type for the specified tab tag.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
returns the tab tag for a given content type.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
disable focus on anything under this view in the hierarchy if we are not visible.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
reset immediately	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we unload the widget previews when the ui is hidden so need to reload pages	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
load the current page synchronously and the neighboring pages asynchronously	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
clear the widget pages of all their subviews - this will trigger the widget previews	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
to delete their bitmaps	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
launchertransitionable overrides	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
going from all apps -> workspace	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
going from workspace -> all apps	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
make sure the current page is loaded (we start loading the side pages after the	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
transition to prevent slowing down the animation)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
make sure adjacent pages are loaded (we wait until after the transition to	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
prevent slowing down the animation)	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
opening apps need to announce what page we are on.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
notify the user when the page changes	UNKNOWN	WITHOUT_CLASSIFICATION	0.993	0.000
going from workspace -> all apps	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
note we should do this at the end since we check visibility state in some of the	UNKNOWN	DESIGN	0.946	0.000
cling initialization/dismiss code above.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
here we bound the deltas such that the frame cannot be stretched beyond the extents of the celllayout and such that the frames borders cant cross.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
based on the deltas we resize the frame and if needed we resize the widget.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
based on the current deltas we determine if and how to resize the widget.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
for each border we bound the resizing based on the minimum width and the maximum	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
expandability.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
update the widgets dimensions and position according to the deltas computed above	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we always want the final commit to match the feedback so we make sure to use the	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
last used direction vector when committing the resize / reorder.	UNKNOWN	WITHOUT_CLASSIFICATION	0.994	0.000
compute landscape size	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
compute portrait size	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this is the final step of the resize. here we save the new widget size and position to launchermodel and animate the resize frame.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we need to make sure the frames touchable regions lie fully within the bounds of the	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
draglayer. we allow the actual handles to be clipped but we shift the touch regions	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
down accordingly to provide a proper touch target.	UNKNOWN	WITHOUT_CLASSIFICATION	0.962	0.000
in this case we shift the touch region down to start at the top of the draglayer	UNKNOWN	WITHOUT_CLASSIFICATION	0.943	0.000
in this case we shift the touch region up to end at the bottom of the draglayer	UNKNOWN	WITHOUT_CLASSIFICATION	0.946	0.000
do nothing	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
do nothing	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
do nothing	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
do nothing	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
find the rect to animate to (the view is center aligned)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
center the destination rect about the trash icon	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
ensure we are using the right text size	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
call the superclass ontouchevent first because sometimes it changes the state to	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
ispressed() on an action_up	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
so that the pressed outline is visible immediately on setstaypressed()	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we pre-create it on action_down (it takes a small but perceptible amount of time	UNKNOWN	WITHOUT_CLASSIFICATION	0.992	0.000
to create it)	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
if weve touched down and up on an item and its still not pressed then	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
destroy the pressed outline	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
only show the shadow effect when persistent pressed state is set.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
pre-create shadow so show immediately on click.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
unlike touch events keypress event propagate pressed state change immediately	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
without waiting for onclickhandler to execute. disable pressed state changes here	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
to avoid flickering.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
if text is transparent dont draw any shadow	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we enhance the shadow by drawing the shadow twice	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
keep track of the set of screens which need to be added to the db.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
read the extras	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
send a broadcast to configure the widget	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
we can only have folders with >= 2 items so we need to remove the	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
folder and clean up if less than 2 items were included or some	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
failed to add and less than 2 were actually added	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
delete the folder	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if we have a single item promote it to where the folder	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
would have been.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
noinspection statementwithemptybody	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
return attribute value attempting launcher-specific namespace first before falling back to anonymous attribute.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
return attribute resource value attempting launcher-specific namespace first before falling back to anonymous attribute.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
read the extras	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
send a broadcast to configure the widget	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
we can only have folders with >= 2 items so we need to remove the	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
folder and clean up if less than 2 items were included or some	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
failed to add and less than 2 were actually added	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
delete the folder	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if we have a single item promote it to where the folder	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
would have been.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
schedule runnable to run after everything thats on the queue right now.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
schedule runnable to run when the queue goes idle.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
noinspection statementwithemptybody	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
runs all queued runnables from the calling thread.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
get the drawable	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
get the hover color	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the current drawable is set to either the remove drawable or the uninstall drawable	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
and is initially set to the remove drawable as set in the layout xml.	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
remove the text in the phone ui in landscape	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
if we are dragging an application from appscustomize only show the control if we can	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
delete the app (it was downloaded) and rename the string to uninstall in such a case.	UNKNOWN	WITHOUT_CLASSIFICATION	0.947	0.000
hide the delete target if it is a widget from appscustomize.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
restore the hover color if we are deleting	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
only allow manifest shortcuts to initiate an un-install.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
uninstall the application if it is being dragged from appscustomize	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
remove the folder from the workspace and delete the contents from launcher model	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
remove the widget from the workspace	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
deleting an app widget id is a void call but writes to disk before returning	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
to the caller	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
creates an animation from the current drag view to the delete trash icon.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
calculate how far along the velocity vector we should put the intermediate point on	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
the bezier curve	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
intermediate t/l	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
drag view t/l	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
delete target t/l	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
dont highlight the icon as its animating	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
dont highlight the target if we are flinging from allapps	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
defer animating out the drop target if we are animating to it	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
note because it takes time for the first frame of animation to actually be	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
called and we expect the animation to be a continuation of the fling we have	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
to account for the time that has elapsed since the fling finished. and since	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we dont have a startdelay we will always get call to update when we call	UNKNOWN	WITHOUT_CLASSIFICATION	0.943	0.000
start() (which we want to ignore).	UNKNOWN	WITHOUT_CLASSIFICATION	0.990	0.000
if we are dragging from allapps then we allow appscustomizepagedview to clean up	UNKNOWN	WITHOUT_CLASSIFICATION	0.993	0.000
itself otherwise complete the drop to initiate the deletion process	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
if we are dragging from allapps then we allow appscustomizepagedview to clean up	UNKNOWN	WITHOUT_CLASSIFICATION	0.993	0.000
itself otherwise complete the drop to initiate the deletion process	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
clean up any references to source/generated bitmaps	UNKNOWN	WITHOUT_CLASSIFICATION	0.992	0.000
load each of the widget previews in the background	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
all the widget previews are loaded so we can just callback to inflate the page	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
load the widget previews	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
load the widget previews	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
pagedviewwithdraggableitems implementation	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
returns the item index of the center item on this page so that we can restore to this item index when we rotate.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
get the index of the item to restore to if we need to restore the current page.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
returns the page in the current orientation which is expected to contain the specified item index.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
restores the page for an item at the specified index	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
now that the data is ready we can calculate the content width the number of cells to	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
use for each page	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
force a measure to update recalculate the gaps	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this code triggers requestlayout so must be posted outside of the	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
layout pass.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this code triggers requestlayout so must be posted outside of the	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
layout pass.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
get the list of widgets and shortcuts	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
ensure that all widgets we show can be added on a workspace of this size	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
just add shortcuts	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
when we have exited all apps or are in transition disregard clicks	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
let the user know that they have to long press to add a widget	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
create a little animation to show that the widget can move	UNKNOWN	WITHOUT_CLASSIFICATION	0.628	0.000
disable dragging by pulling an app down for now.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we want the first widget layout to be the correct size. this will be important	UNKNOWN	WITHOUT_CLASSIFICATION	0.979	0.000
for width size reporting to the appwidgetmanager.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we want the first widget layout to be the correct size. this will be important	UNKNOWN	WITHOUT_CLASSIFICATION	0.979	0.000
for width size reporting to the appwidgetmanager.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we are anticipating a long press and we use this time to load bind and instantiate	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
the widget. this will need to be cleaned up if it turns out no long press occurs.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
just in case the cleanup process wasnt properly executed. this shouldnt happen.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if the widget was not added we may need to do further cleanup.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
we never did any preloading so just remove pending callbacks to do so	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
delete the widget id which was allocated	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
we never got around to inflating the widget so remove the callback to do so.	UNKNOWN	WITHOUT_CLASSIFICATION	0.957	0.000
delete the widget id which was allocated	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
the widget was inflated and added to the draglayer -- remove it.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
get the widget preview as the drag representation	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if the imageview doesnt have a drawable yet the widget preview hasnt been loaded and	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we abort the drag.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
compose the drag image	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this can happen in some weird cases involving multi-touch. we cant start dragging	UNKNOWN	WITHOUT_CLASSIFICATION	0.695	0.000
the widget if this is null so we break out.	UNKNOWN	WITHOUT_CLASSIFICATION	0.991	0.000
compare the size of the drag preview to the preview in the appscustomize tray	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the bitmap in the appscustomize tray is always the the same size so there	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
might be extra pixels around the preview itself - this accounts for that	UNKNOWN	DESIGN	0.864	0.000
dont clip alpha values for the drag outline if were using the default widget preview	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
save the preview for the outline generation then dim the preview	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
start the drag	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we delay entering spring-loaded mode slightly to make sure the ui	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
thready is free of any work.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
we dont enter spring-loaded mode if the drag has been cancelled	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
go into spring loaded mode (must happen before we startdrag())	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we dont enter spring-loaded mode if the drag has been cancelled	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
go into spring loaded mode (must happen before we startdrag())	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
clean up after dragging. @param target where the item was dragged to (can be null if the item was flung)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
exit spring loaded mode if we have not successfully dropped or have not handled the	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
drop in workspace	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
return early and wait for onflingtodeletecompleted if this was the result of a fling	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
display an error message if the drag failed due to there not being enough space on the	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
target layout we were dropping on.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we just dismiss the drag when we fling so cleanup here	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
clean up all the async tasks	UNKNOWN	WITHOUT_CLASSIFICATION	0.992	0.000
weve already preallocated the views for the data to load into so clear them as well	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
widgets appear to be cleared every time you leave always force invalidate for them	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
update the thread priorities given the direction lookahead	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
apps pagedview implementation	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
note we force a measure here to get around the fact that when we do layout calculations	UNKNOWN	WITHOUT_CLASSIFICATION	0.570	0.000
immediately after syncing we dont have a proper width. that said we already know the	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
expected page width so we can actually optimize by hiding all the textview-based	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
children that are expensive to measure and let that happen naturally later.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
ensure that we have the right number of items on the pages	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
a helper to return the priority for loading of the specified widget page.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if we are snapping to another page use that index as the target page index	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we use the distance from the target page as an initial guess of priority but if there	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
are no pages of higher priority than the page specified then bump up the priority of	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the specified page.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
return the appropriate thread priority for loading for a given page (we give the current page much higher priority)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
todo-apps_customize detect number of cores and set thread priorities accordingly below	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
creates and executes a new asynctask to load a page of widget previews.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
prune all tasks that are no longer needed	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we introduce a slight delay to order the loading of side pages so that we dont thrash	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
do cleanup inside onsyncwidgetpageitems	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
ensure that the task is appropriately prioritized and runs in parallel	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
do cleanup inside onsyncwidgetpageitems	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
widgets pagedview implementation	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
note we force a measure here to get around the fact that when we do layout calculations	UNKNOWN	WITHOUT_CLASSIFICATION	0.570	0.000
immediately after syncing we dont have a proper width.	UNKNOWN	WITHOUT_CLASSIFICATION	0.988	0.000
calculate the dimensions of each cell we are giving to each widget	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
prepare the set of widgets to load previews for in the background	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
prepopulate the pages with the other widget info and fill in the previews later	UNKNOWN	WITHOUT_CLASSIFICATION	0.994	0.000
fill in the widget information	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
determine the widget spans and min resize spans.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
fill in the shortcuts information	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
layout each widget	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
wait until a call on onlayout to start loading because	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
pagedviewwidget.getpreviewsize() will return 0 if it hasnt been laid out	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
todo can we do a measure/layout immediately?	UNKNOWN	DESIGN	0.947	0.000
loadwidgetpreviewsinbackground can be called without a task to load a set of widget	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
previews synchronously	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
ensure that this task starts running at the correct priority	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
load each of the widget/shortcut previews	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
ensure we havent been cancelled yet	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
before work on each item ensure that this task is running at the correct	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
priority	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
update all thread priorities	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
we want our pages to be z-ordered such that the further a page is to the left the higher	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
it is in the z-order. this is important to insure touch events are handled correctly.	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
in apps customize we have a scrolling effect which emulates pulling cards off of a stack.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
make sure were caching at least two pages always	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
used by the parent to get the content width to set the tab bar to @return	UNKNOWN	WITHOUT_CLASSIFICATION	0.879	0.000
we reset the save index when we change pages so that it will be recalculated on next	UNKNOWN	WITHOUT_CLASSIFICATION	0.975	0.000
rotation	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
allappsview implementation	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
we should call thise method whenever the core data changes (mapps mwidgets) so that we can appropriately determine when to invalidate the pagedview page data. in cases where the data has yet to be set we can requestlayout() and wait for ondataready() to be called in the next onmeasure() pass which will trigger an invalidatepagedata() itself.	UNKNOWN	DESIGN	0.627	0.000
the next layout pass will trigger data-ready if both widgets and apps are set so	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
request a layout to trigger the page data when ready.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
we add it in place in alphabetical order	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
loop through all the apps and remove apps that have the same component	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we remove and re-add the updated applications list because its properties may have	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
changed (ie. the title) and this will ensure that the items will be in their proper	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
place in the list.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if we have reset then we should not continue to restore the previous state	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
todo dump information related to current list of applications widgets etc.	UNKNOWN	WITHOUT_CLASSIFICATION	0.954	0.000
todo if we are in the middle of any process (ie. for holographic outlines etc) we	UNKNOWN	WITHOUT_CLASSIFICATION	0.964	0.000
should stop this now.	UNKNOWN	WITHOUT_CLASSIFICATION	0.866	0.000
stop all background tasks	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
put the page indicators above the hotseat	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
layout allapps	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
center the all apps page indicator	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
apply any partner customization grid overrides. currently we support all apps row / column count.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
allapps uses the original non-scaled icon size	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
determine the exact visual footprint of the all apps button taking into account scaling and internal padding of the drawable.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
there are three possible configurations that the dynamic grid accounts for portrait	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
landscape with the nav bar at the bottom and landscape with the nav bar at the side.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
to prevent waiting for fitsystemwindows() we make the observation that in landscape	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
the height is the smallest height (either with the nav bar at the bottom or to the	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
side) and otherwise the height is simply the largest possible height for a portrait	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
device.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
check to see if the icons fit in the new available height. if not then we need to	UNKNOWN	WITHOUT_CLASSIFICATION	0.935	0.000
shrink the icon size.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
make the callbacks	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
search bar	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
calculate the actual text height	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
folder	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
all apps	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
returns the closest device profile given the width and height and a list of profiles	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
returns the closest device profiles ordered by closeness to the specified width and height	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
sort the profiles by their closeness to the dimensions	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
returns the search bar top offset	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
returns the search bar bounds in the current orientation	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
returns the search bar bounds in the specified orientation	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
pad the left and right of the workspace to ensure consistent spacing	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
between all icons	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
xxx if the icon size changes across orientations we will have to take	UNKNOWN	WITHOUT_CLASSIFICATION	0.959	0.000
that into account here too.	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
returns the bounds of the workspace page indicators.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
returns the workspace padding in the specified orientation	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
pad the left and right of the workspace with search/hotseat bar sizes	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
pad the left and right of the workspace to ensure consistent spacing	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
between all icons	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
pad the top and bottom of the workspace with search/hotseat bar sizes	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
in landscape mode the page spacing is set to the default.	UNKNOWN	WITHOUT_CLASSIFICATION	0.994	0.000
in portrait we want the pages spaced such that there is no	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
overhang of the previous / next page into the current page viewport.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we assume symmetrical padding in portrait mode.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the rect returned will be extended to below the system ui that covers the workspace	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
layout the search bar space	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
vertical search bar space	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
searchbar.setpadding(	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
0 2 edgemarginpx 0	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
2 edgemarginpx)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
horizontal search bar space	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
searchbar.setpadding(	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
2 edgemarginpx	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
getsearchbartopoffset()	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
2 edgemarginpx 0)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
layout the workspace	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
layout the page indicators	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
hide the page indicators when we have vertical search/hotseat	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
constrain the dimensions of all apps so that it does not span the full width	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
only adjust the side paddings on landscape phones or tablets	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the icons are centered so we cant just offset by the page indicator height	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
because the empty space will actually be pageindicatorheight + paddingtb	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
horizontal padding for the whole paged view	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
layout the overview mode	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
we have enough space. lets add some margin too.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
set margin of all visible children except the last visible child	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
sets the scale of the view over the normal workspace icon size.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
suppress dead code warning	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
create a window containing this view and show it. @param windowtoken obtained from v.getwindowtoken() from one of your views @param touchx the x coordinate the user touched in draglayer coordinates @param touchy the y coordinate the user touched in draglayer coordinates	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
start the pick-up animation	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
post the animation to skip other expensive work happening on the first frame	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
move the window containing this view. @param touchx the x coordinate the user touched in draglayer coordinates @param touchy the y coordinate the user touched in draglayer coordinates	UNKNOWN	WITHOUT_CLASSIFICATION	0.980	0.000
starts a drag. @param v the view that is being dragged @param bmp the bitmap that represents the view being dragged @param source an object representing where the drag originated @param draginfo the data associated with the object that is being dragged @param dragaction the drag action either {@link #drag_action_move} or {@link #drag_action_copy} @param dragregion coordinates within the bitmap b for the position of item being dragged. makes dragging feel more precise e.g. you can clip out a transparent border	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
starts a drag. @param b the bitmap to display as the drag image. it will be re-scaled to the enlarged size. @param draglayerx the x position in the draglayer of the left-top of the bitmap. @param draglayery the y position in the draglayer of the left-top of the bitmap. @param source an object representing where the drag originated @param draginfo the data associated with the object that is being dragged @param dragaction the drag action either {@link #drag_action_move} or {@link #drag_action_copy} @param dragregion coordinates within the bitmap b for the position of item being dragged. makes dragging feel more precise e.g. you can clip out a transparent border	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
hide soft keyboard if visible	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
draw the view into a bitmap.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
reset the drawing cache background color to fully transparent	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
for the duration of this operation	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
restore the view	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
call this from a drag source view like this <pre> @override public boolean dispatchkeyevent(keyevent event) { return mdragcontroller.dispatchkeyevent(this event) || super.dispatchkeyevent(event) </pre>	UNKNOWN	WITHOUT_CLASSIFICATION	0.994	0.000
stop dragging without dropping.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
cancel the current drag if we are removing an app that we are dragging	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
added null checks to prevent npe weve seen in the wild	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
only end the drag if we are not deferred	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
this only gets called as a result of drag view cleanup being deferred in enddrag()	UNKNOWN	WITHOUT_CLASSIFICATION	0.994	0.000
if we skipped calling ondragend() before do it now	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
clamps the position to the drag layer bounds.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
call this from a drag source view.	UNKNOWN	WITHOUT_CLASSIFICATION	0.993	0.000
suppress dead code warning	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
update the velocity tracker	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
verify the edgeswipe menu	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
remember location of down touch	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
mdragging = false	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
ignore menu if dragging	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if from the edges and in limits	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
sets the view that should handle move events.	UNKNOWN	WITHOUT_CLASSIFICATION	0.818	0.000
drop on someone?	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
check if we are hovering over the scroll areas	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
call this from a drag source view.	UNKNOWN	WITHOUT_CLASSIFICATION	0.993	0.000
update the velocity tracker	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
remember where the motion event started	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
ensure that weve processed a move event at the current pointer	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
location.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
determines whether the user flung the current item to delete it. @return the vector at which the item was flung or null if no fling was detected.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
do a quick dot product test to ensure that we are flinging upwards	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
clean up dragging on the target if its not the current fling delete target otherwise	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
start dragging to it.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
drop onto the fling-to-delete target	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we must set dragcomplete to true _only_ after we enter the fling-to-delete target for	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
drop	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
sets the drag listner which will be notified when a drag starts or ends.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
remove a previously installed drag listener.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
add a droptarget to the list of potential places to receive drop events.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
dont send drop events to <em>target</em> any more.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
sets the current fling-to-delete drop target.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
set which view scrolls for touch events near the edge of the screen.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
check the scroll again so that we can requeue the scroller if necessary	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
check the scroll again so that we can requeue the scroller if necessary	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
applies the new bitmap. @return true if the view was invalidated.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
draw the bitmap into the bounding rect	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
no op	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
when enabled the icon is grayed out and the contrast is increased to give it a ghost appearance.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
for ghost mode set the color range to [ghost_mode_min_color_range 255]	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
brightness c-new = c-old(1-amount) + amount	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
add the amount to rgb components of the matrix as per the above formula.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
fifth elements in the array correspond to the constant being added to	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
red blue green and alpha channel respectively.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
only used for viewpropertyanimators	UNKNOWN	WITHOUT_CLASSIFICATION	0.989	0.000
if the current play time exceeds the duration or the animated fraction is 1	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the animation will get finished even if we call setcurrentplaytime -- therefore	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
dont adjust the animation in that case	UNKNOWN	WITHOUT_CLASSIFICATION	0.991	0.000
if we havent drawn our first frame reset the time to t = 0	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
(give up after max_delay ms of waiting though - might happen for example if we	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
are no longer in the foreground and no frames are being rendered ever)	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
the first frame on animations doesnt always trigger an invalidate	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
force an invalidate here to make sure the animation continues to advance	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
for the second frame if the first frame took more than 16ms	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
adjust the start time and pretend it took only 16ms anyway. this	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
prevents a large jump in the animation due to an expensive first frame	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
redraw if it is already showing. this avoids a bug where the height changes by a small	UNKNOWN	WITHOUT_CLASSIFICATION	0.971	0.000
amount on connecting/disconnecting a bluetooth keyboard.	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
view not yet laid out. wait until the view is ready to be drawn so that be can	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
get the location on screen.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
gets the location of a view relative in the window off-setting any shift due to page view scroll	UNKNOWN	DESIGN	0.726	0.000
ill take it from here	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
ensure that the overlay view stays on top. we cant use drawing order for this	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
because in api level 16 touch dispatch doesnt respect drawing order.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
skip propagating onrequestsendaccessibilityevent all for other children	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
when a folder is open	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
only add the folder as a child for accessibility when it is open	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if weve received this weve already done the necessary handling	UNKNOWN	WITHOUT_CLASSIFICATION	0.990	0.000
in onintercepthoverevent. return true to consume the event.	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
determine the rect of the descendant in this draglayers coordinates @param descendant the descendant whose coordinates we want to find. @param r the rect into which to place the results. @return the factor by which this descendant is scaled relative to this draglayer.	UNKNOWN	WITHOUT_CLASSIFICATION	0.722	0.000
because in api level 16 touch dispatch doesnt respect drawing order.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
between platform versions 17 and 18 behavior for onchildviewremoved / added changed.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
pre-18 the child was not added / removed by the time of those callbacks. we need to	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
force update our representation of things here to avoid crashing on pre-18 devices	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
in certain instances.	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
i represents the current draw iteration	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
given a coordinate relative to the descendant find the coordinate in this draglayers coordinates. @param descendant the descendant to which the passed coordinate is relative. @param coord the coordinate that we want mapped. @param includerootscroll whether or not to account for the scroll of the root descendant sometimes this is relevant as in a childs coordinates within the root descendant. @return the factor by which this descendant is scaled relative to this draglayer. caution this scale factor is assumed to be equal in x and y and so if at any point this assumption fails we will need to return a pair of scale factors.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
inverse of {@link #getdescendantcoordrelativetoself(view int[])}.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
since the child hasnt necessarily been laid out we force the lp to be updated with	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the correct coordinates (above) and use these to determine the final location	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
we need to account for the scale of the child itself as the above only accounts for	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
for the scale in parents.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
account for the source scale of the icon (ie. from allapps to workspace in which	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the workspace may have smaller icon bounds).	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
the child may be scaled (always about the center of the view) so to account for it	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we have to offset the position by the scaled size. once we do that we can center	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the drag view about the scaled child view.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
account for holographic blur padding on the drag view	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
center in the x coordinate about the targets drawable	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this method animates a view at the end of a drag and drop animation. @param view the view to be animated. this view is drawn directly into draglayer and so doesnt need to be a child of draglayer. @param from the initial location of the view. only the left and top parameters are used. @param to the final location of the view. only the left and top parameters are used. this location doesnt account for scaling and so should be centered about the desired final location (including scaling). @param finalalpha the final alpha of the view in case we want it to fade as it animates. @param finalscale the final scale of the view. the view is scaled about its center. @param duration the duration of the animation. @param motioninterpolator the interpolator to use for the location of the view. @param alphainterpolator the interpolator to use for the alpha of the view. @param oncompleterunnable optional runnable to run on animation completion. @param fadeout whether or not to fade out the view once the animation completes. if true the runnable will execute after the view is faded out. @param anchorview if not null this represents the view which the animated view stays anchored to in case scrolling is currently taking place. note currently this is only used for the x dimension for the case of the workspace.	UNKNOWN	WITHOUT_CLASSIFICATION	0.991	0.000
calculate the duration of the animation based on the objects distance	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if duration < 0 this is a cue to compute the duration based on the distance	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
fall back to cubic ease out interpolator for the animation if none is specified	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
animate the view	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
clean up the previous animations	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
show the drop view if it was previously hidden	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
set the anchor view if the page is scrolling	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
create and start the animation	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
ensure that the overlay view stays on top. we cant use drawing order for this	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
because in api level 16 touch dispatch doesnt respect drawing order.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
ensure that the overlay view stays on top. we cant use drawing order for this	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
in general we do nothing	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
if we have a top index we return it when drawing last item (highest z-order)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
for indexes greater than the top index we fetch one item above to shift for the	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
displacement of the top index	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
note this is a reimplementation of view.islayoutrtl() since that is currently hidden api.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
draw the background gradient below children.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we want to draw the page hints above the workspace but below the drag view.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
list do not scroll horizontally.	UNKNOWN	WITHOUT_CLASSIFICATION	0.992	0.000
catch the back button on the soft keyboard so that we can just close the activity	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if there is no next page	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
select the next icon	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
private helper to get the parent tabhost in the view hiearchy.	UNKNOWN	WITHOUT_CLASSIFICATION	0.989	0.000
returns the viewgroup containing page contents for the page at the index specified.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
there are two layers a pagedviewcelllayout and pagedviewcelllayoutchildren	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
handles key events in a pageviewextendedlayout containing pagedviewwidgets.	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
now that we load items in the bg asynchronously we cant just focus	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
child siblings willy-nilly	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
select the previous widget or the last widget on the previous page	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
select the next widget or the first widget on the next page	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
select the closest icon in the previous row otherwise select the tab bar	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
select the closest icon in the previous row otherwise do nothing	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
simulate a click on the widget	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
select the first item on the previous page or the first item on this page	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if there is no previous page	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
select the first item on the next page or the last item on this page	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if there is no next page	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
select the first item on this page	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
select the last item on this page	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
handles key events in a pageviewcelllayout containing pagedviewicons.	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
note we have an extra parent because of the	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
pagedviewcelllayout/pagedviewcelllayoutchildren relationship	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
side pages do not always load synchronously so check before focusing child siblings	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
willy-nilly	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
select the previous icon or the last icon on the previous page	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
select the next icon or the first icon on the next page	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
select the closest icon in the previous row otherwise select the tab bar	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
select the closest icon in the next row otherwise do nothing	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
select the first icon on the previous page or the first icon on this page	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if there is no previous page	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
select the first icon on the next page or the last icon on this page	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
select the first icon on this page	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
select the last icon on this page	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
handles key events in the tab widget.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
select the previous tab	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
select the next tab or if the last tab has a focus right id select that	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
do nothing	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
select the content view	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
handles key events in the workspace hotseat (bottom of the screen).	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
note currently we dont special case for the phone ui in different	UNKNOWN	WITHOUT_CLASSIFICATION	0.936	0.000
orientations even though the hotseat is on the side in landscape mode. this	UNKNOWN	WITHOUT_CLASSIFICATION	0.977	0.000
is to ensure that accessibility consistency is maintained across rotations.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
select the previous button otherwise do nothing	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
select the next button otherwise do nothing	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
select the first bubble text view in the current page of the workspace	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
do nothing	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
private helper method to get the celllayoutchildren given a celllayout index.	UNKNOWN	WITHOUT_CLASSIFICATION	0.995	0.000
private helper method to sort all the celllayout children in order of their (xy) spatially from top left to bottom right.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
first we order each the celllayout children by their xy coordinates	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
private helper method to find the index of the next bubbletextview or foldericon in the direction delta. @param delta either -1 or 1 depending on the direction we want to search	UNKNOWN	WITHOUT_CLASSIFICATION	0.675	0.000
then we find the next bubbletextview offset by delta from i	UNKNOWN	WITHOUT_CLASSIFICATION	0.982	0.000
private helper method to find the next closest bubbletextview or foldericon in the direction delta on the next line. @param delta either -1 or 1 depending on the line and direction we want to search	UNKNOWN	WITHOUT_CLASSIFICATION	0.936	0.000
handles key events in a workspace containing.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
select the previous icon or the last icon on the previous page if possible	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
snap to the previous page	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
select the next icon or the first icon on the next page if possible	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
snap to the next page	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
select the closest icon in the previous line otherwise select the tab bar	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
select the closest icon in the next line otherwise select the button bar	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
select the first icon on the previous page or the first icon on this page	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if there is no previous page	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
snap to the previous page	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
select the first icon on the next page or the last icon on this page	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
if there is no previous page	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
snap to the next page	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
select the first icon on this page	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
select the last icon on this page	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
handles key events for items in a folder.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
select the previous icon	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
select the closest icon in the previous line	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
select the closest icon in the next line	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
select the first icon on this page	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
select the last icon on this page	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
add an app or shortcut @param item	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
remove an app or shortcut. does not change the db. @param item	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
one time call to generate the pressed/focused state -- must be called after	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
measure/layout	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
one time call to generate the pressed/focused state -- must be called after	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
measure/layout	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
suppress dead code warning	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
offset the preview background to center this view accordingly	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
location is expressed in window coordinates	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
location is expressed in window coordinates	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
todo we currently dont support spring-loading for pendingaddshortcutinfos even	UNKNOWN	DESIGN	0.992	0.000
though widget-style shortcuts can be added to folders. the issue is that we need	UNKNOWN	WITHOUT_CLASSIFICATION	0.980	0.000
to deal with configuration activities which are currently handled in	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
workspace#ondropexternal.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
came from all apps -- make a copy.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
shortcutinfo	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
these correspond two the drawable and view that the icon was dropped _onto_	UNKNOWN	WITHOUT_CLASSIFICATION	0.991	0.000
this will animate the first item from its position as an icon into its	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
position as the first item in the preview	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this will animate the dragview (srcview) into the new folder	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
this will animate the first item from its position as an icon into its	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
position as the first item in the preview	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
typically the animateview corresponds to the dragview however if this is being done	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
after a configuration activity (ie. for a shortcut being dragged from allapps) we	UNKNOWN	WITHOUT_CLASSIFICATION	0.857	0.000
will not have a view to animate	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
set celllayout and this to its final state to compute final animation locations	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
finished computing final animation locations restore current state	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
came from all apps -- make a copy	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
cos(45) = 0.707 + ~= 0.1) = 0.8f	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we want to imagine our coordinates from the bottom left growing up and to the	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
right. this is natural for the x-axis but for the y-axis we have to invert things.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
update our drawing parameters if necessary	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
call the superclass ontouchevent first because sometimes it changes the state to	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
ispressed() on an action_up	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
location is expressed in window coordinates	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
location is expressed in window coordinates	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
generate the pressed/focused states if necessary.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
noinspection zerolengtharrayallocation	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
invalidates the pressed/focused states.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
creates a copy of the original image.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
creates a new press state image which is the old image with a blue overlay. responsibility for the bitmap is transferred to the caller.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
applies a more expensive and accurate outline to whatever is currently drawn in a specified bitmap.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
we start by removing most of the alpha channel so as to ignore shadows and	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
other types of partial transparency when defining the shape of the object	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
calculate the outer blur first	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
calculate the inner blur	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
mask out the inner blur	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
draw the inner and outer blur	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
draw the bright outline	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
cleanup	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
adjust the clip rect so that we dont include the text label	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
draw the view into the bitmap.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the translate of scrollx and scrolly is necessary when drawing textviews because	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
they set scrollx and scrolly to large values to achieve centered text	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we use the same intents as lawnchair.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
we find out how tall the text view wants to be (it is set to wrap_content) so that	UNKNOWN	WITHOUT_CLASSIFICATION	0.993	0.000
we can allocate the appropriate amount of space for it.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we disable action mode for now since it messes up the view on phones	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
return if global dragging is not enabled	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
convert to a string here to ensure that no other state associated with the text field	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
gets saved.	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
in order to clear the focus from the text field we set the focus on ourself. this	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
ensures that every time the field is clicked focus is gained giving reliable behavior.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
we need to handle touch events to prevent them from falling through to the workspace below.	UNKNOWN	WITHOUT_CLASSIFICATION	0.982	0.000
when the folder gets focus we dont want to announce the list of items.	UNKNOWN	WITHOUT_CLASSIFICATION	0.948	0.000
@return the folderinfo object associated with this folder	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
we rearrange the items in case there are any empty gaps	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if our folder has too many items we prune them from the list. this is an issue	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
when upgrading from the old folders implementation which could contain an unlimited	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
number of items.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
in case any children didnt come across during loading clean up the folder accordingly	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
creates a new userfolder inflated from r.layout.user_folder. @param context the applications context. @return a new userfolder.	UNKNOWN	WITHOUT_CLASSIFICATION	0.957	0.000
this method is intended to make the userfolder to be visually identical in size and position to its associated foldericon. this allows for a seamless transition into the expanded state.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
in low power mode the animation doesnt play so set the end value here	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
in low power mode the animation doesnt play so set the end value here	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
mcontent.setalpha(0f) animator iconsalpha = launcheranimutils.offloat(mcontent alpha 0f 1f) iconsalpha.setduration(mmaterialexpandduration) iconsalpha.setstartdelay(mmaterialexpandstagger) iconsalpha.setinterpolator(new accelerateinterpolator(1.5f)) mfoldername.setalpha(0f) animator textalpha = launcheranimutils.offloat(mfoldername alpha 0f 1f) textalpha.setduration(mmaterialexpandduration) textalpha.setstartdelay(mmaterialexpandstagger) textalpha.setinterpolator(new accelerateinterpolator(1.5f))	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
in low power mode the animation doesnt play so set the end value here	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
anim.play(iconsalpha) anim.play(textalpha)	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
make sure the folder picks up the last drag move even if the finger doesnt move.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
in low power mode the animation doesnt play so set the end value here	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
final objectanimator oa = launcheranimutils.ofpropertyvaluesholder(this alpha scalex scaley)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
power save mode is no fun - skip alpha animation and just set it to 0	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
otherwise the icons will stay around until the duration of the animation	UNKNOWN	WITHOUT_CLASSIFICATION	0.976	0.000
we need to check here to verify that the given items location isnt already occupied	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
by another item.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
this shouldnt happen log it.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this is used to compute the visual center of the dragview. the idea is that	UNKNOWN	WITHOUT_CLASSIFICATION	0.923	0.000
the visual center represents the users interpretation of where the item is and hence	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
is the appropriate point to use when determining drop location.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
these represent the visual top and left of drag view if a dragrect was provided.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if a dragrect was not provided then they correspond to the actual view left and	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
top as the dragrect is in that case taken to be the entire dragview.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
r.dimen.dragviewoffsety.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
in order to find the visual center we shift by half the dragrect	UNKNOWN	WITHOUT_CLASSIFICATION	0.987	0.000
exiting folder stop the auto scroller.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we only close the folder if this is a true drag exit ie. not because	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
a drop has occurred above the folder.	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
the drag failed we need to return the item to the folder	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
reordering may have occured and we need to save the new item locations. we do this once	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
at the end to prevent unnecessary database operations.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
do nothing	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
do nothing	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
current grid is too small expand it	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
in case the workspace is scrolling we need to use the final scroll to compute	UNKNOWN	WITHOUT_CLASSIFICATION	0.983	0.000
the folders bounds.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we first fetch the currently visible celllayoutchildren	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we reset the workspaces scroll	UNKNOWN	WITHOUT_CLASSIFICATION	0.995	0.000
we need to bound the folder to the currently visible celllayoutchildren	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
center the folder if it is full (on phones only)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if the folder doesnt fit within the bounds center it about the desired bounds	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
dont cap the height of the content to allow scrolling.	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
add the last remaining child to the workspace in place of the folder	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
move the item from the folder to the workspace in the position of the folder	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
remove the folder	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
b/12446428 -- sometimes the cell layout has already gone away?	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we add the child after removing the folder to prevent both from existing at	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the same time in the celllayout. we need to add the new item with addinscreenfrombind()	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
to ensure that hotseat items are placed correctly.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
move the item from the folder to the workspace in the position of the folder	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
remove the folder	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
b/12446428 -- sometimes the cell layout has already gone away?	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we add the child after removing the folder to prevent both from existing at	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the same time in the celllayout. we need to add the new item with addinscreenfrombind()	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
to ensure that hotseat items are placed correctly.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this method keeps track of the last item in the folder for the purposes	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
of keyboard focus	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if we are coming from all apps space we defer removing the extra empty screen	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
until the folder closes	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
actually move the item in the database if it was an external drag. call this	UNKNOWN	WITHOUT_CLASSIFICATION	0.982	0.000
before creating the view so that shortcutinfo is updated appropriately.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we only need to update the locations if it doesnt get handled in #ondropcompleted.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
temporarily reset the scale such that the animation target gets calculated correctly.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
temporarily suppress the listener as we did all the work already here.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
clear the drag info as it is no longer being dragged.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this is used so the item doesnt immediately appear in the folder when added. in one case	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
we need to create the illusion that the item isnt added back to the folder yet to	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
to correspond to the animation of the icon back into the folder. this is	UNKNOWN	WITHOUT_CLASSIFICATION	0.988	0.000
if the item was dropped onto this open folder we have done the work associated	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
with adding the item to the folder as indicated by msuppressonadd being set	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the current layout is full can we expand it?	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
if this item is being dragged from this open folder we have already handled	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the work associated with removing the item so we dont have to do anything here.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
get the hover color	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
todo investigate why this is ever happening. presently only on one known device.	UNKNOWN	DESIGN	0.996	0.000
remove the text in the phone ui in landscape	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
acceptdrop is called just before ondrop. we do the work here rather than	UNKNOWN	WITHOUT_CLASSIFICATION	0.935	0.000
in ondrop because it allows us to reject the drop (by returning false)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
so that the object being dragged isnt removed from the drag source.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
there is no post-drop animation so clean up the dragview now	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
hide this button unless we are dragging something from allapps	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we cant move out horizontally	UNKNOWN	WITHOUT_CLASSIFICATION	0.944	0.000
we cant move out vertically	UNKNOWN	WITHOUT_CLASSIFICATION	0.926	0.000
if an animation is started and then stopped very quickly we can still	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
get spurious updates weve cleared the tag. guard against this.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
suppress dead code warning	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
try to prevent it from continuing to run	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
set whether or not to invert the layout horizontally if the layout is in rtl mode.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
when were large we are either drawn in a hover state (ie when dragging an item to	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
a neighboring page) or with just a normal background (if backgroundalpha > 0.0f)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
when were small we are either drawn normally or in the accepts drops state (during	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
a drag). however we also drag the mini hover background over one of those two	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
backgrounds	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
in the mini case we draw the active_glow bg over the active background	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the folder outer / inner ring image(s)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
draw outer ring if it exists	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
draw inner ring	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
mismatched viewid / viewtype preventing restore. skip restore on production builds.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
cancel long press for all children	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
generate an id for each view this assumes we have at most 256x256 cells	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
per workspace screen	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if the horizontal or vertical span is set to -1 it is taken to	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
mean that it spans the extent of the celllayout	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
first we clear the tag to ensure that on every touch down we start with a fresh slate	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
even in the case where we return early. not clearing here was causing bugs whereby on	UNKNOWN	WITHOUT_CLASSIFICATION	0.986	0.000
long-press wed end up picking up an item from a previous drag operation.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
given a point return the cell that strictly encloses that point @param x x coordinate of the point @param y y coordinate of the point @param result array of 2 ints to hold the x and y coordinate of the cell	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
given a point return the cell that most closely encloses that point @param x x coordinate of the point @param y y coordinate of the point @param result array of 2 ints to hold the x and y coordinate of the cell	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
given a cell coordinate return the point that represents the upper left corner of that cell @param cellx x coordinate of the cell @param celly y coordinate of the cell @param result array of 2 ints to hold the x and y coordinate of the point	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
given a cell coordinate return the point that represents the center of the cell @param cellx x coordinate of the cell @param celly y coordinate of the cell @param result array of 2 ints to hold the x and y coordinate of the point	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
given a cell coordinate and span return the point that represents the center of the regio @param cellx x coordinate of the cell @param celly y coordinate of the cell @param result array of 2 ints to hold the x and y coordinate of the point	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
given a cell coordinate and span fills out a corresponding pixel rect @param cellx x coordinate of the cell @param celly y coordinate of the cell @param result rect in which to write the result	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
return a rect that has the cellwidth/cellheight (left top) and widthgap/heightgap (right bottom)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
expand the background drawing bounds by the padding baked into the background drawable	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we cancel any existing animations	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
exit early if were not actually moving the view	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if the animation was cancelled it means that another animation	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
has interrupted this one and we dont want to lock the item into	UNKNOWN	WITHOUT_CLASSIFICATION	0.917	0.000
place just yet.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if the animation was cancelled it means that another animation	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
has interrupted this one and we dont want to lock the item into	UNKNOWN	WITHOUT_CLASSIFICATION	0.917	0.000
place just yet.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
estimate where the top left cell of the dragged item will land if it is dropped. @param originx the x value of the top left corner of the item @param originy the y value of the top left corner of the item @param spanx the number of horizontal cells that the item spans @param spany the number of vertical cells that the item spans @param result the estimated drop cell x and y.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
pointtocellrounded takes the top left of a cell but will pad that with	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
cellwidth/2 and cellheight/2 when finding the matching cell	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
if the item isnt fully on this screen snap to the edges	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
snap to right	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
snap to left	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
snap to bottom	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
snap to top	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
find the top left corner of the rect the object will occupy	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
when drawing the drag outline it did not account for margin offsets	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
added by the views parent.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
offsets due to the size difference between the view and the dragoutline.	UNKNOWN	WITHOUT_CLASSIFICATION	0.995	0.000
there is a size difference to account for the outer blur which may lie	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
outside the bounds of the view.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we center about the x axis	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
center the drag region horizontally in the cell and apply a drag	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
outline offset	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
center the drag outline in the cell	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we verify that the current rect is not a sub-rect of any of our previous	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
candidates. in this case the current rect is disqualified in favour of the	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
containing rect.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
re-mark space taken by ignoreview as occupied	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
return -1 -1 if no suitable location found	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
find a vacant area that will fit the given bounds nearest the requested cell location. uses euclidean distance to score multiple vacant areas. @param pixelx the x location at which you want to search for a vacant area. @param pixely the y location at which you want to search for a vacant area. @param spanx horizontal span of the object. @param spany vertical span of the object. @param result array in which to place the result or null (in which case a new array will be allocated) @return the x y cell of a vacant area that can contain this object nearest the requested location.	UNKNOWN	WITHOUT_CLASSIFICATION	0.992	0.000
find a vacant area that will fit the given bounds nearest the requested cell location. uses euclidean distance to score multiple vacant areas. @param pixelx the x location at which you want to search for a vacant area. @param pixely the y location at which you want to search for a vacant area. @param minspanx the minimum horizontal span required @param minspany the minimum vertical span required @param spanx horizontal span of the object. @param spany vertical span of the object. @param result array in which to place the result or null (in which case a new array will be allocated) @return the x y cell of a vacant area that can contain this object nearest the requested location.	UNKNOWN	WITHOUT_CLASSIFICATION	0.995	0.000
find a vacant area that will fit the given bounds nearest the requested cell location. uses euclidean distance to score multiple vacant areas. @param pixelx the x location at which you want to search for a vacant area. @param pixely the y location at which you want to search for a vacant area. @param spanx horizontal span of the object. @param spany vertical span of the object. @param ignoreoccupied if true the result can be an occupied cell @param result array in which to place the result or null (in which case a new array will be allocated) @return the x y cell of a vacant area that can contain this object nearest the requested location.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
find a vacant area that will fit the given bounds nearest the requested cell location. uses euclidean distance to score multiple vacant areas. @param pixelx the x location at which you want to search for a vacant area. @param pixely the y location at which you want to search for a vacant area. @param minspanx the minimum horizontal span required @param minspany the minimum vertical span required @param spanx horizontal span of the object. @param spany vertical span of the object. @param ignoreoccupied if true the result can be an occupied cell @param result array in which to place the result or null (in which case a new array will be allocated) @return the x y cell of a vacant area that can contain this object nearest the requested location.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
mark space take by ignoreview as available (method checks if ignoreview is null)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
for items with a spanx / spany > 1 the passed in point (pixelx pixely) corresponds	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
to the center of the item but we are searching based on the top-left cell so	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we translate the point over to correspond to the top-left.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
keep track of best-scoring drop area	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
first lets see if this thing fits anywhere	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we know that the item will fit at _some_ acceptable size now lets see	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
how big we can make it. well alternate between incrementing x and y spans	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
until we hit a limit.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
find a vacant area that will fit the given bounds nearest the requested cell location and will also weigh in a suggested direction vector of the desired location. this method computers distance based on unit grid distances not pixel distances. @param cellx the x cell nearest to which you want to search for a vacant area. @param celly the y cell nearest which you want to search for a vacant area. @param spanx horizontal span of the object. @param spany vertical span of the object. @param direction the favored direction in which the views should move from x y @param exactdirectiononly if this parameter is true then only solutions where the direction matches exactly. otherwise we find the best matching direction. @param occoupied the array which represents which cells in the celllayout are occupied @param blockoccupied the array which represents which cells in the specified block (cellx celly spanx spany) are occupied. this is used when try to move a group of views. @param result array in which to place the result or null (in which case a new array will be allocated) @return the x y cell of a vacant area that can contain this object nearest the requested location.	UNKNOWN	WITHOUT_CLASSIFICATION	0.689	0.000
keep track of best-scoring drop area	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
first lets see if this thing fits anywhere	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the direction score is just the dot product of the two candidate direction	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
and that passed in.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
return -1 -1 if no suitable location found	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
determine the edge of the cluster that will be leading the push and how far	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the cluster must be shifted.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
break early for invalid push distance.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
mark the occupied state as false for the group of views we want to move.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we save the current configuration -- if we fail to find a solution we will revert	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
to the initial state. the process of finding a solution modifies the configuration	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
in place hence the need for revert in the failure case.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the pushing algorithm is simplified by considering the views in the order in which	UNKNOWN	WITHOUT_CLASSIFICATION	0.987	0.000
they would be pushed by the cluster. for example if the cluster is leading with its	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
left edge we consider sort the views by their right edge from right to left.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
for each view that isnt in the cluster we see if the leading edge of the	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
cluster is contacting the edge of that view. if so we add that view to the	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
cluster.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the push solution includes the all apps button this is not viable.	UNKNOWN	WITHOUT_CLASSIFICATION	0.995	0.000
adding view to cluster mark it as not occupied.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the cluster has been completed now we move the whole thing over in the appropriate	UNKNOWN	WITHOUT_CLASSIFICATION	0.965	0.000
direction.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
due to the nature of the algorithm the only check required to verify a valid solution	UNKNOWN	WITHOUT_CLASSIFICATION	0.967	0.000
is to ensure that completed shifted cluster lies completely within the cell layout.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
in either case we set the occupied array as marked for the location of the views	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we construct a rect which represents the entire group of views passed in	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
mark the occupied state as false for the group of views we want to move.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we mark more precisely which parts of the bounding rect are truly occupied allowing	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
for interlocking.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if we successfuly found a location by pushing the block of views we commit it	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
in either case we set the occupied array as marked for the location of the views	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this method tries to find a reordering solution which satisfies the push mechanic by trying	UNKNOWN	WITHOUT_CLASSIFICATION	0.989	0.000
to push items in each of the cardinal directions in an order based on the direction vector	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
passed.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if the direction vector has two non-zero components we try pushing	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
separately in each of the components.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
revert the direction	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
now we try pushing in each component of the opposite direction	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
revert the direction	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if the direction vector has a single non-zero component we push first in the	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
direction of the vector	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
then we try the opposite direction	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
switch the direction back	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if we have failed to find a push solution with the above then we try	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
to find a solution by pushing along the perpendicular axis.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
swap the components	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
then we try the opposite direction	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
switch the direction back	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
swap the components back	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
return early if get invalid cell positions	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
mark the desired location of the view currently being dragged.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
first we try to find a solution which respects the push mechanic. that is	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we try to find a solution such that no displaced item travels through another item	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
without also displacing that item.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
next we try moving the views as a block but without requiring the push mechanic.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
ok they couldnt move as a block lets move them individually	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
returns a pair (x y) where xy are in {-1 0 1} corresponding to vector between the provided point and the provided cell	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
copy the current state into the solution. this solution will be manipulated as necessary.	UNKNOWN	WITHOUT_CLASSIFICATION	0.994	0.000
copy the current occupied array into the temporary occupied array. this array will be	UNKNOWN	WITHOUT_CLASSIFICATION	0.978	0.000
manipulated as necessary to find a solution.	UNKNOWN	WITHOUT_CLASSIFICATION	0.990	0.000
we find the nearest cell into which we would place the dragged item assuming theres	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
nothing in its way.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
first we try the exact nearest position of the item being dragged	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we will then want to try to move this around to other neighbouring positions	UNKNOWN	DESIGN	0.990	0.000
we try shrinking the widget down to size in an alternating pattern shrink 1 in	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
x then 1 in y etc.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this method starts or changes the reorder preview animations	UNKNOWN	WITHOUT_CLASSIFICATION	0.993	0.000
we make sure to end only after a full period	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
we make sure to end only after a full period	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
we do a null check here because the item info can be null in the case of the	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
allapps button in the hotseat.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this seems like it should be obvious and straight-forward but when the direction vector needs to match with the notion of the dragview pushing other views we have to employ a slightly more subtle notion of the direction vector. the question is what two points is the vector between? the center of the dragview and its desired destination? not quite as this doesnt necessarily coincide with the interaction of the dragview and items occupying those cells. instead we use some heuristics to often lock the vector to up down left or right which helps make pushing feel right.	UNKNOWN	DESIGN	0.941	0.000
no idea what to do give a random direction.	UNKNOWN	WITHOUT_CLASSIFICATION	0.986	0.000
for a given cell and span fetch the set of views intersecting the region.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
first we determine if things have moved enough to cause a different layout	UNKNOWN	WITHOUT_CLASSIFICATION	0.974	0.000
if were just testing for a possible location (mode_accept_drop) we dont bother	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
committing anything or animating anything as we just want to determine if a solution	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
exists	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
first we determine if things have moved enough to cause a different layout	UNKNOWN	WITHOUT_CLASSIFICATION	0.974	0.000
when we are checking drop validity or actually dropping we dont recompute the	UNKNOWN	DESIGN	0.974	0.000
direction vector since we want the solution to match the preview and its possible	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
that the exact position of the item has changed to result in a new reordering outcome.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we reset this vector after drop	UNKNOWN	WITHOUT_CLASSIFICATION	0.990	0.000
find a solution involving pushing / displacing any items in the way	UNKNOWN	WITHOUT_CLASSIFICATION	0.992	0.000
we attempt the approach which doesnt shuffle views at all	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
if the reorder solution requires resizing (shrinking) the item being dropped we instead	UNKNOWN	WITHOUT_CLASSIFICATION	0.992	0.000
favor a solution in which the item is not resized but	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if were just testing for a possible location (mode_accept_drop) we dont bother	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
committing anything or animating anything as we just want to determine if a solution	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
exists	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
copy current state into savedmap	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
restore current state from savedmap	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
find a vacant area that will fit the given bounds nearest the requested cell location. uses euclidean distance to score multiple vacant areas. @param pixelx the x location at which you want to search for a vacant area. @param pixely the y location at which you want to search for a vacant area. @param spanx horizontal span of the object. @param spany vertical span of the object. @param ignoreview considers space occupied by this view as unoccupied @param result previously returned value to possibly recycle. @return the x y cell of a vacant area that can contain this object nearest the requested location.	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
re-mark space taken by ignoreview as occupied	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
a drag event has begun over this layout. it may have begun over this layout (in which case ondragchild is called first) or it may have begun on another layout.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
find a vacant area that will fit the given bounds nearest the requested cell location. uses euclidean distance to score multiple vacant areas. @param pixelx the x location at which you want to search for a vacant area. @param pixely the y location at which you want to search for a vacant area. @param minspanx the minimum horizontal span required @param minspany the minimum vertical span required @param spanx horizontal span of the object. @param spany vertical span of the object. @param ignoreview considers space occupied by this view as unoccupied @param result previously returned value to possibly recycle. @return the x y cell of a vacant area that can contain this object nearest the requested location.	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
find a starting cell position that will fit the given bounds nearest the requested cell location. uses euclidean distance to score multiple vacant areas. @param pixelx the x location at which you want to search for a vacant area. @param pixely the y location at which you want to search for a vacant area. @param spanx horizontal span of the object. @param spany vertical span of the object. @param ignoreview considers space occupied by this view as unoccupied @param result previously returned value to possibly recycle. @return the x y cell of a vacant area that can contain this object nearest the requested location.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
finds the upper-left coordinate of the first rectangle in the grid that can hold a cell of the specified dimensions. if intersectx and intersecty are not -1 then this method will only return coordinates for rectangles that contain the cell (intersectx intersecty) @param cellxy the array that will contain the position of a vacant cell if such a cell can be found. @param spanx the horizontal span of the cell we want to find. @param spany the vertical span of the cell we want to find. @return true if a vacant cell of the specified dimension was found false otherwise.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
like above but ignores any cells occupied by the item ignoreview @param cellxy the array that will contain the position of a vacant cell if such a cell can be found. @param spanx the horizontal span of the cell we want to find. @param spany the vertical span of the cell we want to find. @param ignoreview the home screen item we should treat as not occupying any space @return	UNKNOWN	DESIGN	0.593	0.000
like above but if intersectx and intersecty are not -1 then this method will try to return coordinates for rectangles that contain the cell [intersectx intersecty] @param spanx the horizontal span of the cell we want to find. @param spany the vertical span of the cell we want to find. @param ignoreview the home screen item we should treat as not occupying any space @param intersectx the x coordinate of the cell that we should try to overlap @param intersectx the y coordinate of the cell that we should try to overlap @return true if a vacant cell of the specified dimension was found false otherwise.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
the superset of the above two methods	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
mark space take by ignoreview as available (method checks if ignoreview is null)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
small optimization we can skip to after the column we just found	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
an occupied cell	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if we failed to find anything try again but without any requirements of	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
intersecting	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
called when drag has left this celllayout or has been completed (successfully or not)	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
this can actually be called when we arent in a drag e.g. when adding a new	UNKNOWN	WITHOUT_CLASSIFICATION	0.822	0.000
item to this layout via the customize drawer.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
guard against that case.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
invalidate the drag data	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
mark a child as having been dropped. at the beginning of the drag operation the child may have been on another screen but it is re-parented before this method is called. @param child the child that is being dropped	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
computes a bounding rectangle for a range of cells @param cellx x coordinate of upper left corner expressed as a cell position @param celly y coordinate of upper left corner expressed as a cell position @param cellhspan width in cells @param cellvspan height in cells @param resultrect rect into which to put the results	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
computes the required horizontal and vertical cell spans to always fit the given rectangle. @param width width in pixels @param height height in pixels @param result an array of length 2 in which to store the result (may be null).	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
always assume were working with the smallest span to make sure we	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
reserve enough space in both orientations.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
always round up to next largest cell	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
calculate the grid spans needed to fit given item	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
its not a widget so it must be 1x1	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
find the first vacant cell if there is one. @param vacant holds the x and y coordinate of the vacant cell @param spanx horizontal cell span. @param spany vertical cell span. @return true if a vacant cell was found	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we make sure to end only after a full period	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
we make sure to end only after a full period	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
copy current state into savedmap	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
restore current state from savedmap	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
lazy-create inflater	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
use the convert-view where possible	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
set the icon	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
set the text	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
lazy-create inflater	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
use the convert-view where possible	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
set the icon	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
set the text	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
make sure its stopped before we modify any values	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
todo we dont really need to do the animation if startvalue == tovalue but	UNKNOWN	DESIGN	0.987	0.000
somehow that doesnt seem to work possibly a quirk of the animation framework	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
ensure we dont calculate a non-sensical duration	UNKNOWN	WITHOUT_CLASSIFICATION	0.995	0.000
return true when the animation is not running and it hasnt even been started.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
this is the equivalent of calling animator.start() except that it can be called when the animation is running in the opposite direction in which case we reverse direction and animate for a correspondingly shorter duration.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
this is the roughly the equivalent of calling animator.reverse() except that it uses the same interpolation curve as animatein() rather than mirroring it. also like animatein() if the animation is currently running in the opposite direction we reverse direction and animate for a correspondingly shorter duration.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
remove any records for the supplied componentname.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
remove any records for the supplied package name.	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
empty out the cache.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
empty out the cache that arent of the correct grid size	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
fill in application with the icon and label for info.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
parse the appfilter.xml file from the selected icon pack.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
check if an icon is available in the current icon pack.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
null info means not installed but if we have a component from the intent then	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we should still look in the cache for restored app icons.	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
fill in shortcutinfo with the icon and label for info.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
null info means not installed but if we have a component from the intent then	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we should still look in the cache for restored app icons.	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
retrieves the entry from the cache. if the entry is not present it creates a new entry. this method is not thread safe it must be called from a synchronized method.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
adds a default package entry in the cache. this entry is not persisted and will be removed when the cache is flushed.	UNKNOWN	WITHOUT_CLASSIFICATION	0.868	0.000
gets an entry for the package which can be used as a fallback entry for various components. this method is not thread safe it must be called from a synchronized method.	UNKNOWN	WITHOUT_CLASSIFICATION	0.852	0.000
pre-load an icon into the persistent cache. <p>queries for a component that does not exist in the package manager will be answered by the persistent cache. @param context application context @param componentname the icon should be returned for this component @param icon the icon to be persisted @param dpi the native density of the icon	UNKNOWN	WITHOUT_CLASSIFICATION	0.967	0.000
todo rescale to the correct native dpi	UNKNOWN	WITHOUT_CLASSIFICATION	0.522	0.000
component is present on the system already do nothing	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
pass	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
read a pre-loaded icon from the persistent icon cache. @param componentname the component that should own the icon @returns a bitmap if one is cached or null.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we dont keep icons for other profiles in persistent cache.	UNKNOWN	WITHOUT_CLASSIFICATION	0.875	0.000
remove a pre-loaded icon from the persistent icon cache. @param componentname the component that should own the icon	UNKNOWN	WITHOUT_CLASSIFICATION	0.976	0.000
we dont keep icons for other profiles in persistent cache.	UNKNOWN	WITHOUT_CLASSIFICATION	0.875	0.000
write the fields of this item to the db @param context a context object to use for getting usermanagercompat @param values	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we should never persist an item on the extra empty screen.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
try go guesstimate how much space the icon will take when serialized	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
to avoid unnecessary allocations/copies during the write.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
it is very important that sub-classes implement this if they contain any references to the activity (anything in the view hierarchy etc.). if not leaks can result since iteminfo objects persist across rotation and can hence leak by holding stale references to the old view hierarchy / activity.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
helper method. assumes a draw is pending and that if the animations duration is 0	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
it should be cancelled	UNKNOWN	WITHOUT_CLASSIFICATION	0.978	0.000
use this as a signal that the animation was cancelled	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
use this as a signal that the animation was cancelled	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
were willing to let this slide. the exception is being caused by the list of	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
remoteviews which is being passed back. the startlistening relationship will	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
have been established by this point and we will end up populating the	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
widgets upon bind anyway. see issue 14255011 for more context.	UNKNOWN	WITHOUT_CLASSIFICATION	0.993	0.000
once we get the message that widget packages are updated we need to rebind items	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
in appscustomize accordingly.	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
returns true if the intent is a valid launch intent for a launcher activity of an app. this is used to identify shortcuts which are different from the ones exposed by the applications manifest file. @param launchintent the intent that will be launched when the shortcut is clicked.	UNKNOWN	WITHOUT_CLASSIFICATION	0.748	0.000
an app target can either have no extra or have iteminfo.extra_profile.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this name is only used for comparisons and notifications so fall back to activity name	UNKNOWN	WITHOUT_CLASSIFICATION	0.986	0.000
if not supplied	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
queue the item up for adding if launcher has not loaded properly yet	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
since its a custom shortcut verify that it is safe to launch.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
target cannot be launched or requires some special permission to launch	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
final intent data = pendinginfo.data	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
final boolean allowduplicate = data.getbooleanextra(launcher.extra_shortcut_duplicate true)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if the intent specifies a package make sure the package exists	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
generate a shortcut info to add into the model	UNKNOWN	WITHOUT_CLASSIFICATION	0.810	0.000
notify the user once if we werent able to place any duplicates	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
add the new apps to the model and bind them	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
returns true if the intent is a valid launch intent for a shortcut. this is used to identify shortcuts which are different from the ones exposed by the applications manifest file. when disable_all_apps is true shortcuts exposed via the apps manifest should never be duplicated or removed(unless the app is un-installed). @param launchintent the intent that will be launched when the shortcut is clicked.	UNKNOWN	WITHOUT_CLASSIFICATION	0.747	0.000
ensures that we have a valid non-null name. if the provided name is null we will return the application name instead.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
need a version that doesnt require an instance of launcherappstate for the wallpaper picker	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
returns false on non-dogfood builds.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
call from application.onterminate() which is not guaranteed to ever be called.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
if the database has ever changed then we really need to force a reload of the	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
workspace on the next load	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
update the icon size	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
updates the icons and label of all icons for the provided package name.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
when we bind the widget we should notify the widget that the size has changed if we have not done so already (only really for default workspace widgets).	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
trigger an update callback to the widget to notify it that its size has changed.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
store the orientation in which the widget was inflated	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
re-inflate is required if the orientation has changed since last inflated.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
just in case the previous long press hasnt been cleared we make sure to start fresh	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
on touch down.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
consume any touch events for ourselves after longpress is triggered	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
watch for longpress events at this level to make sure	UNKNOWN	WITHOUT_CLASSIFICATION	0.992	0.000
users can always pick up this widget	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
otherwise continue letting touch events fall through to children	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if the widget does not handle touch then cancel	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
long press when we release the touch	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
if a long press has been performed we dont want to clear the record of that since	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we still may be receiving a touch up which we want to intercept	UNKNOWN	WITHOUT_CLASSIFICATION	0.994	0.000
notify the backup manager that out database is dirty. <p>this does not force an immediate backup. @param context application context	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
there is only one process accessing this preference file but the restore	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
modifies the file outside the normal codepaths so it looks like another	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
process. this forces a reload of the file in case this process persists.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
no restore for old devices.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
clear db before restore	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if no favorite was migrated clear the data and start fresh.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if the restore fails we should do a fresh start.	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
disable the migration cling	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
copy the shortcuts from the old database	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
set the flag to skip the folder cling	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
disable the migration cling	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
shows the migration cling. this flow is mutually exclusive with showfirstruncling and only runs if this launcher package was not preinstalled and there exists a db to migrate from.	UNKNOWN	WITHOUT_CLASSIFICATION	0.984	0.000
show the longpress cling next	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
show the longpress cling next	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
show the longpress cling next	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
this is the first cling being shown. no need to animate.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
animate	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
hides the specified cling	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
to catch cases where siblings of top-level views are made invisible just check whether	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
the cling is directly set to gone before dismissing it.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
returns whether the clings are enabled or should be shown	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
disable clings when running in a test harness	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
disable clings for accessibility when explore by touch is enabled	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
restricted secondary users (child mode) will potentially have very few apps	UNKNOWN	WITHOUT_CLASSIFICATION	0.993	0.000
seeded when they start up for the first time. clings wont work well with that	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
dont backup apps in other profiles for now.	UNKNOWN	WITHOUT_CLASSIFICATION	0.952	0.000
back up launcher data so we can restore the users state on a new device. <p>the journal is a timestamp and a list of keys that were saved as of that time. <p>keys may come back in any order so each key/value is one complete row of the database. @param oldstate notes from the last backup @param data incremental key/value pairs to persist off-device @param newstate notes for the next backup @throws ioexception	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
restore launcher configuration from the restored data stream. <p>keys may arrive in any order. @param data the key/value pair from the server	UNKNOWN	WITHOUT_CLASSIFICATION	0.993	0.000
noinspection unusedassignment	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
record the restore state for the next backup. @param newstate notes about the backup state after restore.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
clear the output journal time to force a full backup to	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
will catch any changes the restore process might have made	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
write all modified favorites to the data stream. @param in notes from last backup @param data output stream for key/value pairs @param out notes about this backup @param keys keys to mark as clean in the notes for next backup @throws ioexception	UNKNOWN	WITHOUT_CLASSIFICATION	0.968	0.000
read the old id set	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
persist things that have changed since the last backup	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
dont backup apps in other profiles for now.	UNKNOWN	WITHOUT_CLASSIFICATION	0.952	0.000
these ids must have been deleted	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
read a favorite from the stream. <p>keys arrive in any order so screens and containers may not exist yet. @param key identifier for the row @param buffer the serialized proto from the stream may be larger than datasize @param datasize the size of the proto from the stream @param keys keys to mark as clean in the notes for next backup	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
write all modified screens to the data stream. @param in notes from last backup @param data output stream for key/value pairs @param out notes about this backup @param keys keys to mark as clean in the notes for next backup @throws ioexception	UNKNOWN	WITHOUT_CLASSIFICATION	0.956	0.000
read the old id set	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
persist things that have changed since the last backup	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
these ids must have been deleted	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
read a screen from the stream. <p>keys arrive in any order so children of this screen may already exist. @param key identifier for the row @param buffer the serialized proto from the stream may be larger than datasize @param datasize the size of the proto from the stream @param keys keys to mark as clean in the notes for next backup	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
write all the static icon resources we need to render placeholders for a package that is not installed. @param in notes from last backup @param data output stream for key/value pairs @param out notes about this backup @param keys keys to mark as clean in the notes for next backup @throws ioexception	UNKNOWN	DESIGN	0.960	0.000
persist icons that havent been persisted yet	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
try again later	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
read the old id set	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
remember that we already backed this up previously	UNKNOWN	WITHOUT_CLASSIFICATION	0.986	0.000
too many icons for this pass request another.	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
these ids must have been deleted	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
read an icon from the stream. <p>keys arrive in any order so shortcuts that use this icon may already exist. @param key identifier for the row @param buffer the serialized proto from the stream may be larger than datasize @param datasize the size of the proto from the stream @param keys keys to mark as clean in the notes for next backup	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
write all the static widget resources we need to render placeholders for a package that is not installed. @param in notes from last backup @param data output stream for key/value pairs @param out notes about this backup @param keys keys to mark as clean in the notes for next backup @throws ioexception	UNKNOWN	DESIGN	0.950	0.000
persist static widget info that hasnt been persisted yet	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
read the old id set	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
remember that we already backed this up previously	UNKNOWN	WITHOUT_CLASSIFICATION	0.986	0.000
too many widgets for this pass request another.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
these ids must have been deleted	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
read a widget from the stream. <p>keys arrive in any order so widgets that use this data may already exist. @param key identifier for the row @param buffer the serialized proto from the stream may be larger than datasize @param datasize the size of the proto from the stream @param keys keys to mark as clean in the notes for next backup	UNKNOWN	WITHOUT_CLASSIFICATION	0.995	0.000
else {	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
future site of widget table mutation	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
}	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
create a new key with an integer id. <p> keys contain their own checksum instead of using the heavy-weight checkedmessage wrapper.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
create a new key for a named object. <p> keys contain their own checksum instead of using the heavy-weight checkedmessage wrapper.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
keys need to be strings serialize and encode.	UNKNOWN	WITHOUT_CLASSIFICATION	0.995	0.000
keys need to be strings decode and parse.	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
compute the checksum over the important bits of a key.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
serialize a favorite for persistence including a checksum wrapper.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
deserialize a favorite from persistence after verifying checksum wrapper.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
let launchermodel know weve been here.	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
serialize a screen for persistence including a checksum wrapper.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
deserialize a screen from persistence after verifying checksum wrapper.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
serialize an icon resource for persistence including a checksum wrapper.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
deserialize an icon resource from persistence after verifying checksum wrapper.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
serialize a widget for persistence including a checksum wrapper.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
deserialize a widget from persistence after verifying checksum wrapper.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
read the old journal from the input file. in the event of any error just pretend we didnt have a journal in that case do a full backup. @param oldstate the read-0only file descriptor pointing to the old journal @return a journal protocol buffer	UNKNOWN	WITHOUT_CLASSIFICATION	0.995	0.000
omg what are you doing? this is crazy inefficient!	UNKNOWN	WITHOUT_CLASSIFICATION	0.929	0.000
if we read a byte that is not ours we will cause trouble b/12491813	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
however we dont know how many bytes to expect (oops).	UNKNOWN	WITHOUT_CLASSIFICATION	0.969	0.000
so we have to step through slowly watching for the end.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
stop reading and see what there is to parse	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
check the buffer to see if we have a valid journal	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if we are here then we have read a valid checksum-verified journal	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if we dont have the whole journal yet mergefrom will throw. keep going.	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
write the new journal to the output file. in the event of any error just pretend we didnt have a journal in that case do a full backup. @param newstate the write-only file descriptor pointing to the new journal @param journal a journal protocol buffer	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
wrap a proto in a checkedmessage and compute the checksum.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
unwrap a proto message from a checkedmessage verifying the checksum.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
check if the launcher is in a state to support backup	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
launcher data has been wiped do nothing	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
launcher services are unavailable try again later	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
pin to mminy <= mcurry <= mmaxy	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
the amount of friction applied to flings. the default value is {@link viewconfiguration#getscrollfriction}. @param friction a scalar dimension-less value representing the coefficient of friction.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
g (m/s^2)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
inch/meter	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
pixels per inch	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
returns whether the scroller has finished scrolling. @return true if the scroller has finished scrolling false otherwise.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
force the finished field to a particular value. @param finished the new finished value.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
returns how long the scroll event will take in milliseconds. @return the duration of the scroll in milliseconds.	UNKNOWN	WITHOUT_CLASSIFICATION	0.946	0.000
returns the current x offset in the scroll. @return the new x offset as an absolute distance from the origin.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
returns the current y offset in the scroll. @return the new y offset as an absolute distance from the origin.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
returns the current velocity. @return the original velocity less the deceleration. result may be negative.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
returns the start x offset in the scroll. @return the start x offset as an absolute distance from the origin.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
returns the start y offset in the scroll. @return the start y offset as an absolute distance from the origin.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
returns where the scroll will end. valid only for fling scrolls. @return the final x offset as an absolute distance from the origin.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
returns where the scroll will end. valid only for fling scrolls. @return the final y offset as an absolute distance from the origin.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
call this when you want to know the new location. if it returns true the animation is not yet finished.	UNKNOWN	WITHOUT_CLASSIFICATION	0.958	0.000
pin to mminx <= mcurrx <= mmaxx	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
start scrolling by providing a starting point and the distance to travel. the scroll will use the default value of 250 milliseconds for the duration. @param startx starting horizontal scroll offset in pixels. positive numbers will scroll the content to the left. @param starty starting vertical scroll offset in pixels. positive numbers will scroll the content up. @param dx horizontal distance to travel. positive numbers will scroll the content to the left. @param dy vertical distance to travel. positive numbers will scroll the content up.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
start scrolling by providing a starting point the distance to travel and the duration of the scroll. @param startx starting horizontal scroll offset in pixels. positive numbers will scroll the content to the left. @param starty starting vertical scroll offset in pixels. positive numbers will scroll the content up. @param dx horizontal distance to travel. positive numbers will scroll the content to the left. @param dy vertical distance to travel. positive numbers will scroll the content up. @param duration duration of the scroll in milliseconds.	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
start scrolling based on a fling gesture. the distance travelled will depend on the initial velocity of the fling. @param startx starting point of the scroll (x) @param starty starting point of the scroll (y) @param velocityx initial velocity of the fling (x) measured in pixels per second. @param velocityy initial velocity of the fling (y) measured in pixels per second @param minx minimum x value. the scroller will not scroll past this point. @param maxx maximum x value. the scroller will not scroll past this point. @param miny minimum y value. the scroller will not scroll past this point. @param maxy maximum y value. the scroller will not scroll past this point.	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
continue a scroll or fling in progress	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
pin to mminx <= mfinalx <= mmaxx	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
pin to mminy <= mfinaly <= mmaxy	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
1/e == exp(-1)	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
stops the animation. contrary to {@link #forcefinished(boolean)} aborting the animating cause the scroller to move to the final x and y position @see #forcefinished(boolean)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
extend the scroll animation. this allows a running animation to scroll further and longer when used with {@link #setfinalx(int)} or {@link #setfinaly(int)}. @param extend additional time to scroll in milliseconds. @see #setfinalx(int) @see #setfinaly(int)	UNKNOWN	WITHOUT_CLASSIFICATION	0.649	0.000
returns the time elapsed since the beginning of the scrolling. @return the elapsed time in milliseconds.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
sets the final position (x) for this scroller. @param newx the new x offset as an absolute distance from the origin. @see #extendduration(int) @see #setfinaly(int)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
sets the final position (y) for this scroller. @param newy the new y offset as an absolute distance from the origin. @see #extendduration(int) @see #setfinalx(int)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
@hide	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the content style url for a given row identified by its id. @param id the row id. @param notify true to send a notification is the content changes. @return the unique content url for the specified row.	UNKNOWN	WITHOUT_CLASSIFICATION	0.981	0.000
the content style url for a given row identified by its id. @param id the row id. @param notify true to send a notification is the content changes. @return the unique content url for the specified row.	UNKNOWN	WITHOUT_CLASSIFICATION	0.981	0.000
this is the first time we get a handle to the internal valueanimator	UNKNOWN	WITHOUT_CLASSIFICATION	0.977	0.000
used by the viewpropertyanimator.	UNKNOWN	WITHOUT_CLASSIFICATION	0.988	0.000
firstframeanimatorhelper hooks itself up to the updates on the animator	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
and then adjusts the play time to keep the first two frames jank-free	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
not supported and throws an exception when used.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
not supported and throws an exception when used.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
not supported and throws an exception when used.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
256k	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
ugh whatever	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
will block	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
log.v(tag update pid + pid + pss= + info.currentpss + uss= + info.currentuss)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
catch up in case we crashed but other processes are still running	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
they sent us a bad intent	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
in rare cases the receiver races with the application to set up launcherappstate	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
if the current icon pack was deleted we reload the icons.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
delete from favorites where screen not in (select _id from workspacescreens)	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
in very limited cases we support system|signature permission apps to add to the db	UNKNOWN	WITHOUT_CLASSIFICATION	0.958	0.000
always notify the backup agent	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
this is only required one time while loading the workspace during the	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
upgrade path and should never be called from anywhere else.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
should we load the old db for upgrade? first run only.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
clears all the data for a fresh start.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
loads the default workspace based on the following priority scheme 1) from a package provided by play store 2) from a partner configuration apk already in the system image 3) the default configuration for the particular device	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
populate favorites table with initial favorites	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we dont import the old databse for tablets as the grid size has changed.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
are you sure? (y/n)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
send notification that weve deleted the {@link appwidgethost} probably as part of the initial database creation. the receiver may want to re-call {@link appwidgethost#startlistening()} to ensure callbacks are correctly set.	UNKNOWN	WITHOUT_CLASSIFICATION	0.995	0.000
database was just created so wipe any previous widgets	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
try converting the old database	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
try and upgrade from the launcher2 db	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if we fail then set a flag to load the default workspace	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
right now in non-default workspace cases we want to run the final	UNKNOWN	WITHOUT_CLASSIFICATION	0.951	0.000
upgrade code (ie. to fix workspace screen indices -> ids etc.) so	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
set that flag too.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
fresh and clean launcher db.	UNKNOWN	WITHOUT_CLASSIFICATION	0.986	0.000
delete items directly on the workspace whos screen id doesnt exist	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
and container = -100	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
delete items contained in folders which no longer exist (after above statement)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
delete from favorites where container <> -100 and container <> -101 and container	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
not in (select _id from favorites where itemtype = 2)	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
we rearrange the screens from the old launcher	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
12345 -> 34512	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
ignore	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we already have a favorites database in the old provider	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
convert widgets from this import into widgets	UNKNOWN	WITHOUT_CLASSIFICATION	0.982	0.000
update max item id	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
upgrade 12 -> 3 added appwidgetid column	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
insert new column for holding appwidgetids	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
old version remains which means we wipe old data	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
convert existing widgets only if table upgrade was successful	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
wheres version 5?	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
- donut and sholes on 2.0 shipped with version 4 of launcher1.	UNKNOWN	WITHOUT_CLASSIFICATION	0.983	0.000
- passion shipped on 2.1 with version 6 of launcher3	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
- sholes shipped on 2.1r1 (aka mr. 3) with version 5 of launcher 1	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
but version 5 on there was the updatecontactsshortcuts change	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
which was version 6 in launcher 2 (first shipped on passion 2.1r1).	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the updatecontactsshortcuts change is idempotent so running it twice	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
is okay so well do that when upgrading the devices that shipped with it.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we went from 3 to 5 screens. move everything 1 to the right	UNKNOWN	WITHOUT_CLASSIFICATION	0.989	0.000
old version remains which means we wipe old data	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
we added the fast track.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
version 7 gets rid of the special search widget.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
version 8 (froyo) has the icons all normalized. this should	UNKNOWN	WITHOUT_CLASSIFICATION	0.905	0.000
already be the case in practice but we now rely on it and dont	UNKNOWN	WITHOUT_CLASSIFICATION	0.989	0.000
resample the images each time.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the max id is not yet set at this point (onupgrade is triggered in the ctor	UNKNOWN	WITHOUT_CLASSIFICATION	0.989	0.000
before it gets a change to get set so we need to read it here when we use it)	UNKNOWN	DESIGN	0.728	0.000
add default hotseat icons	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we bumped the version three time during jb once to update the launch flags once to	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
update the override for the default launch animation and once to set the mimetype	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
to improve startup performance	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
contact shortcuts need a different set of flags to be launched now	UNKNOWN	WITHOUT_CLASSIFICATION	0.982	0.000
the updatecontactsshortcuts change is idempotent so we can keep using it like	UNKNOWN	WITHOUT_CLASSIFICATION	0.993	0.000
back in the donut days	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
with the new shrink-wrapped and re-orderable workspaces it makes sense	UNKNOWN	WITHOUT_CLASSIFICATION	0.987	0.000
to persist workspace screens and their relative order.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this will never happen in the wild but when we switch to using workspace	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
screen ids redo the import from old launcher.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
insert new column for holding widget provider name	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
old version remains which means we wipe old data	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
insert new column for holding update timestamp	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
old version remains which means we wipe old data	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
insert new column for holding restore status	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
old version remains which means we wipe old data	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
we use the db version upgrade here to identify users who may not have seen	UNKNOWN	WITHOUT_CLASSIFICATION	0.925	0.000
clings yet (because they werent available) but for whom the clings are now	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
available (tablet users). because one of the possible cling flows (migration)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
is very destructive (wipes out workspaces) we want to prevent this from showing	UNKNOWN	DESIGN	0.726	0.000
until clear data. we do so by marking that the clings have been shown.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
no-op	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
due to a data loss bug some users may have items associated with screen ids	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
which no longer exist. since this can cause other problems and since the user	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
will never see these items anyway we use database upgrade as an opportunity to	UNKNOWN	WITHOUT_CLASSIFICATION	0.986	0.000
clean things up.	UNKNOWN	WITHOUT_CLASSIFICATION	0.985	0.000
add userid column	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
else old version remains which means we wipe old data	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
this shouldnt happen -- throw our hands up in the air and start over.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
clears all the data for a fresh start.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
default to the serial number of this user for older	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
shortcuts.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
insert new column for holding user serial number	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
old version remains which means we wipe old data	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
select and iterate through each matching widget	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
when starting from the launcher start in a new cleared task	UNKNOWN	WITHOUT_CLASSIFICATION	0.992	0.000
clear_when_task_reset cannot reset the root of a task so we	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
clear the whole thing preemptively here since	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
quickcontactactivity will finish itself when launching other	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
detail activities.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
determine the type and also put that in the shortcut	UNKNOWN	WITHOUT_CLASSIFICATION	0.749	0.000
(that can speed up launch a bit)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
generates a new id to use for an object in your database. this method should be only	UNKNOWN	WITHOUT_CLASSIFICATION	0.679	0.000
called from the main ui thread. as an exception we do call it when we call the	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
constructor from the worker thread however this doesnt extend until after the	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
constructor is called and we only pass a reference to launcherprovider to launcherapp	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
after that point	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
get the result	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
generates a new id to use for an workspace screen in your database. this method	UNKNOWN	WITHOUT_CLASSIFICATION	0.980	0.000
should be only called from the main ui thread. as an exception we do call it when we	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
call the constructor from the worker thread however this doesnt extend until after the	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
constructor is called and we only pass a reference to launcherprovider to launcherapp	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
after that point	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
log to disk	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
log to disk	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
get the result	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
log to disk	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
upgrade existing clock and photo frame widgets into their new widget equivalents.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
select and iterate through each matching widget	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
allocate and update database with new appwidgetid	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
original widgets might not have valid spans when upgrading	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
todo check return value	UNKNOWN	DESIGN	0.576	0.000
todo check return value	UNKNOWN	DESIGN	0.576	0.000
todo check return value	UNKNOWN	DESIGN	0.576	0.000
update max item id	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
1. ensure that externally added items have a valid item id	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
2. in the case of an app widget and if no app widget id is specified we	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
attempt allocate and bind the widget.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
add screen id if not present	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
returns true of screen id exists or if successfully added	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
get the result	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
noinspection statementwithemptybody	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
todo use multiple loaders with fall-back and transaction.	UNKNOWN	DESIGN	1.000	0.000
add the screens specified by the items above	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
ensure that the max ids are initialized	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
loads the default set of favorite packages from an xml file. @param db the database to write the values into @param res the resources @param workspaceresourceid the specific container id of items to load @param screenids the set of screenids which are used by the favorites	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
recursively load some more favorites why not?	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
assuming its a <favorite> at this point	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
this looks through the contained favorites (or meta-favorites) and	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
attempts to add them as shortcuts in the fallback groups location	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
until one is added successfully.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
folder contents are nested in this xml file	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
folder contents come from an external xml resource	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
keep track of the set of screens which need to be added to the db.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
parse folder items starting at {@link xmlpullparser} location. allow recursive includes of items.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
parse folder starting at current {@link xmlpullparser} location.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we can only have folders with >= 2 items so we need to remove the	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
folder and clean up if less than 2 items were included or some	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
failed to add and less than 2 were actually added	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
delete the folder	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if we have a single item promote it to where the folder	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
would have been.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
a meta shortcut attempts to resolve an intent specified as a uri in the xml if a	UNKNOWN	WITHOUT_CLASSIFICATION	0.970	0.000
logical choice for what shortcut should be used for that intent exists then it is	UNKNOWN	DESIGN	0.994	0.000
added. otherwise add nothing.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
verify that the result is an app and not just the resolver dialog asking which	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
app to use.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if only one of the results is a system app then choose that as the default.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
there is no logical choice for this meta-favorite so rather than making	UNKNOWN	WITHOUT_CLASSIFICATION	0.983	0.000
a bad choice just add nothing.	UNKNOWN	WITHOUT_CLASSIFICATION	0.968	0.000
if the list contains the above resolved activity then it cant be	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
resolveractivity itself.	UNKNOWN	WITHOUT_CLASSIFICATION	0.995	0.000
if no component specified try to find a shortcut to add from the uri.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
gets an appwidget provider from the given package. if the package contains more than one appwidget provider an arbitrary one is returned.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
read the extras	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
todo need to check return value	UNKNOWN	DESIGN	0.764	0.000
send a broadcast to configure the widget	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
oh well	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
ignore	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we already have a favorites database in the old provider	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
default to the serial number of this user for older	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
shortcuts.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
bogus intent?	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
no intent? no icon	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
component no longer exists.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
dedupe icons directly on the workspace	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
canonicalize	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the play store sets the package parameter but launcher	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
does not so we clear that out to keep them the same.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
also ignore intent flags for the purposes of deduping.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
in a folder preserve position	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
for items contained directly on one of the workspace screen	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
well determine their location (screen x y) in a second pass.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
folders first	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
then shortcuts	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
layout all the folders	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
hotseat items and folder items have already had their	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
location information set. nothing to be done here.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
leave the last row of icons blank on every screen	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
ensure that new screens are created to hold these icons	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
update max ids very important since we just grabbed ids from another database	UNKNOWN	WITHOUT_CLASSIFICATION	0.988	0.000
build a query string that will match any row where the column matches anything in the values list.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
return attribute value attempting launcher-specific namespace first before falling back to anonymous attribute.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
return attribute resource value attempting launcher-specific namespace first before falling back to anonymous attribute.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
(that can speed up launch a bit)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
determine the type and also put that in the shortcut	UNKNOWN	WITHOUT_CLASSIFICATION	0.749	0.000
the max id is not yet set at this point (onupgrade is triggered in the ctor	UNKNOWN	WITHOUT_CLASSIFICATION	0.989	0.000
send notification that weve deleted the {@link appwidgethost} probably as part of the initial database creation. the receiver may want to re-call {@link appwidgethost#startlistening()} to ensure callbacks are correctly set.	UNKNOWN	WITHOUT_CLASSIFICATION	0.995	0.000
database was just created so wipe any previous widgets	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
try converting the old database	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
try and upgrade from the launcher2 db	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if we fail then set a flag to load the default workspace	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
right now in non-default workspace cases we want to run the final	UNKNOWN	WITHOUT_CLASSIFICATION	0.951	0.000
upgrade code (ie. to fix workspace screen indices -> ids etc.) so	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
set that flag too.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
fresh and clean launcher db.	UNKNOWN	WITHOUT_CLASSIFICATION	0.986	0.000
delete items directly on the workspace whos screen id doesnt exist	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
delete from favorites where screen not in (select _id from workspacescreens)	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
and container = -100	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
delete items contained in folders which no longer exist (after above statement)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
delete from favorites where container <> -100 and container <> -101 and container	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
not in (select _id from favorites where itemtype = 2)	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
we rearrange the screens from the old launcher	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
12345 -> 34512	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
ignore	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we already have a favorites database in the old provider	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
convert widgets from this import into widgets	UNKNOWN	WITHOUT_CLASSIFICATION	0.982	0.000
update max item id	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
upgrade 12 -> 3 added appwidgetid column	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
insert new column for holding appwidgetids	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
old version remains which means we wipe old data	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
convert existing widgets only if table upgrade was successful	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
wheres version 5?	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
- donut and sholes on 2.0 shipped with version 4 of launcher1.	UNKNOWN	WITHOUT_CLASSIFICATION	0.983	0.000
- passion shipped on 2.1 with version 6 of launcher3	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
- sholes shipped on 2.1r1 (aka mr. 3) with version 5 of launcher 1	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
but version 5 on there was the updatecontactsshortcuts change	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
which was version 6 in launcher 2 (first shipped on passion 2.1r1).	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the updatecontactsshortcuts change is idempotent so running it twice	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
is okay so well do that when upgrading the devices that shipped with it.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we went from 3 to 5 screens. move everything 1 to the right	UNKNOWN	WITHOUT_CLASSIFICATION	0.989	0.000
old version remains which means we wipe old data	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
we added the fast track.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
version 7 gets rid of the special search widget.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
version 8 (froyo) has the icons all normalized. this should	UNKNOWN	WITHOUT_CLASSIFICATION	0.905	0.000
already be the case in practice but we now rely on it and dont	UNKNOWN	WITHOUT_CLASSIFICATION	0.989	0.000
resample the images each time.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
before it gets a change to get set so we need to read it here when we use it)	UNKNOWN	DESIGN	0.728	0.000
add default hotseat icons	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we bumped the version three time during jb once to update the launch flags once to	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
update the override for the default launch animation and once to set the mimetype	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
to improve startup performance	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
contact shortcuts need a different set of flags to be launched now	UNKNOWN	WITHOUT_CLASSIFICATION	0.982	0.000
the updatecontactsshortcuts change is idempotent so we can keep using it like	UNKNOWN	WITHOUT_CLASSIFICATION	0.993	0.000
back in the donut days	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
with the new shrink-wrapped and re-orderable workspaces it makes sense	UNKNOWN	WITHOUT_CLASSIFICATION	0.987	0.000
to persist workspace screens and their relative order.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this will never happen in the wild but when we switch to using workspace	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
screen ids redo the import from old launcher.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
insert new column for holding widget provider name	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
old version remains which means we wipe old data	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
insert new column for holding update timestamp	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
old version remains which means we wipe old data	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
insert new column for holding restore status	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
old version remains which means we wipe old data	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
we use the db version upgrade here to identify users who may not have seen	UNKNOWN	WITHOUT_CLASSIFICATION	0.925	0.000
clings yet (because they werent available) but for whom the clings are now	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
available (tablet users). because one of the possible cling flows (migration)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
is very destructive (wipes out workspaces) we want to prevent this from showing	UNKNOWN	DESIGN	0.726	0.000
until clear data. we do so by marking that the clings have been shown.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
no-op	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
due to a data loss bug some users may have items associated with screen ids	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
which no longer exist. since this can cause other problems and since the user	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
will never see these items anyway we use database upgrade as an opportunity to	UNKNOWN	WITHOUT_CLASSIFICATION	0.986	0.000
clean things up.	UNKNOWN	WITHOUT_CLASSIFICATION	0.985	0.000
add userid column	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
else old version remains which means we wipe old data	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
this shouldnt happen -- throw our hands up in the air and start over.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
clears all the data for a fresh start.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
default to the serial number of this user for older	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
shortcuts.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
insert new column for holding user serial number	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
old version remains which means we wipe old data	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
select and iterate through each matching widget	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
when starting from the launcher start in a new cleared task	UNKNOWN	WITHOUT_CLASSIFICATION	0.992	0.000
clear_when_task_reset cannot reset the root of a task so we	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
clear the whole thing preemptively here since	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
quickcontactactivity will finish itself when launching other	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
detail activities.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
generates a new id to use for an object in your database. this method should be only	UNKNOWN	WITHOUT_CLASSIFICATION	0.679	0.000
called from the main ui thread. as an exception we do call it when we call the	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
constructor from the worker thread however this doesnt extend until after the	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
constructor is called and we only pass a reference to launcherprovider to launcherapp	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
after that point	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
get the result	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
generates a new id to use for an workspace screen in your database. this method	UNKNOWN	WITHOUT_CLASSIFICATION	0.980	0.000
should be only called from the main ui thread. as an exception we do call it when we	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
call the constructor from the worker thread however this doesnt extend until after the	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
constructor is called and we only pass a reference to launcherprovider to launcherapp	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
after that point	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
log to disk	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
log to disk	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
get the result	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
log to disk	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
upgrade existing clock and photo frame widgets into their new widget equivalents.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
select and iterate through each matching widget	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
allocate and update database with new appwidgetid	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
original widgets might not have valid spans when upgrading	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
todo check return value	UNKNOWN	DESIGN	0.576	0.000
todo check return value	UNKNOWN	DESIGN	0.576	0.000
todo check return value	UNKNOWN	DESIGN	0.576	0.000
update max item id	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
1. ensure that externally added items have a valid item id	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
2. in the case of an app widget and if no app widget id is specified we	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
attempt allocate and bind the widget.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
add screen id if not present	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
returns true of screen id exists or if successfully added	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
get the result	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
noinspection statementwithemptybody	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
todo use multiple loaders with fall-back and transaction.	UNKNOWN	DESIGN	1.000	0.000
add the screens specified by the items above	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
ensure that the max ids are initialized	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
loads the default set of favorite packages from an xml file. @param db the database to write the values into @param res the resources @param workspaceresourceid the specific container id of items to load @param screenids the set of screenids which are used by the favorites	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
recursively load some more favorites why not?	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
assuming its a <favorite> at this point	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
this looks through the contained favorites (or meta-favorites) and	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
attempts to add them as shortcuts in the fallback groups location	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
until one is added successfully.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
folder contents are nested in this xml file	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
folder contents come from an external xml resource	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
keep track of the set of screens which need to be added to the db.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
parse folder items starting at {@link xmlpullparser} location. allow recursive includes of items.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
parse folder starting at current {@link xmlpullparser} location.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we can only have folders with >= 2 items so we need to remove the	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
folder and clean up if less than 2 items were included or some	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
failed to add and less than 2 were actually added	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
delete the folder	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if we have a single item promote it to where the folder	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
would have been.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
a meta shortcut attempts to resolve an intent specified as a uri in the xml if a	UNKNOWN	WITHOUT_CLASSIFICATION	0.970	0.000
logical choice for what shortcut should be used for that intent exists then it is	UNKNOWN	DESIGN	0.994	0.000
added. otherwise add nothing.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
verify that the result is an app and not just the resolver dialog asking which	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
app to use.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if only one of the results is a system app then choose that as the default.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
there is no logical choice for this meta-favorite so rather than making	UNKNOWN	WITHOUT_CLASSIFICATION	0.983	0.000
a bad choice just add nothing.	UNKNOWN	WITHOUT_CLASSIFICATION	0.968	0.000
if the list contains the above resolved activity then it cant be	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
resolveractivity itself.	UNKNOWN	WITHOUT_CLASSIFICATION	0.995	0.000
if no component specified try to find a shortcut to add from the uri.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
gets an appwidget provider from the given package. if the package contains more than one appwidget provider an arbitrary one is returned.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
read the extras	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
todo need to check return value	UNKNOWN	DESIGN	0.764	0.000
send a broadcast to configure the widget	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
oh well	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
ignore	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we already have a favorites database in the old provider	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
default to the serial number of this user for older	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
shortcuts.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
bogus intent?	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
no intent? no icon	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
component no longer exists.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
dedupe icons directly on the workspace	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
canonicalize	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the play store sets the package parameter but launcher	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
does not so we clear that out to keep them the same.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
also ignore intent flags for the purposes of deduping.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
in a folder preserve position	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
for items contained directly on one of the workspace screen	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
well determine their location (screen x y) in a second pass.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
folders first	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
then shortcuts	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
layout all the folders	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
hotseat items and folder items have already had their	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
location information set. nothing to be done here.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
leave the last row of icons blank on every screen	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
ensure that new screens are created to hold these icons	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
update max ids very important since we just grabbed ids from another database	UNKNOWN	WITHOUT_CLASSIFICATION	0.988	0.000
remove all the previous children that are no longer in the window	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
add all the new children that belong in the window	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
update the markers alpha	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
center the active marker	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
cancel long press for all children	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
generate an id for each view this assumes we have at most 256x256 cells	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
per workspace screen	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if the horizontal or vertical span is set to -1 it is taken to	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
mean that it spans the extent of the celllayout	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
clears all the key listeners for the individual icons.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
initial values correspond to widthspecmode == measurespec.exactly	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
we only intercept the touch if we are tapping in empty space after the final row	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
add a little bit of buffer if there is room for another row	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
always assume were working with the smallest span to make sure we	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
reserve enough space in both orientations	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
always round up to next largest cell	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
start dragging the specified child @param child the child that is being dragged	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
estimates the number of cells that the specified width would take up.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we dont show the next/previous pages any more so we use the full width minus the	UNKNOWN	WITHOUT_CLASSIFICATION	0.958	0.000
padding	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we know that we have to fit n cells with n-1 width gaps so we just juggle to solve for n	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
we dont do anything fancy to determine if we squeeze another row in.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
estimates the number of cells that the specified height would take up.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the space for a page is the height - top padding (current page) - bottom padding (current	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
page)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we know that we have to fit n cells with n-1 height gaps so we juggle to solve for n	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we dont do anything fancy to determine if we squeeze another row in.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
returns an estimated center position of the cell at the specified index	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
estimates the width that the number of hspan cells will take up.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
todo we need to take widthgap into effect	UNKNOWN	DESIGN	0.764	0.000
estimates the height that the number of vspan cells will take up.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
todo we need to take heightgap into effect	UNKNOWN	DESIGN	0.764	0.000
update the drawing caches	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
cancel long press for all children	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
determine the max width of all the rows and center accordingly	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
clears all the key listeners for the individual widgets.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we only intercept the touch if we are tapping in empty space after the final row	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
ensure we are using the right text size	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
center horizontally	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
remove the longpress detection timer.	UNKNOWN	WITHOUT_CLASSIFICATION	0.989	0.000
we eat up the touch events here since the pagedview (which uses the same swiping	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
touch code as workspace previously) uses onintercepttouchevent() to determine when	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
the user is scrolling between pages. this means that if the pages themselves dont	UNKNOWN	WITHOUT_CLASSIFICATION	0.961	0.000
handle touch events it gets forwarded up to pagedview itself and its own	UNKNOWN	WITHOUT_CLASSIFICATION	0.973	0.000
ontouchevent() handling will prevent further intercept touch events from being called	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
(its the same view in that case). this is not ideal but to prevent more changes	UNKNOWN	WITHOUT_CLASSIFICATION	0.671	0.000
we just always mark the touch event as handled.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
wait no longer than 1sec at a time	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
ignore	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
fail if we dont have any apps	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
sort the applications by name	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
create the applicationinfos	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
this builds the icon bitmaps.	UNKNOWN	WITHOUT_CLASSIFICATION	0.994	0.000
check if any workspace icons overlap with each other	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
clears all the sbg data structures	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
runs the specified runnable immediately if called from the main thread otherwise it is posted on the main thread handler.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if we are on the worker thread post onto the main handler	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
runs the specified runnable immediately if called from the worker thread otherwise it is posted on the worker thread handler.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if we are not on the worker thread then post to the worker handler	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
lock on the app so that we dont try and get the items while apps are being added	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
flush the launchermodel worker thread so that if we just did another	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
processinstallshortcut we give it time for its shortcut to get added to the	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
database (getitemsinlocalcoordinates reads the database)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
try adding to the workspace screens incrementally starting at the default or center	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
screen and alternating between +1 -1 +2 -2 etc. (using ~ ceil(i/2f)(-1)^(i-1))	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
update the launcher db	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
process the updated package state	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
process the updated package badge	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
process the newly added applications and add them to the database first	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
process the newly added applications and add them to the database first	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
get the list of workspace screens. we need to append to this list and	UNKNOWN	WITHOUT_CLASSIFICATION	0.992	0.000
can not use sbgworkspacescreens because loadworkspace() may not have been	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
called.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
short-circuit this logic if the icon exists somewhere on the workspace	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
only installshortcutreceiver sends us shortcutinfos ignore them	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
add this icon to the db creating a new page if necessary. if there	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
is only the empty page then we just add items to the first page.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
otherwise we add them to the next pages.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
if we cant find a valid position then just add a new screen.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this takes time so we need to re-queue the add until the new	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
page is added. create as many screens as necessary to satisfy	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
the startsearchpageindex.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
save the screen id for binding in the workspace	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
find the coordinate again	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
add the shortcut to the db	UNKNOWN	WITHOUT_CLASSIFICATION	0.987	0.000
save the shortcutinfo for binding in the workspace	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
update the workspace screens	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
get the list of workspace screens. we need to append to this list and	UNKNOWN	WITHOUT_CLASSIFICATION	0.992	0.000
can not use sbgworkspacescreens because loadworkspace() may not have been	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
called.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
short-circuit this logic if the icon exists somewhere on the workspace	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
only installshortcutreceiver sends us shortcutinfos ignore them	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
add this icon to the db creating a new page if necessary. if there	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
is only the empty page then we just add items to the first page.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
otherwise we add them to the next pages.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
if we cant find a valid position then just add a new screen.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this takes time so we need to re-queue the add until the new	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
page is added. create as many screens as necessary to satisfy	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
the startsearchpageindex.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
save the screen id for binding in the workspace	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
find the coordinate again	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
add the shortcut to the db	UNKNOWN	WITHOUT_CLASSIFICATION	0.987	0.000
save the shortcutinfo for binding in the workspace	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
update the workspace screens	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
clear any deferred bind runnables	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
remove any queued bind runnables	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
unbind all the workspace items	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
unbinds all the sbgworkspaceitems and sbgappwidgets on the main thread	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
ensure that we dont use the same workspace items data structure on the main thread	UNKNOWN	WITHOUT_CLASSIFICATION	0.993	0.000
by making a copy of workspace items first.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
adds an item to the db if it was not created previously or move it to a new <container screen cellx celly>	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
from all apps	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
from somewhere else	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
check all the data is consistent	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
for all intents and purposes this is the same object	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
the modelitem needs to match up perfectly with item if our model is	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
to be consistent with the database-- for now just require	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
modelitem == item or the equality check above	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
lock on mbglock after the db operation	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
item is in a folder make sure this folder exists	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
an items container is being set to a that of an item which is not in	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the list of folders.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
query for the set of apps	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
items are added/removed from the corresponding folderinfo elsewhere such	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
as in workspace.ondrop. here we just add/remove them from the list of items	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
that are on the desktop as appropriate	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
move an item in the db to a new <container screen cellx celly>	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
move items in the db to a new <container screen cellx celly>. we assume that the cellx celly have already been updated on the iteminfos.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
move and/or resize item in the db to a new <container screen cellx celly spanx spany>	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
update an item to the database in a specified container.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
returns true if the shortcuts already exists in the database. we identify a shortcut by its title and intent.	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
if component is not null an intent with null package will produce	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the same result and should also be a match.	UNKNOWN	WITHOUT_CLASSIFICATION	0.992	0.000
returns true if the promise shortcuts with the same package name exists on the workspace.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
returns an iteminfo array containing all the items in the launchermodel. the iteminfo.id is not set through this function.	UNKNOWN	WITHOUT_CLASSIFICATION	0.995	0.000
skip if user has been deleted.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
find a folder in the db creating the folderinfo if necessary and adding it to folderlist.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
add an item to the database in a specified container. sets the container screen cellx and celly fields of the item. also assigns an id to the item.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
lock on mbglock after the db operation	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
fall through	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
adding an item to a folder that doesnt exist.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
lock on mbglock after the db operation	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
fall through	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
adding an item to a folder that doesnt exist.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
creates a new unique child id for a given cell span across all layouts.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
removes all the items from the database corresponding to the specified package.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
removes the specified item from the database @param context @param item	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
removes the specified items from the database @param context @param item	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
lock on mbglock after the db operation	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we are deleting a folder which still contains items that	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
think they are contained by that folder.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
lock on mbglock after the db operation	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we are deleting a folder which still contains items that	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
think they are contained by that folder.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
update the order of the workspace screens in the database. the array list contains a list of screen ids in the order that they should appear.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
log to disk	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
remove any negative screen ids -- these arent persisted	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
clear the table	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
clear the table	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
remove the contents of the specified folder from the database	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
lock on mbglock after the db operation	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
lock on mbglock after the db operation	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
lock on mbglock after the db operation	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
lock on mbglock after the db operation	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
set this as the current launcher activity object for the loader.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
only rebind if we support removable storage. it catches the	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
case where	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
apps on the external sd card need to be reloaded	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
if we are replacing then just update the packages in the list	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
call from the handler for action_package_added action_package_removed and action_package_changed.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
if we have changed locale we need to clear out the labels in all apps/workspace.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
check if configuration change was an mcc/mnc change which would affect app resources	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
and we would need to clear out the labels in all apps/workspace. same handling as	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
above for action_locale_changed	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
update previousconfig	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
do this here because if the launcher activity is running it will be restarted.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
if its not running startloaderfrombackground will merely tell it that it needs	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
to reload.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
stop any existing loaders first so they dont set mallappsloaded or	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
mworkspaceloaded to true later	UNKNOWN	WITHOUT_CLASSIFICATION	0.994	0.000
when the launcher is in the background its possible for it to miss paired configuration changes. so whenever we trigger the loader from the background tell the launcher that it needs to re-run the loader when it comes back instead of doing it now.	UNKNOWN	WITHOUT_CLASSIFICATION	0.994	0.000
only actually run the loader if theyre not paused.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if there is already a loader task running tell it to stop.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
returns true if islaunching() was true on the old task	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
clear any deferred bind-runnables from the synchronized load process	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we must do this before any loading/binding is scheduled below.	UNKNOWN	WITHOUT_CLASSIFICATION	0.984	0.000
dont bother to start the thread if we know its not going to do anything	UNKNOWN	WITHOUT_CLASSIFICATION	0.995	0.000
if there is already one running tell it to stop.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
also dont downgrade islaunching if were already running	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
post the remaining side pages to be loaded	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
loads the workspace screens db into a map of rank -> screenid	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
log to disk	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
returns whether this is an upgrade path	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
load the workspace	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
bind the workspace	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
wait until the either were stopped or the other threads are done.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this way we dont start loading all apps until the workspace has settled	UNKNOWN	WITHOUT_CLASSIFICATION	0.984	0.000
down.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
just in case mflushingworkerthread changes but we arent woken up	UNKNOWN	WITHOUT_CLASSIFICATION	0.995	0.000
ensure that we have a valid page index to load synchronously	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
ensure that we dont try and bind a specified page when the pages have not been	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
loaded already (we should load everything asynchronously in that case)	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
ensure that we are never running the background loading at this point since	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we also touch the background collections	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
xxx throw an exception if we are already loading (since we touch the worker thread	UNKNOWN	WITHOUT_CLASSIFICATION	0.988	0.000
data structures we cant allow any other thread to touch that data but because	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this call is synchronous we can get away with not locking).	UNKNOWN	WITHOUT_CLASSIFICATION	0.960	0.000
the launchermodel is static in the launcherappstate and mhandler may have queued	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
operations from the previous activity. we need to ensure that all queued operations	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
are executed before any synchronous binding work is done.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
divide the set of loaded items into those that we are binding synchronously and	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
everything else that is to be bound normally (asynchronously).	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
xxx for now continue posting the binding of allapps as there are other issues that	UNKNOWN	WITHOUT_CLASSIFICATION	0.992	0.000
arise from that.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
optimize for end-user experience if the launcher is up and running with the	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
all apps interface in the foreground load all apps first. otherwise load the	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
workspace first (default).	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
elevate priority when home launches for the first time to avoid	UNKNOWN	WITHOUT_CLASSIFICATION	0.959	0.000
starving at boot time. staring at a blank home is not cool.	UNKNOWN	WITHOUT_CLASSIFICATION	0.782	0.000
whew! hard work done. slow us down and wait until the ui thread has	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
settled down.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
second step	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
restore the default thread priority after we are done loading items	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
update the saved icons if necessary	UNKNOWN	WITHOUT_CLASSIFICATION	0.991	0.000
ensure that all the applications that are in the system are	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
represented on the home screen.	UNKNOWN	WITHOUT_CLASSIFICATION	0.977	0.000
clear out this reference otherwise we end up holding it until all of the	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
callback runnables are done.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
if we are still the last one to be scheduled remove ourselves.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
gets the callbacks object. if weve been stopped or if the launcher object has somehow been garbage collected return null instead. pass in the callbacks object that was around when the deferred message was scheduled and if theres a new callbacks object around then also return null. this will save us from calling onto it with data that will be ignored.	UNKNOWN	WITHOUT_CLASSIFICATION	0.545	0.000
cross reference all the applications in our apps list with items in the workspace	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we are missing an application icon so add this to the workspace	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
this is a rare event so lets log it	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
check & update map of whats occupied used to discard overlapping/invalid items	UNKNOWN	WITHOUT_CLASSIFICATION	0.995	0.000
skip further checking if it is not the hotseat or workspace container	UNKNOWN	WITHOUT_CLASSIFICATION	0.990	0.000
returns whether this is an upgrade path	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
log to disk	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
append the users launcher2 shortcuts	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
make sure the default workspace is loaded	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this code path is for our old migration code and should no longer be exercised	UNKNOWN	WITHOUT_CLASSIFICATION	0.982	0.000
log to disk	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
+1 for the hotseat (it can be larger than the workspace)	UNKNOWN	WITHOUT_CLASSIFICATION	0.989	0.000
load workspace in reverse order to ensure that latest items are loaded first (and	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
before any earlier duplicates)	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
final int uriindex = c.getcolumnindexorthrow(launchersettings.favorites.uri)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
final int displaymodeindex = c.getcolumnindexorthrow(	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
launchersettings.favorites.display_mode)	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
user has been deleted remove the item.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
no special handling necessary for this item	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
we allow auto install apps to have their intent	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
updated after an install.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the app is installed but the component is no	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
longer available.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
no special handling necessary for this item	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
package is not yet available but might be	UNKNOWN	WITHOUT_CLASSIFICATION	0.973	0.000
installed later.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
restore has started once.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
app restore has started. update the flag	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
do not wait for external media load anymore.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
log the invalid package and remove it	UNKNOWN	WITHOUT_CLASSIFICATION	0.985	0.000
sdcard is not ready yet. package might get available	UNKNOWN	WITHOUT_CLASSIFICATION	0.990	0.000
once it is ready.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
add the icon on the workspace anyway.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
for shortcuts with no component keep them as they are	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
dont restore items for other profiles.	UNKNOWN	WITHOUT_CLASSIFICATION	0.990	0.000
app shortcuts that used to be automatically added to launcher	UNKNOWN	WITHOUT_CLASSIFICATION	0.995	0.000
didnt always have the correct intent flags set so do that	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
here	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
check & update map of whats occupied	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
item is in a user folder	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
now that weve loaded everthing re-save it with the	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
icon in case it disappears somehow.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
check & update map of whats occupied	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
no special handling required for restored folders	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
read all launcher-specific widget details	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
if provider was not previously ready update the	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
status and ui flag.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
id would be valid only if the widget restore broadcast was received.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
restore has started once.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
app restore has started. update the flag	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
check & update map of whats occupied	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
break early if weve stopped loading	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
remove dead items	UNKNOWN	WITHOUT_CLASSIFICATION	0.977	0.000
dont notify content observers	UNKNOWN	WITHOUT_CLASSIFICATION	0.964	0.000
update restored items that no longer require special handling	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if were importing we use the old screen order.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
log to disk	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
update the max item id after we load an old db	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if were importing we use the old screen order.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
log to disk	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
remove any empty screens	UNKNOWN	WITHOUT_CLASSIFICATION	0.987	0.000
if there are any empty screens remove them and update.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
log to disk	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
filters the set of items who are directly or indirectly (via another container) on the specified screen.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
purge any null iteminfos	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
order the set of items by their containers first this allows use to walk through the	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
list sequentially build up a list of containers that are in the specified screen	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
as well as all items in those containers.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
filters the set of widgets which are on the specified screen.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
filters the set of folders which are on the specified screen.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
sorts the set of items by hotseat workspace (spatially from top to bottom left to right)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
xxx review this	UNKNOWN	WITHOUT_CLASSIFICATION	0.590	0.000
+1 hotseat	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
+1 hotseat	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
bind the workspace items	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
bind the folders	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
bind the widgets one at a time	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
binds all loaded data to actual views on the main thread.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
dont use these two variables in any of the callback runnables.	UNKNOWN	WITHOUT_CLASSIFICATION	0.785	0.000
otherwise we hold a reference to them.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this launcher has exited and nobody bothered to tell us. just bail.	UNKNOWN	WITHOUT_CLASSIFICATION	0.983	0.000
save a copy of all the bg-thread collections	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
there may be no workspace screens (just hotseat items and an empty page).	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
load all the items that are on the current page first (and in the process unbind	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
all the existing workspace items before we call startbinding() below.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
separate the items that are on the current screen and all the other remaining items	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
tell the workspace that were about to start binding items	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
load items on the current page	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
load all the remaining pages (if we are loading synchronously we want to defer this	UNKNOWN	WITHOUT_CLASSIFICATION	0.975	0.000
work until after the first render)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
tell the workspace that were done binding items	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if were profiling ensure this is the last thing in the queue.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if were profiling ensure this is the last thing in the queue.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this launcher has exited and nobody bothered to tell us. just bail.	UNKNOWN	WITHOUT_CLASSIFICATION	0.983	0.000
shallow copy	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this launcher has exited and nobody bothered to tell us. just bail.	UNKNOWN	WITHOUT_CLASSIFICATION	0.983	0.000
clear the list of apps	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
huh? shouldnt this be inside the runnable below?	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
post callback on main thread	UNKNOWN	WITHOUT_CLASSIFICATION	0.993	0.000
workaround to re-check unrestored items in-case they were installed but the package-add runnable was missed by the launcher.	UNKNOWN	WITHOUT_CLASSIFICATION	0.956	0.000
ensure that we add all the workspace applications to the db	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
update the launcher db to reflect the changes	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
mark all packages in the broadcast to be removed	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
mark disabled packages in the broadcast to be removed	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
remove all the components associated with this package	UNKNOWN	WITHOUT_CLASSIFICATION	0.986	0.000
remove all the specific components	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
remove any queued items from the install queue	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
call the components-removed callback	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
write all the logs to disk	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
update the new data	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
returns a list of resolveinfos/appwindowinfos in sorted order	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
make an shortcutinfo object for a restored application or shortcut item that points to a package that is not yet installed on the system.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
make an intent object for a restored application or shortcut item that points to the market page for the item.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this is called from the code that adds shortcuts from the intent receiver. this doesnt have a cursor but	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
make an shortcutinfo object for a shortcut that is an application. if c is not null then it will be used to fill in missing data like the title and icon.	UNKNOWN	WITHOUT_CLASSIFICATION	0.644	0.000
the resource -- this may implicitly give us back the fallback icon	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
but dont worry about that. all were doing with usingfallbackicon is	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
to avoid saving lots of copies of that in the database and most apps	UNKNOWN	WITHOUT_CLASSIFICATION	0.982	0.000
have icons anyway.	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
the db	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the fallback icon	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
from the cache.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
from the resource	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
from the db	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
fall back to the class name of the activity	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we need to check for action_main otherwise getcomponent() might	UNKNOWN	WITHOUT_CLASSIFICATION	0.973	0.000
return null for some shortcuts (for instance for shortcuts to	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
web pages.)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
placeholder shortcuts get special treatment let them through too.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
make an shortcutinfo object for a shortcut that isnt an application.	UNKNOWN	WITHOUT_CLASSIFICATION	0.948	0.000
non-app shortcuts are only supported for current user.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
todo if theres an explicit component and we cant install that delete it.	UNKNOWN	WITHOUT_CLASSIFICATION	0.987	0.000
the resource	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
drop this. we have other places to look for icons	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the db	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the fallback icon	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
suppress dead code warning	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
attempts to find an appwidgetproviderinfo that matches the given component.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if the intent is null we cant construct a valid shortcutinfo so we return null	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
only support intents for current user for now. intents sent from other	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
users wouldnt get here without intent forwarding anyway.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
if apps cant be on sd dont even bother.	UNKNOWN	WITHOUT_CLASSIFICATION	0.983	0.000
if this icon doesnt have a custom icon check to see	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
whats stored in the db and if it doesnt match what	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
were going to show store what we are going to show back	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
into the db. we do this so when were loading if the	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
package manager cant find an icon (for example because	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the app is on sd) then we can use that instead.	UNKNOWN	WITHOUT_CLASSIFICATION	0.993	0.000
this is slower than is ideal but this only happens once	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
or when the app is updated with a new icon.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
return an existing folderinfo object if we have encountered this id previously or make a new one.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
see if a placeholder was created for us already	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
no placeholder -- create a new instance	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
todo need to figure out rules for sorting	UNKNOWN	DESIGN	0.881	0.000
profiles this puts work second.	UNKNOWN	WITHOUT_CLASSIFICATION	0.979	0.000
todo need to figure out rules for sorting	UNKNOWN	DESIGN	0.881	0.000
profiles this puts work second.	UNKNOWN	WITHOUT_CLASSIFICATION	0.979	0.000
returns whether this is an upgrade path	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
load the workspace	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
bind the workspace	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
wait until the either were stopped or the other threads are done.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this way we dont start loading all apps until the workspace has settled	UNKNOWN	WITHOUT_CLASSIFICATION	0.984	0.000
down.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
just in case mflushingworkerthread changes but we arent woken up	UNKNOWN	WITHOUT_CLASSIFICATION	0.995	0.000
wait no longer than 1sec at a time	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
ignore	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
ensure that we have a valid page index to load synchronously	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
ensure that we dont try and bind a specified page when the pages have not been	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
loaded already (we should load everything asynchronously in that case)	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
ensure that we are never running the background loading at this point since	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we also touch the background collections	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
xxx throw an exception if we are already loading (since we touch the worker thread	UNKNOWN	WITHOUT_CLASSIFICATION	0.988	0.000
data structures we cant allow any other thread to touch that data but because	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this call is synchronous we can get away with not locking).	UNKNOWN	WITHOUT_CLASSIFICATION	0.960	0.000
the launchermodel is static in the launcherappstate and mhandler may have queued	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
operations from the previous activity. we need to ensure that all queued operations	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
are executed before any synchronous binding work is done.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
divide the set of loaded items into those that we are binding synchronously and	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
everything else that is to be bound normally (asynchronously).	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
xxx for now continue posting the binding of allapps as there are other issues that	UNKNOWN	WITHOUT_CLASSIFICATION	0.992	0.000
arise from that.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
optimize for end-user experience if the launcher is up and running with the	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
all apps interface in the foreground load all apps first. otherwise load the	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
workspace first (default).	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
elevate priority when home launches for the first time to avoid	UNKNOWN	WITHOUT_CLASSIFICATION	0.959	0.000
starving at boot time. staring at a blank home is not cool.	UNKNOWN	WITHOUT_CLASSIFICATION	0.782	0.000
whew! hard work done. slow us down and wait until the ui thread has	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
settled down.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
second step	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
restore the default thread priority after we are done loading items	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
update the saved icons if necessary	UNKNOWN	WITHOUT_CLASSIFICATION	0.991	0.000
ensure that all the applications that are in the system are	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
represented on the home screen.	UNKNOWN	WITHOUT_CLASSIFICATION	0.977	0.000
clear out this reference otherwise we end up holding it until all of the	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
callback runnables are done.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
if we are still the last one to be scheduled remove ourselves.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
gets the callbacks object. if weve been stopped or if the launcher object has somehow been garbage collected return null instead. pass in the callbacks object that was around when the deferred message was scheduled and if theres a new callbacks object around then also return null. this will save us from calling onto it with data that will be ignored.	UNKNOWN	WITHOUT_CLASSIFICATION	0.545	0.000
cross reference all the applications in our apps list with items in the workspace	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we are missing an application icon so add this to the workspace	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
this is a rare event so lets log it	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
check & update map of whats occupied used to discard overlapping/invalid items	UNKNOWN	WITHOUT_CLASSIFICATION	0.995	0.000
skip further checking if it is not the hotseat or workspace container	UNKNOWN	WITHOUT_CLASSIFICATION	0.990	0.000
check if any workspace icons overlap with each other	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
clears all the sbg data structures	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
returns whether this is an upgrade path	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
log to disk	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
append the users launcher2 shortcuts	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
make sure the default workspace is loaded	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this code path is for our old migration code and should no longer be exercised	UNKNOWN	WITHOUT_CLASSIFICATION	0.982	0.000
log to disk	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
+1 for the hotseat (it can be larger than the workspace)	UNKNOWN	WITHOUT_CLASSIFICATION	0.989	0.000
load workspace in reverse order to ensure that latest items are loaded first (and	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
before any earlier duplicates)	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
final int uriindex = c.getcolumnindexorthrow(launchersettings.favorites.uri)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
final int displaymodeindex = c.getcolumnindexorthrow(	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
launchersettings.favorites.display_mode)	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
user has been deleted remove the item.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
no special handling necessary for this item	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
we allow auto install apps to have their intent	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
updated after an install.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the app is installed but the component is no	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
longer available.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
no special handling necessary for this item	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
package is not yet available but might be	UNKNOWN	WITHOUT_CLASSIFICATION	0.973	0.000
installed later.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
restore has started once.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
app restore has started. update the flag	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
do not wait for external media load anymore.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
log the invalid package and remove it	UNKNOWN	WITHOUT_CLASSIFICATION	0.985	0.000
sdcard is not ready yet. package might get available	UNKNOWN	WITHOUT_CLASSIFICATION	0.990	0.000
once it is ready.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
add the icon on the workspace anyway.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
for shortcuts with no component keep them as they are	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
dont restore items for other profiles.	UNKNOWN	WITHOUT_CLASSIFICATION	0.990	0.000
app shortcuts that used to be automatically added to launcher	UNKNOWN	WITHOUT_CLASSIFICATION	0.995	0.000
didnt always have the correct intent flags set so do that	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
here	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
check & update map of whats occupied	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
item is in a user folder	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
now that weve loaded everthing re-save it with the	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
icon in case it disappears somehow.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
check & update map of whats occupied	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
no special handling required for restored folders	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
read all launcher-specific widget details	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
if provider was not previously ready update the	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
status and ui flag.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
id would be valid only if the widget restore broadcast was received.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
restore has started once.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
app restore has started. update the flag	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
check & update map of whats occupied	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
break early if weve stopped loading	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
remove dead items	UNKNOWN	WITHOUT_CLASSIFICATION	0.977	0.000
dont notify content observers	UNKNOWN	WITHOUT_CLASSIFICATION	0.964	0.000
update restored items that no longer require special handling	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if were importing we use the old screen order.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
log to disk	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
update the max item id after we load an old db	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if were importing we use the old screen order.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
log to disk	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
remove any empty screens	UNKNOWN	WITHOUT_CLASSIFICATION	0.987	0.000
if there are any empty screens remove them and update.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
log to disk	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
filters the set of items who are directly or indirectly (via another container) on the specified screen.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
purge any null iteminfos	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
order the set of items by their containers first this allows use to walk through the	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
list sequentially build up a list of containers that are in the specified screen	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
as well as all items in those containers.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
filters the set of widgets which are on the specified screen.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
filters the set of folders which are on the specified screen.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
sorts the set of items by hotseat workspace (spatially from top to bottom left to right)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
xxx review this	UNKNOWN	WITHOUT_CLASSIFICATION	0.590	0.000
+1 hotseat	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
+1 hotseat	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
bind the workspace items	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
bind the folders	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
bind the widgets one at a time	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
binds all loaded data to actual views on the main thread.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
dont use these two variables in any of the callback runnables.	UNKNOWN	WITHOUT_CLASSIFICATION	0.785	0.000
otherwise we hold a reference to them.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this launcher has exited and nobody bothered to tell us. just bail.	UNKNOWN	WITHOUT_CLASSIFICATION	0.983	0.000
save a copy of all the bg-thread collections	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
there may be no workspace screens (just hotseat items and an empty page).	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
load all the items that are on the current page first (and in the process unbind	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
all the existing workspace items before we call startbinding() below.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
separate the items that are on the current screen and all the other remaining items	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
tell the workspace that were about to start binding items	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
load items on the current page	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
load all the remaining pages (if we are loading synchronously we want to defer this	UNKNOWN	WITHOUT_CLASSIFICATION	0.975	0.000
work until after the first render)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
tell the workspace that were done binding items	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if were profiling ensure this is the last thing in the queue.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if were profiling ensure this is the last thing in the queue.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this launcher has exited and nobody bothered to tell us. just bail.	UNKNOWN	WITHOUT_CLASSIFICATION	0.983	0.000
shallow copy	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this launcher has exited and nobody bothered to tell us. just bail.	UNKNOWN	WITHOUT_CLASSIFICATION	0.983	0.000
clear the list of apps	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
query for the set of apps	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
fail if we dont have any apps	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
sort the applications by name	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
create the applicationinfos	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
this builds the icon bitmaps.	UNKNOWN	WITHOUT_CLASSIFICATION	0.994	0.000
huh? shouldnt this be inside the runnable below?	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
post callback on main thread	UNKNOWN	WITHOUT_CLASSIFICATION	0.993	0.000
write all the logs to disk	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
update the new data	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
ensure that we add all the workspace applications to the db	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
update the launcher db to reflect the changes	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
mark all packages in the broadcast to be removed	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
mark disabled packages in the broadcast to be removed	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
remove all the components associated with this package	UNKNOWN	WITHOUT_CLASSIFICATION	0.986	0.000
remove all the specific components	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
remove any queued items from the install queue	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
call the components-removed callback	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
return early if this is not initiated from a touch	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
return early if we are still animating the pages	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
when we have exited all apps or are in transition disregard long clicks	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
return if global dragging is not enabled	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
determines if we should change the touch state to start scrolling after the user moves their touch point too far.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
determines if we should change the touch state to start dragging after the user moves their touch point far enough.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
locally do absolute value. mlastmotionx is set to the y value of the down event.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
drag if the user moved far enough along the y axis	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
cancel any pending long press	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
try canceling the long press. it could also have been scheduled	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
by a distant descendant so use the mallowlongpress flag to block	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
everything	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
find and return partner details or {@code null} if none exists.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
we initialize customizable fields to be invalid	UNKNOWN	WITHOUT_CLASSIFICATION	0.993	0.000
get the hover color	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
remove the text in the phone ui in landscape	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
acceptdrop is called just before ondrop. we do the work here rather than	UNKNOWN	WITHOUT_CLASSIFICATION	0.935	0.000
in ondrop because it allows us to reject the drop (by returning false)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
so that the object being dragged isnt removed from the drag source.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
there is no post-drop animation so clean up the dragview now	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
hide this button unless we are dragging something from allapps	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
empty and a re-bind occurred	UNKNOWN	WITHOUT_CLASSIFICATION	0.994	0.000
restore the previous launcher state	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
check for special shortcuts	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
check for abandoned promise	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
start activities	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
or .detectall() for all detectable problems	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
determine the dynamic grid properties	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
lazy-initialize the dynamic grid	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
the launcherapplication should call this but in case of instrumentation it might not be present yet	UNKNOWN	WITHOUT_CLASSIFICATION	0.623	0.000
if we are getting an oncreate we can actually preempt onresume and unset mpaused here	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this also ensures that any synchronous binding below doesnt re-trigger another	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
launchermodel load.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if the user leaves launcher then we should just load items asynchronously when	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
they return.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we only load the page synchronously if the user rotates (or triggers a	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
configuration change) while launcher is in the foreground	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
for handling default keys	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
on large interfaces we want the screen to auto-rotate based on the current orientation	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
to be overriden by subclasses to hint to launcher that we have custom content	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
to be overridden by subclasses to populate the custom content container and call {@link #addtocustomcontentpage}. this will only be invoked if {@link #hascustomcontenttoleft()} is {@code true}.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the animated view may be null in the case of a rotation during widget configuration	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
invoked by subclasses to signal a change to the {@link #addcustomcontenttoleft} value to ensure the custom content page is added or removed if necessary.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
not bound yet wait for bindscreens to be called.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
create the custom content page and call the subclass to populate it.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
recursive but now with a locale configuration	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
recursive but now with a locale configuration	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
ignore	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
ignore	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
ignore	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
ignore	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
noinspection resultofmethodcallignored	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
ignore	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we prevent dragging when we are loading the workspace as it is possible to pick up a view	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
that is subsequently removed from the workspace in startbinding().	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
view.generateviewid() is not available. the following fallback logic is a copy	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
of its implementation.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
aapt-generated ids have the high byte nonzero clamp to the range under that.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
roll over to 1 not 0.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
this cast is safe given the > 2b range for int.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
returns whether we should delay spring loaded mode -- for shortcuts and widgets that have a configuration step this allows the proper animations to run after other transitions.	UNKNOWN	WITHOUT_CLASSIFICATION	0.626	0.000
when the screen id represents an actual screen (as opposed to a rank) we make sure	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
that the drop page actually exists.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
before adding this resetaddinfo() after a shortcut was added to a workspace screen	UNKNOWN	WITHOUT_CLASSIFICATION	0.956	0.000
if you turned the screen off and then back while in all apps launcher would not	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
return to the workspace. clearing maddinfo.container here fixes this issue	UNKNOWN	WITHOUT_CLASSIFICATION	0.936	0.000
reset the startactivity waiting flag	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
we have special handling for widgets	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
no need to remove the empty screen if were mid-binding as the	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the bind will not add the empty screen.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
when the screen id represents an actual screen (as opposed to a rank)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we make sure that the drop page actually exists.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
update the widget view.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
leave the widget in the pending state if the user canceled the configure.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the pattern used here is that a user picks a specific application	UNKNOWN	WITHOUT_CLASSIFICATION	0.951	0.000
which depending on the target might need to create the actual target.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
for example the user would pick_shortcut for music playlist and we	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
launch over to the music app to actually create_shortcut.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
check to see if a given screen id exists. if not create it at the end return the new id. @param screenid the screen id to check @return the new screen or screenid if it exists	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
its possible that the add screen was removed because it was	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
background was set to gradient in onpause() restore to black if in all apps.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we might have postponed some bind calls until onresume (see waituntilresume) --	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
execute them here	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
reset the pressed state of icons that were locked in the press state while activities	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
were launching	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
resets the previous workspace icon press state	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
it is possible that widgets can receive updates while launcher is not in the foreground.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
consequently the widgets will be inflated in the orientation of the foreground activity	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
(framework issue). on resuming we ensure that any widgets are inflated for the current	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
orientation.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
process any items that were added while launcher was away.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
intent idlescreenintent = new intent(appinterface.cat_idle_screen_action)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
idlescreenintent.putextra(screen_idle true)	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
og.d(tagbroadcasting home idle screen intent )	UNKNOWN	WITHOUT_CLASSIFICATION	0.983	0.000
sendbroadcast(idlescreenintent)	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
if we are resuming and the custom content is the current page we call onshow().	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
it is also possible that onshow will instead be called slightly after first layout	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if pagedview#setrestorepage was set to the custom content page in oncreate().	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
show oobe	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
ensure that items added to launcher are queued until launcher returns	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we call onhide() aggressively. the custom content callbacks should be able to	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
debounce excess onhide calls.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
change to false to hide all apps on the overview pane	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the custom content needs to offset its content to account for the qsb	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
flag the loader to stop early before switching	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we cant hide the ime if it was forced open. so dont bother	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
something usable has been typed - start a search	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
the typed text will be retrieved and cleared by	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
showsearchdialog()	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if there are multiple keystrokes before the search dialog takes focus	UNKNOWN	WITHOUT_CLASSIFICATION	0.995	0.000
onsearchrequested() will be called for every keystroke	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
but it is idempotent so its fine.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
eat the long press event so the keyboard doesnt come up.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
given the integer (ordinal) value of a state enum instance convert it to a variable of type state	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
restores the previous state if it exists. @param savedstate the previous state.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
restore the appscustomize tab	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
finds all the views we need and configure them properly.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
setup the drag layer	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
setup the workspace	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
get the search/delete bar	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
setup appscustomize	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
setup the drag controller (drop targets have to be added in reverse order in priority)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
creates a view representing a shortcut. @param info the data structure describing the shortcut. @return a view inflated from r.layout.application.	UNKNOWN	WITHOUT_CLASSIFICATION	0.993	0.000
creates a view representing a shortcut inflated from the specified resource. @param layoutresid the id of the xml layout used to create the shortcut. @param parent the group the shortcut belongs to. @param info the data structure describing the shortcut. @return a view inflated from layoutresid.	UNKNOWN	DESIGN	0.979	0.000
add a shortcut to the workspace. @param data the intent describing the shortcut. @param cellinfo the position on screen where to create the shortcut.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
the app is trying to add a shortcut without sufficient permissions	UNKNOWN	WITHOUT_CLASSIFICATION	0.954	0.000
first we check if we already know the exact location where we want to add this item.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
if appropriate either create a folder or add to an existing folder	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
when dragging and dropping just find the closest free spot	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
we want to account for the extra amount of padding that we are adding to the widget	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
to ensure that it gets the full amount of space that it has requested	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
add a widget to the workspace. @param appwidgetid the app widget id @param cellinfo the position on screen where to create the widget.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
calculate the grid spans needed to fit this widget	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
try finding open space on launcher screen	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we have saved the position to which the widget was dragged-- this really only matters	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
if we are placing widgets on a spring-loaded screen	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
when dragging and dropping just find the closest free spot	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
deleting an app widget id is a void call but writes to disk before returning	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
to the caller	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
build launcher-specific widget info and save to database	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
perform actual inflation because were live	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the appwidgethostview has already been inflated and instantiated	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
reset allapps to its initial state only if we are not in the middle of	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
processing a multi-step drop	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
listen for broadcasts related to user-presence	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
for handling managed profiles	UNKNOWN	WITHOUT_CLASSIFICATION	0.990	0.000
sets up transparent navigation and status bars in lmp. this method is a no-op for other platform versions.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
todo(sansid) use the apis directly when compiling against l sdk.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
currently we use reflection to access the flags and the api to set the transparency	UNKNOWN	WITHOUT_CLASSIFICATION	0.992	0.000
on the system bars.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the following code used to be in onresume but it turns out onresume is called when	UNKNOWN	WITHOUT_CLASSIFICATION	0.980	0.000
youre in all apps and click home to go to the workspace. onwindowvisibilitychanged	UNKNOWN	WITHOUT_CLASSIFICATION	0.994	0.000
is a more appropriate event to handle	UNKNOWN	WITHOUT_CLASSIFICATION	0.935	0.000
we want to let launcher draw itself at least once before we force it to build	UNKNOWN	WITHOUT_CLASSIFICATION	0.910	0.000
layers on all the workspace pages so that transitioning to launcher from other	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
apps is nice and speedy.	UNKNOWN	WITHOUT_CLASSIFICATION	0.994	0.000
we delay the layer building a bit in order to give	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
other message processing a time to run. in particular	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
this avoids a delay in hiding the ime if it was	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
currently shown because doing that may involve	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
some communication back with the app.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
we delay the layer building a bit in order to give	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
other message processing a time to run. in particular	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
this avoids a delay in hiding the ime if it was	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
currently shown because doing that may involve	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
some communication back with the app.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
remove messages sent using postdelayed()	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
whatever we were doing is hereby canceled.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
close the menu	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
also will cancel mwaitingforresult.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
can be cases where mworkspace is null this prevents a npe	UNKNOWN	WITHOUT_CLASSIFICATION	0.990	0.000
in all these cases only animate if were already on home	UNKNOWN	WITHOUT_CLASSIFICATION	0.899	0.000
if we are already on home then just animate back to the workspace	UNKNOWN	WITHOUT_CLASSIFICATION	0.948	0.000
otherwise just wait until onresume to set the state back to workspace	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
reset the apps customize page	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
override point for subclasses to prevent movement to the default screen when the home button is pressed. used (for example) in gel to prevent movement during a search.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
override point for subclasses to provide custom behaviour for when a home intent is fired.	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
we close any open folder since it will not be re-opened and we need to make sure	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this state is reflected.	UNKNOWN	WITHOUT_CLASSIFICATION	0.995	0.000
save the current appscustomize tab	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
remove all pending runnables	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
stop callbacks from launchermodel	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
its possible to receive ondestroy after a new launcher activity has	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
been created. in this case dont interfere with the new launcher.	UNKNOWN	WITHOUT_CLASSIFICATION	0.905	0.000
disconnect any of the callbacks and drawables associated with iteminfos on the workspace	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
to prevent leaking launcher activities on orientation change.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
indicates that we want global search for this activity by setting the globalsearch argument for {@link #startsearch} to true.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
use any text typed in the launcher as the initial query	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
start a text search. @return {@code true} if the search will start immediately so any further keypresses will be handled directly by the search ui. {@code false} if {@link launcher} should continue to buffer keypresses.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
starts the global search activity. this code is a copied from searchmanager	UNKNOWN	WITHOUT_CLASSIFICATION	0.989	0.000
make sure that we have a bundle to put source in	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
set source to package name of app that starts global search if not set already.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
close any open folders	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
stop resizing any widgets	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
show the overview mode	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
use a custom animation for launching search	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
launch over to configure widget if needed	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
otherwise just add it	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
exit spring loaded mode if necessary after adding the widget	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
exit spring loaded mode if necessary after adding the widget	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
close any folders that may be open.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
process a shortcut drop. @param componentname the name of the component @param screenid the id of the screen where it should be added @param cell the cell it should be added to optional @param position the location on the screen where it was dropped optional	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
process a widget drop. @param info the pendingappwidgetinfo of the widget being added. @param screenid the id of the screen where it should be added @param cell the cell it should be added to optional @param position the location on the screen where it was dropped optional	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
in this case we either need to start an activity to get permission to bind	UNKNOWN	WITHOUT_CLASSIFICATION	0.975	0.000
the widget or we need to start an activity to configure the widget or both.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
todo we need to make sure that this accounts for the options bundle.	UNKNOWN	DESIGN	0.939	0.000
intent.putextra(appwidgetmanager.extra_appwidget_options options)	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
update the model	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
create the view	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
force measure the new folder icon	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
registers various content observers. the current implementation registers only a favorites observer to keep track of the favorites applications.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
back button is a no-op here but give at least some feedback for the button press	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
re-listen when widgets are reset.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
launches the intent referred by the clicked shortcut. @param v the view representing the clicked shortcut.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
make sure that rogue clicks dont get through while allapps is launching or after the	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
view has detached (its possible for this to happen if the view is removed mid touch).	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
event handler for the app widget view which has not fully restored.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the install has not been queued	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
download has started.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
event handler for the search button @param v the view that was clicked.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
event handler for the voice button @param v the view that was clicked.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
event handler for the grid button that appears on the home screen which enters all apps mode. @param v the view that was clicked.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
event handler for an app shortcut click. @param v the view that was clicked. must be a tagged with a {@link shortcutinfo}.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
open shortcut	UNKNOWN	WITHOUT_CLASSIFICATION	0.985	0.000
event handler for a folder icon click. @param v the view that was clicked. must be an instance of {@link foldericon}.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if the folder info reports that the associated folder is open then verify that	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
it is actually opened. there have been a few instances where this gets out of sync.	UNKNOWN	WITHOUT_CLASSIFICATION	0.971	0.000
close any open folder	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
open the requested folder	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
find the open folder	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
.. and close it	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
close any folder open on the current screen	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
pull the folder onto this screen	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
event handler for the (add) widgets button that appears after a long press on the home screen.	UNKNOWN	WITHOUT_CLASSIFICATION	0.995	0.000
event handler for the wallpaper picker button that appears after a long press on the home screen.	UNKNOWN	WITHOUT_CLASSIFICATION	0.995	0.000
event handler for a click on the settings button that appears after a long press on the home screen.	UNKNOWN	WITHOUT_CLASSIFICATION	0.994	0.000
provide the same haptic feedback that the system offers for virtual keys.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
provide the same haptic feedback that the system offers for virtual keys.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
called when the user stops interacting with the launcher. this implies that the user is now on the homescreen and is not doing housekeeping.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
called when the user starts interacting with the launcher. the possible interactions are - open all apps - reorder an app shortcut or a widget - open the overview mode. this is a good time to stop doing things that only make sense when the user is on the homescreen and not doing housekeeping.	UNKNOWN	WITHOUT_CLASSIFICATION	0.860	0.000
returns true if the activity was started	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
system applications cannot be installed. for now show a toast explaining that.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we may give them the option of disabling apps this way.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
only launch using the new animation if the shortcut has not opted out (this is a	UNKNOWN	WITHOUT_CLASSIFICATION	0.965	0.000
private contract between launcher and may be ignored in the future).	UNKNOWN	WITHOUT_CLASSIFICATION	0.985	0.000
could be launching some bookkeeping activity	UNKNOWN	WITHOUT_CLASSIFICATION	0.983	0.000
todo component can be null when shortcuts are supported for secondary user	UNKNOWN	WITHOUT_CLASSIFICATION	0.732	0.000
this method draws the foldericon to an imageview and then adds and positions that imageview in the draglayer in the exact absolute location of the original foldericon.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
lazy load imageview bitmap and canvas	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the layout from which the folder is being opened may be scaled adjust the starting	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
view size by this scale factor.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
just in case this image view is still in the drag layer from a previous animation	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we remove it and re-add it.	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
push an imageview copy of the foldericon into the draglayer and hide the original	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we remove and re-draw the foldericon in-case it has changed	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
remove the imageview copy of the foldericon and make the original visible.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
remove the imageview copy of the foldericon and make the original visible.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
opens the user folder described by the specified tag. the opening of the folder is animated relative to the specified view. if the view is null no animation is played. @param folderinfo the folderinfo describing the folder to open.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
just verify that the folder hasnt already been added to the draglayer.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
there was a one-off crash where the folder had a parent already.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
notify the accessibility manager that this folder window has appeared and occluded	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
the workspace items	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
notify the accessibility manager that this folder window has disappeard and no	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
longer occludeds the workspace items	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
user long pressed on empty space	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
user long pressed on an item	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
returns the celllayout of the specified container at the specified screen.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
update the workspace transition step as well	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
update the workspace transition step as well	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
things to test when changing the following seven functions. - home from workspace - from center screen - from other screens - home from all apps - from center screen - from other screens - back from all apps - from center screen - from other screens - launch app from workspace and quit - with back - with home - launch app from all apps and quit - with back - with home - go to a screen thats not the default then all apps and launch and app and go back - with back -with home - on workspace long press power and go back - with back - with home - on all apps long press power and go back - with back - with home - on workspace power off - on all apps power off - launch an app and turn off the screen while in that app - go back with home key - go back with back key todo make this not go to workspace - from all apps - from workspace - enter and exit car mode (becuase it causes an extra configuration changed) - from all apps - from the center workspace - from another workspace	UNKNOWN	WITHOUT_CLASSIFICATION	0.857	0.000
zoom the camera out from the workspace to reveal toview. assumes that the view to show is anchored at either the very top or very bottom of the screen.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
set the content type for the all apps/widgets space	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if for some reason our views arent initialized dont animate	UNKNOWN	WITHOUT_CLASSIFICATION	0.983	0.000
hide the real page background and swap in the fake one	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we need to hide this view as the animation start will be posted.	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
get the y delta between the center of the page and the center of the all apps button	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
check that mstateanimation hasnt changed while	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we waited for a layout/draw pass	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
check that mstateanimation hasnt changed while	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we waited for a layout/draw pass	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
zoom the camera back into the workspace hiding fromview. this is the opposite of showappscustomizehelper. @param animated if true the transition will be animated.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if for some reason our views arent initialized dont animate	UNKNOWN	WITHOUT_CLASSIFICATION	0.983	0.000
we need to hide side pages of the apps / widget tray to avoid some ugly edge cases	UNKNOWN	WITHOUT_CLASSIFICATION	0.850	0.000
hideappscustomizehelper is called in some cases when it is already hidden	UNKNOWN	WITHOUT_CLASSIFICATION	0.995	0.000
dont perform all these no-op animations. in particularly this was causing	UNKNOWN	WITHOUT_CLASSIFICATION	0.672	0.000
the all-apps button to pop in and out.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
hide the real page background and swap in the fake one	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the vertical motion of the apps panel should be delayed by one frame	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
from the conceal animation in order to give the right feel. we correspondingly	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
shorten the duration so that the slide and conceal end at the same time.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
unhide side pages	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
reset page transforms	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
check that mstateanimation hasnt changed while	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we waited for a layout/draw pass	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
unhide side pages	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
reset page transforms	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
check that mstateanimation hasnt changed while	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we waited for a layout/draw pass	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
set focus to the appscustomize button	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
change the state after weve called all the transition code	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
resume the auto-advance of widgets	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
send an accessibility event to announce the context change	UNKNOWN	WITHOUT_CLASSIFICATION	0.993	0.000
we post this in-case the all apps view isnt yet constructed.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
change the state after weve called all the transition code	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
pause the auto-advance of widgets until we are out of allapps	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
send an accessibility event to announce the context change	UNKNOWN	WITHOUT_CLASSIFICATION	0.993	0.000
we post this in-case the all apps view isnt yet constructed.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
before we show workspace hide all apps again because	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
exitspringloadeddragmode made it visible. this is a bit hacky we should	UNKNOWN	DESIGN	0.678	0.000
clean up our state transition functions	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
before we show workspace hide all apps again because	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
exitspringloadeddragmode made it visible. this is a bit hacky we should	UNKNOWN	DESIGN	0.678	0.000
clean up our state transition functions	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
otherwise we are not in spring loaded mode so dont do anything.	UNKNOWN	WITHOUT_CLASSIFICATION	0.925	0.000
todo	UNKNOWN	WITHOUT_CLASSIFICATION	0.755	0.000
todo	UNKNOWN	WITHOUT_CLASSIFICATION	0.755	0.000
add an item from all apps or customize onto the given workspace screen. if layout is null add to the current screen.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
maps the current orientation to an index for referencing orientation correct global icons	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
default - 0 landscape - 1	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
look for the toolbar icon specified in the activity meta-data	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this can happen if the activity defines an invalid drawable	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
this can happen if the activity defines an invalid drawable	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
if successful in getting icon return it otherwise set button to use default drawable	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if we were unable to find the icon via the meta-data use a generic one	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if successful in getting icon return it otherwise set button to use default drawable	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if we were unable to find the icon via the meta-data use a	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
generic one	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
populate event with a fake title based on the current state.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
if the activity is currently paused signal that we need to run the passed runnable in onresume. this needs to be called from incoming places where resources might have been loaded while we are paused. that is becaues the configuration might be wrong when were not running and if it comes back to what it was when we were paused we are not restarted. implementation of the method from launchermodel.callbacks. @return true if we are currently paused. the caller might be able to skip some work in that case since we will come back again.	UNKNOWN	WITHOUT_CLASSIFICATION	0.979	0.000
noinspection statementwithemptybody	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
if the activity is currently paused signal that we need to re-run the loader in onresume. this needs to be called from incoming places where resources might have been loaded while we are paused. that is becaues the configuration might be wrong when were not running and if it comes back to what it was when we were paused we are not restarted. implementation of the method from launchermodel.callbacks. @return true if we are currently paused. the caller might be able to skip some work in that case since we will come back again.	UNKNOWN	WITHOUT_CLASSIFICATION	0.992	0.000
implementation of the method from launchermodel.callbacks.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
refreshes the shortcuts shown on the workspace. implementation of the method from launchermodel.callbacks.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if were starting binding all over again clear any bind calls wed postponed in	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the past (see waituntilresume) -- we dont need them since were starting binding	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
from scratch again	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
clear the workspace because its going to be rebound	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if there are no screens we need to have an empty screen	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
create the custom content page (this call updates mdefaultscreen which calls	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
setcurrentpage() so ensure that all pages are added before calling this).	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
log to disk	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
add the new screens	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we add the items without animation on non-visible pages and with	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
animations on the new page (which we will try and snap to).	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
remove the extra empty screen	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
bind the items start-end from the list. implementation of the method from launchermodel.callbacks.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
get the list of added shortcuts and intersect them with the set of shortcuts here	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
todo fix collision case	UNKNOWN	DESIGN	0.964	0.000
animate all the applications up now	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
animate to the correct page	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
we post the animation slightly delayed to prevent slowdowns	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
when we are loading right after we return to launcher.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
implementation of the method from launchermodel.callbacks.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
add the views for a widget to the workspace. implementation of the method from launchermodel.callbacks.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
note this assumes that the id remap broadcast is received before this step.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
if that is not the case the id remap will be ignored and user may see the	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
click to setup view.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
todo consider showing a permission dialog when the widget is clicked.	UNKNOWN	DESIGN	0.885	0.000
if the widget has a configure activity it is still needs to set it up otherwise	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the widget is ready to go.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
restores a pending widget. @param appwidgetid the app widget id @param cellinfo the position on screen where to create the widget.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
callback saying that there arent any more items to bind. implementation of the method from launchermodel.callbacks.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if we received the result of any pending adds while the loader was running (e.g. the	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
widget configuration forced an orientation change) process them now.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
todo this moves the user to the page where the pending item was added. ideally	UNKNOWN	WITHOUT_CLASSIFICATION	0.973	0.000
the screen would be guaranteed to exist after bind and the page would be set through	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the workspace restore process.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
add the icons for all apps. implementation of the method from launchermodel.callbacks.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
a package was updated. implementation of the method from launchermodel.callbacks.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
packages were restored	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
update the state of a package typically related to install state. implementation of the method from launchermodel.callbacks.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
update the label and icon of all the icons in a package implementation of the method from launchermodel.callbacks.	UNKNOWN	WITHOUT_CLASSIFICATION	0.993	0.000
a package was uninstalled. we take both the super set of packagenames in addition to specific applications to remove the reason being that this can be called when a package is updated as well. in that scenario we only remove specific components from the workspace where as package-removal should clear all items by package name. implementation of the method from launchermodel.callbacks.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
notify the drag controller	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
update allapps	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
update the widgets pane	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we are currently in the same basic orientation as the natural orientation	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we are currently in the other basic orientation to the natural orientation	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
since the map starts at portrait we need to offset if this devices natural orientation	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
is landscape.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
called when the searchbar hint should be changed. @param hint the hint to be displayed in the search bar.	UNKNOWN	WITHOUT_CLASSIFICATION	0.992	0.000
this method indicates whether or not we should suggest default wallpaper dimensions when our wallpaper cropper was not yet used to set a wallpaper.	UNKNOWN	WITHOUT_CLASSIFICATION	0.822	0.000
to be overridden by subclasses to indicate that there is an activity to launch before showing the standard launcher experience.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
to be overridden by subclasses to launch any first run activity	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
to be overridden by subclasses to indicate that there is an in-activity full-screen intro screen that must be displayed and dismissed.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
full screen intro screen to be shown and dismissed before the launcher can be used.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
to be overriden by subclasses to indicate whether the in-activity intro screen has been dismissed. this method is ignored if #hasdismissableintroscreen returns false.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we delay hiding the intro view until the first run activity is showing. this	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
avoids a blip.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
the two first run cling paths are mutually exclusive if the launcher is preinstalled	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
on the device then we always show the first run cling experience (or if there is no	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
launcher2). otherwise we prompt the user upon started for migration	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
launcherclings.showlongpresscling(true)	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
called from search suggestion not supported in other profiles.	UNKNOWN	WITHOUT_CLASSIFICATION	0.989	0.000
called from search suggestion not supported in other profiles.	UNKNOWN	WITHOUT_CLASSIFICATION	0.989	0.000
prints out out state for debugging.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
show oobe tutorial on first use of edge swipe edit favorites etc @param oobetoshow activity identifier show_oobe_edit_favorites or show_oobe_edge_swipe_menu @param oobetutorial tutorial to show oobeactivity.oobe_edit_favorites_tutorial oobeactivity.oobe_edge_swipe_tutorial oobeactivity.oobe_full_tutorial	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if (true || msharedprefs.getboolean(oobetoshow true)) { uncomment to loop the animation	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
starts the oobeactivity in the selected tutorial @param oobetutorial tutorial to show oobeactivity.oobe_edit_favorites_tutorial oobeactivity.oobe_edge_swipe_tutorial oobeactivity.oobe_full_tutorial	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
enable the hw layers before the animation starts (will be disabled in the onanimationend	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
callback below)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
get the individual components	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
create the various fade animations	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
gets various transition durations.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
dragcontroller.draglistener implementation	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
animate out the qsb search bar and animate in the drop target bar	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
restore the qsb search bar and animate out the drop target bar	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the text fits in a single line. no need to draw the setup icon.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
update left and top to indicate the position where the text will be drawn.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
no-op	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
re inflate is required any time the widget restore status changes	UNKNOWN	WITHOUT_CLASSIFICATION	0.983	0.000
the view displays two modes one with a setup icon and another with a preload icon	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
in the center.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
appwidgethostview blocks all click events on the root view. instead handle click events	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
on the content and pass it along.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
recreate the setup text.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the text cant be drawn in a single line. draw a setup icon instead.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
load the preferences from an xml resource	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the size of the indicator is same as the content region of the {@link #mbgdrawable} minus half the stroke size to accommodate the indicator.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
amount by which padding has to be scaled	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the draw region has been clipped.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
stop animation	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
set the paint color only when the level changes so that the dominant color	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
is only calculated when needed.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
runs the finish animation if it is has not been run after last level change.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
make sure that the dominant color has enough saturation to be visible properly.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
set a new alarm to expire for the screen that we are hovering over now	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this is called when our timer runs out	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
snap to the screen that we are hovering over now	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
suppress dead code warning	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
debug drawing for hit space	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
set whether or not to invert the layout horizontally if the layout is in rtl mode.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
widgets have their own padding so skip	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
otherwise center the icon	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
cancel long press for all children	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
update the drawing caches	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
initializes various states for this workspace.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
if (!mscroller.isfinished()) return	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
keep generating points as long as were more than 1px away from the target	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
todo initial wallpaper now that wallpapers are owned by another app	UNKNOWN	DESIGN	0.641	0.000
todo make removeshortcut internally threadsafe	UNKNOWN	DESIGN	0.555	0.000
ignore	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
todo delayed writes	UNKNOWN	WITHOUT_CLASSIFICATION	0.633	0.000
not a problem	UNKNOWN	WITHOUT_CLASSIFICATION	0.982	0.000
more of a problem	UNKNOWN	WITHOUT_CLASSIFICATION	0.978	0.000
log.v(weightwatcher.processwatcher	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
msg_update pss= + mmeminfo.currentpss)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
app	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
service	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
log.v(weightwatcher.processwatcher	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
msg_update pss= + mmeminfo.currentpss)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
app	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
service	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
draw a big box for the icon for debugging	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
suppress dead code warning	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
returns a fastbitmapdrawable with the icon accurately sized.	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
resizes an icon drawable to the correct icon size.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
indicates if the device is running lmp or higher.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
returns a bitmap which is of the appropriate size to be displayed as an icon	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we share the statics -(	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
returns a bitmap suitable for the all apps view.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we share the statics -(	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
ensure the bitmap has a density.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
scale the icon proportionally to the icon dimensions	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
no intrinsic size --> use default size	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
given a coordinate relative to the descendant find the coordinate in a parent views coordinates. @param descendant the descendant to which the passed coordinate is relative. @param root the root view to make the coordinates relative to. @param coord the coordinate that we want mapped. @param includerootscroll whether or not to account for the scroll of the descendant sometimes this is relevant as in a childs coordinates within the descendant. @return the factor by which this descendant is scaled relative to this draglayer. caution this scale factor is assumed to be equal in x and y and so if at any point this assumption fails we will need to return a pair of scale factors.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
for textviews scroll has a meaning which relates to the text position	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
which is very strange ignore the scroll.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
inverse of {@link #getdescendantcoordrelativetoself(view int[])}.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
utility method to determine whether the given point in local coordinates is inside the view where the area of the view is expanded by the slop factor. this method is called while processing touch-move events to determine if the event is still within the view.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this picks a dominant color looking for high-saturation high-value repeated hues. @param bitmap the bitmap to scan @param samples the approximate max number of samples to use.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this is an out-param for getting the hsv values for an rgb	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
first get the best hue by creating a histogram over 360 hue buckets	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
where each pixel contributes a score weighted by saturation value and alpha.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
drop mostly-transparent pixels.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
remove the alpha channel.	UNKNOWN	WITHOUT_CLASSIFICATION	0.995	0.000
bucket colors by the 360 integer hues.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
defensively avoid array bounds violations.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
go back over the rgb colors that match the winning hue	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
creating a histogram of weighted sv scores for up to 100100 [sv] buckets.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the highest-scoring rgb color wins.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
score by cumulative saturation value.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
all the colors in the winning bucket are very similar. last in wins.	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
finds a system apk which had a broadcast receiver listening to a particular action. @param action intent action used to find the apk @return a pair of apk package name and the resources.	UNKNOWN	WITHOUT_CLASSIFICATION	0.919	0.000
launching the application	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
most used	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
set the all apps	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
to determine the full scroll width	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
initializes various states for this workspace.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
scale the fling-to-delete threshold by the density	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
hook up the page indicator	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
unhook the page indicator	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
convenience methods to map points from self to parent and vice versa	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
convenience methods to get the actual width/height of the pagedview (since it is measured	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
to be larger to account for the minimum possible scale)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
convenience methods to get the offset assuming that we are centering the pages in the	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
pagedview both horizontally and vertically	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
add a page change listener which will be called when a page is _finished_ listening.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
note this is a reimplementation of view.islayoutrtl() since that is currently hidden api.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
called by subclasses to mark that data is ready and that we can begin loading and laying out pages.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
returns the index of the currently displayed page. @return the index of the currently displayed page.	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
updates the scroll of the current page immediately to its final scroll position. we use this in customizepagedview to allow tabs to share the same pagedview while resetting the scroll of the previous tab page.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if the current page is invalid just reset the scroll position to zero	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
called during allapps/home transitions to avoid unnecessary work. when that other animation {@link #updatecurrentpagescroll()} should be called to correctly set the final state and re-enable scrolling.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we need to clean up the next page here to avoid computescrollhelper from	UNKNOWN	WITHOUT_CLASSIFICATION	0.596	0.000
updating current page on the pass.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we need to clean up the next page here to avoid computescrollhelper from	UNKNOWN	WITHOUT_CLASSIFICATION	0.596	0.000
updating current page on the pass.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
when in free scroll mode we need to clamp to the free scroll page range.	UNKNOWN	WITHOUT_CLASSIFICATION	0.955	0.000
ensure that it is clamped by the actual set of children in all cases	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
sets the current page.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
dont introduce any checks like mcurrentpage == currentpage here-- if we change the	UNKNOWN	WITHOUT_CLASSIFICATION	0.994	0.000
the default	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the restore page will be set in place of the current page at the next (likely first) layout.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
should be called whenever the page changes. in the case of a scroll we wait until the page has settled.	UNKNOWN	WITHOUT_CLASSIFICATION	0.982	0.000
update the page indicator (when we arent reordering)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
a method that subclasses can override to add behavior	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
a method that subclasses can override to add behavior	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
registers the specified listener on each page contained in this workspace. @param l the listener used to respond to long clicks.	UNKNOWN	WITHOUT_CLASSIFICATION	0.968	0.000
in free scroll mode we clamp the scrollx	UNKNOWN	WITHOUT_CLASSIFICATION	0.989	0.000
update the last motion events when scrolling	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we moved this functionality to a helper function so smoothpagedview can reuse it	UNKNOWN	DESIGN	0.740	0.000
dont bother scrolling if the page does not need to be moved	UNKNOWN	DESIGN	0.674	0.000
load the associated pages if necessary	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we dont want to trigger a page end moving unless the page has settled	UNKNOWN	WITHOUT_CLASSIFICATION	0.834	0.000
and the user has stopped scrolling	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
notify the user when the page changes	UNKNOWN	WITHOUT_CLASSIFICATION	0.993	0.000
we measure the dimensions of the pagedview to be larger than the pages so that when we	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
zoom out (and scale down) the view is still contained in the parent	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
note we multiply by 2f to account for the fact that depending on the offset of the	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
viewport we can be at most one and a half screens offset once we scale down	UNKNOWN	WITHOUT_CLASSIFICATION	0.986	0.000
return early if we arent given a proper dimension	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
allow the height to be set as wrap_content. this allows the particular case of the all apps view on xlarge displays to not take up more space then it needs. width is still not allowed to be set as wrap_content since many parts of the code expect each page to have the same width.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the children are given the same width and height as the workspace	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
unless they were set to wrap_content	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
disallowing padding in paged view (just pass 0)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this method should be called once before first layout / measure pass.	UNKNOWN	WITHOUT_CLASSIFICATION	0.988	0.000
update the viewport offsets	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
prevent full screen pages from showing in the viewport	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
when they are not the current page.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
update the page indicator we dont update the page indicator as we	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
add/remove pages	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this ensures that when children are added they get the correct transforms / alphas	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
in accordance with any scroll effects.	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
update the page indicator we dont update the page indicator as we	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
add/remove pages	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
xxx we should find a better way to hook into this before the view	UNKNOWN	DESIGN	1.000	0.000
gets removed form its parent	UNKNOWN	WITHOUT_CLASSIFICATION	0.812	0.000
xxx we should find a better way to hook into this before the view	UNKNOWN	DESIGN	1.000	0.000
gets removed form its parent	UNKNOWN	WITHOUT_CLASSIFICATION	0.812	0.000
xxx we should find a better way to hook into this before the view	UNKNOWN	DESIGN	1.000	0.000
gets removed form its parent	UNKNOWN	WITHOUT_CLASSIFICATION	0.812	0.000
update the page indicator we dont update the page indicator as we	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
add/remove pages	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
find out which screens are visible as an optimization we only call draw on them	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
moverscrollx is equal to getscrollx() when were within the normal scroll range.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
otherwise it is equal to the scaled overscroll position.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
set mforcescreenscrolled before calling screenscrolled so that screenscrolled can	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
set it for the next frame	UNKNOWN	WITHOUT_CLASSIFICATION	0.983	0.000
clip to the bounds	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
draw all the children leaving the drag view for last	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
draw the drag view on top (if there is one)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
xxx-rtl this will be fixed in a future cl	UNKNOWN	WITHOUT_CLASSIFICATION	0.914	0.000
xxx-rtl this will be fixed in a future cl	UNKNOWN	WITHOUT_CLASSIFICATION	0.914	0.000
if one of our descendant views decides that it could be focused now only pass that along if its on the current page. this happens when live folders requery and if theyre off page they end up calling requestfocus which pulls it on page.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
{@inheritdoc}	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
we need to make sure to cancel our long press if	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
a scrollable widget takes over touch events	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
return true if a tap at (x y) should trigger a flip to the previous page.	UNKNOWN	WITHOUT_CLASSIFICATION	0.995	0.000
return true if a tap at (x y) should trigger a flip to the next page.	UNKNOWN	WITHOUT_CLASSIFICATION	0.934	0.000
returns whether x and y originated within the buffered viewport	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this method just determines whether we want to intercept the motion. if we return true ontouchevent will be called and we do the actual scrolling there.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
skip touch handling if there are no pages to swipe	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
shortcut the most recurring case the user is in the dragging state and he is moving his finger. we want to intercept this motion.	UNKNOWN	WITHOUT_CLASSIFICATION	0.789	0.000
misbeingdragged == false otherwise the shortcut would have caught it. check whether the user has moved far enough from his original down touch.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if mactivepointerid is invalid_pointer then we must have missed an action_down	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
event. in that case treat the first occurence of a move event as a action_down	UNKNOWN	WITHOUT_CLASSIFICATION	0.977	0.000
i.e. fall through to the next case (dont break)	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
(we sometimes miss action_down events in workspace because it ignores all events	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
while its small- this was causing a crash before we checked for invalid_pointer)	UNKNOWN	WITHOUT_CLASSIFICATION	0.991	0.000
remember location of down touch	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
if being flinged and user touches the screen initiate drag otherwise dont. mscroller.isfinished should be false when being flinged.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
check if this can be the beginning of a tap on the side of the pages	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
to scroll the current page	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
the only time we want to intercept motion events is if we are in the drag mode.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
determines if we should change the touch state to start scrolling after the user moves their touch point too far.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
disallow scrolling if we dont have a valid pointer index	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
disallow scrolling if we started the gesture from outside the viewport	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
scroll if the user moved far enough along the x axis	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
mallowlongpress = false	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
try canceling the long press. it could also have been scheduled	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
by a distant descendant so use the mallowlongpress flag to block	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
everything	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
while layout transitions are occurring a childs position may stray from its baseline	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
position. this method returns the magnitude of this stray at any given time.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
this curve determines how the effect of scrolling over the limits of the page dimishes	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
as the user pulls further and further from the bounds	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we want to reach the max over scroll effect when the user has	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
over scrolled half the size of the screen	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
clamp this factor f to -1 < f < 1	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
clamp this factor f to -1 < f < 1	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
using the formula in overscroll assuming that f = 1.0 (which it should generally not	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
exceed). used to find out how much extra wallpaper we need for the over scroll effect	UNKNOWN	WITHOUT_CLASSIFICATION	0.608	0.000
skip touch handling if there are no pages to swipe	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if being flinged and user touches stop the fling. isfinished will be false if being flinged.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
remember where the motion event started	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
scroll to follow the motion event	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
only scroll and update mlastmotionx if we have moved some discrete amount. we	UNKNOWN	WITHOUT_CLASSIFICATION	0.990	0.000
keep the remainder because we are actually testing if weve moved from the last	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
scrolled position (which is discrete).	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
update the last motion position	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
update the parent down so that our zoom animations take this new movement into	UNKNOWN	WITHOUT_CLASSIFICATION	0.995	0.000
account	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
find the closest page to the touch point	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
change the drag view if we are hovering over the drop target	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
setup the scroll to the correct page before we swap the views	UNKNOWN	WITHOUT_CLASSIFICATION	0.994	0.000
for each of the pages between the paged view and the drag view	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
animate them from the previous position to the new position in	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the layout (as a result of the drag view moving in the layout)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
dragviewindex < pageunderpointindex so after we remove the	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
drag view all subsequent views to pageunderpointindex will	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
shift down.	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
animate the view translation from its old position to its new	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
position	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
in the case that the page is moved far to one direction and then is flung	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
in the opposite direction we use a threshold to determine whether we should	UNKNOWN	WITHOUT_CLASSIFICATION	0.899	0.000
just return to the starting page or if we should skip one further.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
we give flings precedence over large moves which is why we short-circuit our	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
test for a large move if a fling has been registered. that is a large	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
move to the left and fling to the right will register as a fling to the right.	UNKNOWN	WITHOUT_CLASSIFICATION	0.980	0.000
at this point we have not moved beyond the touch slop	UNKNOWN	WITHOUT_CLASSIFICATION	0.981	0.000
(otherwise mtouchstate would be touch_state_scrolling) so	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
we can just page	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
at this point we have not moved beyond the touch slop	UNKNOWN	WITHOUT_CLASSIFICATION	0.981	0.000
(otherwise mtouchstate would be touch_state_scrolling) so	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
we can just page	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
update the last motion position	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
update the parent down so that our zoom animations take this new movement into	UNKNOWN	WITHOUT_CLASSIFICATION	0.995	0.000
account	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
check the velocity and see if we are flinging-to-delete	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
remove the callback to wait for the side page hover timeout	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
end any intermediate reordering states	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
setup the scroll to the correct page before we swap the views	UNKNOWN	WITHOUT_CLASSIFICATION	0.994	0.000
for each of the pages between the paged view and the drag view	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
animate them from the previous position to the new position in	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the layout (as a result of the drag view moving in the layout)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
dragviewindex < pageunderpointindex so after we remove the	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
drag view all subsequent views to pageunderpointindex will	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
shift down.	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
animate the view translation from its old position to its new	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
position	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
handle mouse (or ext. device) by shifting the page depending on the scroll	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
this was our active pointer going up. choose a new	UNKNOWN	WITHOUT_CLASSIFICATION	0.995	0.000
active pointer and adjust accordingly.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
todo make this decision more intelligent.	UNKNOWN	DESIGN	0.984	0.000
we want the duration of the page snap animation to be influenced by the distance that	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
the screen has to travel however we dont want this duration to be effected in a	UNKNOWN	DESIGN	0.694	0.000
purely linear fashion. instead we use this method to moderate the effect that the distance	UNKNOWN	WITHOUT_CLASSIFICATION	0.974	0.000
of travel has on the overall snap duration.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
center the values about 0.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if the velocity is low enough then treat this more as an automatic page advance	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
as opposed to an apparent physical response to flinging	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
here we compute a distance that will be used in the computation of the overall	UNKNOWN	WITHOUT_CLASSIFICATION	0.824	0.000
snap duration. this is a function of the actual distance that needs to be traveled	UNKNOWN	WITHOUT_CLASSIFICATION	0.995	0.000
we keep this value close to half screen size in order to reduce the variance in snap	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
duration as a function of the distance the page needs to travel.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
we want the pages snap velocity to approximately match the velocity at which the	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
user flings so we scale the duration by a value near to the derivative of the scroll	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
interpolator at zero ie. 5. we use 4 to make it a little slower.	UNKNOWN	WITHOUT_CLASSIFICATION	0.824	0.000
trigger a compute() to finish switching pages if necessary	UNKNOWN	WITHOUT_CLASSIFICATION	0.989	0.000
defer loading associated pages until the scroll settles	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
@return true is long presses are still allowed for the current touch	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
set true to allow long-press events to be triggered usually checked by {@link launcher} to accept or block dpad-initiated long-presses.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
first clear any pages that should no longer be loaded	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
next load any new pages	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
force all scrolling-related behavior to end	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
update all the pages	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we must force a measure after weve loaded the pages to update the content width and	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
set a new page as the current page if necessary	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
mark each of the pages as dirty	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
load any pages that are necessary for the current window of views	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
if the page is moving then snap it to the final position to ensure we dont get	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
stuck between pages	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
animate the drag view back to the original position	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
set the touch state to reordering (allows snapping to pages dragging a child etc.)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we must invalidate to trigger a redraw to update the layers such that the drag view	UNKNOWN	WITHOUT_CLASSIFICATION	0.991	0.000
is always drawn on top	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
trigger the callback when reordering has settled	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
check if we are within the reordering range	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
find the drag view under the pointer	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
for simplicity we call endreordering sometimes even if reordering was never started.	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
in that case we dont want to do anything.	UNKNOWN	WITHOUT_CLASSIFICATION	0.744	0.000
if we havent flung-to-delete the current child then we just animate the drag view	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
back into position	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
snap to the current page	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
animate the drag view back to the front position	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
handled in post-delete-animation-callbacks	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
flinging to delete - in progress	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
do a quick dot product test to ensure that we are flinging upwards	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
for each of the pages around the drag view animate them from the previous	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
position to the new position in the layout (as a result of the drag view moving	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
in the layout)	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
note we can make an assumption here because we have side-bound pages that we	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
will always have pages to animate in from the left	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
setup the scroll to the correct page before we swap the views	UNKNOWN	WITHOUT_CLASSIFICATION	0.994	0.000
dragviewindex < pageunderpointindex so after we remove the	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
drag view all subsequent views to pageunderpointindex will	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
shift down.	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
simulate the page being offscreen with the page spacing	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
animate the view translation from its old position to its new	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
position	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
note hacky but we want to skip any optimizations to not draw completely	UNKNOWN	WITHOUT_CLASSIFICATION	0.982	0.000
hidden views	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
for each of the pages around the drag view animate them from the previous	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
position to the new position in the layout (as a result of the drag view moving	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
in the layout)	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
note we can make an assumption here because we have side-bound pages that we	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
will always have pages to animate in from the left	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
setup the scroll to the correct page before we swap the views	UNKNOWN	WITHOUT_CLASSIFICATION	0.994	0.000
dragviewindex < pageunderpointindex so after we remove the	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
drag view all subsequent views to pageunderpointindex will	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
shift down.	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
simulate the page being offscreen with the page spacing	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
animate the view translation from its old position to its new	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
position	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
note hacky but we want to skip any optimizations to not draw completely	UNKNOWN	WITHOUT_CLASSIFICATION	0.982	0.000
hidden views	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
note because it takes time for the first frame of animation to actually be	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
called and we expect the animation to be a continuation of the fling we have	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
to account for the time that has elapsed since the fling finished. and since	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we dont have a startdelay we will always get call to update when we call	UNKNOWN	WITHOUT_CLASSIFICATION	0.943	0.000
start() (which we want to ignore).	UNKNOWN	WITHOUT_CLASSIFICATION	0.990	0.000
anonymous inner class ctor	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
create and start the animation	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
drag to delete	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
create and start the complex animation	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
accessibility	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
dont let the view send real scroll events.	UNKNOWN	WITHOUT_CLASSIFICATION	0.753	0.000
refactor the limits	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
update the information	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
clear the current state	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
add application to the bag	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
update the information	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
obtain the cached app information	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if does not exist create one	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
increment count	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
set the current time for the last execution	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
update the informations	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
obtain the cached app information	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if does not exist create one	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
obtain the cached app information	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if does not exist create one	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
set the current time for the last execution	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
obtain the cached app information	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if does not exist create one	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
obtain the cached app information	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
update age	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
remove data	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
if does not exist return	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if its being used in the lists refactor the lists	UNKNOWN	WITHOUT_CLASSIFICATION	0.982	0.000
most used	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
calculate the most used	UNKNOWN	WITHOUT_CLASSIFICATION	0.990	0.000
calculate the most recent	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
update the recent apps	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
process the most used apps	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
called once the last instance of your widget is removed from the	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
homescreen	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
widget instance is removed from the homescreen	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
obtain appropriate widget and update it.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
get the widgets	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
clear the current data	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
obtain the current data saved	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
if no information is available log it and continue	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
update the code	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if no information is available log it and continue	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
update the code	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
generate the mostused row	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
get app icon and label	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
debug string with app count	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
generate the mostused row	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
get application icon and label	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
debug string with app count	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
create the intent for this app	UNKNOWN	WITHOUT_CLASSIFICATION	0.995	0.000
(non-javadoc) @see android.appwidget.appwidgetprovider#onupdate(android.content.context android.appwidget.appwidgetmanager int[]) onupdate ============================================================== context the context in which this receiver is running. appwidgetmanager a appwidgetmanager object you can call updateappwidget(componentname remoteviews) on. appwidgetids the appwidgetids for which an update is needed. note that this may be all of the appwidget instances for this provider or just a subset of them.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
called in response to the action_appwidget_update broadcast when this	UNKNOWN	WITHOUT_CLASSIFICATION	0.993	0.000
appwidget provider	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
is being asked to provide remoteviews for a set of appwidgets.	UNKNOWN	WITHOUT_CLASSIFICATION	0.980	0.000
override this method to implement your own appwidget functionality.	UNKNOWN	WITHOUT_CLASSIFICATION	0.895	0.000
update the widget data	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
called once the last instance of your widget is removed from the	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
homescreen	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
widget instance is removed from the homescreen	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
obtain appropriate widget and update it.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
get the widgets	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
(non-javadoc) @see android.appwidget.appwidgetprovider#onupdate(android.content.context android.appwidget.appwidgetmanager int[]) onupdate ============================================================== context the context in which this receiver is running. appwidgetmanager a appwidgetmanager object you can call updateappwidget(componentname remoteviews) on. appwidgetids the appwidgetids for which an update is needed. note that this may be all of the appwidget instances for this provider or just a subset of them.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
called in response to the action_appwidget_update broadcast when this	UNKNOWN	WITHOUT_CLASSIFICATION	0.993	0.000
appwidget provider	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
is being asked to provide remoteviews for a set of appwidgets.	UNKNOWN	WITHOUT_CLASSIFICATION	0.980	0.000
override this method to implement your own appwidget functionality.	UNKNOWN	WITHOUT_CLASSIFICATION	0.895	0.000
update the widget data	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
delete everything	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
select query	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
args to select query	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
select query	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
args to select query	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
select query	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
args to select query	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
select query	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
args to select query	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
cols to return	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
select query	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
args to select query	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
load the preview image if possible	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
noinspection unusedassignment	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
check if the package is valid	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
check if it exists in our existing cache	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
not in cache we need to load it from the db	UNKNOWN	WITHOUT_CLASSIFICATION	0.976	0.000
its not in the db we need to generate it	UNKNOWN	WITHOUT_CLASSIFICATION	0.982	0.000
write to db on a thread pool this can be done lazily and improves the performance	UNKNOWN	WITHOUT_CLASSIFICATION	0.963	0.000
of the first time widget previews are loaded	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
delete all the records theyll be repopulated as this is a cache	UNKNOWN	WITHOUT_CLASSIFICATION	0.983	0.000
should cache the string builder	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
generate a preview image if we couldnt load one	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this drawable is not directly drawn so theres no need to mutate it.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
draw the icon in the top left corner	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
scale to fit width only - let the widget preview be clipped in the	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
vertical dimension	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
if a bitmap is passed in we use it otherwise we create a bitmap of the right size	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
draw the scaled preview into the final bitmap	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
render the icon	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
draw a desaturated/scaled version of the icon in the background as a watermark	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
restore the bounds	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
dumps all files that are open in this process without allocating a file descriptor.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this is a gigantic hack but unfortunately the only way to resolve an fd	UNKNOWN	DESIGN	1.000	0.000
to a file name. note that we have to loop over all possible fds because	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
reading the directory would require allocating a new fd. the kernel is	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
currently implemented such that no fd is larger then the current rlimit	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
which is why its safe to loop over them in such a way.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
getcanonicalpath() uses readlink behind the scene which doesnt require	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
a file descriptor.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
those are the files that dont point anywhere on the file system.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
getcanonicalpath() wrongly interprets these as relative symlinks and	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
resolves them within /proc/<pid>/fd/.	UNKNOWN	WITHOUT_CLASSIFICATION	0.995	0.000
ignoring exceptions for non-existing file descriptors.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
catch everything. this is called from an exception handler that we shouldnt upset.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
delete all the records theyll be repopulated as this is a cache	UNKNOWN	WITHOUT_CLASSIFICATION	0.983	0.000
returns true if {@param srcpackage} has the permission required to start the activity from {@param intent}. if {@param srcpackage} is null then the activity should not need any permissions	UNKNOWN	WITHOUT_CLASSIFICATION	0.958	0.000
not a valid target	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
no permission is needed	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
the activity requires some permission but there is no source.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
source does not have sufficient permissions.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
we have to fix that once we go to m	UNKNOWN	WITHOUT_CLASSIFICATION	0.992	0.000
if (!utilities.atleast_marshmallow) {	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
these checks are sufficient for below m devices.	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
return true	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
}	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
on m and above also check appopsmanager for compatibility mode permissions.	UNKNOWN	WITHOUT_CLASSIFICATION	0.991	0.000
if (textutils.isempty(appopsmanager.permissiontoop(target.activityinfo.permission))) {	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
there is no app-op for this permission which could have been disabled.	UNKNOWN	WITHOUT_CLASSIFICATION	0.994	0.000
return true	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
}	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
there is no direct way to check if the app-op is allowed for a particular app. since	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
app-op is only enabled for apps running in compatibility mode simply block such apps.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
try {	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
return pm.getapplicationinfo(srcpackage 0).targetsdkversion >= build.version_codes.m	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
} catch (namenotfoundexception e) { }	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
return false	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
serializes a component in order to be used has a map key @param componentname component to serialize @return the serialized component	UNKNOWN	WITHOUT_CLASSIFICATION	0.961	0.000
transforms a string into a componentname @param componentnamestring serialized component @return the componentname object	UNKNOWN	WITHOUT_CLASSIFICATION	0.986	0.000
get the current prefs and clear to update	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
get the singleton instance of the fonts manager.	UNKNOWN	WITHOUT_CLASSIFICATION	0.994	0.000
setup the fonts used within the application.	UNKNOWN	WITHOUT_CLASSIFICATION	0.992	0.000
recursive search	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
setupthevideo()	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
setupdefinitionssteps()	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
setupedgeglowtutorialsteps()	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
button	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
increment the step counter	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
increment the step counter	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
decrement the step counter	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
increment the step counter	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
decrement the step counter	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
mmainbackground.setbackgroundresource(r.color.oobe_background)	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
startanimation(new edgeglowtutorialanimationhelper())	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
settextview(moobetextgroup10)	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
mnextbutton.setvisibility(visibilitynext) mbackbutton.setvisibility(visibilityback) mstartbutton.setvisibility(visibilitystart) mskipbutton.setvisibility(visibilityskip)	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
log.i( send change locale request)	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
alphaanim.addkeyframe(0 1600 null)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
alphaanim.addkeyframe(0 2000 null)	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
- dynamicgrid.pxfromdp(110 mdisplaymetrics)	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
- dynamicgrid.pxfromdp(110 mdisplaymetrics)	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
texteditanimationoff.setfillafter(true)	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
titleview.animate().alpha(0f).setduration(1000).setlistener(null) titleview.animate().alpha(1f).setduration(1000).setlistener(null) textview.animate().alpha(1f).setstartdelay(10000).setduration(400000).setlistener(null)	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
editview.startanimation(texteditanimation)	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
spriteroot.addchild(spritehandshadow)	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
spritemenu.addchild(spriteappiconselected)	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
animation setup	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
animation setup	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
<p/> setupremovefavanimation() <p/>	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
<p/> setupaddfavanimation() <p/>	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
<p/> setupmovefavanimation() <p/>	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
alphaanim.addkeyframe(1 4250 null)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
xanim.addkeyframe(((screen_width/2) + dynamicgrid.pxfromdp(50fmdisplaymetrics)) 1500 null)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
xanim.addkeyframe(((screen_width/2) + dynamicgrid.pxfromdp(50fmdisplaymetrics)) 1500 null)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
scaleanim.addkeyframe(1f 2600 null) scaleanim.addkeyframe(20.0f 4000 decelerateinterpolator)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
+ dynamicgrid.pxfromdp(77fmdisplaymetrics)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
+ dynamicgrid.pxfromdp(77fmdisplaymetrics)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
(non-javadoc) @see java.lang.object#hashcode()	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
(non-javadoc) @see java.lang.object#equals(java.lang.object)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
load the favorites apps from the shared preferences and get the android application info from each so we can get the app name and icon.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
store the selected apps in the shared preferences as strings which is the package names of the apps. the package name of an app serves as the unique identifier of the app.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
convert string array into a single string where each element in the string array is separated by the delimiter string.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
convert a string into an array of strings using the delimiter as separator.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
defines a variable to store the action type for the incoming	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
event	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
handles each of the expected events	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
moving an icon to an occupied position replaces the	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
current one	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
toggle the red glow when removing favorites	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
get the item data	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
0 is the origin	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
1 is the index	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
obtain the applicationinfo	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
when not removing an icon swap is performed	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
remove the favorite	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
only setup the icon if a valid id is obtained	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
hide zone remove zone	UNKNOWN	WITHOUT_CLASSIFICATION	0.993	0.000
are we dragging mostly to the right?	UNKNOWN	WITHOUT_CLASSIFICATION	0.798	0.000
subtract the number of columns in order to get the correct item	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
due to the header	UNKNOWN	WITHOUT_CLASSIFICATION	0.995	0.000
set the listener	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
setup the list with all the apps installed on the device.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
set the drag listener to enable favorite icon removal	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
display a circle around the possible destinations	UNKNOWN	WITHOUT_CLASSIFICATION	0.835	0.000
set the item with the origin of the drag and the index of the dragged	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
view	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
setup the list with the selected app list which is the holder of the apps that has been selected to become the favorite apps.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
set the listeners	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the last argument is set to false since this hasnt the ability	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
to remove icons it only switches them	UNKNOWN	WITHOUT_CLASSIFICATION	0.982	0.000
log.d(tag adding app +	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
applicationinfo.getapplicationtitle())	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
pass the main view and the instance setup the drag and visibility	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
of some views	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
update the icon and label of a favorite @param applicationinfo app information that contains the icon and label @param icon the icon to update	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
performs the animation when replacing one favorite @param viewtofadein view that will appear. when null it means that we are swapping two favorites @param viewtofadeout view that will disappear. @param applicationinfo app info that is used to swap two favorites	UNKNOWN	WITHOUT_CLASSIFICATION	0.934	0.000
get the new icon	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
get the new icon	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
capture the back button press to make sure we save the selected apps before exiting.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
serializes the item id and origin that is being dragged. @param apporigin the origin can be select_apps_drag or all_apps_drag @param appindex the item index @return the serialized item info	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
deserializes the item id and origin that is being dragged. @param todeserialize string to deserialize @return an array containing {apporign appindex}	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
show the zone where favorites can be removed	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
display a circle around the possible destinations	UNKNOWN	WITHOUT_CLASSIFICATION	0.835	0.000
set the drag info	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
set the item with the origin of the drag and the index of the	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
dragged view	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
hide the circle around the possible destinations	UNKNOWN	WITHOUT_CLASSIFICATION	0.988	0.000
the red glow only makes sense when removing favorites	UNKNOWN	WITHOUT_CLASSIFICATION	0.991	0.000
displays a background on the favorite possible positions when configuring it @param selectedfavorite the favorite position where the background will not be shown. -1 means that all backgrounds will be shown. @param showbackground true displays the background false removes the background	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
to avoid the addition of fairphone home launcher to	UNKNOWN	WITHOUT_CLASSIFICATION	0.872	0.000
appswitcher	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
checks if the animation is starting from the left or right	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
todo catch the onmeasure and setup the correct sizes after that	UNKNOWN	WITHOUT_CLASSIFICATION	0.731	0.000
for now just calculate the initial size	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if all apps icon	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
set the right componentname in order to launch dialer	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
or contacts correctly	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
when the user sets the finger on an item	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if all apps icon	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
checks if the animation is starting from the left or right	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if all apps icon	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
set edit menu button timer	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
set the x coords	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
defines local variables	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
calculate the canvas size	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the drag shadow is a colordrawable. this sets its dimensions to	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
be the same as the	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
canvas that the system will provide. as a result the drag shadow	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
will fill the	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
canvas.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
sets the size parameters width and height values. these get back	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
to the system	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
through the size parameter.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
sets the touch points position to be in the middle of the drag	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
shadow	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
defines a callback that draws the drag shadow in a canvas that the	UNKNOWN	WITHOUT_CLASSIFICATION	0.994	0.000
system constructs	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
from the dimensions passed in onprovideshadowmetrics().	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
draws the colordrawable in the canvas passed in from the system.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
shadow.draw(canvas)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
add a user badge in the bottom right of the image.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
return default icon below.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
guardo la referencia del scroll para poder usar ambos	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
registramos un datasetobserver para que cuando se produzcan cambios en el adaptador original lo podamos reflejar	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
en el fakeadapter	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
adds the header view @param v la vista @param data extra data @param isselectable foo	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
aã±ade la vista al layout @param v	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
nos indica si la cabecera se pinta por delante o por detrã¡s del scroll de la lista @return boolean	UNKNOWN	WITHOUT_CLASSIFICATION	0.985	0.000
define si la cabecera se pinta por delante del scroll o si el scroll va por encima y la cabecera estã¡ fija @param boolean isinfront	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
permite cambiar entre una cabecera fija o scrollable @param boolean fixed	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
para evitar ciclos infinitos de ondraw / drawheaders porque si en ondraw le pongo el topmargin efectãºa	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
repintado entonces llama a drawheaders y asã­.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
elimina la cabecera	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
they sent us a bad intent	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
else we are replacing the package so a package_added will be sent	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
later we will update the package at this time	UNKNOWN	WITHOUT_CLASSIFICATION	0.918	0.000
extra_replacing is available kitkat onwards. for lower devices it is broadcasted	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
when moving a package or mounting/un-mounting external storage. assume that	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
it is a replacing operation.	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
they sent us a bad intent	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
else we are replacing the package so a package_added will be sent	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
later we will update the package at this time	UNKNOWN	WITHOUT_CLASSIFICATION	0.918	0.000
extra_replacing is available kitkat onwards. for lower devices it is broadcasted	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
when moving a package or mounting/un-mounting external storage. assume that	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
it is a replacing operation.	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
try again later	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
try again later	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this should be called by the implementations to register a package update.	UNKNOWN	WITHOUT_CLASSIFICATION	0.852	0.000
no longer necessary to track this package	UNKNOWN	WITHOUT_CLASSIFICATION	0.874	0.000
adds {@link userhandle} to the intent in for l or above. pre-l the launcher doesnt support showing apps for multiple profiles so this is a no-op.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
no op	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
called on mworker thread.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
not yet ready	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
nothing to update	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
try again later	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
replay all updates with a one time update for this installed package. no	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
need to store this record for future updates as the app list will get	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
refreshed on resume.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
1 is top	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the great android hackatlon the love the magic.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the two leftmost bits in the height measure spec have	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
a special meaning hence we cant use them to describe height.	UNKNOWN	WITHOUT_CLASSIFICATION	0.990	0.000
any other height should be respected as is.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
setup the list with all the apps installed on the device. @param view	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
fire the easter egg	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
fire the easter egg	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
redraw the drawer	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
redraw the drawer	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
clean up after dragging. @param target where the item was dragged to (can be null if the item was flung)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
exit spring loaded mode if we have not successfully dropped or	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
have not handled the	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
drop in workspace	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
we delay entering spring-loaded mode slightly to make sure the ui	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
thready is free of any work.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
we dont enter spring-loaded mode if the drag has been	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
cancelled	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
go into spring loaded mode (must happen before we	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
startdrag())	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we dont enter spring-loaded mode if the drag has been	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
cancelled	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
go into spring loaded mode (must happen before we	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
startdrag())	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
mforcedrawallchildrennextframe = !toworkspace	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
return early if this is not initiated from a touch	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
if (!v.isintouchmode()) return false	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
when we have exited all apps or are in transition disregard long	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
clicks	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if (!mlauncher.isagingappdrawervisible() ||	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
!mlauncher.isallappsvisible() ||	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
mlauncher.getworkspace().isswitchingstate()) return false	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
return if global dragging is not enabled	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if (!mlauncher.isdraggingenabled()) return false	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
return early and wait for onflingtodeletecompleted if this was the	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
result of a fling	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
display an error message if the drag failed due to there not being	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
enough space on the	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
target layout we were dropping on.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we just dismiss the drag when we fling so cleanup here	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
otherwise it may crash	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
open the searchview bar	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
otherwise it may crash	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
the final location.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
remove the affected components	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
remove the current widget	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
estimate the size of a widget with spans hspan vspan. return max_value for each	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
dimension if unsuccessful	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
use the first non-custom page to estimate the child position	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
prevent any un/installshortcutreceivers from updating the db while we are dragging	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
re-enable any un/installshortcutreceiver and now process any queued items	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
initializes various states for this workspace.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
set the wallpaper dimensions when launcher starts up	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we want to show layout transitions when pages are deleted to close the gap.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
@return the open folder on the current screen or null if there is none	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
disable all layout transitions before removing all pages to ensure that we dont get the	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
transition animations competing with us changing the scroll when we add pages or the	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
custom content screen	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
since we increment the current page when we call addcustomcontentpage via bindscreens	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
(and other places) we need to adjust the current page back when we clear the pages	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
remove the pages and clear the screen models	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
re-enable the layout transitions	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
find the index to insert this view into. if the empty screen exists then	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
insert it before that.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
log to disk	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we want no padding on the custom content	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
ensure that the current page and default page are maintained.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
update the custom content hint	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
ensure that the current page and default page are maintained.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
update the custom content hint	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
add the custom content to the full screen custom page	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
verify that the child is removed from any existing parent.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
log to disk	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
cancel any pending removal of empty screen	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if this is the last item on the final screen	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
log to disk	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
log to disk	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
invalid and dangerous operation if workspace is loading	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if the final screen is empty convert it to the extra empty screen	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if this is the last non-custom content screen convert it to the empty screen	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
update the model if we have changed any screens	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
log to disk	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
dont strip empty screens if the workspace is still loading	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if were not going to strip the empty screens after removing	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the extra empty screen do it right away.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
log to disk	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
xxx do we need to update lm workspace screens below?	UNKNOWN	DESIGN	0.768	0.000
log to disk	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
invalid and dangerous operation if workspace is loading	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
update the page indicator marker	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
update the model for the new screen	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
log to disk	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
dont strip empty screens if the workspace is still loading.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this is dangerous and can result in data loss.	UNKNOWN	WITHOUT_CLASSIFICATION	0.993	0.000
we enforce at least one page to add new items to. in the case that we remove the last	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
such screen we convert the last screen to the empty screen	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if this is the last non-custom content screen convert it to the empty screen	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
update the model if we have changed any screens	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
see implementation for parameter definition.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
at bind time we use the rank (screenid) to compute x and y for hotseat items.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
see implementation for parameter definition.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
see implementation for parameter definition.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
adds the specified child in the specified screen. the position and dimension of the child are defined by x y spanx and spany. @param child the child to add in one of the workspaces screens. @param screenid the screen in which to add the child. @param x the x position of the child in the screens grid. @param y the y position of the child in the screens grid. @param spanx the number of cells spanned horizontally by the child. @param spany the number of cells spanned vertically by the child. @param insert when true the child is inserted at the beginning of the children list. @param computexyfromrank when true we use the rank (stored in screenid) to compute the x and y position in which to place hotseat items. otherwise we use the x and y position to compute the rank.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
debugging - print out the stack trace to see where we are adding from	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this should never happen	UNKNOWN	WITHOUT_CLASSIFICATION	0.986	0.000
show folder title	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
get the canonical child id to uniquely represent this view in this screen	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
todo this branch occurs when the workspace is adding views	UNKNOWN	DESIGN	0.845	0.000
outside of the defined grid	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
maybe we should be deleting these items from the launchermodel?	UNKNOWN	WITHOUT_CLASSIFICATION	0.650	0.000
called directly from a celllayout (not by the framework) after weve been added as a listener via setonintercepttoucheventlistener(). this allows us to tell the celllayout that it should intercept touch events which is not something that is normally supported.	UNKNOWN	WITHOUT_CLASSIFICATION	0.993	0.000
this differs from isswitchingstate in that we take into account how far the transition has completed.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
ignore pointer scroll events if the custom content doesnt allow scrolling.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
remove the current widget which is inflated with the wrong orientation	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
pass swipes to the right to the custom content page.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
dont allow workspace scrolling if the current custom content screen doesnt allow	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
scrolling.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
above max_swipe_angle we dont want to ever start scrolling the workspace	UNKNOWN	WITHOUT_CLASSIFICATION	0.888	0.000
above start_damping_touch_slop_angle and below max_swipe_angle we want to	UNKNOWN	WITHOUT_CLASSIFICATION	0.976	0.000
increase the touch slop to make it harder to begin scrolling the workspace. this	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
results in vertically scrolling widgets to more easily. the higher the angle the	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
more we increase touch slop.	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
below start_damping_touch_slop_angle we dont do anything special	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
were snapping to a particular screen	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this is when user is actively dragging a particular screen they might	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
swipe it either left or right (but we wont advance by more than one screen)	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
if we are in springloaded mode then force an event to check if the current touch	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
is under a new page (to scroll to)	UNKNOWN	WITHOUT_CLASSIFICATION	0.995	0.000
exclude the leftmost page	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
exclude the last extra empty screen (if we have > min_parallax_page_span pages)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
todo do different behavior if its a live wallpaper?	UNKNOWN	DESIGN	0.862	0.000
sometimes the left parameter of the pages is animated during a layout transition	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this parameter offsets it to keep the wallpaper from animating as well	UNKNOWN	WITHOUT_CLASSIFICATION	0.994	0.000
dont use up all the wallpaper parallax until you have at least	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
min_parallax_page_span pages	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
on rtl devices push the wallpaper offset to the right if we dont have enough	UNKNOWN	WITHOUT_CLASSIFICATION	0.994	0.000
pages (ie if numscrollingpages < min_parallax_page_span)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
set wallpaper offset steps (1 / (number of screens - 1))	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
dont animate if were going from 0 screens	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
dont announce if apps is on top of us.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
child.setbackgroundalphamultiplier(1 - alpha)	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
in case accessibility state has changed we need to perform this on every	UNKNOWN	WITHOUT_CLASSIFICATION	0.871	0.000
attach to window	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
update wallpaper dimensions if they were changed since last onresume	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
(we also always set the wallpaper dimensions in the constructor)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
force the wallpaper offset steps to be set again because another app might have changed	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
them	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
call back to launchermodel to finish binding after the first draw	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
in software mode we dont want the items to continue to be drawn into bitmaps	UNKNOWN	WITHOUT_CLASSIFICATION	0.605	0.000
make sure were caching at least two pages always	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
enable layers between left and right screen inclusive except for the	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
customscreen which may animate its content during transitions.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
force layers to be enabled just for the call to buildlayer	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
we call these methods (ondragstartedwithitemspans/ondragstartedwithsize) whenever we start a drag in launcher regardless of whether the drag has ever entered the workspace these methods mark the appropriate pages as accepting drops (which alters their visual appearance).	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
compose a drag bitmap with the view scaled to the icon size	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if this is a text view use its drawable instead	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
compose the bitmap to create the icon from	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
the outline is used to visualize where the item will land if dropped	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the outline is used to visualize where the item will land if dropped	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
reordering handles its own animations disable the automatic ones.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
invalid and dangerous operation if workspace is loading	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
re-enable auto layout transitions for page deletion.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
initialize animation arrays for the first time if necessary	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
getresources().getinteger(r.integer.config_workspaceunshrinktime)	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
if we are animating to/from the small state then hide the side pages and fade the	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
current page in	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
in low power mode the animation doesnt play so set the end value here	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
in low power mode the animation doesnt play	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
so set the end value here	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
create a dummy animation so we dont need to do null checks later	UNKNOWN	WITHOUT_CLASSIFICATION	0.664	0.000
for animation optimations we may need to provide the launcher transition	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
with a set of views on which to force build layers in certain scenarios.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
in low power mode the animation doesnt play so set the end value here	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
in low power mode the animation doesnt play	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
so set the end value here	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we want to avoid the extra layout pass by setting the views to gone unless	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
accessibility is on in which case not setting them to gone causes a glitch.	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
we want the views to be visible for animation so fade-in/out is visible	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
invalidate here to ensure that the pages are rendered during the state change transition.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
draw the view v into the given canvas. @param v the view to draw @param destcanvas the canvas to draw on @param padding the horizontal and vertical padding to use when drawing	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
for foldericons the text can bleed into the icon area and so we need to	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
hide the text completely (which cant be achieved by clipping).	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
restore text visibility of foldericon if necessary	UNKNOWN	WITHOUT_CLASSIFICATION	0.994	0.000
returns a new bitmap to show when the given view is being dragged around. responsibility for the bitmap is transferred to the caller. @param expectedpadding padding to add to the drag view. if a different padding was used its value will be changed	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
returns a new bitmap to be used as the object outline e.g. to visualize the drop location. responsibility for the bitmap is transferred to the caller.	UNKNOWN	WITHOUT_CLASSIFICATION	0.981	0.000
returns a new bitmap to be used as the object outline e.g. to visualize the drop location. responsibility for the bitmap is transferred to the caller.	UNKNOWN	WITHOUT_CLASSIFICATION	0.981	0.000
center the image	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
make sure the drag was started by a long press as opposed to a long click.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the outline is used to visualize where the item will land if dropped	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the drag bitmap follows the touch point around on the screen	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
note the drag region is used to calculate drag layer offsets but the	UNKNOWN	WITHOUT_CLASSIFICATION	0.924	0.000
dragvisualizeoffset in addition to the dragrect (the size) to position the outline.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
clear the pressed state if necessary	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
notify launcher of drag start	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
compose a new drag bitmap that is of the icon size	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
find the childs location on the screen	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
note the drag region is used to calculate drag layer offsets but the	UNKNOWN	WITHOUT_CLASSIFICATION	0.924	0.000
dragvisualizeoffset in addition to the dragrect (the size) to position the outline.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
start the drag	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
recycle temporary bitmaps	UNKNOWN	WITHOUT_CLASSIFICATION	0.986	0.000
{@inheritdoc}	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
if its an external drop (e.g. from all apps) check if it should be accepted	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
dont accept the drop if were not over a screen at time of drop	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
we want the point to be mapped to the dragtarget.	UNKNOWN	WITHOUT_CLASSIFICATION	0.993	0.000
dont accept the drop if theres no room for the item	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if the drag started here we need to remove it from the workspace	UNKNOWN	WITHOUT_CLASSIFICATION	0.993	0.000
if the dragview is null we cant animate	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if the drag started here we need to remove it from the workspace	UNKNOWN	WITHOUT_CLASSIFICATION	0.993	0.000
we want the point to be mapped to the dragtarget.	UNKNOWN	WITHOUT_CLASSIFICATION	0.993	0.000
move internally	UNKNOWN	WITHOUT_CLASSIFICATION	0.990	0.000
first we find the cell nearest to point at which the item is	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
dropped without any consideration to whether there is an item there.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if the item being dropped is a shortcut and the nearest drop	UNKNOWN	WITHOUT_CLASSIFICATION	0.994	0.000
cell also contains a shortcut then create a folder with the two shortcuts.	UNKNOWN	WITHOUT_CLASSIFICATION	0.982	0.000
aside from the special case where were dropping a shortcut onto a shortcut	UNKNOWN	WITHOUT_CLASSIFICATION	0.978	0.000
we need to find the nearest cell location that is vacant	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
if the widget resizes on drop	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
reparent the view	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
update the items position after drop	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we post this call so that the widget has a chance to be placed	UNKNOWN	WITHOUT_CLASSIFICATION	0.823	0.000
in its final location	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if we cant find a drop location we return the item to its original position	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
prepare it to be animated into its new position	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
this must be called after the view has been re-parented	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
return a rect that has the cellwidth/cellheight (left top) and widthgap/heightgap (right bottom)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
here we store the final page that will be dropped to if the workspace in fact	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
receives the drop	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if the user drops while the page is scrolling we should use that page as the	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
destination instead of the page that is being hovered over.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
reset the scroll area and previous drag target	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we dont want to cancel the re-order alarm every time the target cell changes	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
as this feels to slow / unresponsive.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
any pending reorders are canceled	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
convert the 2d coordinate xy from the parent views coordinate space to this celllayouts coordinate space. the argument xy is modified with the return result. if cachedinversematrix is not null this method will just use that matrix instead of computing it itself we use this to avoid redundant matrix inversions in findmatchingpagefordragover	UNKNOWN	WITHOUT_CLASSIFICATION	0.878	0.000
convert the 2d coordinate xy from this celllayouts coordinate space to the parent views coordinate space. the argument xy is modified with the return result.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
this method returns the celllayout that is currently being dragged to. in order to drag to a celllayout either the touch point must be directly over the celllayout or as a second strategy we see if the dragview is overlapping any celllayout and choose the closest one return null if no celllayout is currently being dragged over	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we loop through all the screens (ie celllayouts) and see which ones overlap	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
with the item being dragged and then choose the one thats closest to the touch point	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
the custom content screen is not a valid drag over option	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
transform the touch coordinates to the celllayouts local coordinates	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if the touch point is within the bounds of the cell layout we can return immediately	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
get the center of the cell layout in screen coordinates	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
calculate the distance between the center of the celllayout	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
and the touch point	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this is used to compute the visual center of the dragview. this point is then	UNKNOWN	WITHOUT_CLASSIFICATION	0.995	0.000
used to visualize drop locations and determine where to drop an item. the idea is that	UNKNOWN	WITHOUT_CLASSIFICATION	0.988	0.000
the visual center represents the users interpretation of where the item is and hence	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
is the appropriate point to use when determining drop location.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
first off the drag view has been shifted in a way that is not represented in the	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
x and y values or the x/yoffsets. here we account for that shift.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
these represent the visual top and left of drag view if a dragrect was provided.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if a dragrect was not provided then they correspond to the actual view left and	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
top as the dragrect is in that case taken to be the entire dragview.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
r.dimen.dragviewoffsety.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
in order to find the visual center we shift by half the dragrect	UNKNOWN	WITHOUT_CLASSIFICATION	0.987	0.000
skip drag over events while we are dragging over side pages	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
ensure that we have proper spans for the item that we are dropping	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
identify whether we have dragged over a side page	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
handle the drag over	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
we want the point to be mapped to the dragtarget.	UNKNOWN	WITHOUT_CLASSIFICATION	0.993	0.000
otherwise if we arent adding to or creating a folder and theres no pending	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
reorder then we schedule a reorder	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
this shouldnt happen ever but just in case make sure we clean up the mess.	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
we want the workspace to have the whole area of the display (it will find the correct	UNKNOWN	WITHOUT_CLASSIFICATION	0.784	0.000
cell layout to drop to in the existing drag/drop logic.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
add the item specified by draginfo to the given layout. @return true if successful	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
drop an item that didnt originate on one of the workspace screens. it may have come from launcher (e.g. from all apps or customize) or it may have come from another app altogether. note this can also be called when we are outside of a drag event when we want to add an item to one of the workspace screens.	UNKNOWN	WITHOUT_CLASSIFICATION	0.993	0.000
normally removeextraemptyscreen is called in workspace#ondragend but when	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
adding an item that may not be dropped right away (due to a config activity)	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
we defer the removal until the activity returns.	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
when dragging and dropping from customization tray we deal with creating	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
widgets/shortcuts/folders in a slightly different way	UNKNOWN	WITHOUT_CLASSIFICATION	0.969	0.000
this is for other drag/drop cases like dragging from all apps	UNKNOWN	WITHOUT_CLASSIFICATION	0.986	0.000
came from all apps -- make a copy	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
first we find the cell nearest to point at which the item is	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
dropped without any consideration to whether there is an item there.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
when dragging and dropping just find the closest free spot	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
add the item to db before adding to screen ensures that the container and other	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
values of the info is properly updated.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we wrap the animation call in the temporary set and reset of the current	UNKNOWN	WITHOUT_CLASSIFICATION	0.985	0.000
celllayout to its final transform -- this means we animate the drag view to	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
the correct final location.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
normally removeextraemptyscreen is called in workspace#ondragend but when	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
adding an item that may not be dropped right away (due to a config activity)	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
we defer the removal until the activity returns.	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
when dragging and dropping from customization tray we deal with creating	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
widgets/shortcuts/folders in a slightly different way	UNKNOWN	WITHOUT_CLASSIFICATION	0.969	0.000
now we animate the dragview (ie. the widget or shortcut preview) into its final	UNKNOWN	WITHOUT_CLASSIFICATION	0.989	0.000
location and size on the home screen.	UNKNOWN	WITHOUT_CLASSIFICATION	0.993	0.000
the animation will scale the dragview about its center so we need to center about	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
in the case where weve prebound the widget we remove it from the draglayer	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
return the current {@link celllayout} correctly picking the destination screen while a scroll is in progress.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
return the current cellinfo describing our current drag this method exists so that launcher can sync this object with the correct info when the activity is created/ destroyed	UNKNOWN	WITHOUT_CLASSIFICATION	0.994	0.000
calculate the nearest cell where the given object would be dropped. pixelx and pixely should be in the coordinate system of layout	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
hardware layers on children are enabled on startup but should be disabled until	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
needed	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
called at the end of a drag which originated on the workspace.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
/ maybe move this into a smaller part	UNKNOWN	DESIGN	0.965	0.000
null check required as the allapps button doesnt have an item info	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
null check required as the allapps button doesnt have an item info	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
if datauri is not null / empty or if this component isnt one that would	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
have previously showed up in the allapps list then this is a widget-type	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
shortcut so ignore it.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
if datauri is not null / empty or if this component isnt one that would	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
have previously showed up in the allapps list then this is a widget-type	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
shortcut so ignore it.	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
null check required as the allapps button doesnt have an item info	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
do nothing	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
do nothing	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
we dont dispatch restoreinstancestate to our children using this code path.	UNKNOWN	WITHOUT_CLASSIFICATION	0.978	0.000
some pages will be restored immediately as their items are bound immediately and	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
others we will need to wait until after their items are bound.	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
we always want to exit the current layout to ensure parity of enter / exit	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
ensure that we are not dragging over to the custom content screen	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
workspace is responsible for drawing the edge glow on adjacent pages	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
so we need to redraw the workspace when this may have changed.	UNKNOWN	WITHOUT_CLASSIFICATION	0.807	0.000
returns a specific celllayout	UNKNOWN	WITHOUT_CLASSIFICATION	0.994	0.000
returns a list of all the celllayouts in the workspace.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
we should only use this to search for specific children. do not use this method to modify shortcutsandwidgetscontainer directly. includes shortcutandwidgetcontainers from the hotseat and workspace pages	UNKNOWN	DESIGN	0.963	0.000
not done process all the shortcuts	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
not done process all the shortcuts	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
removes all items that match a given package name this is usually called when a package	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
has been removed and we want to remove all components (widgets shortcuts apps) that	UNKNOWN	WITHOUT_CLASSIFICATION	0.984	0.000
belong to that package.	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
filter out all the iteminfos that this is going to affect	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
removes items that match the application info specified when applications are removed	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
as a part of an update this is called to ensure that other widgets and application	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
shortcuts are not removed.	UNKNOWN	WITHOUT_CLASSIFICATION	0.981	0.000
just create a hash table of all the specific components that this will affect	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
remove all the things	UNKNOWN	WITHOUT_CLASSIFICATION	0.998	0.000
remove all the apps from their folders	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
remove all the other children	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
note we can not remove the view directly from celllayoutchildren as this	UNKNOWN	WITHOUT_CLASSIFICATION	0.911	0.000
does not re-mark the spaces as unoccupied.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
strip all the empty screens	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
map the operator over the shortcuts and widgets return the first-non-null value. @param recurse true iterate over folder children. false op get the folders themselves. @param op the operator to map over the shortcuts	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
map over all the shortcuts on the workspace	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
map over all the children in the folder	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
break the appinfo list per user	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
create a map of the apps to test against	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
auto install icon	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
try to find the best match activity.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
could not find a default activity. remove this item.	UNKNOWN	WITHOUT_CLASSIFICATION	0.509	0.000
process next shortcut.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
restore the shortcut.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
process all the shortcuts	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
auto install icon	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
try to find the best match activity.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
could not find a default activity. remove this item.	UNKNOWN	WITHOUT_CLASSIFICATION	0.509	0.000
process next shortcut.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
restore the shortcut.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
process all the shortcuts	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
for auto install apps update the icon as well as label.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
only update the icon for restored apps.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
process all the shortcuts	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
for auto install apps update the icon as well as label.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
only update the icon for restored apps.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
process all the shortcuts	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
mark this info as broken.	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
process all the shortcuts	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
note that package states are sent only for myuser	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
mark this info as broken.	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
process all the shortcuts	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
iterate non recursively as widgets cant be inside a folder.	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
remove the provider not ready flag	UNKNOWN	WITHOUT_CLASSIFICATION	0.994	0.000
process all the widget	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
re-inflate the widgets which have changed status	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
widgetrefresh will automatically run when the packages are updated.	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
remove the provider not ready flag	UNKNOWN	WITHOUT_CLASSIFICATION	0.994	0.000
process all the widget	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
exclude the leftmost page	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
exclude the last extra empty screen (if we have > min_parallax_page_span pages)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
todo do different behavior if its a live wallpaper?	UNKNOWN	DESIGN	0.862	0.000
sometimes the left parameter of the pages is animated during a layout transition	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this parameter offsets it to keep the wallpaper from animating as well	UNKNOWN	WITHOUT_CLASSIFICATION	0.994	0.000
dont use up all the wallpaper parallax until you have at least	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
min_parallax_page_span pages	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
on rtl devices push the wallpaper offset to the right if we dont have enough	UNKNOWN	WITHOUT_CLASSIFICATION	0.994	0.000
pages (ie if numscrollingpages < min_parallax_page_span)	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
set wallpaper offset steps (1 / (number of screens - 1))	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
dont animate if were going from 0 screens	UNKNOWN	WITHOUT_CLASSIFICATION	0.999	0.000
we want to avoid the extra layout pass by setting the views to gone unless	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
accessibility is on in which case not setting them to gone causes a glitch.	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000
we want the views to be visible for animation so fade-in/out is visible	UNKNOWN	WITHOUT_CLASSIFICATION	1.000	0.000
this shouldnt happen ever but just in case make sure we clean up the mess.	UNKNOWN	WITHOUT_CLASSIFICATION	0.996	0.000
remove the current widget	UNKNOWN	WITHOUT_CLASSIFICATION	0.997	0.000