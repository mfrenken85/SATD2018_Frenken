UNKNOWN	post a new callback	97132
UNKNOWN	sets the alarm to go off in a certain number of milliseconds. if the alarm is already set	97128
UNKNOWN	its overwritten and only the new alarm setting is used	97129
UNKNOWN	this is called when our timer runs out	97130
UNKNOWN	we still need to wait some time to trigger spring loaded mode--	97131
UNKNOWN	returns the application title @return application title	97133
UNKNOWN	updates the app widgets whose id has changed during the restore process.	97134
UNKNOWN	the widget no long exists.	97135
UNKNOWN	unregister the widget ids which are not present on the workspace. this could happen	97136
UNKNOWN	when a widget place holder is removed from workspace before this method is called.	97137
UNKNOWN	add the supplied applicationinfo objects to the list and enqueue it into the list to broadcast when notify() is called. if the app is already in the list doesnt add it.	97138
UNKNOWN	todo do we clear these too?	97139
UNKNOWN	add the icons for the supplied apk called packagename.	97140
UNKNOWN	remove the apps for the given apk identified by packagename.	97141
UNKNOWN	add and remove icons for this package which has been updated.	97142
UNKNOWN	find disabled/removed activities and remove them from data and add them	97143
UNKNOWN	to the removed list.	97144
UNKNOWN	find enabled activities and add them to the adapter	97145
UNKNOWN	also updates existing activities with new labels/icons	97146
UNKNOWN	remove all data for this package.	97147
UNKNOWN	returns whether <em>apps</em> contains <em>component</em>.	97148
UNKNOWN	query the launcher apps service for whether the supplied package has main/launcher activities in the supplied package.	97149
UNKNOWN	returns whether <em>apps</em> contains <em>component</em>.	97150
UNKNOWN	find an applicationinfo object for the given packagename and classname.	97151
UNKNOWN	clears all the key listeners for the individual icons.	97152
UNKNOWN	todo revisit this	97168
UNKNOWN	convenience methods to select specific tabs. we want to set the content type immediately in these cases but we note that we still call setcurrenttabbytag() so that the tab view reflects the new content (but doesnt do the animation and logic associated with changing tabs manually).	97153
UNKNOWN	setup the tab host and create all necessary tabs.	97154
UNKNOWN	returns the content type for the specified tab tag.	97155
UNKNOWN	returns the tab tag for a given content type.	97156
UNKNOWN	disable focus on anything under this view in the hierarchy if we are not visible.	97157
UNKNOWN	reset immediately	97158
UNKNOWN	we unload the widget previews when the ui is hidden so need to reload pages	97159
UNKNOWN	load the current page synchronously and the neighboring pages asynchronously	97160
UNKNOWN	clear the widget pages of all their subviews - this will trigger the widget previews	97161
UNKNOWN	to delete their bitmaps	97162
UNKNOWN	launchertransitionable overrides	97163
UNKNOWN	going from all apps -> workspace	97164
UNKNOWN	going from workspace -> all apps	97165
UNKNOWN	make sure the current page is loaded (we start loading the side pages after the	97166
UNKNOWN	transition to prevent slowing down the animation)	97167
UNKNOWN	make sure adjacent pages are loaded (we wait until after the transition to	97169
UNKNOWN	prevent slowing down the animation)	97170
UNKNOWN	opening apps need to announce what page we are on.	97171
UNKNOWN	notify the user when the page changes	97172
UNKNOWN	going from workspace -> all apps	97173
UNKNOWN	note we should do this at the end since we check visibility state in some of the	97174
UNKNOWN	cling initialization/dismiss code above.	97175
UNKNOWN	here we bound the deltas such that the frame cannot be stretched beyond the extents of the celllayout and such that the frames borders cant cross.	97176
UNKNOWN	based on the deltas we resize the frame and if needed we resize the widget.	97177
UNKNOWN	based on the current deltas we determine if and how to resize the widget.	97178
UNKNOWN	for each border we bound the resizing based on the minimum width and the maximum	97179
UNKNOWN	expandability.	97180
UNKNOWN	update the widgets dimensions and position according to the deltas computed above	97181
UNKNOWN	we always want the final commit to match the feedback so we make sure to use the	97182
UNKNOWN	last used direction vector when committing the resize / reorder.	97183
UNKNOWN	compute landscape size	97184
UNKNOWN	compute portrait size	97185
UNKNOWN	this is the final step of the resize. here we save the new widget size and position to launchermodel and animate the resize frame.	97186
UNKNOWN	we need to make sure the frames touchable regions lie fully within the bounds of the	97187
UNKNOWN	draglayer. we allow the actual handles to be clipped but we shift the touch regions	97188
UNKNOWN	down accordingly to provide a proper touch target.	97189
UNKNOWN	in this case we shift the touch region down to start at the top of the draglayer	97190
UNKNOWN	in this case we shift the touch region up to end at the bottom of the draglayer	97191
UNKNOWN	do nothing	97192
UNKNOWN	do nothing	97193
UNKNOWN	do nothing	97194
UNKNOWN	do nothing	97195
UNKNOWN	find the rect to animate to (the view is center aligned)	97196
UNKNOWN	center the destination rect about the trash icon	97197
UNKNOWN	ensure we are using the right text size	97198
UNKNOWN	call the superclass ontouchevent first because sometimes it changes the state to	97199
UNKNOWN	ispressed() on an action_up	97200
UNKNOWN	so that the pressed outline is visible immediately on setstaypressed()	97201
UNKNOWN	we pre-create it on action_down (it takes a small but perceptible amount of time	97202
UNKNOWN	to create it)	97203
UNKNOWN	if weve touched down and up on an item and its still not pressed then	97204
UNKNOWN	destroy the pressed outline	97205
UNKNOWN	only show the shadow effect when persistent pressed state is set.	97206
UNKNOWN	pre-create shadow so show immediately on click.	97207
UNKNOWN	unlike touch events keypress event propagate pressed state change immediately	97208
UNKNOWN	without waiting for onclickhandler to execute. disable pressed state changes here	97209
UNKNOWN	to avoid flickering.	97210
UNKNOWN	if text is transparent dont draw any shadow	97211
UNKNOWN	we enhance the shadow by drawing the shadow twice	97212
UNKNOWN	keep track of the set of screens which need to be added to the db.	97213
UNKNOWN	read the extras	97214
UNKNOWN	send a broadcast to configure the widget	97215
UNKNOWN	we can only have folders with >= 2 items so we need to remove the	97216
UNKNOWN	folder and clean up if less than 2 items were included or some	97217
UNKNOWN	failed to add and less than 2 were actually added	97218
UNKNOWN	delete the folder	97219
UNKNOWN	if we have a single item promote it to where the folder	97220
UNKNOWN	would have been.	97221
UNKNOWN	noinspection statementwithemptybody	97222
UNKNOWN	return attribute value attempting launcher-specific namespace first before falling back to anonymous attribute.	97223
UNKNOWN	return attribute resource value attempting launcher-specific namespace first before falling back to anonymous attribute.	97224
UNKNOWN	read the extras	97225
UNKNOWN	send a broadcast to configure the widget	97226
UNKNOWN	we can only have folders with >= 2 items so we need to remove the	97227
UNKNOWN	folder and clean up if less than 2 items were included or some	97228
UNKNOWN	failed to add and less than 2 were actually added	97229
UNKNOWN	delete the folder	97230
UNKNOWN	if we have a single item promote it to where the folder	97231
UNKNOWN	would have been.	97232
UNKNOWN	schedule runnable to run after everything thats on the queue right now.	97233
UNKNOWN	schedule runnable to run when the queue goes idle.	97234
UNKNOWN	noinspection statementwithemptybody	97235
UNKNOWN	runs all queued runnables from the calling thread.	97236
UNKNOWN	get the drawable	97237
UNKNOWN	get the hover color	97238
UNKNOWN	the current drawable is set to either the remove drawable or the uninstall drawable	97239
UNKNOWN	and is initially set to the remove drawable as set in the layout xml.	97240
UNKNOWN	remove the text in the phone ui in landscape	97241
UNKNOWN	if we are dragging an application from appscustomize only show the control if we can	97242
UNKNOWN	delete the app (it was downloaded) and rename the string to uninstall in such a case.	97243
UNKNOWN	hide the delete target if it is a widget from appscustomize.	97244
UNKNOWN	restore the hover color if we are deleting	97245
UNKNOWN	only allow manifest shortcuts to initiate an un-install.	97246
UNKNOWN	uninstall the application if it is being dragged from appscustomize	97247
UNKNOWN	remove the folder from the workspace and delete the contents from launcher model	97248
UNKNOWN	remove the widget from the workspace	97249
UNKNOWN	deleting an app widget id is a void call but writes to disk before returning	97250
UNKNOWN	to the caller	97251
UNKNOWN	creates an animation from the current drag view to the delete trash icon.	97252
UNKNOWN	calculate how far along the velocity vector we should put the intermediate point on	97253
UNKNOWN	the bezier curve	97254
UNKNOWN	intermediate t/l	97255
UNKNOWN	drag view t/l	97256
UNKNOWN	delete target t/l	97257
UNKNOWN	dont highlight the icon as its animating	97258
UNKNOWN	dont highlight the target if we are flinging from allapps	97259
UNKNOWN	defer animating out the drop target if we are animating to it	97260
UNKNOWN	note because it takes time for the first frame of animation to actually be	97261
UNKNOWN	called and we expect the animation to be a continuation of the fling we have	97262
UNKNOWN	to account for the time that has elapsed since the fling finished. and since	97263
UNKNOWN	we dont have a startdelay we will always get call to update when we call	97264
UNKNOWN	start() (which we want to ignore).	97265
UNKNOWN	if we are dragging from allapps then we allow appscustomizepagedview to clean up	97266
UNKNOWN	itself otherwise complete the drop to initiate the deletion process	97267
UNKNOWN	if we are dragging from allapps then we allow appscustomizepagedview to clean up	97268
UNKNOWN	itself otherwise complete the drop to initiate the deletion process	97269
UNKNOWN	clean up any references to source/generated bitmaps	97270
UNKNOWN	load each of the widget previews in the background	97271
UNKNOWN	all the widget previews are loaded so we can just callback to inflate the page	97272
UNKNOWN	load the widget previews	97366
UNKNOWN	load the widget previews	97367
UNKNOWN	pagedviewwithdraggableitems implementation	97290
UNKNOWN	returns the item index of the center item on this page so that we can restore to this item index when we rotate.	97273
UNKNOWN	get the index of the item to restore to if we need to restore the current page.	97274
UNKNOWN	returns the page in the current orientation which is expected to contain the specified item index.	97275
UNKNOWN	restores the page for an item at the specified index	97276
UNKNOWN	now that the data is ready we can calculate the content width the number of cells to	97277
UNKNOWN	use for each page	97278
UNKNOWN	force a measure to update recalculate the gaps	97279
UNKNOWN	this code triggers requestlayout so must be posted outside of the	97280
UNKNOWN	layout pass.	97281
UNKNOWN	this code triggers requestlayout so must be posted outside of the	97282
UNKNOWN	layout pass.	97283
UNKNOWN	get the list of widgets and shortcuts	97284
UNKNOWN	ensure that all widgets we show can be added on a workspace of this size	97285
UNKNOWN	just add shortcuts	97286
UNKNOWN	when we have exited all apps or are in transition disregard clicks	97287
UNKNOWN	let the user know that they have to long press to add a widget	97288
UNKNOWN	create a little animation to show that the widget can move	97289
UNKNOWN	disable dragging by pulling an app down for now.	97291
UNKNOWN	we want the first widget layout to be the correct size. this will be important	97292
UNKNOWN	for width size reporting to the appwidgetmanager.	97293
UNKNOWN	we want the first widget layout to be the correct size. this will be important	97294
UNKNOWN	for width size reporting to the appwidgetmanager.	97295
UNKNOWN	we are anticipating a long press and we use this time to load bind and instantiate	97296
UNKNOWN	the widget. this will need to be cleaned up if it turns out no long press occurs.	97297
UNKNOWN	just in case the cleanup process wasnt properly executed. this shouldnt happen.	97298
UNKNOWN	if the widget was not added we may need to do further cleanup.	97299
UNKNOWN	we never did any preloading so just remove pending callbacks to do so	97300
UNKNOWN	delete the widget id which was allocated	97301
UNKNOWN	we never got around to inflating the widget so remove the callback to do so.	97302
UNKNOWN	delete the widget id which was allocated	97303
UNKNOWN	the widget was inflated and added to the draglayer -- remove it.	97304
UNKNOWN	get the widget preview as the drag representation	97305
UNKNOWN	if the imageview doesnt have a drawable yet the widget preview hasnt been loaded and	97306
UNKNOWN	we abort the drag.	97307
UNKNOWN	compose the drag image	97308
UNKNOWN	this can happen in some weird cases involving multi-touch. we cant start dragging	97309
UNKNOWN	the widget if this is null so we break out.	97310
UNKNOWN	compare the size of the drag preview to the preview in the appscustomize tray	97311
UNKNOWN	the bitmap in the appscustomize tray is always the the same size so there	97312
UNKNOWN	might be extra pixels around the preview itself - this accounts for that	97313
UNKNOWN	dont clip alpha values for the drag outline if were using the default widget preview	97314
UNKNOWN	save the preview for the outline generation then dim the preview	97315
UNKNOWN	start the drag	97316
UNKNOWN	we delay entering spring-loaded mode slightly to make sure the ui	97317
UNKNOWN	thready is free of any work.	97318
UNKNOWN	we dont enter spring-loaded mode if the drag has been cancelled	97319
UNKNOWN	go into spring loaded mode (must happen before we startdrag())	97320
UNKNOWN	we dont enter spring-loaded mode if the drag has been cancelled	97321
UNKNOWN	go into spring loaded mode (must happen before we startdrag())	97322
UNKNOWN	clean up after dragging. @param target where the item was dragged to (can be null if the item was flung)	97323
UNKNOWN	exit spring loaded mode if we have not successfully dropped or have not handled the	97324
UNKNOWN	drop in workspace	97325
UNKNOWN	return early and wait for onflingtodeletecompleted if this was the result of a fling	97326
UNKNOWN	display an error message if the drag failed due to there not being enough space on the	97327
UNKNOWN	target layout we were dropping on.	97328
UNKNOWN	we just dismiss the drag when we fling so cleanup here	97329
UNKNOWN	clean up all the async tasks	97330
UNKNOWN	weve already preallocated the views for the data to load into so clear them as well	97331
UNKNOWN	widgets appear to be cleared every time you leave always force invalidate for them	97332
UNKNOWN	update the thread priorities given the direction lookahead	97333
UNKNOWN	apps pagedview implementation	97334
UNKNOWN	note we force a measure here to get around the fact that when we do layout calculations	97335
UNKNOWN	immediately after syncing we dont have a proper width. that said we already know the	97336
UNKNOWN	expected page width so we can actually optimize by hiding all the textview-based	97337
UNKNOWN	children that are expensive to measure and let that happen naturally later.	97338
UNKNOWN	ensure that we have the right number of items on the pages	97339
UNKNOWN	a helper to return the priority for loading of the specified widget page.	97340
UNKNOWN	if we are snapping to another page use that index as the target page index	97341
UNKNOWN	we use the distance from the target page as an initial guess of priority but if there	97342
UNKNOWN	are no pages of higher priority than the page specified then bump up the priority of	97343
UNKNOWN	the specified page.	97344
UNKNOWN	return the appropriate thread priority for loading for a given page (we give the current page much higher priority)	97345
UNKNOWN	todo-apps_customize detect number of cores and set thread priorities accordingly below	97346
UNKNOWN	creates and executes a new asynctask to load a page of widget previews.	97347
UNKNOWN	prune all tasks that are no longer needed	97348
UNKNOWN	we introduce a slight delay to order the loading of side pages so that we dont thrash	97349
UNKNOWN	do cleanup inside onsyncwidgetpageitems	97350
UNKNOWN	ensure that the task is appropriately prioritized and runs in parallel	97351
UNKNOWN	do cleanup inside onsyncwidgetpageitems	97352
UNKNOWN	widgets pagedview implementation	97353
UNKNOWN	note we force a measure here to get around the fact that when we do layout calculations	97354
UNKNOWN	immediately after syncing we dont have a proper width.	97355
UNKNOWN	calculate the dimensions of each cell we are giving to each widget	97356
UNKNOWN	prepare the set of widgets to load previews for in the background	97357
UNKNOWN	prepopulate the pages with the other widget info and fill in the previews later	97358
UNKNOWN	fill in the widget information	97359
UNKNOWN	determine the widget spans and min resize spans.	97360
UNKNOWN	fill in the shortcuts information	97361
UNKNOWN	layout each widget	97362
UNKNOWN	wait until a call on onlayout to start loading because	97363
UNKNOWN	pagedviewwidget.getpreviewsize() will return 0 if it hasnt been laid out	97364
UNKNOWN	todo can we do a measure/layout immediately?	97365
UNKNOWN	loadwidgetpreviewsinbackground can be called without a task to load a set of widget	97368
UNKNOWN	previews synchronously	97369
UNKNOWN	ensure that this task starts running at the correct priority	97370
UNKNOWN	load each of the widget/shortcut previews	97371
UNKNOWN	ensure we havent been cancelled yet	97372
UNKNOWN	before work on each item ensure that this task is running at the correct	97373
UNKNOWN	priority	97374
UNKNOWN	update all thread priorities	97375
UNKNOWN	we want our pages to be z-ordered such that the further a page is to the left the higher	97376
UNKNOWN	it is in the z-order. this is important to insure touch events are handled correctly.	97377
UNKNOWN	in apps customize we have a scrolling effect which emulates pulling cards off of a stack.	97378
UNKNOWN	make sure were caching at least two pages always	97379
UNKNOWN	used by the parent to get the content width to set the tab bar to @return	97380
UNKNOWN	we reset the save index when we change pages so that it will be recalculated on next	97381
UNKNOWN	rotation	97382
UNKNOWN	allappsview implementation	97383
UNKNOWN	we should call thise method whenever the core data changes (mapps mwidgets) so that we can appropriately determine when to invalidate the pagedview page data. in cases where the data has yet to be set we can requestlayout() and wait for ondataready() to be called in the next onmeasure() pass which will trigger an invalidatepagedata() itself.	97384
UNKNOWN	the next layout pass will trigger data-ready if both widgets and apps are set so	97385
UNKNOWN	request a layout to trigger the page data when ready.	97386
UNKNOWN	we add it in place in alphabetical order	97387
UNKNOWN	loop through all the apps and remove apps that have the same component	97388
UNKNOWN	we remove and re-add the updated applications list because its properties may have	97389
UNKNOWN	changed (ie. the title) and this will ensure that the items will be in their proper	97390
UNKNOWN	place in the list.	97391
UNKNOWN	if we have reset then we should not continue to restore the previous state	97392
UNKNOWN	todo dump information related to current list of applications widgets etc.	97393
UNKNOWN	todo if we are in the middle of any process (ie. for holographic outlines etc) we	97394
UNKNOWN	should stop this now.	97395
UNKNOWN	stop all background tasks	97396
UNKNOWN	put the page indicators above the hotseat	97447
UNKNOWN	layout allapps	97448
UNKNOWN	center the all apps page indicator	97449
UNKNOWN	apply any partner customization grid overrides. currently we support all apps row / column count.	97397
UNKNOWN	allapps uses the original non-scaled icon size	97398
UNKNOWN	determine the exact visual footprint of the all apps button taking into account scaling and internal padding of the drawable.	97399
UNKNOWN	there are three possible configurations that the dynamic grid accounts for portrait	97400
UNKNOWN	landscape with the nav bar at the bottom and landscape with the nav bar at the side.	97401
UNKNOWN	to prevent waiting for fitsystemwindows() we make the observation that in landscape	97402
UNKNOWN	the height is the smallest height (either with the nav bar at the bottom or to the	97403
UNKNOWN	side) and otherwise the height is simply the largest possible height for a portrait	97404
UNKNOWN	device.	97405
UNKNOWN	check to see if the icons fit in the new available height. if not then we need to	97406
UNKNOWN	shrink the icon size.	97407
UNKNOWN	make the callbacks	97408
UNKNOWN	search bar	97409
UNKNOWN	calculate the actual text height	97410
UNKNOWN	folder	97411
UNKNOWN	all apps	97412
UNKNOWN	returns the closest device profile given the width and height and a list of profiles	97413
UNKNOWN	returns the closest device profiles ordered by closeness to the specified width and height	97414
UNKNOWN	sort the profiles by their closeness to the dimensions	97415
UNKNOWN	returns the search bar top offset	97416
UNKNOWN	returns the search bar bounds in the current orientation	97417
UNKNOWN	returns the search bar bounds in the specified orientation	97418
UNKNOWN	pad the left and right of the workspace to ensure consistent spacing	97419
UNKNOWN	between all icons	97420
UNKNOWN	xxx if the icon size changes across orientations we will have to take	97421
UNKNOWN	that into account here too.	97422
UNKNOWN	returns the bounds of the workspace page indicators.	97423
UNKNOWN	returns the workspace padding in the specified orientation	97424
UNKNOWN	pad the left and right of the workspace with search/hotseat bar sizes	97425
UNKNOWN	pad the left and right of the workspace to ensure consistent spacing	97426
UNKNOWN	between all icons	97427
UNKNOWN	pad the top and bottom of the workspace with search/hotseat bar sizes	97428
UNKNOWN	in landscape mode the page spacing is set to the default.	97429
UNKNOWN	in portrait we want the pages spaced such that there is no	97430
UNKNOWN	overhang of the previous / next page into the current page viewport.	97431
UNKNOWN	we assume symmetrical padding in portrait mode.	97432
UNKNOWN	the rect returned will be extended to below the system ui that covers the workspace	97433
UNKNOWN	layout the search bar space	97434
UNKNOWN	vertical search bar space	97435
UNKNOWN	searchbar.setpadding(	97436
UNKNOWN	0 2 edgemarginpx 0	97437
UNKNOWN	2 edgemarginpx)	97438
UNKNOWN	horizontal search bar space	97439
UNKNOWN	searchbar.setpadding(	97440
UNKNOWN	2 edgemarginpx	97441
UNKNOWN	getsearchbartopoffset()	97442
UNKNOWN	2 edgemarginpx 0)	97443
UNKNOWN	layout the workspace	97444
UNKNOWN	layout the page indicators	97445
UNKNOWN	hide the page indicators when we have vertical search/hotseat	97446
UNKNOWN	constrain the dimensions of all apps so that it does not span the full width	97450
UNKNOWN	only adjust the side paddings on landscape phones or tablets	97451
UNKNOWN	the icons are centered so we cant just offset by the page indicator height	97452
UNKNOWN	because the empty space will actually be pageindicatorheight + paddingtb	97453
UNKNOWN	horizontal padding for the whole paged view	97454
UNKNOWN	layout the overview mode	97455
UNKNOWN	we have enough space. lets add some margin too.	97456
UNKNOWN	set margin of all visible children except the last visible child	97457
UNKNOWN	sets the scale of the view over the normal workspace icon size.	97458
UNKNOWN	suppress dead code warning	97459
UNKNOWN	create a window containing this view and show it. @param windowtoken obtained from v.getwindowtoken() from one of your views @param touchx the x coordinate the user touched in draglayer coordinates @param touchy the y coordinate the user touched in draglayer coordinates	97460
UNKNOWN	start the pick-up animation	97461
UNKNOWN	post the animation to skip other expensive work happening on the first frame	97462
UNKNOWN	move the window containing this view. @param touchx the x coordinate the user touched in draglayer coordinates @param touchy the y coordinate the user touched in draglayer coordinates	97463
UNKNOWN	starts a drag. @param v the view that is being dragged @param bmp the bitmap that represents the view being dragged @param source an object representing where the drag originated @param draginfo the data associated with the object that is being dragged @param dragaction the drag action either {@link #drag_action_move} or {@link #drag_action_copy} @param dragregion coordinates within the bitmap b for the position of item being dragged. makes dragging feel more precise e.g. you can clip out a transparent border	97464
UNKNOWN	starts a drag. @param b the bitmap to display as the drag image. it will be re-scaled to the enlarged size. @param draglayerx the x position in the draglayer of the left-top of the bitmap. @param draglayery the y position in the draglayer of the left-top of the bitmap. @param source an object representing where the drag originated @param draginfo the data associated with the object that is being dragged @param dragaction the drag action either {@link #drag_action_move} or {@link #drag_action_copy} @param dragregion coordinates within the bitmap b for the position of item being dragged. makes dragging feel more precise e.g. you can clip out a transparent border	97465
UNKNOWN	hide soft keyboard if visible	97466
UNKNOWN	draw the view into a bitmap.	97467
UNKNOWN	reset the drawing cache background color to fully transparent	97468
UNKNOWN	for the duration of this operation	97469
UNKNOWN	restore the view	97470
UNKNOWN	call this from a drag source view like this <pre> @override public boolean dispatchkeyevent(keyevent event) { return mdragcontroller.dispatchkeyevent(this event) || super.dispatchkeyevent(event) </pre>	97471
UNKNOWN	stop dragging without dropping.	97472
UNKNOWN	cancel the current drag if we are removing an app that we are dragging	97473
UNKNOWN	added null checks to prevent npe weve seen in the wild	97474
UNKNOWN	only end the drag if we are not deferred	97475
UNKNOWN	this only gets called as a result of drag view cleanup being deferred in enddrag()	97476
UNKNOWN	if we skipped calling ondragend() before do it now	97477
UNKNOWN	clamps the position to the drag layer bounds.	97478
UNKNOWN	call this from a drag source view.	97479
UNKNOWN	suppress dead code warning	97480
UNKNOWN	update the velocity tracker	97481
UNKNOWN	verify the edgeswipe menu	97482
UNKNOWN	remember location of down touch	97483
UNKNOWN	mdragging = false	97484
UNKNOWN	ignore menu if dragging	97485
UNKNOWN	if from the edges and in limits	97486
UNKNOWN	sets the view that should handle move events.	97487
UNKNOWN	drop on someone?	97488
UNKNOWN	check if we are hovering over the scroll areas	97489
UNKNOWN	call this from a drag source view.	97490
UNKNOWN	update the velocity tracker	97491
UNKNOWN	remember where the motion event started	97492
UNKNOWN	ensure that weve processed a move event at the current pointer	97493
UNKNOWN	location.	97494
UNKNOWN	determines whether the user flung the current item to delete it. @return the vector at which the item was flung or null if no fling was detected.	97495
UNKNOWN	do a quick dot product test to ensure that we are flinging upwards	97496
UNKNOWN	clean up dragging on the target if its not the current fling delete target otherwise	97497
UNKNOWN	start dragging to it.	97498
UNKNOWN	drop onto the fling-to-delete target	97499
UNKNOWN	we must set dragcomplete to true _only_ after we enter the fling-to-delete target for	97500
UNKNOWN	drop	97501
UNKNOWN	sets the drag listner which will be notified when a drag starts or ends.	97502
UNKNOWN	remove a previously installed drag listener.	97503
UNKNOWN	add a droptarget to the list of potential places to receive drop events.	97504
UNKNOWN	dont send drop events to <em>target</em> any more.	97505
UNKNOWN	sets the current fling-to-delete drop target.	97506
UNKNOWN	set which view scrolls for touch events near the edge of the screen.	97507
UNKNOWN	check the scroll again so that we can requeue the scroller if necessary	97508
UNKNOWN	check the scroll again so that we can requeue the scroller if necessary	97509
UNKNOWN	applies the new bitmap. @return true if the view was invalidated.	97510
UNKNOWN	draw the bitmap into the bounding rect	97511
UNKNOWN	no op	97512
UNKNOWN	when enabled the icon is grayed out and the contrast is increased to give it a ghost appearance.	97513
UNKNOWN	for ghost mode set the color range to [ghost_mode_min_color_range 255]	97514
UNKNOWN	brightness c-new = c-old(1-amount) + amount	97515
UNKNOWN	add the amount to rgb components of the matrix as per the above formula.	97516
UNKNOWN	fifth elements in the array correspond to the constant being added to	97517
UNKNOWN	red blue green and alpha channel respectively.	97518
UNKNOWN	only used for viewpropertyanimators	97519
UNKNOWN	if the current play time exceeds the duration or the animated fraction is 1	97520
UNKNOWN	the animation will get finished even if we call setcurrentplaytime -- therefore	97521
UNKNOWN	dont adjust the animation in that case	97522
UNKNOWN	if we havent drawn our first frame reset the time to t = 0	97523
UNKNOWN	(give up after max_delay ms of waiting though - might happen for example if we	97524
UNKNOWN	are no longer in the foreground and no frames are being rendered ever)	97525
UNKNOWN	the first frame on animations doesnt always trigger an invalidate	97526
UNKNOWN	force an invalidate here to make sure the animation continues to advance	97527
UNKNOWN	for the second frame if the first frame took more than 16ms	97528
UNKNOWN	adjust the start time and pretend it took only 16ms anyway. this	97529
UNKNOWN	prevents a large jump in the animation due to an expensive first frame	97530
UNKNOWN	redraw if it is already showing. this avoids a bug where the height changes by a small	97531
UNKNOWN	amount on connecting/disconnecting a bluetooth keyboard.	97532
UNKNOWN	view not yet laid out. wait until the view is ready to be drawn so that be can	97533
UNKNOWN	get the location on screen.	97534
UNKNOWN	gets the location of a view relative in the window off-setting any shift due to page view scroll	97535
UNKNOWN	ill take it from here	97536
UNKNOWN	ensure that the overlay view stays on top. we cant use drawing order for this	97537
UNKNOWN	because in api level 16 touch dispatch doesnt respect drawing order.	97538
UNKNOWN	skip propagating onrequestsendaccessibilityevent all for other children	97539
UNKNOWN	when a folder is open	97540
UNKNOWN	only add the folder as a child for accessibility when it is open	97541
UNKNOWN	if weve received this weve already done the necessary handling	97542
UNKNOWN	in onintercepthoverevent. return true to consume the event.	97543
UNKNOWN	determine the rect of the descendant in this draglayers coordinates @param descendant the descendant whose coordinates we want to find. @param r the rect into which to place the results. @return the factor by which this descendant is scaled relative to this draglayer.	97544
UNKNOWN	because in api level 16 touch dispatch doesnt respect drawing order.	97570
UNKNOWN	between platform versions 17 and 18 behavior for onchildviewremoved / added changed.	97571
UNKNOWN	pre-18 the child was not added / removed by the time of those callbacks. we need to	97572
UNKNOWN	force update our representation of things here to avoid crashing on pre-18 devices	97573
UNKNOWN	in certain instances.	97574
UNKNOWN	i represents the current draw iteration	97575
UNKNOWN	given a coordinate relative to the descendant find the coordinate in this draglayers coordinates. @param descendant the descendant to which the passed coordinate is relative. @param coord the coordinate that we want mapped. @param includerootscroll whether or not to account for the scroll of the root descendant sometimes this is relevant as in a childs coordinates within the root descendant. @return the factor by which this descendant is scaled relative to this draglayer. caution this scale factor is assumed to be equal in x and y and so if at any point this assumption fails we will need to return a pair of scale factors.	97545
UNKNOWN	inverse of {@link #getdescendantcoordrelativetoself(view int[])}.	97546
UNKNOWN	since the child hasnt necessarily been laid out we force the lp to be updated with	97547
UNKNOWN	the correct coordinates (above) and use these to determine the final location	97548
UNKNOWN	we need to account for the scale of the child itself as the above only accounts for	97549
UNKNOWN	for the scale in parents.	97550
UNKNOWN	account for the source scale of the icon (ie. from allapps to workspace in which	97551
UNKNOWN	the workspace may have smaller icon bounds).	97552
UNKNOWN	the child may be scaled (always about the center of the view) so to account for it	97553
UNKNOWN	we have to offset the position by the scaled size. once we do that we can center	97554
UNKNOWN	the drag view about the scaled child view.	97555
UNKNOWN	account for holographic blur padding on the drag view	97556
UNKNOWN	center in the x coordinate about the targets drawable	97557
UNKNOWN	this method animates a view at the end of a drag and drop animation. @param view the view to be animated. this view is drawn directly into draglayer and so doesnt need to be a child of draglayer. @param from the initial location of the view. only the left and top parameters are used. @param to the final location of the view. only the left and top parameters are used. this location doesnt account for scaling and so should be centered about the desired final location (including scaling). @param finalalpha the final alpha of the view in case we want it to fade as it animates. @param finalscale the final scale of the view. the view is scaled about its center. @param duration the duration of the animation. @param motioninterpolator the interpolator to use for the location of the view. @param alphainterpolator the interpolator to use for the alpha of the view. @param oncompleterunnable optional runnable to run on animation completion. @param fadeout whether or not to fade out the view once the animation completes. if true the runnable will execute after the view is faded out. @param anchorview if not null this represents the view which the animated view stays anchored to in case scrolling is currently taking place. note currently this is only used for the x dimension for the case of the workspace.	97558
UNKNOWN	calculate the duration of the animation based on the objects distance	97559
UNKNOWN	if duration < 0 this is a cue to compute the duration based on the distance	97560
UNKNOWN	fall back to cubic ease out interpolator for the animation if none is specified	97561
UNKNOWN	animate the view	97562
UNKNOWN	clean up the previous animations	97563
UNKNOWN	show the drop view if it was previously hidden	97564
UNKNOWN	set the anchor view if the page is scrolling	97565
UNKNOWN	create and start the animation	97566
UNKNOWN	ensure that the overlay view stays on top. we cant use drawing order for this	97567
UNKNOWN	because in api level 16 touch dispatch doesnt respect drawing order.	97568
UNKNOWN	ensure that the overlay view stays on top. we cant use drawing order for this	97569
UNKNOWN	in general we do nothing	97576
UNKNOWN	if we have a top index we return it when drawing last item (highest z-order)	97577
UNKNOWN	for indexes greater than the top index we fetch one item above to shift for the	97578
UNKNOWN	displacement of the top index	97579
UNKNOWN	note this is a reimplementation of view.islayoutrtl() since that is currently hidden api.	97580
UNKNOWN	draw the background gradient below children.	97581
UNKNOWN	we want to draw the page hints above the workspace but below the drag view.	97582
UNKNOWN	list do not scroll horizontally.	97583
UNKNOWN	catch the back button on the soft keyboard so that we can just close the activity	97584
UNKNOWN	if there is no next page	97614
UNKNOWN	select the next icon	97653
UNKNOWN	private helper to get the parent tabhost in the view hiearchy.	97585
UNKNOWN	returns the viewgroup containing page contents for the page at the index specified.	97586
UNKNOWN	there are two layers a pagedviewcelllayout and pagedviewcelllayoutchildren	97587
UNKNOWN	handles key events in a pageviewextendedlayout containing pagedviewwidgets.	97588
UNKNOWN	now that we load items in the bg asynchronously we cant just focus	97589
UNKNOWN	child siblings willy-nilly	97590
UNKNOWN	select the previous widget or the last widget on the previous page	97591
UNKNOWN	select the next widget or the first widget on the next page	97592
UNKNOWN	select the closest icon in the previous row otherwise select the tab bar	97593
UNKNOWN	select the closest icon in the previous row otherwise do nothing	97594
UNKNOWN	simulate a click on the widget	97595
UNKNOWN	select the first item on the previous page or the first item on this page	97596
UNKNOWN	if there is no previous page	97597
UNKNOWN	select the first item on the next page or the last item on this page	97598
UNKNOWN	if there is no next page	97599
UNKNOWN	select the first item on this page	97600
UNKNOWN	select the last item on this page	97601
UNKNOWN	handles key events in a pageviewcelllayout containing pagedviewicons.	97602
UNKNOWN	note we have an extra parent because of the	97603
UNKNOWN	pagedviewcelllayout/pagedviewcelllayoutchildren relationship	97604
UNKNOWN	side pages do not always load synchronously so check before focusing child siblings	97605
UNKNOWN	willy-nilly	97606
UNKNOWN	select the previous icon or the last icon on the previous page	97607
UNKNOWN	select the next icon or the first icon on the next page	97608
UNKNOWN	select the closest icon in the previous row otherwise select the tab bar	97609
UNKNOWN	select the closest icon in the next row otherwise do nothing	97610
UNKNOWN	select the first icon on the previous page or the first icon on this page	97611
UNKNOWN	if there is no previous page	97612
UNKNOWN	select the first icon on the next page or the last icon on this page	97613
UNKNOWN	select the first icon on this page	97615
UNKNOWN	select the last icon on this page	97616
UNKNOWN	handles key events in the tab widget.	97617
UNKNOWN	select the previous tab	97618
UNKNOWN	select the next tab or if the last tab has a focus right id select that	97619
UNKNOWN	do nothing	97620
UNKNOWN	select the content view	97621
UNKNOWN	handles key events in the workspace hotseat (bottom of the screen).	97622
UNKNOWN	note currently we dont special case for the phone ui in different	97623
UNKNOWN	orientations even though the hotseat is on the side in landscape mode. this	97624
UNKNOWN	is to ensure that accessibility consistency is maintained across rotations.	97625
UNKNOWN	select the previous button otherwise do nothing	97626
UNKNOWN	select the next button otherwise do nothing	97627
UNKNOWN	select the first bubble text view in the current page of the workspace	97628
UNKNOWN	do nothing	97629
UNKNOWN	private helper method to get the celllayoutchildren given a celllayout index.	97630
UNKNOWN	private helper method to sort all the celllayout children in order of their (xy) spatially from top left to bottom right.	97631
UNKNOWN	first we order each the celllayout children by their xy coordinates	97632
UNKNOWN	private helper method to find the index of the next bubbletextview or foldericon in the direction delta. @param delta either -1 or 1 depending on the direction we want to search	97633
UNKNOWN	then we find the next bubbletextview offset by delta from i	97634
UNKNOWN	private helper method to find the next closest bubbletextview or foldericon in the direction delta on the next line. @param delta either -1 or 1 depending on the line and direction we want to search	97635
UNKNOWN	handles key events in a workspace containing.	97636
UNKNOWN	select the previous icon or the last icon on the previous page if possible	97637
UNKNOWN	snap to the previous page	97638
UNKNOWN	select the next icon or the first icon on the next page if possible	97639
UNKNOWN	snap to the next page	97640
UNKNOWN	select the closest icon in the previous line otherwise select the tab bar	97641
UNKNOWN	select the closest icon in the next line otherwise select the button bar	97642
UNKNOWN	select the first icon on the previous page or the first icon on this page	97643
UNKNOWN	if there is no previous page	97644
UNKNOWN	snap to the previous page	97645
UNKNOWN	select the first icon on the next page or the last icon on this page	97646
UNKNOWN	if there is no previous page	97647
UNKNOWN	snap to the next page	97648
UNKNOWN	select the first icon on this page	97649
UNKNOWN	select the last icon on this page	97650
UNKNOWN	handles key events for items in a folder.	97651
UNKNOWN	select the previous icon	97652
UNKNOWN	select the closest icon in the previous line	97654
UNKNOWN	select the closest icon in the next line	97655
UNKNOWN	select the first icon on this page	97656
UNKNOWN	select the last icon on this page	97657
UNKNOWN	add an app or shortcut @param item	97658
UNKNOWN	remove an app or shortcut. does not change the db. @param item	97659
UNKNOWN	one time call to generate the pressed/focused state -- must be called after	97660
UNKNOWN	measure/layout	97661
UNKNOWN	one time call to generate the pressed/focused state -- must be called after	97662
UNKNOWN	measure/layout	97663
UNKNOWN	suppress dead code warning	97664
UNKNOWN	offset the preview background to center this view accordingly	97665
UNKNOWN	location is expressed in window coordinates	97666
UNKNOWN	location is expressed in window coordinates	97667
UNKNOWN	todo we currently dont support spring-loading for pendingaddshortcutinfos even	97668
UNKNOWN	though widget-style shortcuts can be added to folders. the issue is that we need	97669
UNKNOWN	to deal with configuration activities which are currently handled in	97670
UNKNOWN	workspace#ondropexternal.	97671
UNKNOWN	came from all apps -- make a copy.	97672
UNKNOWN	shortcutinfo	97673
UNKNOWN	these correspond two the drawable and view that the icon was dropped _onto_	97674
UNKNOWN	this will animate the first item from its position as an icon into its	97675
UNKNOWN	position as the first item in the preview	97676
UNKNOWN	this will animate the dragview (srcview) into the new folder	97677
UNKNOWN	this will animate the first item from its position as an icon into its	97678
UNKNOWN	position as the first item in the preview	97679
UNKNOWN	typically the animateview corresponds to the dragview however if this is being done	97680
UNKNOWN	after a configuration activity (ie. for a shortcut being dragged from allapps) we	97681
UNKNOWN	will not have a view to animate	97682
UNKNOWN	set celllayout and this to its final state to compute final animation locations	97683
UNKNOWN	finished computing final animation locations restore current state	97684
UNKNOWN	came from all apps -- make a copy	97685
UNKNOWN	cos(45) = 0.707 + ~= 0.1) = 0.8f	97686
UNKNOWN	we want to imagine our coordinates from the bottom left growing up and to the	97687
UNKNOWN	right. this is natural for the x-axis but for the y-axis we have to invert things.	97688
UNKNOWN	update our drawing parameters if necessary	97689
UNKNOWN	call the superclass ontouchevent first because sometimes it changes the state to	97690
UNKNOWN	ispressed() on an action_up	97691
UNKNOWN	location is expressed in window coordinates	97692
UNKNOWN	location is expressed in window coordinates	97693
UNKNOWN	generate the pressed/focused states if necessary.	97694
UNKNOWN	noinspection zerolengtharrayallocation	97695
UNKNOWN	invalidates the pressed/focused states.	97696
UNKNOWN	creates a copy of the original image.	97697
UNKNOWN	creates a new press state image which is the old image with a blue overlay. responsibility for the bitmap is transferred to the caller.	97698
UNKNOWN	applies a more expensive and accurate outline to whatever is currently drawn in a specified bitmap.	97699
UNKNOWN	we start by removing most of the alpha channel so as to ignore shadows and	97700
UNKNOWN	other types of partial transparency when defining the shape of the object	97701
UNKNOWN	calculate the outer blur first	97702
UNKNOWN	calculate the inner blur	97703
UNKNOWN	mask out the inner blur	97704
UNKNOWN	draw the inner and outer blur	97705
UNKNOWN	draw the bright outline	97706
UNKNOWN	cleanup	97707
UNKNOWN	adjust the clip rect so that we dont include the text label	97708
UNKNOWN	draw the view into the bitmap.	97709
UNKNOWN	the translate of scrollx and scrolly is necessary when drawing textviews because	97710
UNKNOWN	they set scrollx and scrolly to large values to achieve centered text	97711
UNKNOWN	we use the same intents as lawnchair.	97712
UNKNOWN	we find out how tall the text view wants to be (it is set to wrap_content) so that	97713
UNKNOWN	we can allocate the appropriate amount of space for it.	97714
UNKNOWN	we disable action mode for now since it messes up the view on phones	97715
UNKNOWN	return if global dragging is not enabled	97716
UNKNOWN	convert to a string here to ensure that no other state associated with the text field	97717
UNKNOWN	gets saved.	97718
UNKNOWN	in order to clear the focus from the text field we set the focus on ourself. this	97719
UNKNOWN	ensures that every time the field is clicked focus is gained giving reliable behavior.	97720
UNKNOWN	we need to handle touch events to prevent them from falling through to the workspace below.	97721
UNKNOWN	when the folder gets focus we dont want to announce the list of items.	97722
UNKNOWN	@return the folderinfo object associated with this folder	97723
UNKNOWN	we rearrange the items in case there are any empty gaps	97724
UNKNOWN	if our folder has too many items we prune them from the list. this is an issue	97725
UNKNOWN	when upgrading from the old folders implementation which could contain an unlimited	97726
UNKNOWN	number of items.	97727
UNKNOWN	in case any children didnt come across during loading clean up the folder accordingly	97728
UNKNOWN	creates a new userfolder inflated from r.layout.user_folder. @param context the applications context. @return a new userfolder.	97729
UNKNOWN	this method is intended to make the userfolder to be visually identical in size and position to its associated foldericon. this allows for a seamless transition into the expanded state.	97730
UNKNOWN	in low power mode the animation doesnt play so set the end value here	97731
UNKNOWN	in low power mode the animation doesnt play so set the end value here	97732
UNKNOWN	mcontent.setalpha(0f) animator iconsalpha = launcheranimutils.offloat(mcontent alpha 0f 1f) iconsalpha.setduration(mmaterialexpandduration) iconsalpha.setstartdelay(mmaterialexpandstagger) iconsalpha.setinterpolator(new accelerateinterpolator(1.5f)) mfoldername.setalpha(0f) animator textalpha = launcheranimutils.offloat(mfoldername alpha 0f 1f) textalpha.setduration(mmaterialexpandduration) textalpha.setstartdelay(mmaterialexpandstagger) textalpha.setinterpolator(new accelerateinterpolator(1.5f))	97733
UNKNOWN	in low power mode the animation doesnt play so set the end value here	97734
UNKNOWN	anim.play(iconsalpha) anim.play(textalpha)	97735
UNKNOWN	make sure the folder picks up the last drag move even if the finger doesnt move.	97736
UNKNOWN	in low power mode the animation doesnt play so set the end value here	97737
UNKNOWN	final objectanimator oa = launcheranimutils.ofpropertyvaluesholder(this alpha scalex scaley)	97738
UNKNOWN	power save mode is no fun - skip alpha animation and just set it to 0	97739
UNKNOWN	otherwise the icons will stay around until the duration of the animation	97740
UNKNOWN	we need to check here to verify that the given items location isnt already occupied	97741
UNKNOWN	by another item.	97742
UNKNOWN	this shouldnt happen log it.	97743
UNKNOWN	this is used to compute the visual center of the dragview. the idea is that	97744
UNKNOWN	the visual center represents the users interpretation of where the item is and hence	97745
UNKNOWN	is the appropriate point to use when determining drop location.	97746
UNKNOWN	these represent the visual top and left of drag view if a dragrect was provided.	97747
UNKNOWN	if a dragrect was not provided then they correspond to the actual view left and	97748
UNKNOWN	top as the dragrect is in that case taken to be the entire dragview.	97749
UNKNOWN	r.dimen.dragviewoffsety.	97750
UNKNOWN	in order to find the visual center we shift by half the dragrect	97751
UNKNOWN	exiting folder stop the auto scroller.	97752
UNKNOWN	we only close the folder if this is a true drag exit ie. not because	97753
UNKNOWN	a drop has occurred above the folder.	97754
UNKNOWN	the drag failed we need to return the item to the folder	97755
UNKNOWN	reordering may have occured and we need to save the new item locations. we do this once	97756
UNKNOWN	at the end to prevent unnecessary database operations.	97757
UNKNOWN	do nothing	97758
UNKNOWN	do nothing	97759
UNKNOWN	current grid is too small expand it	97760
UNKNOWN	in case the workspace is scrolling we need to use the final scroll to compute	97761
UNKNOWN	the folders bounds.	97762
UNKNOWN	we first fetch the currently visible celllayoutchildren	97763
UNKNOWN	we reset the workspaces scroll	97764
UNKNOWN	we need to bound the folder to the currently visible celllayoutchildren	97765
UNKNOWN	center the folder if it is full (on phones only)	97766
UNKNOWN	if the folder doesnt fit within the bounds center it about the desired bounds	97767
UNKNOWN	dont cap the height of the content to allow scrolling.	97768
UNKNOWN	add the last remaining child to the workspace in place of the folder	97769
UNKNOWN	move the item from the folder to the workspace in the position of the folder	97770
UNKNOWN	remove the folder	97771
UNKNOWN	b/12446428 -- sometimes the cell layout has already gone away?	97772
UNKNOWN	we add the child after removing the folder to prevent both from existing at	97773
UNKNOWN	the same time in the celllayout. we need to add the new item with addinscreenfrombind()	97774
UNKNOWN	to ensure that hotseat items are placed correctly.	97775
UNKNOWN	move the item from the folder to the workspace in the position of the folder	97776
UNKNOWN	remove the folder	97777
UNKNOWN	b/12446428 -- sometimes the cell layout has already gone away?	97778
UNKNOWN	we add the child after removing the folder to prevent both from existing at	97779
UNKNOWN	the same time in the celllayout. we need to add the new item with addinscreenfrombind()	97780
UNKNOWN	to ensure that hotseat items are placed correctly.	97781
UNKNOWN	this method keeps track of the last item in the folder for the purposes	97782
UNKNOWN	of keyboard focus	97783
UNKNOWN	if we are coming from all apps space we defer removing the extra empty screen	97784
UNKNOWN	until the folder closes	97785
UNKNOWN	actually move the item in the database if it was an external drag. call this	97786
UNKNOWN	before creating the view so that shortcutinfo is updated appropriately.	97787
UNKNOWN	we only need to update the locations if it doesnt get handled in #ondropcompleted.	97788
UNKNOWN	temporarily reset the scale such that the animation target gets calculated correctly.	97789
UNKNOWN	temporarily suppress the listener as we did all the work already here.	97790
UNKNOWN	clear the drag info as it is no longer being dragged.	97791
UNKNOWN	this is used so the item doesnt immediately appear in the folder when added. in one case	97792
UNKNOWN	we need to create the illusion that the item isnt added back to the folder yet to	97793
UNKNOWN	to correspond to the animation of the icon back into the folder. this is	97794
UNKNOWN	if the item was dropped onto this open folder we have done the work associated	97795
UNKNOWN	with adding the item to the folder as indicated by msuppressonadd being set	97796
UNKNOWN	the current layout is full can we expand it?	97797
UNKNOWN	if this item is being dragged from this open folder we have already handled	97798
UNKNOWN	the work associated with removing the item so we dont have to do anything here.	97799
UNKNOWN	get the hover color	97800
UNKNOWN	todo investigate why this is ever happening. presently only on one known device.	97801
UNKNOWN	remove the text in the phone ui in landscape	97802
UNKNOWN	acceptdrop is called just before ondrop. we do the work here rather than	97803
UNKNOWN	in ondrop because it allows us to reject the drop (by returning false)	97804
UNKNOWN	so that the object being dragged isnt removed from the drag source.	97805
UNKNOWN	there is no post-drop animation so clean up the dragview now	97806
UNKNOWN	hide this button unless we are dragging something from allapps	97807
UNKNOWN	we cant move out horizontally	97878
UNKNOWN	we cant move out vertically	97879
UNKNOWN	if an animation is started and then stopped very quickly we can still	97808
UNKNOWN	get spurious updates weve cleared the tag. guard against this.	97809
UNKNOWN	suppress dead code warning	97810
UNKNOWN	try to prevent it from continuing to run	97811
UNKNOWN	set whether or not to invert the layout horizontally if the layout is in rtl mode.	97812
UNKNOWN	when were large we are either drawn in a hover state (ie when dragging an item to	97813
UNKNOWN	a neighboring page) or with just a normal background (if backgroundalpha > 0.0f)	97814
UNKNOWN	when were small we are either drawn normally or in the accepts drops state (during	97815
UNKNOWN	a drag). however we also drag the mini hover background over one of those two	97816
UNKNOWN	backgrounds	97817
UNKNOWN	in the mini case we draw the active_glow bg over the active background	97818
UNKNOWN	the folder outer / inner ring image(s)	97819
UNKNOWN	draw outer ring if it exists	97820
UNKNOWN	draw inner ring	97821
UNKNOWN	mismatched viewid / viewtype preventing restore. skip restore on production builds.	97822
UNKNOWN	cancel long press for all children	97823
UNKNOWN	generate an id for each view this assumes we have at most 256x256 cells	97824
UNKNOWN	per workspace screen	97825
UNKNOWN	if the horizontal or vertical span is set to -1 it is taken to	97826
UNKNOWN	mean that it spans the extent of the celllayout	97827
UNKNOWN	first we clear the tag to ensure that on every touch down we start with a fresh slate	97828
UNKNOWN	even in the case where we return early. not clearing here was causing bugs whereby on	97829
UNKNOWN	long-press wed end up picking up an item from a previous drag operation.	97830
UNKNOWN	given a point return the cell that strictly encloses that point @param x x coordinate of the point @param y y coordinate of the point @param result array of 2 ints to hold the x and y coordinate of the cell	97831
UNKNOWN	given a point return the cell that most closely encloses that point @param x x coordinate of the point @param y y coordinate of the point @param result array of 2 ints to hold the x and y coordinate of the cell	97832
UNKNOWN	given a cell coordinate return the point that represents the upper left corner of that cell @param cellx x coordinate of the cell @param celly y coordinate of the cell @param result array of 2 ints to hold the x and y coordinate of the point	97833
UNKNOWN	given a cell coordinate return the point that represents the center of the cell @param cellx x coordinate of the cell @param celly y coordinate of the cell @param result array of 2 ints to hold the x and y coordinate of the point	97834
UNKNOWN	given a cell coordinate and span return the point that represents the center of the regio @param cellx x coordinate of the cell @param celly y coordinate of the cell @param result array of 2 ints to hold the x and y coordinate of the point	97835
UNKNOWN	given a cell coordinate and span fills out a corresponding pixel rect @param cellx x coordinate of the cell @param celly y coordinate of the cell @param result rect in which to write the result	97836
UNKNOWN	return a rect that has the cellwidth/cellheight (left top) and widthgap/heightgap (right bottom)	97837
UNKNOWN	expand the background drawing bounds by the padding baked into the background drawable	97838
UNKNOWN	we cancel any existing animations	97839
UNKNOWN	exit early if were not actually moving the view	97840
UNKNOWN	if the animation was cancelled it means that another animation	97841
UNKNOWN	has interrupted this one and we dont want to lock the item into	97842
UNKNOWN	place just yet.	97843
UNKNOWN	if the animation was cancelled it means that another animation	97844
UNKNOWN	has interrupted this one and we dont want to lock the item into	97845
UNKNOWN	place just yet.	97846
UNKNOWN	estimate where the top left cell of the dragged item will land if it is dropped. @param originx the x value of the top left corner of the item @param originy the y value of the top left corner of the item @param spanx the number of horizontal cells that the item spans @param spany the number of vertical cells that the item spans @param result the estimated drop cell x and y.	97847
UNKNOWN	pointtocellrounded takes the top left of a cell but will pad that with	97848
UNKNOWN	cellwidth/2 and cellheight/2 when finding the matching cell	97849
UNKNOWN	if the item isnt fully on this screen snap to the edges	97850
UNKNOWN	snap to right	97851
UNKNOWN	snap to left	97852
UNKNOWN	snap to bottom	97853
UNKNOWN	snap to top	97854
UNKNOWN	find the top left corner of the rect the object will occupy	97855
UNKNOWN	when drawing the drag outline it did not account for margin offsets	97856
UNKNOWN	added by the views parent.	97857
UNKNOWN	offsets due to the size difference between the view and the dragoutline.	97858
UNKNOWN	there is a size difference to account for the outer blur which may lie	97859
UNKNOWN	outside the bounds of the view.	97860
UNKNOWN	we center about the x axis	97861
UNKNOWN	center the drag region horizontally in the cell and apply a drag	97862
UNKNOWN	outline offset	97863
UNKNOWN	center the drag outline in the cell	97864
UNKNOWN	we verify that the current rect is not a sub-rect of any of our previous	97880
UNKNOWN	candidates. in this case the current rect is disqualified in favour of the	97881
UNKNOWN	containing rect.	97882
UNKNOWN	re-mark space taken by ignoreview as occupied	97883
UNKNOWN	return -1 -1 if no suitable location found	97884
UNKNOWN	find a vacant area that will fit the given bounds nearest the requested cell location. uses euclidean distance to score multiple vacant areas. @param pixelx the x location at which you want to search for a vacant area. @param pixely the y location at which you want to search for a vacant area. @param spanx horizontal span of the object. @param spany vertical span of the object. @param result array in which to place the result or null (in which case a new array will be allocated) @return the x y cell of a vacant area that can contain this object nearest the requested location.	97865
UNKNOWN	find a vacant area that will fit the given bounds nearest the requested cell location. uses euclidean distance to score multiple vacant areas. @param pixelx the x location at which you want to search for a vacant area. @param pixely the y location at which you want to search for a vacant area. @param minspanx the minimum horizontal span required @param minspany the minimum vertical span required @param spanx horizontal span of the object. @param spany vertical span of the object. @param result array in which to place the result or null (in which case a new array will be allocated) @return the x y cell of a vacant area that can contain this object nearest the requested location.	97866
UNKNOWN	find a vacant area that will fit the given bounds nearest the requested cell location. uses euclidean distance to score multiple vacant areas. @param pixelx the x location at which you want to search for a vacant area. @param pixely the y location at which you want to search for a vacant area. @param spanx horizontal span of the object. @param spany vertical span of the object. @param ignoreoccupied if true the result can be an occupied cell @param result array in which to place the result or null (in which case a new array will be allocated) @return the x y cell of a vacant area that can contain this object nearest the requested location.	97867
UNKNOWN	find a vacant area that will fit the given bounds nearest the requested cell location. uses euclidean distance to score multiple vacant areas. @param pixelx the x location at which you want to search for a vacant area. @param pixely the y location at which you want to search for a vacant area. @param minspanx the minimum horizontal span required @param minspany the minimum vertical span required @param spanx horizontal span of the object. @param spany vertical span of the object. @param ignoreoccupied if true the result can be an occupied cell @param result array in which to place the result or null (in which case a new array will be allocated) @return the x y cell of a vacant area that can contain this object nearest the requested location.	97868
UNKNOWN	mark space take by ignoreview as available (method checks if ignoreview is null)	97869
UNKNOWN	for items with a spanx / spany > 1 the passed in point (pixelx pixely) corresponds	97870
UNKNOWN	to the center of the item but we are searching based on the top-left cell so	97871
UNKNOWN	we translate the point over to correspond to the top-left.	97872
UNKNOWN	keep track of best-scoring drop area	97873
UNKNOWN	first lets see if this thing fits anywhere	97874
UNKNOWN	we know that the item will fit at _some_ acceptable size now lets see	97875
UNKNOWN	how big we can make it. well alternate between incrementing x and y spans	97876
UNKNOWN	until we hit a limit.	97877
UNKNOWN	find a vacant area that will fit the given bounds nearest the requested cell location and will also weigh in a suggested direction vector of the desired location. this method computers distance based on unit grid distances not pixel distances. @param cellx the x cell nearest to which you want to search for a vacant area. @param celly the y cell nearest which you want to search for a vacant area. @param spanx horizontal span of the object. @param spany vertical span of the object. @param direction the favored direction in which the views should move from x y @param exactdirectiononly if this parameter is true then only solutions where the direction matches exactly. otherwise we find the best matching direction. @param occoupied the array which represents which cells in the celllayout are occupied @param blockoccupied the array which represents which cells in the specified block (cellx celly spanx spany) are occupied. this is used when try to move a group of views. @param result array in which to place the result or null (in which case a new array will be allocated) @return the x y cell of a vacant area that can contain this object nearest the requested location.	97885
UNKNOWN	keep track of best-scoring drop area	97886
UNKNOWN	first lets see if this thing fits anywhere	97887
UNKNOWN	the direction score is just the dot product of the two candidate direction	97888
UNKNOWN	and that passed in.	97889
UNKNOWN	return -1 -1 if no suitable location found	97890
UNKNOWN	determine the edge of the cluster that will be leading the push and how far	97891
UNKNOWN	the cluster must be shifted.	97892
UNKNOWN	break early for invalid push distance.	97893
UNKNOWN	mark the occupied state as false for the group of views we want to move.	97894
UNKNOWN	we save the current configuration -- if we fail to find a solution we will revert	97895
UNKNOWN	to the initial state. the process of finding a solution modifies the configuration	97896
UNKNOWN	in place hence the need for revert in the failure case.	97897
UNKNOWN	the pushing algorithm is simplified by considering the views in the order in which	97898
UNKNOWN	they would be pushed by the cluster. for example if the cluster is leading with its	97899
UNKNOWN	left edge we consider sort the views by their right edge from right to left.	97900
UNKNOWN	for each view that isnt in the cluster we see if the leading edge of the	97901
UNKNOWN	cluster is contacting the edge of that view. if so we add that view to the	97902
UNKNOWN	cluster.	97903
UNKNOWN	the push solution includes the all apps button this is not viable.	97904
UNKNOWN	adding view to cluster mark it as not occupied.	97905
UNKNOWN	the cluster has been completed now we move the whole thing over in the appropriate	97906
UNKNOWN	direction.	97907
UNKNOWN	due to the nature of the algorithm the only check required to verify a valid solution	97908
UNKNOWN	is to ensure that completed shifted cluster lies completely within the cell layout.	97909
UNKNOWN	in either case we set the occupied array as marked for the location of the views	97910
UNKNOWN	we construct a rect which represents the entire group of views passed in	97911
UNKNOWN	mark the occupied state as false for the group of views we want to move.	97912
UNKNOWN	we mark more precisely which parts of the bounding rect are truly occupied allowing	97913
UNKNOWN	for interlocking.	97914
UNKNOWN	if we successfuly found a location by pushing the block of views we commit it	97915
UNKNOWN	in either case we set the occupied array as marked for the location of the views	97916
UNKNOWN	this method tries to find a reordering solution which satisfies the push mechanic by trying	97917
UNKNOWN	to push items in each of the cardinal directions in an order based on the direction vector	97918
UNKNOWN	passed.	97919
UNKNOWN	if the direction vector has two non-zero components we try pushing	97920
UNKNOWN	separately in each of the components.	97921
UNKNOWN	revert the direction	97922
UNKNOWN	now we try pushing in each component of the opposite direction	97923
UNKNOWN	revert the direction	97924
UNKNOWN	if the direction vector has a single non-zero component we push first in the	97925
UNKNOWN	direction of the vector	97926
UNKNOWN	then we try the opposite direction	97927
UNKNOWN	switch the direction back	97928
UNKNOWN	if we have failed to find a push solution with the above then we try	97929
UNKNOWN	to find a solution by pushing along the perpendicular axis.	97930
UNKNOWN	swap the components	97931
UNKNOWN	then we try the opposite direction	97932
UNKNOWN	switch the direction back	97933
UNKNOWN	swap the components back	97934
UNKNOWN	return early if get invalid cell positions	97935
UNKNOWN	mark the desired location of the view currently being dragged.	97936
UNKNOWN	first we try to find a solution which respects the push mechanic. that is	97937
UNKNOWN	we try to find a solution such that no displaced item travels through another item	97938
UNKNOWN	without also displacing that item.	97939
UNKNOWN	next we try moving the views as a block but without requiring the push mechanic.	97940
UNKNOWN	ok they couldnt move as a block lets move them individually	97941
UNKNOWN	returns a pair (x y) where xy are in {-1 0 1} corresponding to vector between the provided point and the provided cell	97942
UNKNOWN	copy the current state into the solution. this solution will be manipulated as necessary.	97943
UNKNOWN	copy the current occupied array into the temporary occupied array. this array will be	97944
UNKNOWN	manipulated as necessary to find a solution.	97945
UNKNOWN	we find the nearest cell into which we would place the dragged item assuming theres	97946
UNKNOWN	nothing in its way.	97947
UNKNOWN	first we try the exact nearest position of the item being dragged	97948
UNKNOWN	we will then want to try to move this around to other neighbouring positions	97949
UNKNOWN	we try shrinking the widget down to size in an alternating pattern shrink 1 in	97950
UNKNOWN	x then 1 in y etc.	97951
UNKNOWN	this method starts or changes the reorder preview animations	97952
UNKNOWN	we make sure to end only after a full period	97953
UNKNOWN	we make sure to end only after a full period	97954
UNKNOWN	we do a null check here because the item info can be null in the case of the	97955
UNKNOWN	allapps button in the hotseat.	97956
UNKNOWN	this seems like it should be obvious and straight-forward but when the direction vector needs to match with the notion of the dragview pushing other views we have to employ a slightly more subtle notion of the direction vector. the question is what two points is the vector between? the center of the dragview and its desired destination? not quite as this doesnt necessarily coincide with the interaction of the dragview and items occupying those cells. instead we use some heuristics to often lock the vector to up down left or right which helps make pushing feel right.	97957
UNKNOWN	no idea what to do give a random direction.	97958
UNKNOWN	for a given cell and span fetch the set of views intersecting the region.	97959
UNKNOWN	first we determine if things have moved enough to cause a different layout	97960
UNKNOWN	if were just testing for a possible location (mode_accept_drop) we dont bother	97961
UNKNOWN	committing anything or animating anything as we just want to determine if a solution	97962
UNKNOWN	exists	97963
UNKNOWN	first we determine if things have moved enough to cause a different layout	97964
UNKNOWN	when we are checking drop validity or actually dropping we dont recompute the	97965
UNKNOWN	direction vector since we want the solution to match the preview and its possible	97966
UNKNOWN	that the exact position of the item has changed to result in a new reordering outcome.	97967
UNKNOWN	we reset this vector after drop	97968
UNKNOWN	find a solution involving pushing / displacing any items in the way	97969
UNKNOWN	we attempt the approach which doesnt shuffle views at all	97970
UNKNOWN	if the reorder solution requires resizing (shrinking) the item being dropped we instead	97971
UNKNOWN	favor a solution in which the item is not resized but	97972
UNKNOWN	if were just testing for a possible location (mode_accept_drop) we dont bother	97973
UNKNOWN	committing anything or animating anything as we just want to determine if a solution	97974
UNKNOWN	exists	97975
UNKNOWN	copy current state into savedmap	97976
UNKNOWN	restore current state from savedmap	97977
UNKNOWN	find a vacant area that will fit the given bounds nearest the requested cell location. uses euclidean distance to score multiple vacant areas. @param pixelx the x location at which you want to search for a vacant area. @param pixely the y location at which you want to search for a vacant area. @param spanx horizontal span of the object. @param spany vertical span of the object. @param ignoreview considers space occupied by this view as unoccupied @param result previously returned value to possibly recycle. @return the x y cell of a vacant area that can contain this object nearest the requested location.	97978
UNKNOWN	re-mark space taken by ignoreview as occupied	97990
UNKNOWN	a drag event has begun over this layout. it may have begun over this layout (in which case ondragchild is called first) or it may have begun on another layout.	97991
UNKNOWN	find a vacant area that will fit the given bounds nearest the requested cell location. uses euclidean distance to score multiple vacant areas. @param pixelx the x location at which you want to search for a vacant area. @param pixely the y location at which you want to search for a vacant area. @param minspanx the minimum horizontal span required @param minspany the minimum vertical span required @param spanx horizontal span of the object. @param spany vertical span of the object. @param ignoreview considers space occupied by this view as unoccupied @param result previously returned value to possibly recycle. @return the x y cell of a vacant area that can contain this object nearest the requested location.	97979
UNKNOWN	find a starting cell position that will fit the given bounds nearest the requested cell location. uses euclidean distance to score multiple vacant areas. @param pixelx the x location at which you want to search for a vacant area. @param pixely the y location at which you want to search for a vacant area. @param spanx horizontal span of the object. @param spany vertical span of the object. @param ignoreview considers space occupied by this view as unoccupied @param result previously returned value to possibly recycle. @return the x y cell of a vacant area that can contain this object nearest the requested location.	97980
UNKNOWN	finds the upper-left coordinate of the first rectangle in the grid that can hold a cell of the specified dimensions. if intersectx and intersecty are not -1 then this method will only return coordinates for rectangles that contain the cell (intersectx intersecty) @param cellxy the array that will contain the position of a vacant cell if such a cell can be found. @param spanx the horizontal span of the cell we want to find. @param spany the vertical span of the cell we want to find. @return true if a vacant cell of the specified dimension was found false otherwise.	97981
UNKNOWN	like above but ignores any cells occupied by the item ignoreview @param cellxy the array that will contain the position of a vacant cell if such a cell can be found. @param spanx the horizontal span of the cell we want to find. @param spany the vertical span of the cell we want to find. @param ignoreview the home screen item we should treat as not occupying any space @return	97982
UNKNOWN	like above but if intersectx and intersecty are not -1 then this method will try to return coordinates for rectangles that contain the cell [intersectx intersecty] @param spanx the horizontal span of the cell we want to find. @param spany the vertical span of the cell we want to find. @param ignoreview the home screen item we should treat as not occupying any space @param intersectx the x coordinate of the cell that we should try to overlap @param intersectx the y coordinate of the cell that we should try to overlap @return true if a vacant cell of the specified dimension was found false otherwise.	97983
UNKNOWN	the superset of the above two methods	97984
UNKNOWN	mark space take by ignoreview as available (method checks if ignoreview is null)	97985
UNKNOWN	small optimization we can skip to after the column we just found	97986
UNKNOWN	an occupied cell	97987
UNKNOWN	if we failed to find anything try again but without any requirements of	97988
UNKNOWN	intersecting	97989
UNKNOWN	called when drag has left this celllayout or has been completed (successfully or not)	97992
UNKNOWN	this can actually be called when we arent in a drag e.g. when adding a new	97993
UNKNOWN	item to this layout via the customize drawer.	97994
UNKNOWN	guard against that case.	97995
UNKNOWN	invalidate the drag data	97996
UNKNOWN	mark a child as having been dropped. at the beginning of the drag operation the child may have been on another screen but it is re-parented before this method is called. @param child the child that is being dropped	97997
UNKNOWN	computes a bounding rectangle for a range of cells @param cellx x coordinate of upper left corner expressed as a cell position @param celly y coordinate of upper left corner expressed as a cell position @param cellhspan width in cells @param cellvspan height in cells @param resultrect rect into which to put the results	97998
UNKNOWN	computes the required horizontal and vertical cell spans to always fit the given rectangle. @param width width in pixels @param height height in pixels @param result an array of length 2 in which to store the result (may be null).	97999
UNKNOWN	always assume were working with the smallest span to make sure we	98000
UNKNOWN	reserve enough space in both orientations.	98001
UNKNOWN	always round up to next largest cell	98002
UNKNOWN	calculate the grid spans needed to fit given item	98003
UNKNOWN	its not a widget so it must be 1x1	98004
UNKNOWN	find the first vacant cell if there is one. @param vacant holds the x and y coordinate of the vacant cell @param spanx horizontal cell span. @param spany vertical cell span. @return true if a vacant cell was found	98005
UNKNOWN	we make sure to end only after a full period	98006
UNKNOWN	we make sure to end only after a full period	98007
UNKNOWN	copy current state into savedmap	98008
UNKNOWN	restore current state from savedmap	98009
UNKNOWN	lazy-create inflater	98010
UNKNOWN	use the convert-view where possible	98011
UNKNOWN	set the icon	98012
UNKNOWN	set the text	98013
UNKNOWN	lazy-create inflater	98014
UNKNOWN	use the convert-view where possible	98015
UNKNOWN	set the icon	98016
UNKNOWN	set the text	98017
UNKNOWN	make sure its stopped before we modify any values	98018
UNKNOWN	todo we dont really need to do the animation if startvalue == tovalue but	98019
UNKNOWN	somehow that doesnt seem to work possibly a quirk of the animation framework	98020
UNKNOWN	ensure we dont calculate a non-sensical duration	98021
UNKNOWN	return true when the animation is not running and it hasnt even been started.	98022
UNKNOWN	this is the equivalent of calling animator.start() except that it can be called when the animation is running in the opposite direction in which case we reverse direction and animate for a correspondingly shorter duration.	98023
UNKNOWN	this is the roughly the equivalent of calling animator.reverse() except that it uses the same interpolation curve as animatein() rather than mirroring it. also like animatein() if the animation is currently running in the opposite direction we reverse direction and animate for a correspondingly shorter duration.	98024
UNKNOWN	remove any records for the supplied componentname.	98025
UNKNOWN	remove any records for the supplied package name.	98026
UNKNOWN	empty out the cache.	98027
UNKNOWN	empty out the cache that arent of the correct grid size	98028
UNKNOWN	fill in application with the icon and label for info.	98029
UNKNOWN	parse the appfilter.xml file from the selected icon pack.	98030
UNKNOWN	check if an icon is available in the current icon pack.	98031
UNKNOWN	null info means not installed but if we have a component from the intent then	98032
UNKNOWN	we should still look in the cache for restored app icons.	98033
UNKNOWN	fill in shortcutinfo with the icon and label for info.	98034
UNKNOWN	null info means not installed but if we have a component from the intent then	98035
UNKNOWN	we should still look in the cache for restored app icons.	98036
UNKNOWN	retrieves the entry from the cache. if the entry is not present it creates a new entry. this method is not thread safe it must be called from a synchronized method.	98037
UNKNOWN	adds a default package entry in the cache. this entry is not persisted and will be removed when the cache is flushed.	98038
UNKNOWN	gets an entry for the package which can be used as a fallback entry for various components. this method is not thread safe it must be called from a synchronized method.	98039
UNKNOWN	pre-load an icon into the persistent cache. <p>queries for a component that does not exist in the package manager will be answered by the persistent cache. @param context application context @param componentname the icon should be returned for this component @param icon the icon to be persisted @param dpi the native density of the icon	98040
UNKNOWN	todo rescale to the correct native dpi	98041
UNKNOWN	component is present on the system already do nothing	98042
UNKNOWN	pass	98043
UNKNOWN	read a pre-loaded icon from the persistent icon cache. @param componentname the component that should own the icon @returns a bitmap if one is cached or null.	98044
UNKNOWN	we dont keep icons for other profiles in persistent cache.	98045
UNKNOWN	remove a pre-loaded icon from the persistent icon cache. @param componentname the component that should own the icon	98046
UNKNOWN	we dont keep icons for other profiles in persistent cache.	98047
UNKNOWN	write the fields of this item to the db @param context a context object to use for getting usermanagercompat @param values	98048
UNKNOWN	we should never persist an item on the extra empty screen.	98049
UNKNOWN	try go guesstimate how much space the icon will take when serialized	98050
UNKNOWN	to avoid unnecessary allocations/copies during the write.	98051
UNKNOWN	it is very important that sub-classes implement this if they contain any references to the activity (anything in the view hierarchy etc.). if not leaks can result since iteminfo objects persist across rotation and can hence leak by holding stale references to the old view hierarchy / activity.	98052
UNKNOWN	helper method. assumes a draw is pending and that if the animations duration is 0	98053
UNKNOWN	it should be cancelled	98054
UNKNOWN	use this as a signal that the animation was cancelled	98055
UNKNOWN	use this as a signal that the animation was cancelled	98056
UNKNOWN	were willing to let this slide. the exception is being caused by the list of	98057
UNKNOWN	remoteviews which is being passed back. the startlistening relationship will	98058
UNKNOWN	have been established by this point and we will end up populating the	98059
UNKNOWN	widgets upon bind anyway. see issue 14255011 for more context.	98060
UNKNOWN	once we get the message that widget packages are updated we need to rebind items	98061
UNKNOWN	in appscustomize accordingly.	98062
UNKNOWN	returns true if the intent is a valid launch intent for a launcher activity of an app. this is used to identify shortcuts which are different from the ones exposed by the applications manifest file. @param launchintent the intent that will be launched when the shortcut is clicked.	98063
UNKNOWN	an app target can either have no extra or have iteminfo.extra_profile.	98064
UNKNOWN	this name is only used for comparisons and notifications so fall back to activity name	98065
UNKNOWN	if not supplied	98066
UNKNOWN	queue the item up for adding if launcher has not loaded properly yet	98067
UNKNOWN	since its a custom shortcut verify that it is safe to launch.	98068
UNKNOWN	target cannot be launched or requires some special permission to launch	98069
UNKNOWN	final intent data = pendinginfo.data	98070
UNKNOWN	final boolean allowduplicate = data.getbooleanextra(launcher.extra_shortcut_duplicate true)	98071
UNKNOWN	if the intent specifies a package make sure the package exists	98072
UNKNOWN	generate a shortcut info to add into the model	98073
UNKNOWN	notify the user once if we werent able to place any duplicates	98074
UNKNOWN	add the new apps to the model and bind them	98075
UNKNOWN	returns true if the intent is a valid launch intent for a shortcut. this is used to identify shortcuts which are different from the ones exposed by the applications manifest file. when disable_all_apps is true shortcuts exposed via the apps manifest should never be duplicated or removed(unless the app is un-installed). @param launchintent the intent that will be launched when the shortcut is clicked.	98076
UNKNOWN	ensures that we have a valid non-null name. if the provided name is null we will return the application name instead.	98077
UNKNOWN	need a version that doesnt require an instance of launcherappstate for the wallpaper picker	98082
UNKNOWN	returns false on non-dogfood builds.	98083
UNKNOWN	call from application.onterminate() which is not guaranteed to ever be called.	98078
UNKNOWN	if the database has ever changed then we really need to force a reload of the	98079
UNKNOWN	workspace on the next load	98080
UNKNOWN	update the icon size	98081
UNKNOWN	updates the icons and label of all icons for the provided package name.	98084
UNKNOWN	when we bind the widget we should notify the widget that the size has changed if we have not done so already (only really for default workspace widgets).	98085
UNKNOWN	trigger an update callback to the widget to notify it that its size has changed.	98086
UNKNOWN	store the orientation in which the widget was inflated	98087
UNKNOWN	re-inflate is required if the orientation has changed since last inflated.	98088
UNKNOWN	just in case the previous long press hasnt been cleared we make sure to start fresh	98089
UNKNOWN	on touch down.	98090
UNKNOWN	consume any touch events for ourselves after longpress is triggered	98091
UNKNOWN	watch for longpress events at this level to make sure	98092
UNKNOWN	users can always pick up this widget	98093
UNKNOWN	otherwise continue letting touch events fall through to children	98094
UNKNOWN	if the widget does not handle touch then cancel	98095
UNKNOWN	long press when we release the touch	98096
UNKNOWN	if a long press has been performed we dont want to clear the record of that since	98097
UNKNOWN	we still may be receiving a touch up which we want to intercept	98098
UNKNOWN	notify the backup manager that out database is dirty. <p>this does not force an immediate backup. @param context application context	98099
UNKNOWN	there is only one process accessing this preference file but the restore	98100
UNKNOWN	modifies the file outside the normal codepaths so it looks like another	98101
UNKNOWN	process. this forces a reload of the file in case this process persists.	98102
UNKNOWN	no restore for old devices.	98103
UNKNOWN	clear db before restore	98104
UNKNOWN	if no favorite was migrated clear the data and start fresh.	98105
UNKNOWN	if the restore fails we should do a fresh start.	98106
UNKNOWN	disable the migration cling	98107
UNKNOWN	copy the shortcuts from the old database	98108
UNKNOWN	set the flag to skip the folder cling	98109
UNKNOWN	disable the migration cling	98110
UNKNOWN	shows the migration cling. this flow is mutually exclusive with showfirstruncling and only runs if this launcher package was not preinstalled and there exists a db to migrate from.	98111
UNKNOWN	show the longpress cling next	98112
UNKNOWN	show the longpress cling next	98113
UNKNOWN	show the longpress cling next	98114
UNKNOWN	this is the first cling being shown. no need to animate.	98115
UNKNOWN	animate	98116
UNKNOWN	hides the specified cling	98117
UNKNOWN	to catch cases where siblings of top-level views are made invisible just check whether	98118
UNKNOWN	the cling is directly set to gone before dismissing it.	98119
UNKNOWN	returns whether the clings are enabled or should be shown	98120
UNKNOWN	disable clings when running in a test harness	98121
UNKNOWN	disable clings for accessibility when explore by touch is enabled	98122
UNKNOWN	restricted secondary users (child mode) will potentially have very few apps	98123
UNKNOWN	seeded when they start up for the first time. clings wont work well with that	98124
UNKNOWN	dont backup apps in other profiles for now.	98146
UNKNOWN	back up launcher data so we can restore the users state on a new device. <p>the journal is a timestamp and a list of keys that were saved as of that time. <p>keys may come back in any order so each key/value is one complete row of the database. @param oldstate notes from the last backup @param data incremental key/value pairs to persist off-device @param newstate notes for the next backup @throws ioexception	98125
UNKNOWN	restore launcher configuration from the restored data stream. <p>keys may arrive in any order. @param data the key/value pair from the server	98126
UNKNOWN	noinspection unusedassignment	98127
UNKNOWN	record the restore state for the next backup. @param newstate notes about the backup state after restore.	98128
UNKNOWN	clear the output journal time to force a full backup to	98129
UNKNOWN	will catch any changes the restore process might have made	98130
UNKNOWN	write all modified favorites to the data stream. @param in notes from last backup @param data output stream for key/value pairs @param out notes about this backup @param keys keys to mark as clean in the notes for next backup @throws ioexception	98131
UNKNOWN	read the old id set	98132
UNKNOWN	persist things that have changed since the last backup	98133
UNKNOWN	dont backup apps in other profiles for now.	98134
UNKNOWN	these ids must have been deleted	98135
UNKNOWN	read a favorite from the stream. <p>keys arrive in any order so screens and containers may not exist yet. @param key identifier for the row @param buffer the serialized proto from the stream may be larger than datasize @param datasize the size of the proto from the stream @param keys keys to mark as clean in the notes for next backup	98136
UNKNOWN	write all modified screens to the data stream. @param in notes from last backup @param data output stream for key/value pairs @param out notes about this backup @param keys keys to mark as clean in the notes for next backup @throws ioexception	98137
UNKNOWN	read the old id set	98138
UNKNOWN	persist things that have changed since the last backup	98139
UNKNOWN	these ids must have been deleted	98140
UNKNOWN	read a screen from the stream. <p>keys arrive in any order so children of this screen may already exist. @param key identifier for the row @param buffer the serialized proto from the stream may be larger than datasize @param datasize the size of the proto from the stream @param keys keys to mark as clean in the notes for next backup	98141
UNKNOWN	write all the static icon resources we need to render placeholders for a package that is not installed. @param in notes from last backup @param data output stream for key/value pairs @param out notes about this backup @param keys keys to mark as clean in the notes for next backup @throws ioexception	98142
UNKNOWN	persist icons that havent been persisted yet	98143
UNKNOWN	try again later	98144
UNKNOWN	read the old id set	98145
UNKNOWN	remember that we already backed this up previously	98147
UNKNOWN	too many icons for this pass request another.	98148
UNKNOWN	these ids must have been deleted	98149
UNKNOWN	read an icon from the stream. <p>keys arrive in any order so shortcuts that use this icon may already exist. @param key identifier for the row @param buffer the serialized proto from the stream may be larger than datasize @param datasize the size of the proto from the stream @param keys keys to mark as clean in the notes for next backup	98150
UNKNOWN	write all the static widget resources we need to render placeholders for a package that is not installed. @param in notes from last backup @param data output stream for key/value pairs @param out notes about this backup @param keys keys to mark as clean in the notes for next backup @throws ioexception	98151
UNKNOWN	persist static widget info that hasnt been persisted yet	98152
UNKNOWN	read the old id set	98153
UNKNOWN	remember that we already backed this up previously	98154
UNKNOWN	too many widgets for this pass request another.	98155
UNKNOWN	these ids must have been deleted	98156
UNKNOWN	read a widget from the stream. <p>keys arrive in any order so widgets that use this data may already exist. @param key identifier for the row @param buffer the serialized proto from the stream may be larger than datasize @param datasize the size of the proto from the stream @param keys keys to mark as clean in the notes for next backup	98157
UNKNOWN	else {	98158
UNKNOWN	future site of widget table mutation	98159
UNKNOWN	}	98160
UNKNOWN	create a new key with an integer id. <p> keys contain their own checksum instead of using the heavy-weight checkedmessage wrapper.	98161
UNKNOWN	create a new key for a named object. <p> keys contain their own checksum instead of using the heavy-weight checkedmessage wrapper.	98162
UNKNOWN	keys need to be strings serialize and encode.	98163
UNKNOWN	keys need to be strings decode and parse.	98164
UNKNOWN	compute the checksum over the important bits of a key.	98165
UNKNOWN	serialize a favorite for persistence including a checksum wrapper.	98166
UNKNOWN	deserialize a favorite from persistence after verifying checksum wrapper.	98167
UNKNOWN	let launchermodel know weve been here.	98168
UNKNOWN	serialize a screen for persistence including a checksum wrapper.	98169
UNKNOWN	deserialize a screen from persistence after verifying checksum wrapper.	98170
UNKNOWN	serialize an icon resource for persistence including a checksum wrapper.	98171
UNKNOWN	deserialize an icon resource from persistence after verifying checksum wrapper.	98172
UNKNOWN	serialize a widget for persistence including a checksum wrapper.	98173
UNKNOWN	deserialize a widget from persistence after verifying checksum wrapper.	98174
UNKNOWN	read the old journal from the input file. in the event of any error just pretend we didnt have a journal in that case do a full backup. @param oldstate the read-0only file descriptor pointing to the old journal @return a journal protocol buffer	98175
UNKNOWN	omg what are you doing? this is crazy inefficient!	98176
UNKNOWN	if we read a byte that is not ours we will cause trouble b/12491813	98177
UNKNOWN	however we dont know how many bytes to expect (oops).	98178
UNKNOWN	so we have to step through slowly watching for the end.	98179
UNKNOWN	stop reading and see what there is to parse	98180
UNKNOWN	check the buffer to see if we have a valid journal	98181
UNKNOWN	if we are here then we have read a valid checksum-verified journal	98182
UNKNOWN	if we dont have the whole journal yet mergefrom will throw. keep going.	98183
UNKNOWN	write the new journal to the output file. in the event of any error just pretend we didnt have a journal in that case do a full backup. @param newstate the write-only file descriptor pointing to the new journal @param journal a journal protocol buffer	98184
UNKNOWN	wrap a proto in a checkedmessage and compute the checksum.	98185
UNKNOWN	unwrap a proto message from a checkedmessage verifying the checksum.	98186
UNKNOWN	check if the launcher is in a state to support backup	98187
UNKNOWN	launcher data has been wiped do nothing	98188
UNKNOWN	launcher services are unavailable try again later	98189
UNKNOWN	pin to mminy <= mcurry <= mmaxy	98206
UNKNOWN	the amount of friction applied to flings. the default value is {@link viewconfiguration#getscrollfriction}. @param friction a scalar dimension-less value representing the coefficient of friction.	98190
UNKNOWN	g (m/s^2)	98191
UNKNOWN	inch/meter	98192
UNKNOWN	pixels per inch	98193
UNKNOWN	returns whether the scroller has finished scrolling. @return true if the scroller has finished scrolling false otherwise.	98194
UNKNOWN	force the finished field to a particular value. @param finished the new finished value.	98195
UNKNOWN	returns how long the scroll event will take in milliseconds. @return the duration of the scroll in milliseconds.	98196
UNKNOWN	returns the current x offset in the scroll. @return the new x offset as an absolute distance from the origin.	98197
UNKNOWN	returns the current y offset in the scroll. @return the new y offset as an absolute distance from the origin.	98198
UNKNOWN	returns the current velocity. @return the original velocity less the deceleration. result may be negative.	98199
UNKNOWN	returns the start x offset in the scroll. @return the start x offset as an absolute distance from the origin.	98200
UNKNOWN	returns the start y offset in the scroll. @return the start y offset as an absolute distance from the origin.	98201
UNKNOWN	returns where the scroll will end. valid only for fling scrolls. @return the final x offset as an absolute distance from the origin.	98202
UNKNOWN	returns where the scroll will end. valid only for fling scrolls. @return the final y offset as an absolute distance from the origin.	98203
UNKNOWN	call this when you want to know the new location. if it returns true the animation is not yet finished.	98204
UNKNOWN	pin to mminx <= mcurrx <= mmaxx	98205
UNKNOWN	start scrolling by providing a starting point and the distance to travel. the scroll will use the default value of 250 milliseconds for the duration. @param startx starting horizontal scroll offset in pixels. positive numbers will scroll the content to the left. @param starty starting vertical scroll offset in pixels. positive numbers will scroll the content up. @param dx horizontal distance to travel. positive numbers will scroll the content to the left. @param dy vertical distance to travel. positive numbers will scroll the content up.	98207
UNKNOWN	start scrolling by providing a starting point the distance to travel and the duration of the scroll. @param startx starting horizontal scroll offset in pixels. positive numbers will scroll the content to the left. @param starty starting vertical scroll offset in pixels. positive numbers will scroll the content up. @param dx horizontal distance to travel. positive numbers will scroll the content to the left. @param dy vertical distance to travel. positive numbers will scroll the content up. @param duration duration of the scroll in milliseconds.	98208
UNKNOWN	start scrolling based on a fling gesture. the distance travelled will depend on the initial velocity of the fling. @param startx starting point of the scroll (x) @param starty starting point of the scroll (y) @param velocityx initial velocity of the fling (x) measured in pixels per second. @param velocityy initial velocity of the fling (y) measured in pixels per second @param minx minimum x value. the scroller will not scroll past this point. @param maxx maximum x value. the scroller will not scroll past this point. @param miny minimum y value. the scroller will not scroll past this point. @param maxy maximum y value. the scroller will not scroll past this point.	98209
UNKNOWN	continue a scroll or fling in progress	98210
UNKNOWN	pin to mminx <= mfinalx <= mmaxx	98211
UNKNOWN	pin to mminy <= mfinaly <= mmaxy	98212
UNKNOWN	1/e == exp(-1)	98213
UNKNOWN	stops the animation. contrary to {@link #forcefinished(boolean)} aborting the animating cause the scroller to move to the final x and y position @see #forcefinished(boolean)	98214
UNKNOWN	extend the scroll animation. this allows a running animation to scroll further and longer when used with {@link #setfinalx(int)} or {@link #setfinaly(int)}. @param extend additional time to scroll in milliseconds. @see #setfinalx(int) @see #setfinaly(int)	98215
UNKNOWN	returns the time elapsed since the beginning of the scrolling. @return the elapsed time in milliseconds.	98216
UNKNOWN	sets the final position (x) for this scroller. @param newx the new x offset as an absolute distance from the origin. @see #extendduration(int) @see #setfinaly(int)	98217
UNKNOWN	sets the final position (y) for this scroller. @param newy the new y offset as an absolute distance from the origin. @see #extendduration(int) @see #setfinalx(int)	98218
UNKNOWN	@hide	98219
UNKNOWN	the content style url for a given row identified by its id. @param id the row id. @param notify true to send a notification is the content changes. @return the unique content url for the specified row.	98220
UNKNOWN	the content style url for a given row identified by its id. @param id the row id. @param notify true to send a notification is the content changes. @return the unique content url for the specified row.	98221
UNKNOWN	this is the first time we get a handle to the internal valueanimator	98222
UNKNOWN	used by the viewpropertyanimator.	98223
UNKNOWN	firstframeanimatorhelper hooks itself up to the updates on the animator	98224
UNKNOWN	and then adjusts the play time to keep the first two frames jank-free	98225
UNKNOWN	not supported and throws an exception when used.	98226
UNKNOWN	not supported and throws an exception when used.	98227
UNKNOWN	not supported and throws an exception when used.	98228
UNKNOWN	256k	98229
UNKNOWN	ugh whatever	98230
UNKNOWN	will block	98231
UNKNOWN	log.v(tag update pid + pid + pss= + info.currentpss + uss= + info.currentuss)	98232
UNKNOWN	catch up in case we crashed but other processes are still running	98233
UNKNOWN	they sent us a bad intent	98234
UNKNOWN	in rare cases the receiver races with the application to set up launcherappstate	98235
UNKNOWN	if the current icon pack was deleted we reload the icons.	98236
UNKNOWN	delete from favorites where screen not in (select _id from workspacescreens)	98257
UNKNOWN	in very limited cases we support system|signature permission apps to add to the db	98237
UNKNOWN	always notify the backup agent	98238
UNKNOWN	this is only required one time while loading the workspace during the	98239
UNKNOWN	upgrade path and should never be called from anywhere else.	98240
UNKNOWN	should we load the old db for upgrade? first run only.	98241
UNKNOWN	clears all the data for a fresh start.	98242
UNKNOWN	loads the default workspace based on the following priority scheme 1) from a package provided by play store 2) from a partner configuration apk already in the system image 3) the default configuration for the particular device	98243
UNKNOWN	populate favorites table with initial favorites	98244
UNKNOWN	we dont import the old databse for tablets as the grid size has changed.	98245
UNKNOWN	are you sure? (y/n)	98246
UNKNOWN	send notification that weve deleted the {@link appwidgethost} probably as part of the initial database creation. the receiver may want to re-call {@link appwidgethost#startlistening()} to ensure callbacks are correctly set.	98247
UNKNOWN	database was just created so wipe any previous widgets	98248
UNKNOWN	try converting the old database	98249
UNKNOWN	try and upgrade from the launcher2 db	98250
UNKNOWN	if we fail then set a flag to load the default workspace	98251
UNKNOWN	right now in non-default workspace cases we want to run the final	98252
UNKNOWN	upgrade code (ie. to fix workspace screen indices -> ids etc.) so	98253
UNKNOWN	set that flag too.	98254
UNKNOWN	fresh and clean launcher db.	98255
UNKNOWN	delete items directly on the workspace whos screen id doesnt exist	98256
UNKNOWN	and container = -100	98258
UNKNOWN	delete items contained in folders which no longer exist (after above statement)	98259
UNKNOWN	delete from favorites where container <> -100 and container <> -101 and container	98260
UNKNOWN	not in (select _id from favorites where itemtype = 2)	98261
UNKNOWN	we rearrange the screens from the old launcher	98262
UNKNOWN	12345 -> 34512	98263
UNKNOWN	ignore	98264
UNKNOWN	we already have a favorites database in the old provider	98265
UNKNOWN	convert widgets from this import into widgets	98266
UNKNOWN	update max item id	98267
UNKNOWN	upgrade 12 -> 3 added appwidgetid column	98268
UNKNOWN	insert new column for holding appwidgetids	98269
UNKNOWN	old version remains which means we wipe old data	98270
UNKNOWN	convert existing widgets only if table upgrade was successful	98271
UNKNOWN	wheres version 5?	98272
UNKNOWN	- donut and sholes on 2.0 shipped with version 4 of launcher1.	98273
UNKNOWN	- passion shipped on 2.1 with version 6 of launcher3	98274
UNKNOWN	- sholes shipped on 2.1r1 (aka mr. 3) with version 5 of launcher 1	98275
UNKNOWN	but version 5 on there was the updatecontactsshortcuts change	98276
UNKNOWN	which was version 6 in launcher 2 (first shipped on passion 2.1r1).	98277
UNKNOWN	the updatecontactsshortcuts change is idempotent so running it twice	98278
UNKNOWN	is okay so well do that when upgrading the devices that shipped with it.	98279
UNKNOWN	we went from 3 to 5 screens. move everything 1 to the right	98280
UNKNOWN	old version remains which means we wipe old data	98281
UNKNOWN	we added the fast track.	98282
UNKNOWN	version 7 gets rid of the special search widget.	98283
UNKNOWN	version 8 (froyo) has the icons all normalized. this should	98284
UNKNOWN	already be the case in practice but we now rely on it and dont	98285
UNKNOWN	resample the images each time.	98286
UNKNOWN	the max id is not yet set at this point (onupgrade is triggered in the ctor	98287
UNKNOWN	before it gets a change to get set so we need to read it here when we use it)	98288
UNKNOWN	add default hotseat icons	98289
UNKNOWN	we bumped the version three time during jb once to update the launch flags once to	98290
UNKNOWN	update the override for the default launch animation and once to set the mimetype	98291
UNKNOWN	to improve startup performance	98292
UNKNOWN	contact shortcuts need a different set of flags to be launched now	98293
UNKNOWN	the updatecontactsshortcuts change is idempotent so we can keep using it like	98294
UNKNOWN	back in the donut days	98295
UNKNOWN	with the new shrink-wrapped and re-orderable workspaces it makes sense	98296
UNKNOWN	to persist workspace screens and their relative order.	98297
UNKNOWN	this will never happen in the wild but when we switch to using workspace	98298
UNKNOWN	screen ids redo the import from old launcher.	98299
UNKNOWN	insert new column for holding widget provider name	98300
UNKNOWN	old version remains which means we wipe old data	98301
UNKNOWN	insert new column for holding update timestamp	98302
UNKNOWN	old version remains which means we wipe old data	98303
UNKNOWN	insert new column for holding restore status	98304
UNKNOWN	old version remains which means we wipe old data	98305
UNKNOWN	we use the db version upgrade here to identify users who may not have seen	98306
UNKNOWN	clings yet (because they werent available) but for whom the clings are now	98307
UNKNOWN	available (tablet users). because one of the possible cling flows (migration)	98308
UNKNOWN	is very destructive (wipes out workspaces) we want to prevent this from showing	98309
UNKNOWN	until clear data. we do so by marking that the clings have been shown.	98310
UNKNOWN	no-op	98311
UNKNOWN	due to a data loss bug some users may have items associated with screen ids	98312
UNKNOWN	which no longer exist. since this can cause other problems and since the user	98313
UNKNOWN	will never see these items anyway we use database upgrade as an opportunity to	98314
UNKNOWN	clean things up.	98315
UNKNOWN	add userid column	98316
UNKNOWN	else old version remains which means we wipe old data	98317
UNKNOWN	this shouldnt happen -- throw our hands up in the air and start over.	98318
UNKNOWN	clears all the data for a fresh start.	98319
UNKNOWN	default to the serial number of this user for older	98320
UNKNOWN	shortcuts.	98321
UNKNOWN	insert new column for holding user serial number	98322
UNKNOWN	old version remains which means we wipe old data	98323
UNKNOWN	select and iterate through each matching widget	98324
UNKNOWN	when starting from the launcher start in a new cleared task	98325
UNKNOWN	clear_when_task_reset cannot reset the root of a task so we	98326
UNKNOWN	clear the whole thing preemptively here since	98327
UNKNOWN	quickcontactactivity will finish itself when launching other	98328
UNKNOWN	detail activities.	98329
UNKNOWN	determine the type and also put that in the shortcut	98330
UNKNOWN	(that can speed up launch a bit)	98331
UNKNOWN	generates a new id to use for an object in your database. this method should be only	98332
UNKNOWN	called from the main ui thread. as an exception we do call it when we call the	98333
UNKNOWN	constructor from the worker thread however this doesnt extend until after the	98334
UNKNOWN	constructor is called and we only pass a reference to launcherprovider to launcherapp	98335
UNKNOWN	after that point	98336
UNKNOWN	get the result	98337
UNKNOWN	generates a new id to use for an workspace screen in your database. this method	98338
UNKNOWN	should be only called from the main ui thread. as an exception we do call it when we	98339
UNKNOWN	call the constructor from the worker thread however this doesnt extend until after the	98340
UNKNOWN	constructor is called and we only pass a reference to launcherprovider to launcherapp	98341
UNKNOWN	after that point	98342
UNKNOWN	log to disk	98343
UNKNOWN	log to disk	98344
UNKNOWN	get the result	98345
UNKNOWN	log to disk	98346
UNKNOWN	upgrade existing clock and photo frame widgets into their new widget equivalents.	98347
UNKNOWN	select and iterate through each matching widget	98348
UNKNOWN	allocate and update database with new appwidgetid	98349
UNKNOWN	original widgets might not have valid spans when upgrading	98350
UNKNOWN	todo check return value	98351
UNKNOWN	todo check return value	98352
UNKNOWN	todo check return value	98353
UNKNOWN	update max item id	98354
UNKNOWN	1. ensure that externally added items have a valid item id	98355
UNKNOWN	2. in the case of an app widget and if no app widget id is specified we	98356
UNKNOWN	attempt allocate and bind the widget.	98357
UNKNOWN	add screen id if not present	98358
UNKNOWN	returns true of screen id exists or if successfully added	98359
UNKNOWN	get the result	98360
UNKNOWN	noinspection statementwithemptybody	98361
UNKNOWN	todo use multiple loaders with fall-back and transaction.	98362
UNKNOWN	add the screens specified by the items above	98363
UNKNOWN	ensure that the max ids are initialized	98364
UNKNOWN	loads the default set of favorite packages from an xml file. @param db the database to write the values into @param res the resources @param workspaceresourceid the specific container id of items to load @param screenids the set of screenids which are used by the favorites	98365
UNKNOWN	recursively load some more favorites why not?	98366
UNKNOWN	assuming its a <favorite> at this point	98367
UNKNOWN	this looks through the contained favorites (or meta-favorites) and	98368
UNKNOWN	attempts to add them as shortcuts in the fallback groups location	98369
UNKNOWN	until one is added successfully.	98370
UNKNOWN	folder contents are nested in this xml file	98371
UNKNOWN	folder contents come from an external xml resource	98372
UNKNOWN	keep track of the set of screens which need to be added to the db.	98373
UNKNOWN	parse folder items starting at {@link xmlpullparser} location. allow recursive includes of items.	98374
UNKNOWN	parse folder starting at current {@link xmlpullparser} location.	98375
UNKNOWN	we can only have folders with >= 2 items so we need to remove the	98376
UNKNOWN	folder and clean up if less than 2 items were included or some	98377
UNKNOWN	failed to add and less than 2 were actually added	98378
UNKNOWN	delete the folder	98379
UNKNOWN	if we have a single item promote it to where the folder	98380
UNKNOWN	would have been.	98381
UNKNOWN	a meta shortcut attempts to resolve an intent specified as a uri in the xml if a	98382
UNKNOWN	logical choice for what shortcut should be used for that intent exists then it is	98383
UNKNOWN	added. otherwise add nothing.	98384
UNKNOWN	verify that the result is an app and not just the resolver dialog asking which	98385
UNKNOWN	app to use.	98386
UNKNOWN	if only one of the results is a system app then choose that as the default.	98387
UNKNOWN	there is no logical choice for this meta-favorite so rather than making	98388
UNKNOWN	a bad choice just add nothing.	98389
UNKNOWN	if the list contains the above resolved activity then it cant be	98390
UNKNOWN	resolveractivity itself.	98391
UNKNOWN	if no component specified try to find a shortcut to add from the uri.	98392
UNKNOWN	gets an appwidget provider from the given package. if the package contains more than one appwidget provider an arbitrary one is returned.	98393
UNKNOWN	read the extras	98394
UNKNOWN	todo need to check return value	98395
UNKNOWN	send a broadcast to configure the widget	98396
UNKNOWN	oh well	98397
UNKNOWN	ignore	98398
UNKNOWN	we already have a favorites database in the old provider	98399
UNKNOWN	default to the serial number of this user for older	98400
UNKNOWN	shortcuts.	98401
UNKNOWN	bogus intent?	98402
UNKNOWN	no intent? no icon	98403
UNKNOWN	component no longer exists.	98404
UNKNOWN	dedupe icons directly on the workspace	98405
UNKNOWN	canonicalize	98406
UNKNOWN	the play store sets the package parameter but launcher	98407
UNKNOWN	does not so we clear that out to keep them the same.	98408
UNKNOWN	also ignore intent flags for the purposes of deduping.	98409
UNKNOWN	in a folder preserve position	98410
UNKNOWN	for items contained directly on one of the workspace screen	98411
UNKNOWN	well determine their location (screen x y) in a second pass.	98412
UNKNOWN	folders first	98413
UNKNOWN	then shortcuts	98414
UNKNOWN	layout all the folders	98415
UNKNOWN	hotseat items and folder items have already had their	98416
UNKNOWN	location information set. nothing to be done here.	98417
UNKNOWN	leave the last row of icons blank on every screen	98418
UNKNOWN	ensure that new screens are created to hold these icons	98419
UNKNOWN	update max ids very important since we just grabbed ids from another database	98420
UNKNOWN	build a query string that will match any row where the column matches anything in the values list.	98421
UNKNOWN	return attribute value attempting launcher-specific namespace first before falling back to anonymous attribute.	98422
UNKNOWN	return attribute resource value attempting launcher-specific namespace first before falling back to anonymous attribute.	98423
UNKNOWN	(that can speed up launch a bit)	98508
UNKNOWN	determine the type and also put that in the shortcut	98507
UNKNOWN	the max id is not yet set at this point (onupgrade is triggered in the ctor	98464
UNKNOWN	send notification that weve deleted the {@link appwidgethost} probably as part of the initial database creation. the receiver may want to re-call {@link appwidgethost#startlistening()} to ensure callbacks are correctly set.	98424
UNKNOWN	database was just created so wipe any previous widgets	98425
UNKNOWN	try converting the old database	98426
UNKNOWN	try and upgrade from the launcher2 db	98427
UNKNOWN	if we fail then set a flag to load the default workspace	98428
UNKNOWN	right now in non-default workspace cases we want to run the final	98429
UNKNOWN	upgrade code (ie. to fix workspace screen indices -> ids etc.) so	98430
UNKNOWN	set that flag too.	98431
UNKNOWN	fresh and clean launcher db.	98432
UNKNOWN	delete items directly on the workspace whos screen id doesnt exist	98433
UNKNOWN	delete from favorites where screen not in (select _id from workspacescreens)	98434
UNKNOWN	and container = -100	98435
UNKNOWN	delete items contained in folders which no longer exist (after above statement)	98436
UNKNOWN	delete from favorites where container <> -100 and container <> -101 and container	98437
UNKNOWN	not in (select _id from favorites where itemtype = 2)	98438
UNKNOWN	we rearrange the screens from the old launcher	98439
UNKNOWN	12345 -> 34512	98440
UNKNOWN	ignore	98441
UNKNOWN	we already have a favorites database in the old provider	98442
UNKNOWN	convert widgets from this import into widgets	98443
UNKNOWN	update max item id	98444
UNKNOWN	upgrade 12 -> 3 added appwidgetid column	98445
UNKNOWN	insert new column for holding appwidgetids	98446
UNKNOWN	old version remains which means we wipe old data	98447
UNKNOWN	convert existing widgets only if table upgrade was successful	98448
UNKNOWN	wheres version 5?	98449
UNKNOWN	- donut and sholes on 2.0 shipped with version 4 of launcher1.	98450
UNKNOWN	- passion shipped on 2.1 with version 6 of launcher3	98451
UNKNOWN	- sholes shipped on 2.1r1 (aka mr. 3) with version 5 of launcher 1	98452
UNKNOWN	but version 5 on there was the updatecontactsshortcuts change	98453
UNKNOWN	which was version 6 in launcher 2 (first shipped on passion 2.1r1).	98454
UNKNOWN	the updatecontactsshortcuts change is idempotent so running it twice	98455
UNKNOWN	is okay so well do that when upgrading the devices that shipped with it.	98456
UNKNOWN	we went from 3 to 5 screens. move everything 1 to the right	98457
UNKNOWN	old version remains which means we wipe old data	98458
UNKNOWN	we added the fast track.	98459
UNKNOWN	version 7 gets rid of the special search widget.	98460
UNKNOWN	version 8 (froyo) has the icons all normalized. this should	98461
UNKNOWN	already be the case in practice but we now rely on it and dont	98462
UNKNOWN	resample the images each time.	98463
UNKNOWN	before it gets a change to get set so we need to read it here when we use it)	98465
UNKNOWN	add default hotseat icons	98466
UNKNOWN	we bumped the version three time during jb once to update the launch flags once to	98467
UNKNOWN	update the override for the default launch animation and once to set the mimetype	98468
UNKNOWN	to improve startup performance	98469
UNKNOWN	contact shortcuts need a different set of flags to be launched now	98470
UNKNOWN	the updatecontactsshortcuts change is idempotent so we can keep using it like	98471
UNKNOWN	back in the donut days	98472
UNKNOWN	with the new shrink-wrapped and re-orderable workspaces it makes sense	98473
UNKNOWN	to persist workspace screens and their relative order.	98474
UNKNOWN	this will never happen in the wild but when we switch to using workspace	98475
UNKNOWN	screen ids redo the import from old launcher.	98476
UNKNOWN	insert new column for holding widget provider name	98477
UNKNOWN	old version remains which means we wipe old data	98478
UNKNOWN	insert new column for holding update timestamp	98479
UNKNOWN	old version remains which means we wipe old data	98480
UNKNOWN	insert new column for holding restore status	98481
UNKNOWN	old version remains which means we wipe old data	98482
UNKNOWN	we use the db version upgrade here to identify users who may not have seen	98483
UNKNOWN	clings yet (because they werent available) but for whom the clings are now	98484
UNKNOWN	available (tablet users). because one of the possible cling flows (migration)	98485
UNKNOWN	is very destructive (wipes out workspaces) we want to prevent this from showing	98486
UNKNOWN	until clear data. we do so by marking that the clings have been shown.	98487
UNKNOWN	no-op	98488
UNKNOWN	due to a data loss bug some users may have items associated with screen ids	98489
UNKNOWN	which no longer exist. since this can cause other problems and since the user	98490
UNKNOWN	will never see these items anyway we use database upgrade as an opportunity to	98491
UNKNOWN	clean things up.	98492
UNKNOWN	add userid column	98493
UNKNOWN	else old version remains which means we wipe old data	98494
UNKNOWN	this shouldnt happen -- throw our hands up in the air and start over.	98495
UNKNOWN	clears all the data for a fresh start.	98496
UNKNOWN	default to the serial number of this user for older	98497
UNKNOWN	shortcuts.	98498
UNKNOWN	insert new column for holding user serial number	98499
UNKNOWN	old version remains which means we wipe old data	98500
UNKNOWN	select and iterate through each matching widget	98501
UNKNOWN	when starting from the launcher start in a new cleared task	98502
UNKNOWN	clear_when_task_reset cannot reset the root of a task so we	98503
UNKNOWN	clear the whole thing preemptively here since	98504
UNKNOWN	quickcontactactivity will finish itself when launching other	98505
UNKNOWN	detail activities.	98506
UNKNOWN	generates a new id to use for an object in your database. this method should be only	98509
UNKNOWN	called from the main ui thread. as an exception we do call it when we call the	98510
UNKNOWN	constructor from the worker thread however this doesnt extend until after the	98511
UNKNOWN	constructor is called and we only pass a reference to launcherprovider to launcherapp	98512
UNKNOWN	after that point	98513
UNKNOWN	get the result	98514
UNKNOWN	generates a new id to use for an workspace screen in your database. this method	98515
UNKNOWN	should be only called from the main ui thread. as an exception we do call it when we	98516
UNKNOWN	call the constructor from the worker thread however this doesnt extend until after the	98517
UNKNOWN	constructor is called and we only pass a reference to launcherprovider to launcherapp	98518
UNKNOWN	after that point	98519
UNKNOWN	log to disk	98520
UNKNOWN	log to disk	98521
UNKNOWN	get the result	98522
UNKNOWN	log to disk	98523
UNKNOWN	upgrade existing clock and photo frame widgets into their new widget equivalents.	98524
UNKNOWN	select and iterate through each matching widget	98525
UNKNOWN	allocate and update database with new appwidgetid	98526
UNKNOWN	original widgets might not have valid spans when upgrading	98527
UNKNOWN	todo check return value	98528
UNKNOWN	todo check return value	98529
UNKNOWN	todo check return value	98530
UNKNOWN	update max item id	98531
UNKNOWN	1. ensure that externally added items have a valid item id	98532
UNKNOWN	2. in the case of an app widget and if no app widget id is specified we	98533
UNKNOWN	attempt allocate and bind the widget.	98534
UNKNOWN	add screen id if not present	98535
UNKNOWN	returns true of screen id exists or if successfully added	98536
UNKNOWN	get the result	98537
UNKNOWN	noinspection statementwithemptybody	98538
UNKNOWN	todo use multiple loaders with fall-back and transaction.	98539
UNKNOWN	add the screens specified by the items above	98540
UNKNOWN	ensure that the max ids are initialized	98541
UNKNOWN	loads the default set of favorite packages from an xml file. @param db the database to write the values into @param res the resources @param workspaceresourceid the specific container id of items to load @param screenids the set of screenids which are used by the favorites	98542
UNKNOWN	recursively load some more favorites why not?	98543
UNKNOWN	assuming its a <favorite> at this point	98544
UNKNOWN	this looks through the contained favorites (or meta-favorites) and	98545
UNKNOWN	attempts to add them as shortcuts in the fallback groups location	98546
UNKNOWN	until one is added successfully.	98547
UNKNOWN	folder contents are nested in this xml file	98548
UNKNOWN	folder contents come from an external xml resource	98549
UNKNOWN	keep track of the set of screens which need to be added to the db.	98550
UNKNOWN	parse folder items starting at {@link xmlpullparser} location. allow recursive includes of items.	98551
UNKNOWN	parse folder starting at current {@link xmlpullparser} location.	98552
UNKNOWN	we can only have folders with >= 2 items so we need to remove the	98553
UNKNOWN	folder and clean up if less than 2 items were included or some	98554
UNKNOWN	failed to add and less than 2 were actually added	98555
UNKNOWN	delete the folder	98556
UNKNOWN	if we have a single item promote it to where the folder	98557
UNKNOWN	would have been.	98558
UNKNOWN	a meta shortcut attempts to resolve an intent specified as a uri in the xml if a	98559
UNKNOWN	logical choice for what shortcut should be used for that intent exists then it is	98560
UNKNOWN	added. otherwise add nothing.	98561
UNKNOWN	verify that the result is an app and not just the resolver dialog asking which	98562
UNKNOWN	app to use.	98563
UNKNOWN	if only one of the results is a system app then choose that as the default.	98564
UNKNOWN	there is no logical choice for this meta-favorite so rather than making	98565
UNKNOWN	a bad choice just add nothing.	98566
UNKNOWN	if the list contains the above resolved activity then it cant be	98567
UNKNOWN	resolveractivity itself.	98568
UNKNOWN	if no component specified try to find a shortcut to add from the uri.	98569
UNKNOWN	gets an appwidget provider from the given package. if the package contains more than one appwidget provider an arbitrary one is returned.	98570
UNKNOWN	read the extras	98571
UNKNOWN	todo need to check return value	98572
UNKNOWN	send a broadcast to configure the widget	98573
UNKNOWN	oh well	98574
UNKNOWN	ignore	98575
UNKNOWN	we already have a favorites database in the old provider	98576
UNKNOWN	default to the serial number of this user for older	98577
UNKNOWN	shortcuts.	98578
UNKNOWN	bogus intent?	98579
UNKNOWN	no intent? no icon	98580
UNKNOWN	component no longer exists.	98581
UNKNOWN	dedupe icons directly on the workspace	98582
UNKNOWN	canonicalize	98583
UNKNOWN	the play store sets the package parameter but launcher	98584
UNKNOWN	does not so we clear that out to keep them the same.	98585
UNKNOWN	also ignore intent flags for the purposes of deduping.	98586
UNKNOWN	in a folder preserve position	98587
UNKNOWN	for items contained directly on one of the workspace screen	98588
UNKNOWN	well determine their location (screen x y) in a second pass.	98589
UNKNOWN	folders first	98590
UNKNOWN	then shortcuts	98591
UNKNOWN	layout all the folders	98592
UNKNOWN	hotseat items and folder items have already had their	98593
UNKNOWN	location information set. nothing to be done here.	98594
UNKNOWN	leave the last row of icons blank on every screen	98595
UNKNOWN	ensure that new screens are created to hold these icons	98596
UNKNOWN	update max ids very important since we just grabbed ids from another database	98597
UNKNOWN	remove all the previous children that are no longer in the window	98598
UNKNOWN	add all the new children that belong in the window	98599
UNKNOWN	update the markers alpha	98600
UNKNOWN	center the active marker	98601
UNKNOWN	cancel long press for all children	98602
UNKNOWN	generate an id for each view this assumes we have at most 256x256 cells	98603
UNKNOWN	per workspace screen	98604
UNKNOWN	if the horizontal or vertical span is set to -1 it is taken to	98605
UNKNOWN	mean that it spans the extent of the celllayout	98606
UNKNOWN	clears all the key listeners for the individual icons.	98607
UNKNOWN	initial values correspond to widthspecmode == measurespec.exactly	98608
UNKNOWN	we only intercept the touch if we are tapping in empty space after the final row	98609
UNKNOWN	add a little bit of buffer if there is room for another row	98610
UNKNOWN	always assume were working with the smallest span to make sure we	98611
UNKNOWN	reserve enough space in both orientations	98612
UNKNOWN	always round up to next largest cell	98613
UNKNOWN	start dragging the specified child @param child the child that is being dragged	98614
UNKNOWN	estimates the number of cells that the specified width would take up.	98615
UNKNOWN	we dont show the next/previous pages any more so we use the full width minus the	98616
UNKNOWN	padding	98617
UNKNOWN	we know that we have to fit n cells with n-1 width gaps so we just juggle to solve for n	98618
UNKNOWN	we dont do anything fancy to determine if we squeeze another row in.	98619
UNKNOWN	estimates the number of cells that the specified height would take up.	98620
UNKNOWN	the space for a page is the height - top padding (current page) - bottom padding (current	98621
UNKNOWN	page)	98622
UNKNOWN	we know that we have to fit n cells with n-1 height gaps so we juggle to solve for n	98623
UNKNOWN	we dont do anything fancy to determine if we squeeze another row in.	98624
UNKNOWN	returns an estimated center position of the cell at the specified index	98625
UNKNOWN	estimates the width that the number of hspan cells will take up.	98626
UNKNOWN	todo we need to take widthgap into effect	98627
UNKNOWN	estimates the height that the number of vspan cells will take up.	98628
UNKNOWN	todo we need to take heightgap into effect	98629
UNKNOWN	update the drawing caches	98632
UNKNOWN	cancel long press for all children	98630
UNKNOWN	determine the max width of all the rows and center accordingly	98631
UNKNOWN	clears all the key listeners for the individual widgets.	98633
UNKNOWN	we only intercept the touch if we are tapping in empty space after the final row	98634
UNKNOWN	ensure we are using the right text size	98635
UNKNOWN	center horizontally	98636
UNKNOWN	remove the longpress detection timer.	98637
UNKNOWN	we eat up the touch events here since the pagedview (which uses the same swiping	98638
UNKNOWN	touch code as workspace previously) uses onintercepttouchevent() to determine when	98639
UNKNOWN	the user is scrolling between pages. this means that if the pages themselves dont	98640
UNKNOWN	handle touch events it gets forwarded up to pagedview itself and its own	98641
UNKNOWN	ontouchevent() handling will prevent further intercept touch events from being called	98642
UNKNOWN	(its the same view in that case). this is not ideal but to prevent more changes	98643
UNKNOWN	we just always mark the touch event as handled.	98644
UNKNOWN	wait no longer than 1sec at a time	98788
UNKNOWN	ignore	98789
UNKNOWN	fail if we dont have any apps	98921
UNKNOWN	sort the applications by name	98922
UNKNOWN	create the applicationinfos	98923
UNKNOWN	this builds the icon bitmaps.	98924
UNKNOWN	check if any workspace icons overlap with each other	98826
UNKNOWN	clears all the sbg data structures	98827
UNKNOWN	runs the specified runnable immediately if called from the main thread otherwise it is posted on the main thread handler.	98645
UNKNOWN	if we are on the worker thread post onto the main handler	98646
UNKNOWN	runs the specified runnable immediately if called from the worker thread otherwise it is posted on the worker thread handler.	98647
UNKNOWN	if we are not on the worker thread then post to the worker handler	98648
UNKNOWN	lock on the app so that we dont try and get the items while apps are being added	98649
UNKNOWN	flush the launchermodel worker thread so that if we just did another	98650
UNKNOWN	processinstallshortcut we give it time for its shortcut to get added to the	98651
UNKNOWN	database (getitemsinlocalcoordinates reads the database)	98652
UNKNOWN	try adding to the workspace screens incrementally starting at the default or center	98653
UNKNOWN	screen and alternating between +1 -1 +2 -2 etc. (using ~ ceil(i/2f)(-1)^(i-1))	98654
UNKNOWN	update the launcher db	98655
UNKNOWN	process the updated package state	98656
UNKNOWN	process the updated package badge	98657
UNKNOWN	process the newly added applications and add them to the database first	98658
UNKNOWN	process the newly added applications and add them to the database first	98659
UNKNOWN	get the list of workspace screens. we need to append to this list and	98660
UNKNOWN	can not use sbgworkspacescreens because loadworkspace() may not have been	98661
UNKNOWN	called.	98662
UNKNOWN	short-circuit this logic if the icon exists somewhere on the workspace	98663
UNKNOWN	only installshortcutreceiver sends us shortcutinfos ignore them	98664
UNKNOWN	add this icon to the db creating a new page if necessary. if there	98665
UNKNOWN	is only the empty page then we just add items to the first page.	98666
UNKNOWN	otherwise we add them to the next pages.	98667
UNKNOWN	if we cant find a valid position then just add a new screen.	98668
UNKNOWN	this takes time so we need to re-queue the add until the new	98669
UNKNOWN	page is added. create as many screens as necessary to satisfy	98670
UNKNOWN	the startsearchpageindex.	98671
UNKNOWN	save the screen id for binding in the workspace	98672
UNKNOWN	find the coordinate again	98673
UNKNOWN	add the shortcut to the db	98674
UNKNOWN	save the shortcutinfo for binding in the workspace	98675
UNKNOWN	update the workspace screens	98676
UNKNOWN	get the list of workspace screens. we need to append to this list and	98677
UNKNOWN	can not use sbgworkspacescreens because loadworkspace() may not have been	98678
UNKNOWN	called.	98679
UNKNOWN	short-circuit this logic if the icon exists somewhere on the workspace	98680
UNKNOWN	only installshortcutreceiver sends us shortcutinfos ignore them	98681
UNKNOWN	add this icon to the db creating a new page if necessary. if there	98682
UNKNOWN	is only the empty page then we just add items to the first page.	98683
UNKNOWN	otherwise we add them to the next pages.	98684
UNKNOWN	if we cant find a valid position then just add a new screen.	98685
UNKNOWN	this takes time so we need to re-queue the add until the new	98686
UNKNOWN	page is added. create as many screens as necessary to satisfy	98687
UNKNOWN	the startsearchpageindex.	98688
UNKNOWN	save the screen id for binding in the workspace	98689
UNKNOWN	find the coordinate again	98690
UNKNOWN	add the shortcut to the db	98691
UNKNOWN	save the shortcutinfo for binding in the workspace	98692
UNKNOWN	update the workspace screens	98693
UNKNOWN	clear any deferred bind runnables	98694
UNKNOWN	remove any queued bind runnables	98695
UNKNOWN	unbind all the workspace items	98696
UNKNOWN	unbinds all the sbgworkspaceitems and sbgappwidgets on the main thread	98697
UNKNOWN	ensure that we dont use the same workspace items data structure on the main thread	98698
UNKNOWN	by making a copy of workspace items first.	98699
UNKNOWN	adds an item to the db if it was not created previously or move it to a new <container screen cellx celly>	98700
UNKNOWN	from all apps	98701
UNKNOWN	from somewhere else	98702
UNKNOWN	check all the data is consistent	98703
UNKNOWN	for all intents and purposes this is the same object	98704
UNKNOWN	the modelitem needs to match up perfectly with item if our model is	98705
UNKNOWN	to be consistent with the database-- for now just require	98706
UNKNOWN	modelitem == item or the equality check above	98707
UNKNOWN	lock on mbglock after the db operation	98708
UNKNOWN	item is in a folder make sure this folder exists	98709
UNKNOWN	an items container is being set to a that of an item which is not in	98710
UNKNOWN	the list of folders.	98711
UNKNOWN	query for the set of apps	98920
UNKNOWN	items are added/removed from the corresponding folderinfo elsewhere such	98712
UNKNOWN	as in workspace.ondrop. here we just add/remove them from the list of items	98713
UNKNOWN	that are on the desktop as appropriate	98714
UNKNOWN	move an item in the db to a new <container screen cellx celly>	98715
UNKNOWN	move items in the db to a new <container screen cellx celly>. we assume that the cellx celly have already been updated on the iteminfos.	98716
UNKNOWN	move and/or resize item in the db to a new <container screen cellx celly spanx spany>	98717
UNKNOWN	update an item to the database in a specified container.	98718
UNKNOWN	returns true if the shortcuts already exists in the database. we identify a shortcut by its title and intent.	98719
UNKNOWN	if component is not null an intent with null package will produce	98720
UNKNOWN	the same result and should also be a match.	98721
UNKNOWN	returns true if the promise shortcuts with the same package name exists on the workspace.	98722
UNKNOWN	returns an iteminfo array containing all the items in the launchermodel. the iteminfo.id is not set through this function.	98723
UNKNOWN	skip if user has been deleted.	98724
UNKNOWN	find a folder in the db creating the folderinfo if necessary and adding it to folderlist.	98725
UNKNOWN	add an item to the database in a specified container. sets the container screen cellx and celly fields of the item. also assigns an id to the item.	98726
UNKNOWN	lock on mbglock after the db operation	98727
UNKNOWN	fall through	98728
UNKNOWN	adding an item to a folder that doesnt exist.	98729
UNKNOWN	lock on mbglock after the db operation	98730
UNKNOWN	fall through	98731
UNKNOWN	adding an item to a folder that doesnt exist.	98732
UNKNOWN	creates a new unique child id for a given cell span across all layouts.	98733
UNKNOWN	removes all the items from the database corresponding to the specified package.	98734
UNKNOWN	removes the specified item from the database @param context @param item	98735
UNKNOWN	removes the specified items from the database @param context @param item	98736
UNKNOWN	lock on mbglock after the db operation	98737
UNKNOWN	we are deleting a folder which still contains items that	98738
UNKNOWN	think they are contained by that folder.	98739
UNKNOWN	lock on mbglock after the db operation	98740
UNKNOWN	we are deleting a folder which still contains items that	98741
UNKNOWN	think they are contained by that folder.	98742
UNKNOWN	update the order of the workspace screens in the database. the array list contains a list of screen ids in the order that they should appear.	98743
UNKNOWN	log to disk	98744
UNKNOWN	remove any negative screen ids -- these arent persisted	98745
UNKNOWN	clear the table	98746
UNKNOWN	clear the table	98747
UNKNOWN	remove the contents of the specified folder from the database	98748
UNKNOWN	lock on mbglock after the db operation	98749
UNKNOWN	lock on mbglock after the db operation	98750
UNKNOWN	lock on mbglock after the db operation	98751
UNKNOWN	lock on mbglock after the db operation	98752
UNKNOWN	set this as the current launcher activity object for the loader.	98753
UNKNOWN	only rebind if we support removable storage. it catches the	98754
UNKNOWN	case where	98755
UNKNOWN	apps on the external sd card need to be reloaded	98756
UNKNOWN	if we are replacing then just update the packages in the list	98757
UNKNOWN	call from the handler for action_package_added action_package_removed and action_package_changed.	98758
UNKNOWN	if we have changed locale we need to clear out the labels in all apps/workspace.	98759
UNKNOWN	check if configuration change was an mcc/mnc change which would affect app resources	98760
UNKNOWN	and we would need to clear out the labels in all apps/workspace. same handling as	98761
UNKNOWN	above for action_locale_changed	98762
UNKNOWN	update previousconfig	98763
UNKNOWN	do this here because if the launcher activity is running it will be restarted.	98764
UNKNOWN	if its not running startloaderfrombackground will merely tell it that it needs	98765
UNKNOWN	to reload.	98766
UNKNOWN	stop any existing loaders first so they dont set mallappsloaded or	98767
UNKNOWN	mworkspaceloaded to true later	98768
UNKNOWN	when the launcher is in the background its possible for it to miss paired configuration changes. so whenever we trigger the loader from the background tell the launcher that it needs to re-run the loader when it comes back instead of doing it now.	98769
UNKNOWN	only actually run the loader if theyre not paused.	98770
UNKNOWN	if there is already a loader task running tell it to stop.	98771
UNKNOWN	returns true if islaunching() was true on the old task	98772
UNKNOWN	clear any deferred bind-runnables from the synchronized load process	98773
UNKNOWN	we must do this before any loading/binding is scheduled below.	98774
UNKNOWN	dont bother to start the thread if we know its not going to do anything	98775
UNKNOWN	if there is already one running tell it to stop.	98776
UNKNOWN	also dont downgrade islaunching if were already running	98777
UNKNOWN	post the remaining side pages to be loaded	98778
UNKNOWN	loads the workspace screens db into a map of rank -> screenid	98779
UNKNOWN	log to disk	98780
UNKNOWN	returns whether this is an upgrade path	98781
UNKNOWN	load the workspace	98782
UNKNOWN	bind the workspace	98783
UNKNOWN	wait until the either were stopped or the other threads are done.	98784
UNKNOWN	this way we dont start loading all apps until the workspace has settled	98785
UNKNOWN	down.	98786
UNKNOWN	just in case mflushingworkerthread changes but we arent woken up	98787
UNKNOWN	ensure that we have a valid page index to load synchronously	98790
UNKNOWN	ensure that we dont try and bind a specified page when the pages have not been	98791
UNKNOWN	loaded already (we should load everything asynchronously in that case)	98792
UNKNOWN	ensure that we are never running the background loading at this point since	98793
UNKNOWN	we also touch the background collections	98794
UNKNOWN	xxx throw an exception if we are already loading (since we touch the worker thread	98795
UNKNOWN	data structures we cant allow any other thread to touch that data but because	98796
UNKNOWN	this call is synchronous we can get away with not locking).	98797
UNKNOWN	the launchermodel is static in the launcherappstate and mhandler may have queued	98798
UNKNOWN	operations from the previous activity. we need to ensure that all queued operations	98799
UNKNOWN	are executed before any synchronous binding work is done.	98800
UNKNOWN	divide the set of loaded items into those that we are binding synchronously and	98801
UNKNOWN	everything else that is to be bound normally (asynchronously).	98802
UNKNOWN	xxx for now continue posting the binding of allapps as there are other issues that	98803
UNKNOWN	arise from that.	98804
UNKNOWN	optimize for end-user experience if the launcher is up and running with the	98805
UNKNOWN	all apps interface in the foreground load all apps first. otherwise load the	98806
UNKNOWN	workspace first (default).	98807
UNKNOWN	elevate priority when home launches for the first time to avoid	98808
UNKNOWN	starving at boot time. staring at a blank home is not cool.	98809
UNKNOWN	whew! hard work done. slow us down and wait until the ui thread has	98810
UNKNOWN	settled down.	98811
UNKNOWN	second step	98812
UNKNOWN	restore the default thread priority after we are done loading items	98813
UNKNOWN	update the saved icons if necessary	98814
UNKNOWN	ensure that all the applications that are in the system are	98815
UNKNOWN	represented on the home screen.	98816
UNKNOWN	clear out this reference otherwise we end up holding it until all of the	98817
UNKNOWN	callback runnables are done.	98818
UNKNOWN	if we are still the last one to be scheduled remove ourselves.	98819
UNKNOWN	gets the callbacks object. if weve been stopped or if the launcher object has somehow been garbage collected return null instead. pass in the callbacks object that was around when the deferred message was scheduled and if theres a new callbacks object around then also return null. this will save us from calling onto it with data that will be ignored.	98820
UNKNOWN	cross reference all the applications in our apps list with items in the workspace	98821
UNKNOWN	we are missing an application icon so add this to the workspace	98822
UNKNOWN	this is a rare event so lets log it	98823
UNKNOWN	check & update map of whats occupied used to discard overlapping/invalid items	98824
UNKNOWN	skip further checking if it is not the hotseat or workspace container	98825
UNKNOWN	returns whether this is an upgrade path	98828
UNKNOWN	log to disk	98829
UNKNOWN	append the users launcher2 shortcuts	98830
UNKNOWN	make sure the default workspace is loaded	98831
UNKNOWN	this code path is for our old migration code and should no longer be exercised	98832
UNKNOWN	log to disk	98833
UNKNOWN	+1 for the hotseat (it can be larger than the workspace)	98834
UNKNOWN	load workspace in reverse order to ensure that latest items are loaded first (and	98835
UNKNOWN	before any earlier duplicates)	98836
UNKNOWN	final int uriindex = c.getcolumnindexorthrow(launchersettings.favorites.uri)	98837
UNKNOWN	final int displaymodeindex = c.getcolumnindexorthrow(	98838
UNKNOWN	launchersettings.favorites.display_mode)	98839
UNKNOWN	user has been deleted remove the item.	98840
UNKNOWN	no special handling necessary for this item	98841
UNKNOWN	we allow auto install apps to have their intent	98842
UNKNOWN	updated after an install.	98843
UNKNOWN	the app is installed but the component is no	98844
UNKNOWN	longer available.	98845
UNKNOWN	no special handling necessary for this item	98846
UNKNOWN	package is not yet available but might be	98847
UNKNOWN	installed later.	98848
UNKNOWN	restore has started once.	98849
UNKNOWN	app restore has started. update the flag	98850
UNKNOWN	do not wait for external media load anymore.	98851
UNKNOWN	log the invalid package and remove it	98852
UNKNOWN	sdcard is not ready yet. package might get available	98853
UNKNOWN	once it is ready.	98854
UNKNOWN	add the icon on the workspace anyway.	98855
UNKNOWN	for shortcuts with no component keep them as they are	98856
UNKNOWN	dont restore items for other profiles.	98857
UNKNOWN	app shortcuts that used to be automatically added to launcher	98858
UNKNOWN	didnt always have the correct intent flags set so do that	98859
UNKNOWN	here	98860
UNKNOWN	check & update map of whats occupied	98861
UNKNOWN	item is in a user folder	98862
UNKNOWN	now that weve loaded everthing re-save it with the	98863
UNKNOWN	icon in case it disappears somehow.	98864
UNKNOWN	check & update map of whats occupied	98865
UNKNOWN	no special handling required for restored folders	98866
UNKNOWN	read all launcher-specific widget details	98867
UNKNOWN	if provider was not previously ready update the	98868
UNKNOWN	status and ui flag.	98869
UNKNOWN	id would be valid only if the widget restore broadcast was received.	98870
UNKNOWN	restore has started once.	98871
UNKNOWN	app restore has started. update the flag	98872
UNKNOWN	check & update map of whats occupied	98873
UNKNOWN	break early if weve stopped loading	98874
UNKNOWN	remove dead items	98875
UNKNOWN	dont notify content observers	98876
UNKNOWN	update restored items that no longer require special handling	98877
UNKNOWN	if were importing we use the old screen order.	98878
UNKNOWN	log to disk	98879
UNKNOWN	update the max item id after we load an old db	98880
UNKNOWN	if were importing we use the old screen order.	98881
UNKNOWN	log to disk	98882
UNKNOWN	remove any empty screens	98883
UNKNOWN	if there are any empty screens remove them and update.	98884
UNKNOWN	log to disk	98885
UNKNOWN	filters the set of items who are directly or indirectly (via another container) on the specified screen.	98886
UNKNOWN	purge any null iteminfos	98887
UNKNOWN	order the set of items by their containers first this allows use to walk through the	98888
UNKNOWN	list sequentially build up a list of containers that are in the specified screen	98889
UNKNOWN	as well as all items in those containers.	98890
UNKNOWN	filters the set of widgets which are on the specified screen.	98891
UNKNOWN	filters the set of folders which are on the specified screen.	98892
UNKNOWN	sorts the set of items by hotseat workspace (spatially from top to bottom left to right)	98893
UNKNOWN	xxx review this	98894
UNKNOWN	+1 hotseat	98895
UNKNOWN	+1 hotseat	98896
UNKNOWN	bind the workspace items	98897
UNKNOWN	bind the folders	98898
UNKNOWN	bind the widgets one at a time	98899
UNKNOWN	binds all loaded data to actual views on the main thread.	98900
UNKNOWN	dont use these two variables in any of the callback runnables.	98901
UNKNOWN	otherwise we hold a reference to them.	98902
UNKNOWN	this launcher has exited and nobody bothered to tell us. just bail.	98903
UNKNOWN	save a copy of all the bg-thread collections	98904
UNKNOWN	there may be no workspace screens (just hotseat items and an empty page).	98905
UNKNOWN	load all the items that are on the current page first (and in the process unbind	98906
UNKNOWN	all the existing workspace items before we call startbinding() below.	98907
UNKNOWN	separate the items that are on the current screen and all the other remaining items	98908
UNKNOWN	tell the workspace that were about to start binding items	98909
UNKNOWN	load items on the current page	98910
UNKNOWN	load all the remaining pages (if we are loading synchronously we want to defer this	98911
UNKNOWN	work until after the first render)	98912
UNKNOWN	tell the workspace that were done binding items	98913
UNKNOWN	if were profiling ensure this is the last thing in the queue.	98914
UNKNOWN	if were profiling ensure this is the last thing in the queue.	98915
UNKNOWN	this launcher has exited and nobody bothered to tell us. just bail.	98916
UNKNOWN	shallow copy	98917
UNKNOWN	this launcher has exited and nobody bothered to tell us. just bail.	98918
UNKNOWN	clear the list of apps	98919
UNKNOWN	huh? shouldnt this be inside the runnable below?	98925
UNKNOWN	post callback on main thread	98926
UNKNOWN	workaround to re-check unrestored items in-case they were installed but the package-add runnable was missed by the launcher.	98927
UNKNOWN	ensure that we add all the workspace applications to the db	98928
UNKNOWN	update the launcher db to reflect the changes	98929
UNKNOWN	mark all packages in the broadcast to be removed	98930
UNKNOWN	mark disabled packages in the broadcast to be removed	98931
UNKNOWN	remove all the components associated with this package	98932
UNKNOWN	remove all the specific components	98933
UNKNOWN	remove any queued items from the install queue	98934
UNKNOWN	call the components-removed callback	98935
UNKNOWN	write all the logs to disk	98936
UNKNOWN	update the new data	98937
UNKNOWN	returns a list of resolveinfos/appwindowinfos in sorted order	98938
UNKNOWN	make an shortcutinfo object for a restored application or shortcut item that points to a package that is not yet installed on the system.	98939
UNKNOWN	make an intent object for a restored application or shortcut item that points to the market page for the item.	98940
UNKNOWN	this is called from the code that adds shortcuts from the intent receiver. this doesnt have a cursor but	98941
UNKNOWN	make an shortcutinfo object for a shortcut that is an application. if c is not null then it will be used to fill in missing data like the title and icon.	98942
UNKNOWN	the resource -- this may implicitly give us back the fallback icon	98943
UNKNOWN	but dont worry about that. all were doing with usingfallbackicon is	98944
UNKNOWN	to avoid saving lots of copies of that in the database and most apps	98945
UNKNOWN	have icons anyway.	98946
UNKNOWN	the db	98947
UNKNOWN	the fallback icon	98948
UNKNOWN	from the cache.	98949
UNKNOWN	from the resource	98950
UNKNOWN	from the db	98951
UNKNOWN	fall back to the class name of the activity	98952
UNKNOWN	we need to check for action_main otherwise getcomponent() might	98953
UNKNOWN	return null for some shortcuts (for instance for shortcuts to	98954
UNKNOWN	web pages.)	98955
UNKNOWN	placeholder shortcuts get special treatment let them through too.	98956
UNKNOWN	make an shortcutinfo object for a shortcut that isnt an application.	98957
UNKNOWN	non-app shortcuts are only supported for current user.	98958
UNKNOWN	todo if theres an explicit component and we cant install that delete it.	98959
UNKNOWN	the resource	98960
UNKNOWN	drop this. we have other places to look for icons	98961
UNKNOWN	the db	98962
UNKNOWN	the fallback icon	98963
UNKNOWN	suppress dead code warning	98964
UNKNOWN	attempts to find an appwidgetproviderinfo that matches the given component.	98965
UNKNOWN	if the intent is null we cant construct a valid shortcutinfo so we return null	98966
UNKNOWN	only support intents for current user for now. intents sent from other	98967
UNKNOWN	users wouldnt get here without intent forwarding anyway.	98968
UNKNOWN	if apps cant be on sd dont even bother.	98969
UNKNOWN	if this icon doesnt have a custom icon check to see	98970
UNKNOWN	whats stored in the db and if it doesnt match what	98971
UNKNOWN	were going to show store what we are going to show back	98972
UNKNOWN	into the db. we do this so when were loading if the	98973
UNKNOWN	package manager cant find an icon (for example because	98974
UNKNOWN	the app is on sd) then we can use that instead.	98975
UNKNOWN	this is slower than is ideal but this only happens once	98976
UNKNOWN	or when the app is updated with a new icon.	98977
UNKNOWN	return an existing folderinfo object if we have encountered this id previously or make a new one.	98978
UNKNOWN	see if a placeholder was created for us already	98979
UNKNOWN	no placeholder -- create a new instance	98980
UNKNOWN	todo need to figure out rules for sorting	98981
UNKNOWN	profiles this puts work second.	98982
UNKNOWN	todo need to figure out rules for sorting	98983
UNKNOWN	profiles this puts work second.	98984
UNKNOWN	returns whether this is an upgrade path	98985
UNKNOWN	load the workspace	98986
UNKNOWN	bind the workspace	98987
UNKNOWN	wait until the either were stopped or the other threads are done.	98988
UNKNOWN	this way we dont start loading all apps until the workspace has settled	98989
UNKNOWN	down.	98990
UNKNOWN	just in case mflushingworkerthread changes but we arent woken up	98991
UNKNOWN	wait no longer than 1sec at a time	98992
UNKNOWN	ignore	98993
UNKNOWN	ensure that we have a valid page index to load synchronously	98994
UNKNOWN	ensure that we dont try and bind a specified page when the pages have not been	98995
UNKNOWN	loaded already (we should load everything asynchronously in that case)	98996
UNKNOWN	ensure that we are never running the background loading at this point since	98997
UNKNOWN	we also touch the background collections	98998
UNKNOWN	xxx throw an exception if we are already loading (since we touch the worker thread	98999
UNKNOWN	data structures we cant allow any other thread to touch that data but because	99000
UNKNOWN	this call is synchronous we can get away with not locking).	99001
UNKNOWN	the launchermodel is static in the launcherappstate and mhandler may have queued	99002
UNKNOWN	operations from the previous activity. we need to ensure that all queued operations	99003
UNKNOWN	are executed before any synchronous binding work is done.	99004
UNKNOWN	divide the set of loaded items into those that we are binding synchronously and	99005
UNKNOWN	everything else that is to be bound normally (asynchronously).	99006
UNKNOWN	xxx for now continue posting the binding of allapps as there are other issues that	99007
UNKNOWN	arise from that.	99008
UNKNOWN	optimize for end-user experience if the launcher is up and running with the	99009
UNKNOWN	all apps interface in the foreground load all apps first. otherwise load the	99010
UNKNOWN	workspace first (default).	99011
UNKNOWN	elevate priority when home launches for the first time to avoid	99012
UNKNOWN	starving at boot time. staring at a blank home is not cool.	99013
UNKNOWN	whew! hard work done. slow us down and wait until the ui thread has	99014
UNKNOWN	settled down.	99015
UNKNOWN	second step	99016
UNKNOWN	restore the default thread priority after we are done loading items	99017
UNKNOWN	update the saved icons if necessary	99018
UNKNOWN	ensure that all the applications that are in the system are	99019
UNKNOWN	represented on the home screen.	99020
UNKNOWN	clear out this reference otherwise we end up holding it until all of the	99021
UNKNOWN	callback runnables are done.	99022
UNKNOWN	if we are still the last one to be scheduled remove ourselves.	99023
UNKNOWN	gets the callbacks object. if weve been stopped or if the launcher object has somehow been garbage collected return null instead. pass in the callbacks object that was around when the deferred message was scheduled and if theres a new callbacks object around then also return null. this will save us from calling onto it with data that will be ignored.	99024
UNKNOWN	cross reference all the applications in our apps list with items in the workspace	99025
UNKNOWN	we are missing an application icon so add this to the workspace	99026
UNKNOWN	this is a rare event so lets log it	99027
UNKNOWN	check & update map of whats occupied used to discard overlapping/invalid items	99028
UNKNOWN	skip further checking if it is not the hotseat or workspace container	99029
UNKNOWN	check if any workspace icons overlap with each other	99030
UNKNOWN	clears all the sbg data structures	99031
UNKNOWN	returns whether this is an upgrade path	99032
UNKNOWN	log to disk	99033
UNKNOWN	append the users launcher2 shortcuts	99034
UNKNOWN	make sure the default workspace is loaded	99035
UNKNOWN	this code path is for our old migration code and should no longer be exercised	99036
UNKNOWN	log to disk	99037
UNKNOWN	+1 for the hotseat (it can be larger than the workspace)	99038
UNKNOWN	load workspace in reverse order to ensure that latest items are loaded first (and	99039
UNKNOWN	before any earlier duplicates)	99040
UNKNOWN	final int uriindex = c.getcolumnindexorthrow(launchersettings.favorites.uri)	99041
UNKNOWN	final int displaymodeindex = c.getcolumnindexorthrow(	99042
UNKNOWN	launchersettings.favorites.display_mode)	99043
UNKNOWN	user has been deleted remove the item.	99044
UNKNOWN	no special handling necessary for this item	99045
UNKNOWN	we allow auto install apps to have their intent	99046
UNKNOWN	updated after an install.	99047
UNKNOWN	the app is installed but the component is no	99048
UNKNOWN	longer available.	99049
UNKNOWN	no special handling necessary for this item	99050
UNKNOWN	package is not yet available but might be	99051
UNKNOWN	installed later.	99052
UNKNOWN	restore has started once.	99053
UNKNOWN	app restore has started. update the flag	99054
UNKNOWN	do not wait for external media load anymore.	99055
UNKNOWN	log the invalid package and remove it	99056
UNKNOWN	sdcard is not ready yet. package might get available	99057
UNKNOWN	once it is ready.	99058
UNKNOWN	add the icon on the workspace anyway.	99059
UNKNOWN	for shortcuts with no component keep them as they are	99060
UNKNOWN	dont restore items for other profiles.	99061
UNKNOWN	app shortcuts that used to be automatically added to launcher	99062
UNKNOWN	didnt always have the correct intent flags set so do that	99063
UNKNOWN	here	99064
UNKNOWN	check & update map of whats occupied	99065
UNKNOWN	item is in a user folder	99066
UNKNOWN	now that weve loaded everthing re-save it with the	99067
UNKNOWN	icon in case it disappears somehow.	99068
UNKNOWN	check & update map of whats occupied	99069
UNKNOWN	no special handling required for restored folders	99070
UNKNOWN	read all launcher-specific widget details	99071
UNKNOWN	if provider was not previously ready update the	99072
UNKNOWN	status and ui flag.	99073
UNKNOWN	id would be valid only if the widget restore broadcast was received.	99074
UNKNOWN	restore has started once.	99075
UNKNOWN	app restore has started. update the flag	99076
UNKNOWN	check & update map of whats occupied	99077
UNKNOWN	break early if weve stopped loading	99078
UNKNOWN	remove dead items	99079
UNKNOWN	dont notify content observers	99080
UNKNOWN	update restored items that no longer require special handling	99081
UNKNOWN	if were importing we use the old screen order.	99082
UNKNOWN	log to disk	99083
UNKNOWN	update the max item id after we load an old db	99084
UNKNOWN	if were importing we use the old screen order.	99085
UNKNOWN	log to disk	99086
UNKNOWN	remove any empty screens	99087
UNKNOWN	if there are any empty screens remove them and update.	99088
UNKNOWN	log to disk	99089
UNKNOWN	filters the set of items who are directly or indirectly (via another container) on the specified screen.	99090
UNKNOWN	purge any null iteminfos	99091
UNKNOWN	order the set of items by their containers first this allows use to walk through the	99092
UNKNOWN	list sequentially build up a list of containers that are in the specified screen	99093
UNKNOWN	as well as all items in those containers.	99094
UNKNOWN	filters the set of widgets which are on the specified screen.	99095
UNKNOWN	filters the set of folders which are on the specified screen.	99096
UNKNOWN	sorts the set of items by hotseat workspace (spatially from top to bottom left to right)	99097
UNKNOWN	xxx review this	99098
UNKNOWN	+1 hotseat	99099
UNKNOWN	+1 hotseat	99100
UNKNOWN	bind the workspace items	99101
UNKNOWN	bind the folders	99102
UNKNOWN	bind the widgets one at a time	99103
UNKNOWN	binds all loaded data to actual views on the main thread.	99104
UNKNOWN	dont use these two variables in any of the callback runnables.	99105
UNKNOWN	otherwise we hold a reference to them.	99106
UNKNOWN	this launcher has exited and nobody bothered to tell us. just bail.	99107
UNKNOWN	save a copy of all the bg-thread collections	99108
UNKNOWN	there may be no workspace screens (just hotseat items and an empty page).	99109
UNKNOWN	load all the items that are on the current page first (and in the process unbind	99110
UNKNOWN	all the existing workspace items before we call startbinding() below.	99111
UNKNOWN	separate the items that are on the current screen and all the other remaining items	99112
UNKNOWN	tell the workspace that were about to start binding items	99113
UNKNOWN	load items on the current page	99114
UNKNOWN	load all the remaining pages (if we are loading synchronously we want to defer this	99115
UNKNOWN	work until after the first render)	99116
UNKNOWN	tell the workspace that were done binding items	99117
UNKNOWN	if were profiling ensure this is the last thing in the queue.	99118
UNKNOWN	if were profiling ensure this is the last thing in the queue.	99119
UNKNOWN	this launcher has exited and nobody bothered to tell us. just bail.	99120
UNKNOWN	shallow copy	99121
UNKNOWN	this launcher has exited and nobody bothered to tell us. just bail.	99122
UNKNOWN	clear the list of apps	99123
UNKNOWN	query for the set of apps	99124
UNKNOWN	fail if we dont have any apps	99125
UNKNOWN	sort the applications by name	99126
UNKNOWN	create the applicationinfos	99127
UNKNOWN	this builds the icon bitmaps.	99128
UNKNOWN	huh? shouldnt this be inside the runnable below?	99129
UNKNOWN	post callback on main thread	99130
UNKNOWN	write all the logs to disk	99139
UNKNOWN	update the new data	99140
UNKNOWN	ensure that we add all the workspace applications to the db	99131
UNKNOWN	update the launcher db to reflect the changes	99132
UNKNOWN	mark all packages in the broadcast to be removed	99133
UNKNOWN	mark disabled packages in the broadcast to be removed	99134
UNKNOWN	remove all the components associated with this package	99135
UNKNOWN	remove all the specific components	99136
UNKNOWN	remove any queued items from the install queue	99137
UNKNOWN	call the components-removed callback	99138
UNKNOWN	return early if this is not initiated from a touch	99141
UNKNOWN	return early if we are still animating the pages	99142
UNKNOWN	when we have exited all apps or are in transition disregard long clicks	99143
UNKNOWN	return if global dragging is not enabled	99144
UNKNOWN	determines if we should change the touch state to start scrolling after the user moves their touch point too far.	99145
UNKNOWN	determines if we should change the touch state to start dragging after the user moves their touch point far enough.	99146
UNKNOWN	locally do absolute value. mlastmotionx is set to the y value of the down event.	99147
UNKNOWN	drag if the user moved far enough along the y axis	99148
UNKNOWN	cancel any pending long press	99149
UNKNOWN	try canceling the long press. it could also have been scheduled	99150
UNKNOWN	by a distant descendant so use the mallowlongpress flag to block	99151
UNKNOWN	everything	99152
UNKNOWN	find and return partner details or {@code null} if none exists.	99153
UNKNOWN	we initialize customizable fields to be invalid	99154
UNKNOWN	get the hover color	99155
UNKNOWN	remove the text in the phone ui in landscape	99156
UNKNOWN	acceptdrop is called just before ondrop. we do the work here rather than	99157
UNKNOWN	in ondrop because it allows us to reject the drop (by returning false)	99158
UNKNOWN	so that the object being dragged isnt removed from the drag source.	99159
UNKNOWN	there is no post-drop animation so clean up the dragview now	99160
UNKNOWN	hide this button unless we are dragging something from allapps	99161
UNKNOWN	empty and a re-bind occurred	99215
UNKNOWN	restore the previous launcher state	99217
UNKNOWN	check for special shortcuts	99362
UNKNOWN	check for abandoned promise	99363
UNKNOWN	start activities	99364
UNKNOWN	or .detectall() for all detectable problems	99162
UNKNOWN	determine the dynamic grid properties	99163
UNKNOWN	lazy-initialize the dynamic grid	99164
UNKNOWN	the launcherapplication should call this but in case of instrumentation it might not be present yet	99165
UNKNOWN	if we are getting an oncreate we can actually preempt onresume and unset mpaused here	99166
UNKNOWN	this also ensures that any synchronous binding below doesnt re-trigger another	99167
UNKNOWN	launchermodel load.	99168
UNKNOWN	if the user leaves launcher then we should just load items asynchronously when	99169
UNKNOWN	they return.	99170
UNKNOWN	we only load the page synchronously if the user rotates (or triggers a	99171
UNKNOWN	configuration change) while launcher is in the foreground	99172
UNKNOWN	for handling default keys	99173
UNKNOWN	on large interfaces we want the screen to auto-rotate based on the current orientation	99174
UNKNOWN	to be overriden by subclasses to hint to launcher that we have custom content	99175
UNKNOWN	to be overridden by subclasses to populate the custom content container and call {@link #addtocustomcontentpage}. this will only be invoked if {@link #hascustomcontenttoleft()} is {@code true}.	99176
UNKNOWN	the animated view may be null in the case of a rotation during widget configuration	99216
UNKNOWN	invoked by subclasses to signal a change to the {@link #addcustomcontenttoleft} value to ensure the custom content page is added or removed if necessary.	99177
UNKNOWN	not bound yet wait for bindscreens to be called.	99178
UNKNOWN	create the custom content page and call the subclass to populate it.	99179
UNKNOWN	recursive but now with a locale configuration	99180
UNKNOWN	recursive but now with a locale configuration	99181
UNKNOWN	ignore	99182
UNKNOWN	ignore	99183
UNKNOWN	ignore	99184
UNKNOWN	ignore	99185
UNKNOWN	noinspection resultofmethodcallignored	99186
UNKNOWN	ignore	99187
UNKNOWN	we prevent dragging when we are loading the workspace as it is possible to pick up a view	99188
UNKNOWN	that is subsequently removed from the workspace in startbinding().	99189
UNKNOWN	view.generateviewid() is not available. the following fallback logic is a copy	99190
UNKNOWN	of its implementation.	99191
UNKNOWN	aapt-generated ids have the high byte nonzero clamp to the range under that.	99192
UNKNOWN	roll over to 1 not 0.	99193
UNKNOWN	this cast is safe given the > 2b range for int.	99194
UNKNOWN	returns whether we should delay spring loaded mode -- for shortcuts and widgets that have a configuration step this allows the proper animations to run after other transitions.	99195
UNKNOWN	when the screen id represents an actual screen (as opposed to a rank) we make sure	99196
UNKNOWN	that the drop page actually exists.	99197
UNKNOWN	before adding this resetaddinfo() after a shortcut was added to a workspace screen	99198
UNKNOWN	if you turned the screen off and then back while in all apps launcher would not	99199
UNKNOWN	return to the workspace. clearing maddinfo.container here fixes this issue	99200
UNKNOWN	reset the startactivity waiting flag	99201
UNKNOWN	we have special handling for widgets	99202
UNKNOWN	no need to remove the empty screen if were mid-binding as the	99203
UNKNOWN	the bind will not add the empty screen.	99204
UNKNOWN	when the screen id represents an actual screen (as opposed to a rank)	99205
UNKNOWN	we make sure that the drop page actually exists.	99206
UNKNOWN	update the widget view.	99207
UNKNOWN	leave the widget in the pending state if the user canceled the configure.	99208
UNKNOWN	the pattern used here is that a user picks a specific application	99209
UNKNOWN	which depending on the target might need to create the actual target.	99210
UNKNOWN	for example the user would pick_shortcut for music playlist and we	99211
UNKNOWN	launch over to the music app to actually create_shortcut.	99212
UNKNOWN	check to see if a given screen id exists. if not create it at the end return the new id. @param screenid the screen id to check @return the new screen or screenid if it exists	99213
UNKNOWN	its possible that the add screen was removed because it was	99214
UNKNOWN	background was set to gradient in onpause() restore to black if in all apps.	99218
UNKNOWN	we might have postponed some bind calls until onresume (see waituntilresume) --	99219
UNKNOWN	execute them here	99220
UNKNOWN	reset the pressed state of icons that were locked in the press state while activities	99221
UNKNOWN	were launching	99222
UNKNOWN	resets the previous workspace icon press state	99223
UNKNOWN	it is possible that widgets can receive updates while launcher is not in the foreground.	99224
UNKNOWN	consequently the widgets will be inflated in the orientation of the foreground activity	99225
UNKNOWN	(framework issue). on resuming we ensure that any widgets are inflated for the current	99226
UNKNOWN	orientation.	99227
UNKNOWN	process any items that were added while launcher was away.	99228
UNKNOWN	intent idlescreenintent = new intent(appinterface.cat_idle_screen_action)	99229
UNKNOWN	idlescreenintent.putextra(screen_idle true)	99230
UNKNOWN	og.d(tagbroadcasting home idle screen intent )	99231
UNKNOWN	sendbroadcast(idlescreenintent)	99232
UNKNOWN	if we are resuming and the custom content is the current page we call onshow().	99233
UNKNOWN	it is also possible that onshow will instead be called slightly after first layout	99234
UNKNOWN	if pagedview#setrestorepage was set to the custom content page in oncreate().	99235
UNKNOWN	show oobe	99236
UNKNOWN	ensure that items added to launcher are queued until launcher returns	99237
UNKNOWN	we call onhide() aggressively. the custom content callbacks should be able to	99238
UNKNOWN	debounce excess onhide calls.	99239
UNKNOWN	change to false to hide all apps on the overview pane	99240
UNKNOWN	the custom content needs to offset its content to account for the qsb	99241
UNKNOWN	flag the loader to stop early before switching	99242
UNKNOWN	we cant hide the ime if it was forced open. so dont bother	99243
UNKNOWN	something usable has been typed - start a search	99244
UNKNOWN	the typed text will be retrieved and cleared by	99245
UNKNOWN	showsearchdialog()	99246
UNKNOWN	if there are multiple keystrokes before the search dialog takes focus	99247
UNKNOWN	onsearchrequested() will be called for every keystroke	99248
UNKNOWN	but it is idempotent so its fine.	99249
UNKNOWN	eat the long press event so the keyboard doesnt come up.	99250
UNKNOWN	given the integer (ordinal) value of a state enum instance convert it to a variable of type state	99251
UNKNOWN	restores the previous state if it exists. @param savedstate the previous state.	99252
UNKNOWN	restore the appscustomize tab	99253
UNKNOWN	finds all the views we need and configure them properly.	99254
UNKNOWN	setup the drag layer	99255
UNKNOWN	setup the workspace	99256
UNKNOWN	get the search/delete bar	99257
UNKNOWN	setup appscustomize	99258
UNKNOWN	setup the drag controller (drop targets have to be added in reverse order in priority)	99259
UNKNOWN	creates a view representing a shortcut. @param info the data structure describing the shortcut. @return a view inflated from r.layout.application.	99260
UNKNOWN	creates a view representing a shortcut inflated from the specified resource. @param layoutresid the id of the xml layout used to create the shortcut. @param parent the group the shortcut belongs to. @param info the data structure describing the shortcut. @return a view inflated from layoutresid.	99261
UNKNOWN	add a shortcut to the workspace. @param data the intent describing the shortcut. @param cellinfo the position on screen where to create the shortcut.	99262
UNKNOWN	the app is trying to add a shortcut without sufficient permissions	99263
UNKNOWN	first we check if we already know the exact location where we want to add this item.	99264
UNKNOWN	if appropriate either create a folder or add to an existing folder	99265
UNKNOWN	when dragging and dropping just find the closest free spot	99266
UNKNOWN	we want to account for the extra amount of padding that we are adding to the widget	99267
UNKNOWN	to ensure that it gets the full amount of space that it has requested	99268
UNKNOWN	add a widget to the workspace. @param appwidgetid the app widget id @param cellinfo the position on screen where to create the widget.	99269
UNKNOWN	calculate the grid spans needed to fit this widget	99270
UNKNOWN	try finding open space on launcher screen	99271
UNKNOWN	we have saved the position to which the widget was dragged-- this really only matters	99272
UNKNOWN	if we are placing widgets on a spring-loaded screen	99273
UNKNOWN	when dragging and dropping just find the closest free spot	99274
UNKNOWN	deleting an app widget id is a void call but writes to disk before returning	99275
UNKNOWN	to the caller	99276
UNKNOWN	build launcher-specific widget info and save to database	99277
UNKNOWN	perform actual inflation because were live	99278
UNKNOWN	the appwidgethostview has already been inflated and instantiated	99279
UNKNOWN	reset allapps to its initial state only if we are not in the middle of	99280
UNKNOWN	processing a multi-step drop	99281
UNKNOWN	listen for broadcasts related to user-presence	99282
UNKNOWN	for handling managed profiles	99283
UNKNOWN	sets up transparent navigation and status bars in lmp. this method is a no-op for other platform versions.	99284
UNKNOWN	todo(sansid) use the apis directly when compiling against l sdk.	99285
UNKNOWN	currently we use reflection to access the flags and the api to set the transparency	99286
UNKNOWN	on the system bars.	99287
UNKNOWN	the following code used to be in onresume but it turns out onresume is called when	99288
UNKNOWN	youre in all apps and click home to go to the workspace. onwindowvisibilitychanged	99289
UNKNOWN	is a more appropriate event to handle	99290
UNKNOWN	we want to let launcher draw itself at least once before we force it to build	99291
UNKNOWN	layers on all the workspace pages so that transitioning to launcher from other	99292
UNKNOWN	apps is nice and speedy.	99293
UNKNOWN	we delay the layer building a bit in order to give	99294
UNKNOWN	other message processing a time to run. in particular	99295
UNKNOWN	this avoids a delay in hiding the ime if it was	99296
UNKNOWN	currently shown because doing that may involve	99297
UNKNOWN	some communication back with the app.	99298
UNKNOWN	we delay the layer building a bit in order to give	99299
UNKNOWN	other message processing a time to run. in particular	99300
UNKNOWN	this avoids a delay in hiding the ime if it was	99301
UNKNOWN	currently shown because doing that may involve	99302
UNKNOWN	some communication back with the app.	99303
UNKNOWN	remove messages sent using postdelayed()	99304
UNKNOWN	whatever we were doing is hereby canceled.	99305
UNKNOWN	close the menu	99306
UNKNOWN	also will cancel mwaitingforresult.	99307
UNKNOWN	can be cases where mworkspace is null this prevents a npe	99308
UNKNOWN	in all these cases only animate if were already on home	99309
UNKNOWN	if we are already on home then just animate back to the workspace	99310
UNKNOWN	otherwise just wait until onresume to set the state back to workspace	99311
UNKNOWN	reset the apps customize page	99312
UNKNOWN	override point for subclasses to prevent movement to the default screen when the home button is pressed. used (for example) in gel to prevent movement during a search.	99313
UNKNOWN	override point for subclasses to provide custom behaviour for when a home intent is fired.	99314
UNKNOWN	we close any open folder since it will not be re-opened and we need to make sure	99315
UNKNOWN	this state is reflected.	99316
UNKNOWN	save the current appscustomize tab	99317
UNKNOWN	remove all pending runnables	99318
UNKNOWN	stop callbacks from launchermodel	99319
UNKNOWN	its possible to receive ondestroy after a new launcher activity has	99320
UNKNOWN	been created. in this case dont interfere with the new launcher.	99321
UNKNOWN	disconnect any of the callbacks and drawables associated with iteminfos on the workspace	99322
UNKNOWN	to prevent leaking launcher activities on orientation change.	99323
UNKNOWN	indicates that we want global search for this activity by setting the globalsearch argument for {@link #startsearch} to true.	99324
UNKNOWN	use any text typed in the launcher as the initial query	99325
UNKNOWN	start a text search. @return {@code true} if the search will start immediately so any further keypresses will be handled directly by the search ui. {@code false} if {@link launcher} should continue to buffer keypresses.	99326
UNKNOWN	starts the global search activity. this code is a copied from searchmanager	99327
UNKNOWN	make sure that we have a bundle to put source in	99328
UNKNOWN	set source to package name of app that starts global search if not set already.	99329
UNKNOWN	close any open folders	99330
UNKNOWN	stop resizing any widgets	99331
UNKNOWN	show the overview mode	99332
UNKNOWN	use a custom animation for launching search	99333
UNKNOWN	launch over to configure widget if needed	99334
UNKNOWN	otherwise just add it	99335
UNKNOWN	exit spring loaded mode if necessary after adding the widget	99336
UNKNOWN	exit spring loaded mode if necessary after adding the widget	99337
UNKNOWN	close any folders that may be open.	99338
UNKNOWN	process a shortcut drop. @param componentname the name of the component @param screenid the id of the screen where it should be added @param cell the cell it should be added to optional @param position the location on the screen where it was dropped optional	99339
UNKNOWN	process a widget drop. @param info the pendingappwidgetinfo of the widget being added. @param screenid the id of the screen where it should be added @param cell the cell it should be added to optional @param position the location on the screen where it was dropped optional	99340
UNKNOWN	in this case we either need to start an activity to get permission to bind	99341
UNKNOWN	the widget or we need to start an activity to configure the widget or both.	99342
UNKNOWN	todo we need to make sure that this accounts for the options bundle.	99343
UNKNOWN	intent.putextra(appwidgetmanager.extra_appwidget_options options)	99344
UNKNOWN	update the model	99345
UNKNOWN	create the view	99346
UNKNOWN	force measure the new folder icon	99347
UNKNOWN	registers various content observers. the current implementation registers only a favorites observer to keep track of the favorites applications.	99348
UNKNOWN	back button is a no-op here but give at least some feedback for the button press	99349
UNKNOWN	re-listen when widgets are reset.	99350
UNKNOWN	launches the intent referred by the clicked shortcut. @param v the view representing the clicked shortcut.	99351
UNKNOWN	make sure that rogue clicks dont get through while allapps is launching or after the	99352
UNKNOWN	view has detached (its possible for this to happen if the view is removed mid touch).	99353
UNKNOWN	event handler for the app widget view which has not fully restored.	99354
UNKNOWN	the install has not been queued	99355
UNKNOWN	download has started.	99356
UNKNOWN	event handler for the search button @param v the view that was clicked.	99357
UNKNOWN	event handler for the voice button @param v the view that was clicked.	99358
UNKNOWN	event handler for the grid button that appears on the home screen which enters all apps mode. @param v the view that was clicked.	99359
UNKNOWN	event handler for an app shortcut click. @param v the view that was clicked. must be a tagged with a {@link shortcutinfo}.	99360
UNKNOWN	open shortcut	99361
UNKNOWN	event handler for a folder icon click. @param v the view that was clicked. must be an instance of {@link foldericon}.	99365
UNKNOWN	if the folder info reports that the associated folder is open then verify that	99366
UNKNOWN	it is actually opened. there have been a few instances where this gets out of sync.	99367
UNKNOWN	close any open folder	99368
UNKNOWN	open the requested folder	99369
UNKNOWN	find the open folder	99370
UNKNOWN	.. and close it	99371
UNKNOWN	close any folder open on the current screen	99372
UNKNOWN	pull the folder onto this screen	99373
UNKNOWN	event handler for the (add) widgets button that appears after a long press on the home screen.	99374
UNKNOWN	event handler for the wallpaper picker button that appears after a long press on the home screen.	99375
UNKNOWN	event handler for a click on the settings button that appears after a long press on the home screen.	99376
UNKNOWN	provide the same haptic feedback that the system offers for virtual keys.	99377
UNKNOWN	provide the same haptic feedback that the system offers for virtual keys.	99378
UNKNOWN	called when the user stops interacting with the launcher. this implies that the user is now on the homescreen and is not doing housekeeping.	99379
UNKNOWN	called when the user starts interacting with the launcher. the possible interactions are - open all apps - reorder an app shortcut or a widget - open the overview mode. this is a good time to stop doing things that only make sense when the user is on the homescreen and not doing housekeeping.	99380
UNKNOWN	returns true if the activity was started	99381
UNKNOWN	system applications cannot be installed. for now show a toast explaining that.	99382
UNKNOWN	we may give them the option of disabling apps this way.	99383
UNKNOWN	only launch using the new animation if the shortcut has not opted out (this is a	99384
UNKNOWN	private contract between launcher and may be ignored in the future).	99385
UNKNOWN	could be launching some bookkeeping activity	99386
UNKNOWN	todo component can be null when shortcuts are supported for secondary user	99387
UNKNOWN	this method draws the foldericon to an imageview and then adds and positions that imageview in the draglayer in the exact absolute location of the original foldericon.	99388
UNKNOWN	lazy load imageview bitmap and canvas	99389
UNKNOWN	the layout from which the folder is being opened may be scaled adjust the starting	99390
UNKNOWN	view size by this scale factor.	99391
UNKNOWN	just in case this image view is still in the drag layer from a previous animation	99392
UNKNOWN	we remove it and re-add it.	99393
UNKNOWN	push an imageview copy of the foldericon into the draglayer and hide the original	99394
UNKNOWN	we remove and re-draw the foldericon in-case it has changed	99395
UNKNOWN	remove the imageview copy of the foldericon and make the original visible.	99396
UNKNOWN	remove the imageview copy of the foldericon and make the original visible.	99397
UNKNOWN	opens the user folder described by the specified tag. the opening of the folder is animated relative to the specified view. if the view is null no animation is played. @param folderinfo the folderinfo describing the folder to open.	99398
UNKNOWN	just verify that the folder hasnt already been added to the draglayer.	99399
UNKNOWN	there was a one-off crash where the folder had a parent already.	99400
UNKNOWN	notify the accessibility manager that this folder window has appeared and occluded	99401
UNKNOWN	the workspace items	99402
UNKNOWN	notify the accessibility manager that this folder window has disappeard and no	99403
UNKNOWN	longer occludeds the workspace items	99404
UNKNOWN	user long pressed on empty space	99405
UNKNOWN	user long pressed on an item	99406
UNKNOWN	returns the celllayout of the specified container at the specified screen.	99407
UNKNOWN	update the workspace transition step as well	99408
UNKNOWN	update the workspace transition step as well	99409
UNKNOWN	things to test when changing the following seven functions. - home from workspace - from center screen - from other screens - home from all apps - from center screen - from other screens - back from all apps - from center screen - from other screens - launch app from workspace and quit - with back - with home - launch app from all apps and quit - with back - with home - go to a screen thats not the default then all apps and launch and app and go back - with back -with home - on workspace long press power and go back - with back - with home - on all apps long press power and go back - with back - with home - on workspace power off - on all apps power off - launch an app and turn off the screen while in that app - go back with home key - go back with back key todo make this not go to workspace - from all apps - from workspace - enter and exit car mode (becuase it causes an extra configuration changed) - from all apps - from the center workspace - from another workspace	99410
UNKNOWN	zoom the camera out from the workspace to reveal toview. assumes that the view to show is anchored at either the very top or very bottom of the screen.	99411
UNKNOWN	set the content type for the all apps/widgets space	99412
UNKNOWN	if for some reason our views arent initialized dont animate	99413
UNKNOWN	hide the real page background and swap in the fake one	99414
UNKNOWN	we need to hide this view as the animation start will be posted.	99415
UNKNOWN	get the y delta between the center of the page and the center of the all apps button	99416
UNKNOWN	check that mstateanimation hasnt changed while	99417
UNKNOWN	we waited for a layout/draw pass	99418
UNKNOWN	check that mstateanimation hasnt changed while	99419
UNKNOWN	we waited for a layout/draw pass	99420
UNKNOWN	zoom the camera back into the workspace hiding fromview. this is the opposite of showappscustomizehelper. @param animated if true the transition will be animated.	99421
UNKNOWN	if for some reason our views arent initialized dont animate	99422
UNKNOWN	we need to hide side pages of the apps / widget tray to avoid some ugly edge cases	99423
UNKNOWN	hideappscustomizehelper is called in some cases when it is already hidden	99424
UNKNOWN	dont perform all these no-op animations. in particularly this was causing	99425
UNKNOWN	the all-apps button to pop in and out.	99426
UNKNOWN	hide the real page background and swap in the fake one	99427
UNKNOWN	the vertical motion of the apps panel should be delayed by one frame	99428
UNKNOWN	from the conceal animation in order to give the right feel. we correspondingly	99429
UNKNOWN	shorten the duration so that the slide and conceal end at the same time.	99430
UNKNOWN	unhide side pages	99431
UNKNOWN	reset page transforms	99432
UNKNOWN	check that mstateanimation hasnt changed while	99433
UNKNOWN	we waited for a layout/draw pass	99434
UNKNOWN	unhide side pages	99435
UNKNOWN	reset page transforms	99436
UNKNOWN	check that mstateanimation hasnt changed while	99437
UNKNOWN	we waited for a layout/draw pass	99438
UNKNOWN	set focus to the appscustomize button	99439
UNKNOWN	change the state after weve called all the transition code	99440
UNKNOWN	resume the auto-advance of widgets	99441
UNKNOWN	send an accessibility event to announce the context change	99442
UNKNOWN	we post this in-case the all apps view isnt yet constructed.	99443
UNKNOWN	change the state after weve called all the transition code	99444
UNKNOWN	pause the auto-advance of widgets until we are out of allapps	99445
UNKNOWN	send an accessibility event to announce the context change	99446
UNKNOWN	we post this in-case the all apps view isnt yet constructed.	99447
UNKNOWN	before we show workspace hide all apps again because	99448
UNKNOWN	exitspringloadeddragmode made it visible. this is a bit hacky we should	99449
UNKNOWN	clean up our state transition functions	99450
UNKNOWN	before we show workspace hide all apps again because	99451
UNKNOWN	exitspringloadeddragmode made it visible. this is a bit hacky we should	99452
UNKNOWN	clean up our state transition functions	99453
UNKNOWN	otherwise we are not in spring loaded mode so dont do anything.	99454
UNKNOWN	todo	99455
UNKNOWN	todo	99456
UNKNOWN	add an item from all apps or customize onto the given workspace screen. if layout is null add to the current screen.	99457
UNKNOWN	maps the current orientation to an index for referencing orientation correct global icons	99458
UNKNOWN	default - 0 landscape - 1	99459
UNKNOWN	look for the toolbar icon specified in the activity meta-data	99460
UNKNOWN	this can happen if the activity defines an invalid drawable	99461
UNKNOWN	this can happen if the activity defines an invalid drawable	99462
UNKNOWN	if successful in getting icon return it otherwise set button to use default drawable	99463
UNKNOWN	if we were unable to find the icon via the meta-data use a generic one	99464
UNKNOWN	if successful in getting icon return it otherwise set button to use default drawable	99465
UNKNOWN	if we were unable to find the icon via the meta-data use a	99466
UNKNOWN	generic one	99467
UNKNOWN	populate event with a fake title based on the current state.	99468
UNKNOWN	if the activity is currently paused signal that we need to run the passed runnable in onresume. this needs to be called from incoming places where resources might have been loaded while we are paused. that is becaues the configuration might be wrong when were not running and if it comes back to what it was when we were paused we are not restarted. implementation of the method from launchermodel.callbacks. @return true if we are currently paused. the caller might be able to skip some work in that case since we will come back again.	99469
UNKNOWN	noinspection statementwithemptybody	99470
UNKNOWN	if the activity is currently paused signal that we need to re-run the loader in onresume. this needs to be called from incoming places where resources might have been loaded while we are paused. that is becaues the configuration might be wrong when were not running and if it comes back to what it was when we were paused we are not restarted. implementation of the method from launchermodel.callbacks. @return true if we are currently paused. the caller might be able to skip some work in that case since we will come back again.	99471
UNKNOWN	implementation of the method from launchermodel.callbacks.	99472
UNKNOWN	refreshes the shortcuts shown on the workspace. implementation of the method from launchermodel.callbacks.	99473
UNKNOWN	if were starting binding all over again clear any bind calls wed postponed in	99474
UNKNOWN	the past (see waituntilresume) -- we dont need them since were starting binding	99475
UNKNOWN	from scratch again	99476
UNKNOWN	clear the workspace because its going to be rebound	99477
UNKNOWN	if there are no screens we need to have an empty screen	99478
UNKNOWN	create the custom content page (this call updates mdefaultscreen which calls	99479
UNKNOWN	setcurrentpage() so ensure that all pages are added before calling this).	99480
UNKNOWN	log to disk	99481
UNKNOWN	add the new screens	99482
UNKNOWN	we add the items without animation on non-visible pages and with	99483
UNKNOWN	animations on the new page (which we will try and snap to).	99484
UNKNOWN	remove the extra empty screen	99485
UNKNOWN	bind the items start-end from the list. implementation of the method from launchermodel.callbacks.	99486
UNKNOWN	get the list of added shortcuts and intersect them with the set of shortcuts here	99487
UNKNOWN	todo fix collision case	99488
UNKNOWN	animate all the applications up now	99489
UNKNOWN	animate to the correct page	99490
UNKNOWN	we post the animation slightly delayed to prevent slowdowns	99491
UNKNOWN	when we are loading right after we return to launcher.	99492
UNKNOWN	implementation of the method from launchermodel.callbacks.	99493
UNKNOWN	add the views for a widget to the workspace. implementation of the method from launchermodel.callbacks.	99494
UNKNOWN	note this assumes that the id remap broadcast is received before this step.	99495
UNKNOWN	if that is not the case the id remap will be ignored and user may see the	99496
UNKNOWN	click to setup view.	99497
UNKNOWN	todo consider showing a permission dialog when the widget is clicked.	99498
UNKNOWN	if the widget has a configure activity it is still needs to set it up otherwise	99499
UNKNOWN	the widget is ready to go.	99500
UNKNOWN	restores a pending widget. @param appwidgetid the app widget id @param cellinfo the position on screen where to create the widget.	99501
UNKNOWN	callback saying that there arent any more items to bind. implementation of the method from launchermodel.callbacks.	99502
UNKNOWN	if we received the result of any pending adds while the loader was running (e.g. the	99503
UNKNOWN	widget configuration forced an orientation change) process them now.	99504
UNKNOWN	todo this moves the user to the page where the pending item was added. ideally	99505
UNKNOWN	the screen would be guaranteed to exist after bind and the page would be set through	99506
UNKNOWN	the workspace restore process.	99507
UNKNOWN	add the icons for all apps. implementation of the method from launchermodel.callbacks.	99508
UNKNOWN	a package was updated. implementation of the method from launchermodel.callbacks.	99509
UNKNOWN	packages were restored	99510
UNKNOWN	update the state of a package typically related to install state. implementation of the method from launchermodel.callbacks.	99511
UNKNOWN	update the label and icon of all the icons in a package implementation of the method from launchermodel.callbacks.	99512
UNKNOWN	a package was uninstalled. we take both the super set of packagenames in addition to specific applications to remove the reason being that this can be called when a package is updated as well. in that scenario we only remove specific components from the workspace where as package-removal should clear all items by package name. implementation of the method from launchermodel.callbacks.	99513
UNKNOWN	notify the drag controller	99514
UNKNOWN	update allapps	99515
UNKNOWN	update the widgets pane	99516
UNKNOWN	we are currently in the same basic orientation as the natural orientation	99517
UNKNOWN	we are currently in the other basic orientation to the natural orientation	99518
UNKNOWN	since the map starts at portrait we need to offset if this devices natural orientation	99519
UNKNOWN	is landscape.	99520
UNKNOWN	called when the searchbar hint should be changed. @param hint the hint to be displayed in the search bar.	99521
UNKNOWN	this method indicates whether or not we should suggest default wallpaper dimensions when our wallpaper cropper was not yet used to set a wallpaper.	99522
UNKNOWN	to be overridden by subclasses to indicate that there is an activity to launch before showing the standard launcher experience.	99523
UNKNOWN	to be overridden by subclasses to launch any first run activity	99524
UNKNOWN	to be overridden by subclasses to indicate that there is an in-activity full-screen intro screen that must be displayed and dismissed.	99525
UNKNOWN	full screen intro screen to be shown and dismissed before the launcher can be used.	99526
UNKNOWN	to be overriden by subclasses to indicate whether the in-activity intro screen has been dismissed. this method is ignored if #hasdismissableintroscreen returns false.	99527
UNKNOWN	we delay hiding the intro view until the first run activity is showing. this	99528
UNKNOWN	avoids a blip.	99529
UNKNOWN	the two first run cling paths are mutually exclusive if the launcher is preinstalled	99530
UNKNOWN	on the device then we always show the first run cling experience (or if there is no	99531
UNKNOWN	launcher2). otherwise we prompt the user upon started for migration	99532
UNKNOWN	launcherclings.showlongpresscling(true)	99533
UNKNOWN	called from search suggestion not supported in other profiles.	99534
UNKNOWN	called from search suggestion not supported in other profiles.	99535
UNKNOWN	prints out out state for debugging.	99536
UNKNOWN	show oobe tutorial on first use of edge swipe edit favorites etc @param oobetoshow activity identifier show_oobe_edit_favorites or show_oobe_edge_swipe_menu @param oobetutorial tutorial to show oobeactivity.oobe_edit_favorites_tutorial oobeactivity.oobe_edge_swipe_tutorial oobeactivity.oobe_full_tutorial	99537
UNKNOWN	if (true || msharedprefs.getboolean(oobetoshow true)) { uncomment to loop the animation	99538
UNKNOWN	starts the oobeactivity in the selected tutorial @param oobetutorial tutorial to show oobeactivity.oobe_edit_favorites_tutorial oobeactivity.oobe_edge_swipe_tutorial oobeactivity.oobe_full_tutorial	99539
UNKNOWN	enable the hw layers before the animation starts (will be disabled in the onanimationend	99540
UNKNOWN	callback below)	99541
UNKNOWN	get the individual components	99542
UNKNOWN	create the various fade animations	99543
UNKNOWN	gets various transition durations.	99544
UNKNOWN	dragcontroller.draglistener implementation	99545
UNKNOWN	animate out the qsb search bar and animate in the drop target bar	99546
UNKNOWN	restore the qsb search bar and animate out the drop target bar	99547
UNKNOWN	the text fits in a single line. no need to draw the setup icon.	99555
UNKNOWN	update left and top to indicate the position where the text will be drawn.	99556
UNKNOWN	no-op	99548
UNKNOWN	re inflate is required any time the widget restore status changes	99549
UNKNOWN	the view displays two modes one with a setup icon and another with a preload icon	99550
UNKNOWN	in the center.	99551
UNKNOWN	appwidgethostview blocks all click events on the root view. instead handle click events	99552
UNKNOWN	on the content and pass it along.	99553
UNKNOWN	recreate the setup text.	99554
UNKNOWN	the text cant be drawn in a single line. draw a setup icon instead.	99557
UNKNOWN	load the preferences from an xml resource	99558
UNKNOWN	the size of the indicator is same as the content region of the {@link #mbgdrawable} minus half the stroke size to accommodate the indicator.	99559
UNKNOWN	amount by which padding has to be scaled	99560
UNKNOWN	the draw region has been clipped.	99561
UNKNOWN	stop animation	99562
UNKNOWN	set the paint color only when the level changes so that the dominant color	99563
UNKNOWN	is only calculated when needed.	99564
UNKNOWN	runs the finish animation if it is has not been run after last level change.	99565
UNKNOWN	make sure that the dominant color has enough saturation to be visible properly.	99566
UNKNOWN	set a new alarm to expire for the screen that we are hovering over now	99567
UNKNOWN	this is called when our timer runs out	99568
UNKNOWN	snap to the screen that we are hovering over now	99569
UNKNOWN	suppress dead code warning	99570
UNKNOWN	debug drawing for hit space	99571
UNKNOWN	set whether or not to invert the layout horizontally if the layout is in rtl mode.	99572
UNKNOWN	widgets have their own padding so skip	99573
UNKNOWN	otherwise center the icon	99574
UNKNOWN	cancel long press for all children	99575
UNKNOWN	update the drawing caches	99576
UNKNOWN	initializes various states for this workspace.	99577
UNKNOWN	if (!mscroller.isfinished()) return	99578
UNKNOWN	keep generating points as long as were more than 1px away from the target	99579
UNKNOWN	todo initial wallpaper now that wallpapers are owned by another app	99580
UNKNOWN	todo make removeshortcut internally threadsafe	99581
UNKNOWN	ignore	99582
UNKNOWN	todo delayed writes	99583
UNKNOWN	not a problem	99584
UNKNOWN	more of a problem	99585
UNKNOWN	log.v(weightwatcher.processwatcher	99586
UNKNOWN	msg_update pss= + mmeminfo.currentpss)	99587
UNKNOWN	app	99588
UNKNOWN	service	99589
UNKNOWN	log.v(weightwatcher.processwatcher	99590
UNKNOWN	msg_update pss= + mmeminfo.currentpss)	99591
UNKNOWN	app	99592
UNKNOWN	service	99593
UNKNOWN	draw a big box for the icon for debugging	99605
UNKNOWN	suppress dead code warning	99604
UNKNOWN	returns a fastbitmapdrawable with the icon accurately sized.	99594
UNKNOWN	resizes an icon drawable to the correct icon size.	99595
UNKNOWN	indicates if the device is running lmp or higher.	99596
UNKNOWN	returns a bitmap which is of the appropriate size to be displayed as an icon	99597
UNKNOWN	we share the statics -(	99598
UNKNOWN	returns a bitmap suitable for the all apps view.	99599
UNKNOWN	we share the statics -(	99600
UNKNOWN	ensure the bitmap has a density.	99601
UNKNOWN	scale the icon proportionally to the icon dimensions	99602
UNKNOWN	no intrinsic size --> use default size	99603
UNKNOWN	given a coordinate relative to the descendant find the coordinate in a parent views coordinates. @param descendant the descendant to which the passed coordinate is relative. @param root the root view to make the coordinates relative to. @param coord the coordinate that we want mapped. @param includerootscroll whether or not to account for the scroll of the descendant sometimes this is relevant as in a childs coordinates within the descendant. @return the factor by which this descendant is scaled relative to this draglayer. caution this scale factor is assumed to be equal in x and y and so if at any point this assumption fails we will need to return a pair of scale factors.	99606
UNKNOWN	for textviews scroll has a meaning which relates to the text position	99607
UNKNOWN	which is very strange ignore the scroll.	99608
UNKNOWN	inverse of {@link #getdescendantcoordrelativetoself(view int[])}.	99609
UNKNOWN	utility method to determine whether the given point in local coordinates is inside the view where the area of the view is expanded by the slop factor. this method is called while processing touch-move events to determine if the event is still within the view.	99610
UNKNOWN	this picks a dominant color looking for high-saturation high-value repeated hues. @param bitmap the bitmap to scan @param samples the approximate max number of samples to use.	99611
UNKNOWN	this is an out-param for getting the hsv values for an rgb	99612
UNKNOWN	first get the best hue by creating a histogram over 360 hue buckets	99613
UNKNOWN	where each pixel contributes a score weighted by saturation value and alpha.	99614
UNKNOWN	drop mostly-transparent pixels.	99615
UNKNOWN	remove the alpha channel.	99616
UNKNOWN	bucket colors by the 360 integer hues.	99617
UNKNOWN	defensively avoid array bounds violations.	99618
UNKNOWN	go back over the rgb colors that match the winning hue	99619
UNKNOWN	creating a histogram of weighted sv scores for up to 100100 [sv] buckets.	99620
UNKNOWN	the highest-scoring rgb color wins.	99621
UNKNOWN	score by cumulative saturation value.	99622
UNKNOWN	all the colors in the winning bucket are very similar. last in wins.	99623
UNKNOWN	finds a system apk which had a broadcast receiver listening to a particular action. @param action intent action used to find the apk @return a pair of apk package name and the resources.	99624
UNKNOWN	launching the application	99625
UNKNOWN	most used	99626
UNKNOWN	set the all apps	99627
UNKNOWN	to determine the full scroll width	99818
UNKNOWN	initializes various states for this workspace.	99628
UNKNOWN	scale the fling-to-delete threshold by the density	99629
UNKNOWN	hook up the page indicator	99630
UNKNOWN	unhook the page indicator	99631
UNKNOWN	convenience methods to map points from self to parent and vice versa	99632
UNKNOWN	convenience methods to get the actual width/height of the pagedview (since it is measured	99633
UNKNOWN	to be larger to account for the minimum possible scale)	99634
UNKNOWN	convenience methods to get the offset assuming that we are centering the pages in the	99635
UNKNOWN	pagedview both horizontally and vertically	99636
UNKNOWN	add a page change listener which will be called when a page is _finished_ listening.	99637
UNKNOWN	note this is a reimplementation of view.islayoutrtl() since that is currently hidden api.	99638
UNKNOWN	called by subclasses to mark that data is ready and that we can begin loading and laying out pages.	99639
UNKNOWN	returns the index of the currently displayed page. @return the index of the currently displayed page.	99640
UNKNOWN	updates the scroll of the current page immediately to its final scroll position. we use this in customizepagedview to allow tabs to share the same pagedview while resetting the scroll of the previous tab page.	99641
UNKNOWN	if the current page is invalid just reset the scroll position to zero	99642
UNKNOWN	called during allapps/home transitions to avoid unnecessary work. when that other animation {@link #updatecurrentpagescroll()} should be called to correctly set the final state and re-enable scrolling.	99643
UNKNOWN	we need to clean up the next page here to avoid computescrollhelper from	99644
UNKNOWN	updating current page on the pass.	99645
UNKNOWN	we need to clean up the next page here to avoid computescrollhelper from	99646
UNKNOWN	updating current page on the pass.	99647
UNKNOWN	when in free scroll mode we need to clamp to the free scroll page range.	99648
UNKNOWN	ensure that it is clamped by the actual set of children in all cases	99649
UNKNOWN	sets the current page.	99650
UNKNOWN	dont introduce any checks like mcurrentpage == currentpage here-- if we change the	99651
UNKNOWN	the default	99652
UNKNOWN	the restore page will be set in place of the current page at the next (likely first) layout.	99653
UNKNOWN	should be called whenever the page changes. in the case of a scroll we wait until the page has settled.	99654
UNKNOWN	update the page indicator (when we arent reordering)	99655
UNKNOWN	a method that subclasses can override to add behavior	99656
UNKNOWN	a method that subclasses can override to add behavior	99657
UNKNOWN	registers the specified listener on each page contained in this workspace. @param l the listener used to respond to long clicks.	99658
UNKNOWN	in free scroll mode we clamp the scrollx	99659
UNKNOWN	update the last motion events when scrolling	99660
UNKNOWN	we moved this functionality to a helper function so smoothpagedview can reuse it	99661
UNKNOWN	dont bother scrolling if the page does not need to be moved	99662
UNKNOWN	load the associated pages if necessary	99663
UNKNOWN	we dont want to trigger a page end moving unless the page has settled	99664
UNKNOWN	and the user has stopped scrolling	99665
UNKNOWN	notify the user when the page changes	99666
UNKNOWN	we measure the dimensions of the pagedview to be larger than the pages so that when we	99667
UNKNOWN	zoom out (and scale down) the view is still contained in the parent	99668
UNKNOWN	note we multiply by 2f to account for the fact that depending on the offset of the	99669
UNKNOWN	viewport we can be at most one and a half screens offset once we scale down	99670
UNKNOWN	return early if we arent given a proper dimension	99671
UNKNOWN	allow the height to be set as wrap_content. this allows the particular case of the all apps view on xlarge displays to not take up more space then it needs. width is still not allowed to be set as wrap_content since many parts of the code expect each page to have the same width.	99672
UNKNOWN	the children are given the same width and height as the workspace	99673
UNKNOWN	unless they were set to wrap_content	99674
UNKNOWN	disallowing padding in paged view (just pass 0)	99675
UNKNOWN	this method should be called once before first layout / measure pass.	99676
UNKNOWN	update the viewport offsets	99677
UNKNOWN	prevent full screen pages from showing in the viewport	99678
UNKNOWN	when they are not the current page.	99679
UNKNOWN	update the page indicator we dont update the page indicator as we	99680
UNKNOWN	add/remove pages	99681
UNKNOWN	this ensures that when children are added they get the correct transforms / alphas	99682
UNKNOWN	in accordance with any scroll effects.	99683
UNKNOWN	update the page indicator we dont update the page indicator as we	99684
UNKNOWN	add/remove pages	99685
UNKNOWN	xxx we should find a better way to hook into this before the view	99686
UNKNOWN	gets removed form its parent	99687
UNKNOWN	xxx we should find a better way to hook into this before the view	99688
UNKNOWN	gets removed form its parent	99689
UNKNOWN	xxx we should find a better way to hook into this before the view	99690
UNKNOWN	gets removed form its parent	99691
UNKNOWN	update the page indicator we dont update the page indicator as we	99692
UNKNOWN	add/remove pages	99693
UNKNOWN	find out which screens are visible as an optimization we only call draw on them	99694
UNKNOWN	moverscrollx is equal to getscrollx() when were within the normal scroll range.	99695
UNKNOWN	otherwise it is equal to the scaled overscroll position.	99696
UNKNOWN	set mforcescreenscrolled before calling screenscrolled so that screenscrolled can	99697
UNKNOWN	set it for the next frame	99698
UNKNOWN	clip to the bounds	99699
UNKNOWN	draw all the children leaving the drag view for last	99700
UNKNOWN	draw the drag view on top (if there is one)	99701
UNKNOWN	xxx-rtl this will be fixed in a future cl	99702
UNKNOWN	xxx-rtl this will be fixed in a future cl	99703
UNKNOWN	if one of our descendant views decides that it could be focused now only pass that along if its on the current page. this happens when live folders requery and if theyre off page they end up calling requestfocus which pulls it on page.	99704
UNKNOWN	{@inheritdoc}	99705
UNKNOWN	we need to make sure to cancel our long press if	99706
UNKNOWN	a scrollable widget takes over touch events	99707
UNKNOWN	return true if a tap at (x y) should trigger a flip to the previous page.	99708
UNKNOWN	return true if a tap at (x y) should trigger a flip to the next page.	99709
UNKNOWN	returns whether x and y originated within the buffered viewport	99710
UNKNOWN	this method just determines whether we want to intercept the motion. if we return true ontouchevent will be called and we do the actual scrolling there.	99711
UNKNOWN	skip touch handling if there are no pages to swipe	99712
UNKNOWN	shortcut the most recurring case the user is in the dragging state and he is moving his finger. we want to intercept this motion.	99713
UNKNOWN	misbeingdragged == false otherwise the shortcut would have caught it. check whether the user has moved far enough from his original down touch.	99714
UNKNOWN	if mactivepointerid is invalid_pointer then we must have missed an action_down	99715
UNKNOWN	event. in that case treat the first occurence of a move event as a action_down	99716
UNKNOWN	i.e. fall through to the next case (dont break)	99717
UNKNOWN	(we sometimes miss action_down events in workspace because it ignores all events	99718
UNKNOWN	while its small- this was causing a crash before we checked for invalid_pointer)	99719
UNKNOWN	remember location of down touch	99720
UNKNOWN	if being flinged and user touches the screen initiate drag otherwise dont. mscroller.isfinished should be false when being flinged.	99721
UNKNOWN	check if this can be the beginning of a tap on the side of the pages	99722
UNKNOWN	to scroll the current page	99723
UNKNOWN	the only time we want to intercept motion events is if we are in the drag mode.	99724
UNKNOWN	determines if we should change the touch state to start scrolling after the user moves their touch point too far.	99725
UNKNOWN	disallow scrolling if we dont have a valid pointer index	99726
UNKNOWN	disallow scrolling if we started the gesture from outside the viewport	99727
UNKNOWN	scroll if the user moved far enough along the x axis	99728
UNKNOWN	mallowlongpress = false	99729
UNKNOWN	try canceling the long press. it could also have been scheduled	99730
UNKNOWN	by a distant descendant so use the mallowlongpress flag to block	99731
UNKNOWN	everything	99732
UNKNOWN	while layout transitions are occurring a childs position may stray from its baseline	99733
UNKNOWN	position. this method returns the magnitude of this stray at any given time.	99734
UNKNOWN	this curve determines how the effect of scrolling over the limits of the page dimishes	99735
UNKNOWN	as the user pulls further and further from the bounds	99736
UNKNOWN	we want to reach the max over scroll effect when the user has	99737
UNKNOWN	over scrolled half the size of the screen	99738
UNKNOWN	clamp this factor f to -1 < f < 1	99739
UNKNOWN	clamp this factor f to -1 < f < 1	99740
UNKNOWN	using the formula in overscroll assuming that f = 1.0 (which it should generally not	99741
UNKNOWN	exceed). used to find out how much extra wallpaper we need for the over scroll effect	99742
UNKNOWN	skip touch handling if there are no pages to swipe	99743
UNKNOWN	if being flinged and user touches stop the fling. isfinished will be false if being flinged.	99744
UNKNOWN	remember where the motion event started	99745
UNKNOWN	scroll to follow the motion event	99746
UNKNOWN	only scroll and update mlastmotionx if we have moved some discrete amount. we	99747
UNKNOWN	keep the remainder because we are actually testing if weve moved from the last	99748
UNKNOWN	scrolled position (which is discrete).	99749
UNKNOWN	update the last motion position	99750
UNKNOWN	update the parent down so that our zoom animations take this new movement into	99751
UNKNOWN	account	99752
UNKNOWN	find the closest page to the touch point	99753
UNKNOWN	change the drag view if we are hovering over the drop target	99754
UNKNOWN	setup the scroll to the correct page before we swap the views	99755
UNKNOWN	for each of the pages between the paged view and the drag view	99756
UNKNOWN	animate them from the previous position to the new position in	99757
UNKNOWN	the layout (as a result of the drag view moving in the layout)	99758
UNKNOWN	dragviewindex < pageunderpointindex so after we remove the	99759
UNKNOWN	drag view all subsequent views to pageunderpointindex will	99760
UNKNOWN	shift down.	99761
UNKNOWN	animate the view translation from its old position to its new	99762
UNKNOWN	position	99763
UNKNOWN	in the case that the page is moved far to one direction and then is flung	99764
UNKNOWN	in the opposite direction we use a threshold to determine whether we should	99765
UNKNOWN	just return to the starting page or if we should skip one further.	99766
UNKNOWN	we give flings precedence over large moves which is why we short-circuit our	99767
UNKNOWN	test for a large move if a fling has been registered. that is a large	99768
UNKNOWN	move to the left and fling to the right will register as a fling to the right.	99769
UNKNOWN	at this point we have not moved beyond the touch slop	99770
UNKNOWN	(otherwise mtouchstate would be touch_state_scrolling) so	99771
UNKNOWN	we can just page	99772
UNKNOWN	at this point we have not moved beyond the touch slop	99773
UNKNOWN	(otherwise mtouchstate would be touch_state_scrolling) so	99774
UNKNOWN	we can just page	99775
UNKNOWN	update the last motion position	99776
UNKNOWN	update the parent down so that our zoom animations take this new movement into	99777
UNKNOWN	account	99778
UNKNOWN	check the velocity and see if we are flinging-to-delete	99779
UNKNOWN	remove the callback to wait for the side page hover timeout	99780
UNKNOWN	end any intermediate reordering states	99781
UNKNOWN	setup the scroll to the correct page before we swap the views	99782
UNKNOWN	for each of the pages between the paged view and the drag view	99783
UNKNOWN	animate them from the previous position to the new position in	99784
UNKNOWN	the layout (as a result of the drag view moving in the layout)	99785
UNKNOWN	dragviewindex < pageunderpointindex so after we remove the	99786
UNKNOWN	drag view all subsequent views to pageunderpointindex will	99787
UNKNOWN	shift down.	99788
UNKNOWN	animate the view translation from its old position to its new	99789
UNKNOWN	position	99790
UNKNOWN	handle mouse (or ext. device) by shifting the page depending on the scroll	99791
UNKNOWN	this was our active pointer going up. choose a new	99792
UNKNOWN	active pointer and adjust accordingly.	99793
UNKNOWN	todo make this decision more intelligent.	99794
UNKNOWN	we want the duration of the page snap animation to be influenced by the distance that	99795
UNKNOWN	the screen has to travel however we dont want this duration to be effected in a	99796
UNKNOWN	purely linear fashion. instead we use this method to moderate the effect that the distance	99797
UNKNOWN	of travel has on the overall snap duration.	99798
UNKNOWN	center the values about 0.	99799
UNKNOWN	if the velocity is low enough then treat this more as an automatic page advance	99800
UNKNOWN	as opposed to an apparent physical response to flinging	99801
UNKNOWN	here we compute a distance that will be used in the computation of the overall	99802
UNKNOWN	snap duration. this is a function of the actual distance that needs to be traveled	99803
UNKNOWN	we keep this value close to half screen size in order to reduce the variance in snap	99804
UNKNOWN	duration as a function of the distance the page needs to travel.	99805
UNKNOWN	we want the pages snap velocity to approximately match the velocity at which the	99806
UNKNOWN	user flings so we scale the duration by a value near to the derivative of the scroll	99807
UNKNOWN	interpolator at zero ie. 5. we use 4 to make it a little slower.	99808
UNKNOWN	trigger a compute() to finish switching pages if necessary	99809
UNKNOWN	defer loading associated pages until the scroll settles	99810
UNKNOWN	@return true is long presses are still allowed for the current touch	99811
UNKNOWN	set true to allow long-press events to be triggered usually checked by {@link launcher} to accept or block dpad-initiated long-presses.	99812
UNKNOWN	first clear any pages that should no longer be loaded	99813
UNKNOWN	next load any new pages	99814
UNKNOWN	force all scrolling-related behavior to end	99815
UNKNOWN	update all the pages	99816
UNKNOWN	we must force a measure after weve loaded the pages to update the content width and	99817
UNKNOWN	set a new page as the current page if necessary	99819
UNKNOWN	mark each of the pages as dirty	99820
UNKNOWN	load any pages that are necessary for the current window of views	99821
UNKNOWN	if the page is moving then snap it to the final position to ensure we dont get	99822
UNKNOWN	stuck between pages	99823
UNKNOWN	animate the drag view back to the original position	99824
UNKNOWN	set the touch state to reordering (allows snapping to pages dragging a child etc.)	99825
UNKNOWN	we must invalidate to trigger a redraw to update the layers such that the drag view	99826
UNKNOWN	is always drawn on top	99827
UNKNOWN	trigger the callback when reordering has settled	99828
UNKNOWN	check if we are within the reordering range	99829
UNKNOWN	find the drag view under the pointer	99830
UNKNOWN	for simplicity we call endreordering sometimes even if reordering was never started.	99831
UNKNOWN	in that case we dont want to do anything.	99832
UNKNOWN	if we havent flung-to-delete the current child then we just animate the drag view	99833
UNKNOWN	back into position	99834
UNKNOWN	snap to the current page	99835
UNKNOWN	animate the drag view back to the front position	99836
UNKNOWN	handled in post-delete-animation-callbacks	99837
UNKNOWN	flinging to delete - in progress	99838
UNKNOWN	do a quick dot product test to ensure that we are flinging upwards	99839
UNKNOWN	for each of the pages around the drag view animate them from the previous	99840
UNKNOWN	position to the new position in the layout (as a result of the drag view moving	99841
UNKNOWN	in the layout)	99842
UNKNOWN	note we can make an assumption here because we have side-bound pages that we	99843
UNKNOWN	will always have pages to animate in from the left	99844
UNKNOWN	setup the scroll to the correct page before we swap the views	99845
UNKNOWN	dragviewindex < pageunderpointindex so after we remove the	99846
UNKNOWN	drag view all subsequent views to pageunderpointindex will	99847
UNKNOWN	shift down.	99848
UNKNOWN	simulate the page being offscreen with the page spacing	99849
UNKNOWN	animate the view translation from its old position to its new	99850
UNKNOWN	position	99851
UNKNOWN	note hacky but we want to skip any optimizations to not draw completely	99852
UNKNOWN	hidden views	99853
UNKNOWN	for each of the pages around the drag view animate them from the previous	99854
UNKNOWN	position to the new position in the layout (as a result of the drag view moving	99855
UNKNOWN	in the layout)	99856
UNKNOWN	note we can make an assumption here because we have side-bound pages that we	99857
UNKNOWN	will always have pages to animate in from the left	99858
UNKNOWN	setup the scroll to the correct page before we swap the views	99859
UNKNOWN	dragviewindex < pageunderpointindex so after we remove the	99860
UNKNOWN	drag view all subsequent views to pageunderpointindex will	99861
UNKNOWN	shift down.	99862
UNKNOWN	simulate the page being offscreen with the page spacing	99863
UNKNOWN	animate the view translation from its old position to its new	99864
UNKNOWN	position	99865
UNKNOWN	note hacky but we want to skip any optimizations to not draw completely	99866
UNKNOWN	hidden views	99867
UNKNOWN	note because it takes time for the first frame of animation to actually be	99868
UNKNOWN	called and we expect the animation to be a continuation of the fling we have	99869
UNKNOWN	to account for the time that has elapsed since the fling finished. and since	99870
UNKNOWN	we dont have a startdelay we will always get call to update when we call	99871
UNKNOWN	start() (which we want to ignore).	99872
UNKNOWN	anonymous inner class ctor	99873
UNKNOWN	create and start the animation	99874
UNKNOWN	drag to delete	99875
UNKNOWN	create and start the complex animation	99876
UNKNOWN	accessibility	99877
UNKNOWN	dont let the view send real scroll events.	99878
UNKNOWN	refactor the limits	99879
UNKNOWN	update the information	99880
UNKNOWN	clear the current state	99881
UNKNOWN	add application to the bag	99882
UNKNOWN	update the information	99883
UNKNOWN	obtain the cached app information	99884
UNKNOWN	if does not exist create one	99885
UNKNOWN	increment count	99886
UNKNOWN	set the current time for the last execution	99887
UNKNOWN	update the informations	99888
UNKNOWN	obtain the cached app information	99889
UNKNOWN	if does not exist create one	99890
UNKNOWN	obtain the cached app information	99891
UNKNOWN	if does not exist create one	99892
UNKNOWN	set the current time for the last execution	99893
UNKNOWN	obtain the cached app information	99894
UNKNOWN	if does not exist create one	99895
UNKNOWN	obtain the cached app information	99896
UNKNOWN	update age	99897
UNKNOWN	remove data	99898
UNKNOWN	if does not exist return	99899
UNKNOWN	if its being used in the lists refactor the lists	99900
UNKNOWN	most used	99901
UNKNOWN	calculate the most used	99902
UNKNOWN	calculate the most recent	99903
UNKNOWN	update the recent apps	99911
UNKNOWN	process the most used apps	99912
UNKNOWN	called once the last instance of your widget is removed from the	99904
UNKNOWN	homescreen	99905
UNKNOWN	widget instance is removed from the homescreen	99906
UNKNOWN	obtain appropriate widget and update it.	99907
UNKNOWN	get the widgets	99908
UNKNOWN	clear the current data	99909
UNKNOWN	obtain the current data saved	99910
UNKNOWN	if no information is available log it and continue	99913
UNKNOWN	update the code	99914
UNKNOWN	if no information is available log it and continue	99915
UNKNOWN	update the code	99916
UNKNOWN	generate the mostused row	99917
UNKNOWN	get app icon and label	99918
UNKNOWN	debug string with app count	99919
UNKNOWN	generate the mostused row	99920
UNKNOWN	get application icon and label	99921
UNKNOWN	debug string with app count	99922
UNKNOWN	create the intent for this app	99923
UNKNOWN	(non-javadoc) @see android.appwidget.appwidgetprovider#onupdate(android.content.context android.appwidget.appwidgetmanager int[]) onupdate ============================================================== context the context in which this receiver is running. appwidgetmanager a appwidgetmanager object you can call updateappwidget(componentname remoteviews) on. appwidgetids the appwidgetids for which an update is needed. note that this may be all of the appwidget instances for this provider or just a subset of them.	99924
UNKNOWN	called in response to the action_appwidget_update broadcast when this	99925
UNKNOWN	appwidget provider	99926
UNKNOWN	is being asked to provide remoteviews for a set of appwidgets.	99927
UNKNOWN	override this method to implement your own appwidget functionality.	99928
UNKNOWN	update the widget data	99929
UNKNOWN	called once the last instance of your widget is removed from the	99930
UNKNOWN	homescreen	99931
UNKNOWN	widget instance is removed from the homescreen	99932
UNKNOWN	obtain appropriate widget and update it.	99933
UNKNOWN	get the widgets	99934
UNKNOWN	(non-javadoc) @see android.appwidget.appwidgetprovider#onupdate(android.content.context android.appwidget.appwidgetmanager int[]) onupdate ============================================================== context the context in which this receiver is running. appwidgetmanager a appwidgetmanager object you can call updateappwidget(componentname remoteviews) on. appwidgetids the appwidgetids for which an update is needed. note that this may be all of the appwidget instances for this provider or just a subset of them.	99935
UNKNOWN	called in response to the action_appwidget_update broadcast when this	99936
UNKNOWN	appwidget provider	99937
UNKNOWN	is being asked to provide remoteviews for a set of appwidgets.	99938
UNKNOWN	override this method to implement your own appwidget functionality.	99939
UNKNOWN	update the widget data	99940
UNKNOWN	delete everything	99949
UNKNOWN	select query	99950
UNKNOWN	args to select query	99951
UNKNOWN	select query	99952
UNKNOWN	args to select query	99953
UNKNOWN	select query	99954
UNKNOWN	args to select query	99955
UNKNOWN	select query	99956
UNKNOWN	args to select query	99957
UNKNOWN	cols to return	99958
UNKNOWN	select query	99959
UNKNOWN	args to select query	99960
UNKNOWN	load the preview image if possible	99961
UNKNOWN	noinspection unusedassignment	99962
UNKNOWN	check if the package is valid	99941
UNKNOWN	check if it exists in our existing cache	99942
UNKNOWN	not in cache we need to load it from the db	99943
UNKNOWN	its not in the db we need to generate it	99944
UNKNOWN	write to db on a thread pool this can be done lazily and improves the performance	99945
UNKNOWN	of the first time widget previews are loaded	99946
UNKNOWN	delete all the records theyll be repopulated as this is a cache	99947
UNKNOWN	should cache the string builder	99948
UNKNOWN	generate a preview image if we couldnt load one	99963
UNKNOWN	this drawable is not directly drawn so theres no need to mutate it.	99964
UNKNOWN	draw the icon in the top left corner	99965
UNKNOWN	scale to fit width only - let the widget preview be clipped in the	99966
UNKNOWN	vertical dimension	99967
UNKNOWN	if a bitmap is passed in we use it otherwise we create a bitmap of the right size	99968
UNKNOWN	draw the scaled preview into the final bitmap	99969
UNKNOWN	render the icon	99970
UNKNOWN	draw a desaturated/scaled version of the icon in the background as a watermark	99971
UNKNOWN	restore the bounds	99972
UNKNOWN	dumps all files that are open in this process without allocating a file descriptor.	99973
UNKNOWN	this is a gigantic hack but unfortunately the only way to resolve an fd	99974
UNKNOWN	to a file name. note that we have to loop over all possible fds because	99975
UNKNOWN	reading the directory would require allocating a new fd. the kernel is	99976
UNKNOWN	currently implemented such that no fd is larger then the current rlimit	99977
UNKNOWN	which is why its safe to loop over them in such a way.	99978
UNKNOWN	getcanonicalpath() uses readlink behind the scene which doesnt require	99979
UNKNOWN	a file descriptor.	99980
UNKNOWN	those are the files that dont point anywhere on the file system.	99981
UNKNOWN	getcanonicalpath() wrongly interprets these as relative symlinks and	99982
UNKNOWN	resolves them within /proc/<pid>/fd/.	99983
UNKNOWN	ignoring exceptions for non-existing file descriptors.	99984
UNKNOWN	catch everything. this is called from an exception handler that we shouldnt upset.	99985
UNKNOWN	delete all the records theyll be repopulated as this is a cache	99986
UNKNOWN	returns true if {@param srcpackage} has the permission required to start the activity from {@param intent}. if {@param srcpackage} is null then the activity should not need any permissions	99987
UNKNOWN	not a valid target	99988
UNKNOWN	no permission is needed	99989
UNKNOWN	the activity requires some permission but there is no source.	99990
UNKNOWN	source does not have sufficient permissions.	99991
UNKNOWN	we have to fix that once we go to m	99992
UNKNOWN	if (!utilities.atleast_marshmallow) {	99993
UNKNOWN	these checks are sufficient for below m devices.	99994
UNKNOWN	return true	99995
UNKNOWN	}	99996
UNKNOWN		99997
UNKNOWN	on m and above also check appopsmanager for compatibility mode permissions.	99998
UNKNOWN	if (textutils.isempty(appopsmanager.permissiontoop(target.activityinfo.permission))) {	99999
UNKNOWN	there is no app-op for this permission which could have been disabled.	100000
UNKNOWN	return true	100001
UNKNOWN	}	100002
UNKNOWN		100003
UNKNOWN	there is no direct way to check if the app-op is allowed for a particular app. since	100004
UNKNOWN	app-op is only enabled for apps running in compatibility mode simply block such apps.	100005
UNKNOWN		100006
UNKNOWN	try {	100007
UNKNOWN	return pm.getapplicationinfo(srcpackage 0).targetsdkversion >= build.version_codes.m	100008
UNKNOWN	} catch (namenotfoundexception e) { }	100009
UNKNOWN		100010
UNKNOWN	return false	100011
UNKNOWN	serializes a component in order to be used has a map key @param componentname component to serialize @return the serialized component	100012
UNKNOWN	transforms a string into a componentname @param componentnamestring serialized component @return the componentname object	100013
UNKNOWN	get the current prefs and clear to update	100014
UNKNOWN	get the singleton instance of the fonts manager.	100015
UNKNOWN	setup the fonts used within the application.	100016
UNKNOWN	recursive search	100017
UNKNOWN	setupthevideo()	100018
UNKNOWN	setupdefinitionssteps()	100019
UNKNOWN	setupedgeglowtutorialsteps()	100020
UNKNOWN	button	100021
UNKNOWN	increment the step counter	100022
UNKNOWN	increment the step counter	100023
UNKNOWN	decrement the step counter	100024
UNKNOWN	increment the step counter	100025
UNKNOWN	decrement the step counter	100026
UNKNOWN	mmainbackground.setbackgroundresource(r.color.oobe_background)	100027
UNKNOWN	startanimation(new edgeglowtutorialanimationhelper())	100028
UNKNOWN	settextview(moobetextgroup10)	100029
UNKNOWN	mnextbutton.setvisibility(visibilitynext) mbackbutton.setvisibility(visibilityback) mstartbutton.setvisibility(visibilitystart) mskipbutton.setvisibility(visibilityskip)	100030
UNKNOWN	log.i( send change locale request)	100031
UNKNOWN	alphaanim.addkeyframe(0 1600 null)	100032
UNKNOWN	alphaanim.addkeyframe(0 2000 null)	100033
UNKNOWN	- dynamicgrid.pxfromdp(110 mdisplaymetrics)	100034
UNKNOWN	- dynamicgrid.pxfromdp(110 mdisplaymetrics)	100035
UNKNOWN	texteditanimationoff.setfillafter(true)	100036
UNKNOWN	titleview.animate().alpha(0f).setduration(1000).setlistener(null) titleview.animate().alpha(1f).setduration(1000).setlistener(null) textview.animate().alpha(1f).setstartdelay(10000).setduration(400000).setlistener(null)	100037
UNKNOWN	editview.startanimation(texteditanimation)	100038
UNKNOWN	spriteroot.addchild(spritehandshadow)	100039
UNKNOWN	spritemenu.addchild(spriteappiconselected)	100040
UNKNOWN	animation setup	100041
UNKNOWN	animation setup	100042
UNKNOWN	<p/> setupremovefavanimation() <p/>	100043
UNKNOWN	<p/> setupaddfavanimation() <p/>	100044
UNKNOWN	<p/> setupmovefavanimation() <p/>	100045
UNKNOWN	alphaanim.addkeyframe(1 4250 null)	100046
UNKNOWN	xanim.addkeyframe(((screen_width/2) + dynamicgrid.pxfromdp(50fmdisplaymetrics)) 1500 null)	100047
UNKNOWN	xanim.addkeyframe(((screen_width/2) + dynamicgrid.pxfromdp(50fmdisplaymetrics)) 1500 null)	100048
UNKNOWN	scaleanim.addkeyframe(1f 2600 null) scaleanim.addkeyframe(20.0f 4000 decelerateinterpolator)	100049
UNKNOWN	+ dynamicgrid.pxfromdp(77fmdisplaymetrics)	100050
UNKNOWN	+ dynamicgrid.pxfromdp(77fmdisplaymetrics)	100051
UNKNOWN	(non-javadoc) @see java.lang.object#hashcode()	100052
UNKNOWN	(non-javadoc) @see java.lang.object#equals(java.lang.object)	100053
UNKNOWN	load the favorites apps from the shared preferences and get the android application info from each so we can get the app name and icon.	100054
UNKNOWN	store the selected apps in the shared preferences as strings which is the package names of the apps. the package name of an app serves as the unique identifier of the app.	100055
UNKNOWN	convert string array into a single string where each element in the string array is separated by the delimiter string.	100056
UNKNOWN	convert a string into an array of strings using the delimiter as separator.	100057
UNKNOWN	defines a variable to store the action type for the incoming	100058
UNKNOWN	event	100059
UNKNOWN	handles each of the expected events	100060
UNKNOWN	moving an icon to an occupied position replaces the	100061
UNKNOWN	current one	100062
UNKNOWN	toggle the red glow when removing favorites	100063
UNKNOWN	get the item data	100064
UNKNOWN	0 is the origin	100065
UNKNOWN	1 is the index	100066
UNKNOWN	obtain the applicationinfo	100067
UNKNOWN	when not removing an icon swap is performed	100068
UNKNOWN	remove the favorite	100069
UNKNOWN	only setup the icon if a valid id is obtained	100070
UNKNOWN	hide zone remove zone	100071
UNKNOWN	are we dragging mostly to the right?	100072
UNKNOWN	subtract the number of columns in order to get the correct item	100073
UNKNOWN	due to the header	100074
UNKNOWN	set the listener	100086
UNKNOWN	setup the list with all the apps installed on the device.	100075
UNKNOWN	set the drag listener to enable favorite icon removal	100076
UNKNOWN	display a circle around the possible destinations	100077
UNKNOWN	set the item with the origin of the drag and the index of the dragged	100078
UNKNOWN	view	100079
UNKNOWN	setup the list with the selected app list which is the holder of the apps that has been selected to become the favorite apps.	100080
UNKNOWN	set the listeners	100081
UNKNOWN	the last argument is set to false since this hasnt the ability	100082
UNKNOWN	to remove icons it only switches them	100083
UNKNOWN	log.d(tag adding app +	100084
UNKNOWN	applicationinfo.getapplicationtitle())	100085
UNKNOWN	pass the main view and the instance setup the drag and visibility	100087
UNKNOWN	of some views	100088
UNKNOWN	update the icon and label of a favorite @param applicationinfo app information that contains the icon and label @param icon the icon to update	100089
UNKNOWN	performs the animation when replacing one favorite @param viewtofadein view that will appear. when null it means that we are swapping two favorites @param viewtofadeout view that will disappear. @param applicationinfo app info that is used to swap two favorites	100090
UNKNOWN	get the new icon	100091
UNKNOWN	get the new icon	100092
UNKNOWN	capture the back button press to make sure we save the selected apps before exiting.	100093
UNKNOWN	serializes the item id and origin that is being dragged. @param apporigin the origin can be select_apps_drag or all_apps_drag @param appindex the item index @return the serialized item info	100094
UNKNOWN	deserializes the item id and origin that is being dragged. @param todeserialize string to deserialize @return an array containing {apporign appindex}	100095
UNKNOWN	show the zone where favorites can be removed	100096
UNKNOWN	display a circle around the possible destinations	100097
UNKNOWN	set the drag info	100098
UNKNOWN	set the item with the origin of the drag and the index of the	100099
UNKNOWN	dragged view	100100
UNKNOWN	hide the circle around the possible destinations	100101
UNKNOWN	the red glow only makes sense when removing favorites	100102
UNKNOWN	displays a background on the favorite possible positions when configuring it @param selectedfavorite the favorite position where the background will not be shown. -1 means that all backgrounds will be shown. @param showbackground true displays the background false removes the background	100103
UNKNOWN	to avoid the addition of fairphone home launcher to	100104
UNKNOWN	appswitcher	100105
UNKNOWN	checks if the animation is starting from the left or right	100106
UNKNOWN	todo catch the onmeasure and setup the correct sizes after that	100107
UNKNOWN	for now just calculate the initial size	100108
UNKNOWN	if all apps icon	100109
UNKNOWN	set the right componentname in order to launch dialer	100110
UNKNOWN	or contacts correctly	100111
UNKNOWN	when the user sets the finger on an item	100112
UNKNOWN	if all apps icon	100113
UNKNOWN	checks if the animation is starting from the left or right	100114
UNKNOWN	if all apps icon	100115
UNKNOWN	set edit menu button timer	100116
UNKNOWN	set the x coords	100117
UNKNOWN	defines local variables	100118
UNKNOWN	calculate the canvas size	100119
UNKNOWN	the drag shadow is a colordrawable. this sets its dimensions to	100120
UNKNOWN	be the same as the	100121
UNKNOWN	canvas that the system will provide. as a result the drag shadow	100122
UNKNOWN	will fill the	100123
UNKNOWN	canvas.	100124
UNKNOWN	sets the size parameters width and height values. these get back	100125
UNKNOWN	to the system	100126
UNKNOWN	through the size parameter.	100127
UNKNOWN	sets the touch points position to be in the middle of the drag	100128
UNKNOWN	shadow	100129
UNKNOWN	defines a callback that draws the drag shadow in a canvas that the	100130
UNKNOWN	system constructs	100131
UNKNOWN	from the dimensions passed in onprovideshadowmetrics().	100132
UNKNOWN	draws the colordrawable in the canvas passed in from the system.	100133
UNKNOWN	shadow.draw(canvas)	100134
UNKNOWN	add a user badge in the bottom right of the image.	100135
UNKNOWN	return default icon below.	100136
UNKNOWN	guardo la referencia del scroll para poder usar ambos	100137
UNKNOWN	registramos un datasetobserver para que cuando se produzcan cambios en el adaptador original lo podamos reflejar	100138
UNKNOWN	en el fakeadapter	100139
UNKNOWN	adds the header view @param v la vista @param data extra data @param isselectable foo	100140
UNKNOWN	aã±ade la vista al layout @param v	100141
UNKNOWN	nos indica si la cabecera se pinta por delante o por detrã¡s del scroll de la lista @return boolean	100142
UNKNOWN	define si la cabecera se pinta por delante del scroll o si el scroll va por encima y la cabecera estã¡ fija @param boolean isinfront	100143
UNKNOWN	permite cambiar entre una cabecera fija o scrollable @param boolean fixed	100144
UNKNOWN	para evitar ciclos infinitos de ondraw / drawheaders porque si en ondraw le pongo el topmargin efectãºa	100145
UNKNOWN	repintado entonces llama a drawheaders y asã­.	100146
UNKNOWN	elimina la cabecera	100147
UNKNOWN	they sent us a bad intent	100148
UNKNOWN	else we are replacing the package so a package_added will be sent	100149
UNKNOWN	later we will update the package at this time	100150
UNKNOWN	extra_replacing is available kitkat onwards. for lower devices it is broadcasted	100151
UNKNOWN	when moving a package or mounting/un-mounting external storage. assume that	100152
UNKNOWN	it is a replacing operation.	100153
UNKNOWN	they sent us a bad intent	100154
UNKNOWN	else we are replacing the package so a package_added will be sent	100155
UNKNOWN	later we will update the package at this time	100156
UNKNOWN	extra_replacing is available kitkat onwards. for lower devices it is broadcasted	100157
UNKNOWN	when moving a package or mounting/un-mounting external storage. assume that	100158
UNKNOWN	it is a replacing operation.	100159
UNKNOWN	try again later	100163
UNKNOWN	try again later	100160
UNKNOWN	this should be called by the implementations to register a package update.	100161
UNKNOWN	no longer necessary to track this package	100162
UNKNOWN	adds {@link userhandle} to the intent in for l or above. pre-l the launcher doesnt support showing apps for multiple profiles so this is a no-op.	100164
UNKNOWN	no op	100165
UNKNOWN	called on mworker thread.	100166
UNKNOWN	not yet ready	100167
UNKNOWN	nothing to update	100168
UNKNOWN	try again later	100169
UNKNOWN	replay all updates with a one time update for this installed package. no	100170
UNKNOWN	need to store this record for future updates as the app list will get	100171
UNKNOWN	refreshed on resume.	100172
UNKNOWN	1 is top	100173
UNKNOWN	the great android hackatlon the love the magic.	100174
UNKNOWN	the two leftmost bits in the height measure spec have	100175
UNKNOWN	a special meaning hence we cant use them to describe height.	100176
UNKNOWN	any other height should be respected as is.	100177
UNKNOWN	setup the list with all the apps installed on the device. @param view	100178
UNKNOWN	fire the easter egg	100179
UNKNOWN	fire the easter egg	100180
UNKNOWN	redraw the drawer	100181
UNKNOWN	redraw the drawer	100182
UNKNOWN	clean up after dragging. @param target where the item was dragged to (can be null if the item was flung)	100183
UNKNOWN	exit spring loaded mode if we have not successfully dropped or	100184
UNKNOWN	have not handled the	100185
UNKNOWN	drop in workspace	100186
UNKNOWN	we delay entering spring-loaded mode slightly to make sure the ui	100187
UNKNOWN	thready is free of any work.	100188
UNKNOWN	we dont enter spring-loaded mode if the drag has been	100189
UNKNOWN	cancelled	100190
UNKNOWN	go into spring loaded mode (must happen before we	100191
UNKNOWN	startdrag())	100192
UNKNOWN	we dont enter spring-loaded mode if the drag has been	100193
UNKNOWN	cancelled	100194
UNKNOWN	go into spring loaded mode (must happen before we	100195
UNKNOWN	startdrag())	100196
UNKNOWN	mforcedrawallchildrennextframe = !toworkspace	100197
UNKNOWN	return early if this is not initiated from a touch	100198
UNKNOWN	if (!v.isintouchmode()) return false	100199
UNKNOWN	when we have exited all apps or are in transition disregard long	100200
UNKNOWN	clicks	100201
UNKNOWN	if (!mlauncher.isagingappdrawervisible() ||	100202
UNKNOWN	!mlauncher.isallappsvisible() ||	100203
UNKNOWN	mlauncher.getworkspace().isswitchingstate()) return false	100204
UNKNOWN	return if global dragging is not enabled	100205
UNKNOWN	if (!mlauncher.isdraggingenabled()) return false	100206
UNKNOWN	return early and wait for onflingtodeletecompleted if this was the	100207
UNKNOWN	result of a fling	100208
UNKNOWN	display an error message if the drag failed due to there not being	100209
UNKNOWN	enough space on the	100210
UNKNOWN	target layout we were dropping on.	100211
UNKNOWN	we just dismiss the drag when we fling so cleanup here	100212
UNKNOWN	otherwise it may crash	100213
UNKNOWN	open the searchview bar	100214
UNKNOWN	otherwise it may crash	100215
UNKNOWN	the final location.	100460
UNKNOWN	remove the affected components	100496
UNKNOWN	remove the current widget	100542
UNKNOWN	estimate the size of a widget with spans hspan vspan. return max_value for each	100216
UNKNOWN	dimension if unsuccessful	100217
UNKNOWN	use the first non-custom page to estimate the child position	100218
UNKNOWN	prevent any un/installshortcutreceivers from updating the db while we are dragging	100219
UNKNOWN	re-enable any un/installshortcutreceiver and now process any queued items	100220
UNKNOWN	initializes various states for this workspace.	100221
UNKNOWN	set the wallpaper dimensions when launcher starts up	100222
UNKNOWN	we want to show layout transitions when pages are deleted to close the gap.	100223
UNKNOWN	@return the open folder on the current screen or null if there is none	100224
UNKNOWN	disable all layout transitions before removing all pages to ensure that we dont get the	100225
UNKNOWN	transition animations competing with us changing the scroll when we add pages or the	100226
UNKNOWN	custom content screen	100227
UNKNOWN	since we increment the current page when we call addcustomcontentpage via bindscreens	100228
UNKNOWN	(and other places) we need to adjust the current page back when we clear the pages	100229
UNKNOWN	remove the pages and clear the screen models	100230
UNKNOWN	re-enable the layout transitions	100231
UNKNOWN	find the index to insert this view into. if the empty screen exists then	100232
UNKNOWN	insert it before that.	100233
UNKNOWN	log to disk	100234
UNKNOWN	we want no padding on the custom content	100235
UNKNOWN	ensure that the current page and default page are maintained.	100236
UNKNOWN	update the custom content hint	100237
UNKNOWN	ensure that the current page and default page are maintained.	100238
UNKNOWN	update the custom content hint	100239
UNKNOWN	add the custom content to the full screen custom page	100240
UNKNOWN	verify that the child is removed from any existing parent.	100241
UNKNOWN	log to disk	100242
UNKNOWN	cancel any pending removal of empty screen	100243
UNKNOWN	if this is the last item on the final screen	100244
UNKNOWN	log to disk	100245
UNKNOWN	log to disk	100246
UNKNOWN	invalid and dangerous operation if workspace is loading	100247
UNKNOWN	if the final screen is empty convert it to the extra empty screen	100248
UNKNOWN	if this is the last non-custom content screen convert it to the empty screen	100249
UNKNOWN	update the model if we have changed any screens	100250
UNKNOWN	log to disk	100251
UNKNOWN	dont strip empty screens if the workspace is still loading	100252
UNKNOWN	if were not going to strip the empty screens after removing	100253
UNKNOWN	the extra empty screen do it right away.	100254
UNKNOWN	log to disk	100255
UNKNOWN	xxx do we need to update lm workspace screens below?	100256
UNKNOWN	log to disk	100257
UNKNOWN	invalid and dangerous operation if workspace is loading	100258
UNKNOWN	update the page indicator marker	100259
UNKNOWN	update the model for the new screen	100260
UNKNOWN	log to disk	100261
UNKNOWN	dont strip empty screens if the workspace is still loading.	100262
UNKNOWN	this is dangerous and can result in data loss.	100263
UNKNOWN	we enforce at least one page to add new items to. in the case that we remove the last	100264
UNKNOWN	such screen we convert the last screen to the empty screen	100265
UNKNOWN	if this is the last non-custom content screen convert it to the empty screen	100266
UNKNOWN	update the model if we have changed any screens	100267
UNKNOWN	see implementation for parameter definition.	100268
UNKNOWN	at bind time we use the rank (screenid) to compute x and y for hotseat items.	100269
UNKNOWN	see implementation for parameter definition.	100270
UNKNOWN	see implementation for parameter definition.	100271
UNKNOWN	adds the specified child in the specified screen. the position and dimension of the child are defined by x y spanx and spany. @param child the child to add in one of the workspaces screens. @param screenid the screen in which to add the child. @param x the x position of the child in the screens grid. @param y the y position of the child in the screens grid. @param spanx the number of cells spanned horizontally by the child. @param spany the number of cells spanned vertically by the child. @param insert when true the child is inserted at the beginning of the children list. @param computexyfromrank when true we use the rank (stored in screenid) to compute the x and y position in which to place hotseat items. otherwise we use the x and y position to compute the rank.	100272
UNKNOWN	debugging - print out the stack trace to see where we are adding from	100273
UNKNOWN	this should never happen	100274
UNKNOWN	show folder title	100275
UNKNOWN	get the canonical child id to uniquely represent this view in this screen	100276
UNKNOWN	todo this branch occurs when the workspace is adding views	100277
UNKNOWN	outside of the defined grid	100278
UNKNOWN	maybe we should be deleting these items from the launchermodel?	100279
UNKNOWN	called directly from a celllayout (not by the framework) after weve been added as a listener via setonintercepttoucheventlistener(). this allows us to tell the celllayout that it should intercept touch events which is not something that is normally supported.	100280
UNKNOWN	this differs from isswitchingstate in that we take into account how far the transition has completed.	100281
UNKNOWN	ignore pointer scroll events if the custom content doesnt allow scrolling.	100282
UNKNOWN	remove the current widget which is inflated with the wrong orientation	100283
UNKNOWN	pass swipes to the right to the custom content page.	100284
UNKNOWN	dont allow workspace scrolling if the current custom content screen doesnt allow	100285
UNKNOWN	scrolling.	100286
UNKNOWN	above max_swipe_angle we dont want to ever start scrolling the workspace	100287
UNKNOWN	above start_damping_touch_slop_angle and below max_swipe_angle we want to	100288
UNKNOWN	increase the touch slop to make it harder to begin scrolling the workspace. this	100289
UNKNOWN	results in vertically scrolling widgets to more easily. the higher the angle the	100290
UNKNOWN	more we increase touch slop.	100291
UNKNOWN	below start_damping_touch_slop_angle we dont do anything special	100292
UNKNOWN	were snapping to a particular screen	100293
UNKNOWN	this is when user is actively dragging a particular screen they might	100294
UNKNOWN	swipe it either left or right (but we wont advance by more than one screen)	100295
UNKNOWN	if we are in springloaded mode then force an event to check if the current touch	100296
UNKNOWN	is under a new page (to scroll to)	100297
UNKNOWN	exclude the leftmost page	100298
UNKNOWN	exclude the last extra empty screen (if we have > min_parallax_page_span pages)	100299
UNKNOWN	todo do different behavior if its a live wallpaper?	100300
UNKNOWN	sometimes the left parameter of the pages is animated during a layout transition	100301
UNKNOWN	this parameter offsets it to keep the wallpaper from animating as well	100302
UNKNOWN	dont use up all the wallpaper parallax until you have at least	100303
UNKNOWN	min_parallax_page_span pages	100304
UNKNOWN	on rtl devices push the wallpaper offset to the right if we dont have enough	100305
UNKNOWN	pages (ie if numscrollingpages < min_parallax_page_span)	100306
UNKNOWN	set wallpaper offset steps (1 / (number of screens - 1))	100307
UNKNOWN	dont animate if were going from 0 screens	100308
UNKNOWN	dont announce if apps is on top of us.	100309
UNKNOWN	child.setbackgroundalphamultiplier(1 - alpha)	100310
UNKNOWN	in case accessibility state has changed we need to perform this on every	100311
UNKNOWN	attach to window	100312
UNKNOWN	update wallpaper dimensions if they were changed since last onresume	100313
UNKNOWN	(we also always set the wallpaper dimensions in the constructor)	100314
UNKNOWN	force the wallpaper offset steps to be set again because another app might have changed	100315
UNKNOWN	them	100316
UNKNOWN	call back to launchermodel to finish binding after the first draw	100317
UNKNOWN	in software mode we dont want the items to continue to be drawn into bitmaps	100318
UNKNOWN	make sure were caching at least two pages always	100319
UNKNOWN	enable layers between left and right screen inclusive except for the	100320
UNKNOWN	customscreen which may animate its content during transitions.	100321
UNKNOWN	force layers to be enabled just for the call to buildlayer	100322
UNKNOWN	we call these methods (ondragstartedwithitemspans/ondragstartedwithsize) whenever we start a drag in launcher regardless of whether the drag has ever entered the workspace these methods mark the appropriate pages as accepting drops (which alters their visual appearance).	100323
UNKNOWN	compose a drag bitmap with the view scaled to the icon size	100324
UNKNOWN	if this is a text view use its drawable instead	100325
UNKNOWN	compose the bitmap to create the icon from	100326
UNKNOWN	the outline is used to visualize where the item will land if dropped	100327
UNKNOWN	the outline is used to visualize where the item will land if dropped	100328
UNKNOWN	reordering handles its own animations disable the automatic ones.	100329
UNKNOWN	invalid and dangerous operation if workspace is loading	100330
UNKNOWN	re-enable auto layout transitions for page deletion.	100331
UNKNOWN	initialize animation arrays for the first time if necessary	100332
UNKNOWN	getresources().getinteger(r.integer.config_workspaceunshrinktime)	100333
UNKNOWN	if we are animating to/from the small state then hide the side pages and fade the	100334
UNKNOWN	current page in	100335
UNKNOWN	in low power mode the animation doesnt play so set the end value here	100336
UNKNOWN	in low power mode the animation doesnt play	100337
UNKNOWN	so set the end value here	100338
UNKNOWN	create a dummy animation so we dont need to do null checks later	100339
UNKNOWN	for animation optimations we may need to provide the launcher transition	100340
UNKNOWN	with a set of views on which to force build layers in certain scenarios.	100341
UNKNOWN	in low power mode the animation doesnt play so set the end value here	100342
UNKNOWN	in low power mode the animation doesnt play	100343
UNKNOWN	so set the end value here	100344
UNKNOWN	we want to avoid the extra layout pass by setting the views to gone unless	100345
UNKNOWN	accessibility is on in which case not setting them to gone causes a glitch.	100346
UNKNOWN	we want the views to be visible for animation so fade-in/out is visible	100347
UNKNOWN	invalidate here to ensure that the pages are rendered during the state change transition.	100348
UNKNOWN	draw the view v into the given canvas. @param v the view to draw @param destcanvas the canvas to draw on @param padding the horizontal and vertical padding to use when drawing	100349
UNKNOWN	for foldericons the text can bleed into the icon area and so we need to	100350
UNKNOWN	hide the text completely (which cant be achieved by clipping).	100351
UNKNOWN	restore text visibility of foldericon if necessary	100352
UNKNOWN	returns a new bitmap to show when the given view is being dragged around. responsibility for the bitmap is transferred to the caller. @param expectedpadding padding to add to the drag view. if a different padding was used its value will be changed	100353
UNKNOWN	returns a new bitmap to be used as the object outline e.g. to visualize the drop location. responsibility for the bitmap is transferred to the caller.	100354
UNKNOWN	returns a new bitmap to be used as the object outline e.g. to visualize the drop location. responsibility for the bitmap is transferred to the caller.	100355
UNKNOWN	center the image	100356
UNKNOWN	make sure the drag was started by a long press as opposed to a long click.	100357
UNKNOWN	the outline is used to visualize where the item will land if dropped	100358
UNKNOWN	the drag bitmap follows the touch point around on the screen	100359
UNKNOWN	note the drag region is used to calculate drag layer offsets but the	100360
UNKNOWN	dragvisualizeoffset in addition to the dragrect (the size) to position the outline.	100361
UNKNOWN	clear the pressed state if necessary	100362
UNKNOWN	notify launcher of drag start	100363
UNKNOWN	compose a new drag bitmap that is of the icon size	100364
UNKNOWN	find the childs location on the screen	100365
UNKNOWN	note the drag region is used to calculate drag layer offsets but the	100366
UNKNOWN	dragvisualizeoffset in addition to the dragrect (the size) to position the outline.	100367
UNKNOWN	start the drag	100368
UNKNOWN	recycle temporary bitmaps	100369
UNKNOWN	{@inheritdoc}	100370
UNKNOWN	if its an external drop (e.g. from all apps) check if it should be accepted	100371
UNKNOWN	dont accept the drop if were not over a screen at time of drop	100372
UNKNOWN	we want the point to be mapped to the dragtarget.	100373
UNKNOWN	dont accept the drop if theres no room for the item	100374
UNKNOWN	if the drag started here we need to remove it from the workspace	100375
UNKNOWN	if the dragview is null we cant animate	100376
UNKNOWN	if the drag started here we need to remove it from the workspace	100377
UNKNOWN	we want the point to be mapped to the dragtarget.	100378
UNKNOWN	move internally	100379
UNKNOWN	first we find the cell nearest to point at which the item is	100380
UNKNOWN	dropped without any consideration to whether there is an item there.	100381
UNKNOWN	if the item being dropped is a shortcut and the nearest drop	100382
UNKNOWN	cell also contains a shortcut then create a folder with the two shortcuts.	100383
UNKNOWN	aside from the special case where were dropping a shortcut onto a shortcut	100384
UNKNOWN	we need to find the nearest cell location that is vacant	100385
UNKNOWN	if the widget resizes on drop	100386
UNKNOWN	reparent the view	100387
UNKNOWN	update the items position after drop	100388
UNKNOWN	we post this call so that the widget has a chance to be placed	100389
UNKNOWN	in its final location	100390
UNKNOWN	if we cant find a drop location we return the item to its original position	100391
UNKNOWN	prepare it to be animated into its new position	100392
UNKNOWN	this must be called after the view has been re-parented	100393
UNKNOWN	return a rect that has the cellwidth/cellheight (left top) and widthgap/heightgap (right bottom)	100394
UNKNOWN	here we store the final page that will be dropped to if the workspace in fact	100395
UNKNOWN	receives the drop	100396
UNKNOWN	if the user drops while the page is scrolling we should use that page as the	100397
UNKNOWN	destination instead of the page that is being hovered over.	100398
UNKNOWN	reset the scroll area and previous drag target	100399
UNKNOWN	we dont want to cancel the re-order alarm every time the target cell changes	100400
UNKNOWN	as this feels to slow / unresponsive.	100401
UNKNOWN	any pending reorders are canceled	100402
UNKNOWN	convert the 2d coordinate xy from the parent views coordinate space to this celllayouts coordinate space. the argument xy is modified with the return result. if cachedinversematrix is not null this method will just use that matrix instead of computing it itself we use this to avoid redundant matrix inversions in findmatchingpagefordragover	100403
UNKNOWN	convert the 2d coordinate xy from this celllayouts coordinate space to the parent views coordinate space. the argument xy is modified with the return result.	100404
UNKNOWN	this method returns the celllayout that is currently being dragged to. in order to drag to a celllayout either the touch point must be directly over the celllayout or as a second strategy we see if the dragview is overlapping any celllayout and choose the closest one return null if no celllayout is currently being dragged over	100405
UNKNOWN	we loop through all the screens (ie celllayouts) and see which ones overlap	100406
UNKNOWN	with the item being dragged and then choose the one thats closest to the touch point	100407
UNKNOWN	the custom content screen is not a valid drag over option	100408
UNKNOWN	transform the touch coordinates to the celllayouts local coordinates	100409
UNKNOWN	if the touch point is within the bounds of the cell layout we can return immediately	100410
UNKNOWN	get the center of the cell layout in screen coordinates	100411
UNKNOWN	calculate the distance between the center of the celllayout	100412
UNKNOWN	and the touch point	100413
UNKNOWN	this is used to compute the visual center of the dragview. this point is then	100414
UNKNOWN	used to visualize drop locations and determine where to drop an item. the idea is that	100415
UNKNOWN	the visual center represents the users interpretation of where the item is and hence	100416
UNKNOWN	is the appropriate point to use when determining drop location.	100417
UNKNOWN	first off the drag view has been shifted in a way that is not represented in the	100418
UNKNOWN	x and y values or the x/yoffsets. here we account for that shift.	100419
UNKNOWN	these represent the visual top and left of drag view if a dragrect was provided.	100420
UNKNOWN	if a dragrect was not provided then they correspond to the actual view left and	100421
UNKNOWN	top as the dragrect is in that case taken to be the entire dragview.	100422
UNKNOWN	r.dimen.dragviewoffsety.	100423
UNKNOWN	in order to find the visual center we shift by half the dragrect	100424
UNKNOWN	skip drag over events while we are dragging over side pages	100425
UNKNOWN	ensure that we have proper spans for the item that we are dropping	100426
UNKNOWN	identify whether we have dragged over a side page	100427
UNKNOWN	handle the drag over	100428
UNKNOWN	we want the point to be mapped to the dragtarget.	100429
UNKNOWN	otherwise if we arent adding to or creating a folder and theres no pending	100430
UNKNOWN	reorder then we schedule a reorder	100431
UNKNOWN	this shouldnt happen ever but just in case make sure we clean up the mess.	100432
UNKNOWN	we want the workspace to have the whole area of the display (it will find the correct	100433
UNKNOWN	cell layout to drop to in the existing drag/drop logic.	100434
UNKNOWN	add the item specified by draginfo to the given layout. @return true if successful	100435
UNKNOWN	drop an item that didnt originate on one of the workspace screens. it may have come from launcher (e.g. from all apps or customize) or it may have come from another app altogether. note this can also be called when we are outside of a drag event when we want to add an item to one of the workspace screens.	100436
UNKNOWN	normally removeextraemptyscreen is called in workspace#ondragend but when	100437
UNKNOWN	adding an item that may not be dropped right away (due to a config activity)	100438
UNKNOWN	we defer the removal until the activity returns.	100439
UNKNOWN	when dragging and dropping from customization tray we deal with creating	100440
UNKNOWN	widgets/shortcuts/folders in a slightly different way	100441
UNKNOWN	this is for other drag/drop cases like dragging from all apps	100442
UNKNOWN	came from all apps -- make a copy	100443
UNKNOWN	first we find the cell nearest to point at which the item is	100444
UNKNOWN	dropped without any consideration to whether there is an item there.	100445
UNKNOWN	when dragging and dropping just find the closest free spot	100446
UNKNOWN	add the item to db before adding to screen ensures that the container and other	100447
UNKNOWN	values of the info is properly updated.	100448
UNKNOWN	we wrap the animation call in the temporary set and reset of the current	100449
UNKNOWN	celllayout to its final transform -- this means we animate the drag view to	100450
UNKNOWN	the correct final location.	100451
UNKNOWN	normally removeextraemptyscreen is called in workspace#ondragend but when	100452
UNKNOWN	adding an item that may not be dropped right away (due to a config activity)	100453
UNKNOWN	we defer the removal until the activity returns.	100454
UNKNOWN	when dragging and dropping from customization tray we deal with creating	100455
UNKNOWN	widgets/shortcuts/folders in a slightly different way	100456
UNKNOWN	now we animate the dragview (ie. the widget or shortcut preview) into its final	100457
UNKNOWN	location and size on the home screen.	100458
UNKNOWN	the animation will scale the dragview about its center so we need to center about	100459
UNKNOWN	in the case where weve prebound the widget we remove it from the draglayer	100461
UNKNOWN	return the current {@link celllayout} correctly picking the destination screen while a scroll is in progress.	100462
UNKNOWN	return the current cellinfo describing our current drag this method exists so that launcher can sync this object with the correct info when the activity is created/ destroyed	100463
UNKNOWN	calculate the nearest cell where the given object would be dropped. pixelx and pixely should be in the coordinate system of layout	100464
UNKNOWN	hardware layers on children are enabled on startup but should be disabled until	100465
UNKNOWN	needed	100466
UNKNOWN	called at the end of a drag which originated on the workspace.	100467
UNKNOWN	/ maybe move this into a smaller part	100468
UNKNOWN	null check required as the allapps button doesnt have an item info	100469
UNKNOWN	null check required as the allapps button doesnt have an item info	100470
UNKNOWN	if datauri is not null / empty or if this component isnt one that would	100471
UNKNOWN	have previously showed up in the allapps list then this is a widget-type	100472
UNKNOWN	shortcut so ignore it.	100473
UNKNOWN	if datauri is not null / empty or if this component isnt one that would	100474
UNKNOWN	have previously showed up in the allapps list then this is a widget-type	100475
UNKNOWN	shortcut so ignore it.	100476
UNKNOWN	null check required as the allapps button doesnt have an item info	100477
UNKNOWN	do nothing	100478
UNKNOWN	do nothing	100479
UNKNOWN	we dont dispatch restoreinstancestate to our children using this code path.	100480
UNKNOWN	some pages will be restored immediately as their items are bound immediately and	100481
UNKNOWN	others we will need to wait until after their items are bound.	100482
UNKNOWN	we always want to exit the current layout to ensure parity of enter / exit	100483
UNKNOWN	ensure that we are not dragging over to the custom content screen	100484
UNKNOWN	workspace is responsible for drawing the edge glow on adjacent pages	100485
UNKNOWN	so we need to redraw the workspace when this may have changed.	100486
UNKNOWN	returns a specific celllayout	100487
UNKNOWN	returns a list of all the celllayouts in the workspace.	100488
UNKNOWN	we should only use this to search for specific children. do not use this method to modify shortcutsandwidgetscontainer directly. includes shortcutandwidgetcontainers from the hotseat and workspace pages	100489
UNKNOWN	not done process all the shortcuts	100490
UNKNOWN	not done process all the shortcuts	100491
UNKNOWN	removes all items that match a given package name this is usually called when a package	100492
UNKNOWN	has been removed and we want to remove all components (widgets shortcuts apps) that	100493
UNKNOWN	belong to that package.	100494
UNKNOWN	filter out all the iteminfos that this is going to affect	100495
UNKNOWN	removes items that match the application info specified when applications are removed	100497
UNKNOWN	as a part of an update this is called to ensure that other widgets and application	100498
UNKNOWN	shortcuts are not removed.	100499
UNKNOWN	just create a hash table of all the specific components that this will affect	100500
UNKNOWN	remove all the things	100501
UNKNOWN	remove all the apps from their folders	100502
UNKNOWN	remove all the other children	100503
UNKNOWN	note we can not remove the view directly from celllayoutchildren as this	100504
UNKNOWN	does not re-mark the spaces as unoccupied.	100505
UNKNOWN	strip all the empty screens	100506
UNKNOWN	map the operator over the shortcuts and widgets return the first-non-null value. @param recurse true iterate over folder children. false op get the folders themselves. @param op the operator to map over the shortcuts	100507
UNKNOWN	map over all the shortcuts on the workspace	100508
UNKNOWN	map over all the children in the folder	100509
UNKNOWN	break the appinfo list per user	100510
UNKNOWN	create a map of the apps to test against	100511
UNKNOWN	auto install icon	100512
UNKNOWN	try to find the best match activity.	100513
UNKNOWN	could not find a default activity. remove this item.	100514
UNKNOWN	process next shortcut.	100515
UNKNOWN	restore the shortcut.	100516
UNKNOWN	process all the shortcuts	100517
UNKNOWN	auto install icon	100518
UNKNOWN	try to find the best match activity.	100519
UNKNOWN	could not find a default activity. remove this item.	100520
UNKNOWN	process next shortcut.	100521
UNKNOWN	restore the shortcut.	100522
UNKNOWN	process all the shortcuts	100523
UNKNOWN	for auto install apps update the icon as well as label.	100524
UNKNOWN	only update the icon for restored apps.	100525
UNKNOWN	process all the shortcuts	100526
UNKNOWN	for auto install apps update the icon as well as label.	100527
UNKNOWN	only update the icon for restored apps.	100528
UNKNOWN	process all the shortcuts	100529
UNKNOWN	mark this info as broken.	100530
UNKNOWN	process all the shortcuts	100531
UNKNOWN	note that package states are sent only for myuser	100532
UNKNOWN	mark this info as broken.	100533
UNKNOWN	process all the shortcuts	100534
UNKNOWN	iterate non recursively as widgets cant be inside a folder.	100535
UNKNOWN	remove the provider not ready flag	100536
UNKNOWN	process all the widget	100537
UNKNOWN	re-inflate the widgets which have changed status	100538
UNKNOWN	widgetrefresh will automatically run when the packages are updated.	100539
UNKNOWN	remove the provider not ready flag	100540
UNKNOWN	process all the widget	100541
UNKNOWN	exclude the leftmost page	100543
UNKNOWN	exclude the last extra empty screen (if we have > min_parallax_page_span pages)	100544
UNKNOWN	todo do different behavior if its a live wallpaper?	100545
UNKNOWN	sometimes the left parameter of the pages is animated during a layout transition	100546
UNKNOWN	this parameter offsets it to keep the wallpaper from animating as well	100547
UNKNOWN	dont use up all the wallpaper parallax until you have at least	100548
UNKNOWN	min_parallax_page_span pages	100549
UNKNOWN	on rtl devices push the wallpaper offset to the right if we dont have enough	100550
UNKNOWN	pages (ie if numscrollingpages < min_parallax_page_span)	100551
UNKNOWN	set wallpaper offset steps (1 / (number of screens - 1))	100552
UNKNOWN	dont animate if were going from 0 screens	100553
UNKNOWN	we want to avoid the extra layout pass by setting the views to gone unless	100554
UNKNOWN	accessibility is on in which case not setting them to gone causes a glitch.	100555
UNKNOWN	we want the views to be visible for animation so fade-in/out is visible	100556
UNKNOWN	this shouldnt happen ever but just in case make sure we clean up the mess.	100557
UNKNOWN	remove the current widget	100558
